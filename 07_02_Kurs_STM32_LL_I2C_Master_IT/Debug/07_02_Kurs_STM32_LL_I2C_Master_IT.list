
07_02_Kurs_STM32_LL_I2C_Master_IT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000ed4  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000f90  08000f90  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000f90  08000f90  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08000f90  08000f90  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000f90  08000f90  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000f90  08000f90  00010f90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000f94  08000f94  00010f94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08000f98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000040  20000010  08000fa8  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000050  08000fa8  00020050  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000025b1  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000097b  00000000  00000000  000225e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000360  00000000  00000000  00022f68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000002f8  00000000  00000000  000232c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000197e  00000000  00000000  000235c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002f49  00000000  00000000  00024f3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005bfc6  00000000  00000000  00027e87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00083e4d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000ae8  00000000  00000000  00083ea0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000010 	.word	0x20000010
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08000f78 	.word	0x08000f78

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000014 	.word	0x20000014
 8000100:	08000f78 	.word	0x08000f78

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
 8000222:	6078      	str	r0, [r7, #4]
 8000224:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8000226:	6839      	ldr	r1, [r7, #0]
 8000228:	6878      	ldr	r0, [r7, #4]
 800022a:	f7ff ff6b 	bl	8000104 <__udivsi3>
 800022e:	0003      	movs	r3, r0
 8000230:	001a      	movs	r2, r3
 8000232:	4b06      	ldr	r3, [pc, #24]	; (800024c <LL_InitTick+0x30>)
 8000234:	3a01      	subs	r2, #1
 8000236:	605a      	str	r2, [r3, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8000238:	4b04      	ldr	r3, [pc, #16]	; (800024c <LL_InitTick+0x30>)
 800023a:	2200      	movs	r2, #0
 800023c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800023e:	4b03      	ldr	r3, [pc, #12]	; (800024c <LL_InitTick+0x30>)
 8000240:	2205      	movs	r2, #5
 8000242:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8000244:	46c0      	nop			; (mov r8, r8)
 8000246:	46bd      	mov	sp, r7
 8000248:	b002      	add	sp, #8
 800024a:	bd80      	pop	{r7, pc}
 800024c:	e000e010 	.word	0xe000e010

08000250 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b082      	sub	sp, #8
 8000254:	af00      	add	r7, sp, #0
 8000256:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8000258:	23fa      	movs	r3, #250	; 0xfa
 800025a:	009a      	lsls	r2, r3, #2
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	0011      	movs	r1, r2
 8000260:	0018      	movs	r0, r3
 8000262:	f7ff ffdb 	bl	800021c <LL_InitTick>
}
 8000266:	46c0      	nop			; (mov r8, r8)
 8000268:	46bd      	mov	sp, r7
 800026a:	b002      	add	sp, #8
 800026c:	bd80      	pop	{r7, pc}
	...

08000270 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8000278:	4b03      	ldr	r3, [pc, #12]	; (8000288 <LL_SetSystemCoreClock+0x18>)
 800027a:	687a      	ldr	r2, [r7, #4]
 800027c:	601a      	str	r2, [r3, #0]
}
 800027e:	46c0      	nop			; (mov r8, r8)
 8000280:	46bd      	mov	sp, r7
 8000282:	b002      	add	sp, #8
 8000284:	bd80      	pop	{r7, pc}
 8000286:	46c0      	nop			; (mov r8, r8)
 8000288:	2000000c 	.word	0x2000000c

0800028c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	b082      	sub	sp, #8
 8000290:	af00      	add	r7, sp, #0
 8000292:	0002      	movs	r2, r0
 8000294:	1dfb      	adds	r3, r7, #7
 8000296:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000298:	1dfb      	adds	r3, r7, #7
 800029a:	781b      	ldrb	r3, [r3, #0]
 800029c:	2b7f      	cmp	r3, #127	; 0x7f
 800029e:	d809      	bhi.n	80002b4 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002a0:	1dfb      	adds	r3, r7, #7
 80002a2:	781b      	ldrb	r3, [r3, #0]
 80002a4:	001a      	movs	r2, r3
 80002a6:	231f      	movs	r3, #31
 80002a8:	401a      	ands	r2, r3
 80002aa:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__NVIC_EnableIRQ+0x30>)
 80002ac:	2101      	movs	r1, #1
 80002ae:	4091      	lsls	r1, r2
 80002b0:	000a      	movs	r2, r1
 80002b2:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80002b4:	46c0      	nop			; (mov r8, r8)
 80002b6:	46bd      	mov	sp, r7
 80002b8:	b002      	add	sp, #8
 80002ba:	bd80      	pop	{r7, pc}
 80002bc:	e000e100 	.word	0xe000e100

080002c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002c0:	b590      	push	{r4, r7, lr}
 80002c2:	b083      	sub	sp, #12
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	0002      	movs	r2, r0
 80002c8:	6039      	str	r1, [r7, #0]
 80002ca:	1dfb      	adds	r3, r7, #7
 80002cc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80002ce:	1dfb      	adds	r3, r7, #7
 80002d0:	781b      	ldrb	r3, [r3, #0]
 80002d2:	2b7f      	cmp	r3, #127	; 0x7f
 80002d4:	d828      	bhi.n	8000328 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002d6:	4a2f      	ldr	r2, [pc, #188]	; (8000394 <__NVIC_SetPriority+0xd4>)
 80002d8:	1dfb      	adds	r3, r7, #7
 80002da:	781b      	ldrb	r3, [r3, #0]
 80002dc:	b25b      	sxtb	r3, r3
 80002de:	089b      	lsrs	r3, r3, #2
 80002e0:	33c0      	adds	r3, #192	; 0xc0
 80002e2:	009b      	lsls	r3, r3, #2
 80002e4:	589b      	ldr	r3, [r3, r2]
 80002e6:	1dfa      	adds	r2, r7, #7
 80002e8:	7812      	ldrb	r2, [r2, #0]
 80002ea:	0011      	movs	r1, r2
 80002ec:	2203      	movs	r2, #3
 80002ee:	400a      	ands	r2, r1
 80002f0:	00d2      	lsls	r2, r2, #3
 80002f2:	21ff      	movs	r1, #255	; 0xff
 80002f4:	4091      	lsls	r1, r2
 80002f6:	000a      	movs	r2, r1
 80002f8:	43d2      	mvns	r2, r2
 80002fa:	401a      	ands	r2, r3
 80002fc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002fe:	683b      	ldr	r3, [r7, #0]
 8000300:	019b      	lsls	r3, r3, #6
 8000302:	22ff      	movs	r2, #255	; 0xff
 8000304:	401a      	ands	r2, r3
 8000306:	1dfb      	adds	r3, r7, #7
 8000308:	781b      	ldrb	r3, [r3, #0]
 800030a:	0018      	movs	r0, r3
 800030c:	2303      	movs	r3, #3
 800030e:	4003      	ands	r3, r0
 8000310:	00db      	lsls	r3, r3, #3
 8000312:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000314:	481f      	ldr	r0, [pc, #124]	; (8000394 <__NVIC_SetPriority+0xd4>)
 8000316:	1dfb      	adds	r3, r7, #7
 8000318:	781b      	ldrb	r3, [r3, #0]
 800031a:	b25b      	sxtb	r3, r3
 800031c:	089b      	lsrs	r3, r3, #2
 800031e:	430a      	orrs	r2, r1
 8000320:	33c0      	adds	r3, #192	; 0xc0
 8000322:	009b      	lsls	r3, r3, #2
 8000324:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000326:	e031      	b.n	800038c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000328:	4a1b      	ldr	r2, [pc, #108]	; (8000398 <__NVIC_SetPriority+0xd8>)
 800032a:	1dfb      	adds	r3, r7, #7
 800032c:	781b      	ldrb	r3, [r3, #0]
 800032e:	0019      	movs	r1, r3
 8000330:	230f      	movs	r3, #15
 8000332:	400b      	ands	r3, r1
 8000334:	3b08      	subs	r3, #8
 8000336:	089b      	lsrs	r3, r3, #2
 8000338:	3306      	adds	r3, #6
 800033a:	009b      	lsls	r3, r3, #2
 800033c:	18d3      	adds	r3, r2, r3
 800033e:	3304      	adds	r3, #4
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	1dfa      	adds	r2, r7, #7
 8000344:	7812      	ldrb	r2, [r2, #0]
 8000346:	0011      	movs	r1, r2
 8000348:	2203      	movs	r2, #3
 800034a:	400a      	ands	r2, r1
 800034c:	00d2      	lsls	r2, r2, #3
 800034e:	21ff      	movs	r1, #255	; 0xff
 8000350:	4091      	lsls	r1, r2
 8000352:	000a      	movs	r2, r1
 8000354:	43d2      	mvns	r2, r2
 8000356:	401a      	ands	r2, r3
 8000358:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800035a:	683b      	ldr	r3, [r7, #0]
 800035c:	019b      	lsls	r3, r3, #6
 800035e:	22ff      	movs	r2, #255	; 0xff
 8000360:	401a      	ands	r2, r3
 8000362:	1dfb      	adds	r3, r7, #7
 8000364:	781b      	ldrb	r3, [r3, #0]
 8000366:	0018      	movs	r0, r3
 8000368:	2303      	movs	r3, #3
 800036a:	4003      	ands	r3, r0
 800036c:	00db      	lsls	r3, r3, #3
 800036e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000370:	4809      	ldr	r0, [pc, #36]	; (8000398 <__NVIC_SetPriority+0xd8>)
 8000372:	1dfb      	adds	r3, r7, #7
 8000374:	781b      	ldrb	r3, [r3, #0]
 8000376:	001c      	movs	r4, r3
 8000378:	230f      	movs	r3, #15
 800037a:	4023      	ands	r3, r4
 800037c:	3b08      	subs	r3, #8
 800037e:	089b      	lsrs	r3, r3, #2
 8000380:	430a      	orrs	r2, r1
 8000382:	3306      	adds	r3, #6
 8000384:	009b      	lsls	r3, r3, #2
 8000386:	18c3      	adds	r3, r0, r3
 8000388:	3304      	adds	r3, #4
 800038a:	601a      	str	r2, [r3, #0]
}
 800038c:	46c0      	nop			; (mov r8, r8)
 800038e:	46bd      	mov	sp, r7
 8000390:	b003      	add	sp, #12
 8000392:	bd90      	pop	{r4, r7, pc}
 8000394:	e000e100 	.word	0xe000e100
 8000398:	e000ed00 	.word	0xe000ed00

0800039c <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1  (1)
  * @note Peripheral marked with (1) are not available all devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b084      	sub	sp, #16
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APBENR1, Periphs);
 80003a4:	4b07      	ldr	r3, [pc, #28]	; (80003c4 <LL_APB1_GRP1_EnableClock+0x28>)
 80003a6:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80003a8:	4b06      	ldr	r3, [pc, #24]	; (80003c4 <LL_APB1_GRP1_EnableClock+0x28>)
 80003aa:	687a      	ldr	r2, [r7, #4]
 80003ac:	430a      	orrs	r2, r1
 80003ae:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 80003b0:	4b04      	ldr	r3, [pc, #16]	; (80003c4 <LL_APB1_GRP1_EnableClock+0x28>)
 80003b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80003b4:	687a      	ldr	r2, [r7, #4]
 80003b6:	4013      	ands	r3, r2
 80003b8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80003ba:	68fb      	ldr	r3, [r7, #12]
}
 80003bc:	46c0      	nop			; (mov r8, r8)
 80003be:	46bd      	mov	sp, r7
 80003c0:	b004      	add	sp, #16
 80003c2:	bd80      	pop	{r7, pc}
 80003c4:	40021000 	.word	0x40021000

080003c8 <LL_IOP_GRP1_EnableClock>:
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOE
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOF
  * @retval None
  */
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b084      	sub	sp, #16
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 80003d0:	4b07      	ldr	r3, [pc, #28]	; (80003f0 <LL_IOP_GRP1_EnableClock+0x28>)
 80003d2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80003d4:	4b06      	ldr	r3, [pc, #24]	; (80003f0 <LL_IOP_GRP1_EnableClock+0x28>)
 80003d6:	687a      	ldr	r2, [r7, #4]
 80003d8:	430a      	orrs	r2, r1
 80003da:	635a      	str	r2, [r3, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 80003dc:	4b04      	ldr	r3, [pc, #16]	; (80003f0 <LL_IOP_GRP1_EnableClock+0x28>)
 80003de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80003e0:	687a      	ldr	r2, [r7, #4]
 80003e2:	4013      	ands	r3, r2
 80003e4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80003e6:	68fb      	ldr	r3, [r7, #12]
}
 80003e8:	46c0      	nop			; (mov r8, r8)
 80003ea:	46bd      	mov	sp, r7
 80003ec:	b004      	add	sp, #16
 80003ee:	bd80      	pop	{r7, pc}
 80003f0:	40021000 	.word	0x40021000

080003f4 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b084      	sub	sp, #16
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	60f8      	str	r0, [r7, #12]
 80003fc:	60b9      	str	r1, [r7, #8]
 80003fe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8000400:	68fb      	ldr	r3, [r7, #12]
 8000402:	6819      	ldr	r1, [r3, #0]
 8000404:	68bb      	ldr	r3, [r7, #8]
 8000406:	435b      	muls	r3, r3
 8000408:	001a      	movs	r2, r3
 800040a:	0013      	movs	r3, r2
 800040c:	005b      	lsls	r3, r3, #1
 800040e:	189b      	adds	r3, r3, r2
 8000410:	43db      	mvns	r3, r3
 8000412:	400b      	ands	r3, r1
 8000414:	001a      	movs	r2, r3
 8000416:	68bb      	ldr	r3, [r7, #8]
 8000418:	435b      	muls	r3, r3
 800041a:	6879      	ldr	r1, [r7, #4]
 800041c:	434b      	muls	r3, r1
 800041e:	431a      	orrs	r2, r3
 8000420:	68fb      	ldr	r3, [r7, #12]
 8000422:	601a      	str	r2, [r3, #0]
}
 8000424:	46c0      	nop			; (mov r8, r8)
 8000426:	46bd      	mov	sp, r7
 8000428:	b004      	add	sp, #16
 800042a:	bd80      	pop	{r7, pc}

0800042c <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b084      	sub	sp, #16
 8000430:	af00      	add	r7, sp, #0
 8000432:	60f8      	str	r0, [r7, #12]
 8000434:	60b9      	str	r1, [r7, #8]
 8000436:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8000438:	68fb      	ldr	r3, [r7, #12]
 800043a:	685b      	ldr	r3, [r3, #4]
 800043c:	68ba      	ldr	r2, [r7, #8]
 800043e:	43d2      	mvns	r2, r2
 8000440:	401a      	ands	r2, r3
 8000442:	68bb      	ldr	r3, [r7, #8]
 8000444:	6879      	ldr	r1, [r7, #4]
 8000446:	434b      	muls	r3, r1
 8000448:	431a      	orrs	r2, r3
 800044a:	68fb      	ldr	r3, [r7, #12]
 800044c:	605a      	str	r2, [r3, #4]
}
 800044e:	46c0      	nop			; (mov r8, r8)
 8000450:	46bd      	mov	sp, r7
 8000452:	b004      	add	sp, #16
 8000454:	bd80      	pop	{r7, pc}

08000456 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8000456:	b580      	push	{r7, lr}
 8000458:	b084      	sub	sp, #16
 800045a:	af00      	add	r7, sp, #0
 800045c:	60f8      	str	r0, [r7, #12]
 800045e:	60b9      	str	r1, [r7, #8]
 8000460:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8000462:	68fb      	ldr	r3, [r7, #12]
 8000464:	6899      	ldr	r1, [r3, #8]
 8000466:	68bb      	ldr	r3, [r7, #8]
 8000468:	435b      	muls	r3, r3
 800046a:	001a      	movs	r2, r3
 800046c:	0013      	movs	r3, r2
 800046e:	005b      	lsls	r3, r3, #1
 8000470:	189b      	adds	r3, r3, r2
 8000472:	43db      	mvns	r3, r3
 8000474:	400b      	ands	r3, r1
 8000476:	001a      	movs	r2, r3
 8000478:	68bb      	ldr	r3, [r7, #8]
 800047a:	435b      	muls	r3, r3
 800047c:	6879      	ldr	r1, [r7, #4]
 800047e:	434b      	muls	r3, r1
 8000480:	431a      	orrs	r2, r3
 8000482:	68fb      	ldr	r3, [r7, #12]
 8000484:	609a      	str	r2, [r3, #8]
}
 8000486:	46c0      	nop			; (mov r8, r8)
 8000488:	46bd      	mov	sp, r7
 800048a:	b004      	add	sp, #16
 800048c:	bd80      	pop	{r7, pc}

0800048e <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800048e:	b580      	push	{r7, lr}
 8000490:	b084      	sub	sp, #16
 8000492:	af00      	add	r7, sp, #0
 8000494:	60f8      	str	r0, [r7, #12]
 8000496:	60b9      	str	r1, [r7, #8]
 8000498:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 800049a:	68fb      	ldr	r3, [r7, #12]
 800049c:	68d9      	ldr	r1, [r3, #12]
 800049e:	68bb      	ldr	r3, [r7, #8]
 80004a0:	435b      	muls	r3, r3
 80004a2:	001a      	movs	r2, r3
 80004a4:	0013      	movs	r3, r2
 80004a6:	005b      	lsls	r3, r3, #1
 80004a8:	189b      	adds	r3, r3, r2
 80004aa:	43db      	mvns	r3, r3
 80004ac:	400b      	ands	r3, r1
 80004ae:	001a      	movs	r2, r3
 80004b0:	68bb      	ldr	r3, [r7, #8]
 80004b2:	435b      	muls	r3, r3
 80004b4:	6879      	ldr	r1, [r7, #4]
 80004b6:	434b      	muls	r3, r1
 80004b8:	431a      	orrs	r2, r3
 80004ba:	68fb      	ldr	r3, [r7, #12]
 80004bc:	60da      	str	r2, [r3, #12]
}
 80004be:	46c0      	nop			; (mov r8, r8)
 80004c0:	46bd      	mov	sp, r7
 80004c2:	b004      	add	sp, #16
 80004c4:	bd80      	pop	{r7, pc}

080004c6 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_6
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80004c6:	b580      	push	{r7, lr}
 80004c8:	b084      	sub	sp, #16
 80004ca:	af00      	add	r7, sp, #0
 80004cc:	60f8      	str	r0, [r7, #12]
 80004ce:	60b9      	str	r1, [r7, #8]
 80004d0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 80004d2:	68fb      	ldr	r3, [r7, #12]
 80004d4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80004d6:	68bb      	ldr	r3, [r7, #8]
 80004d8:	0a1b      	lsrs	r3, r3, #8
 80004da:	68ba      	ldr	r2, [r7, #8]
 80004dc:	0a12      	lsrs	r2, r2, #8
 80004de:	4353      	muls	r3, r2
 80004e0:	68ba      	ldr	r2, [r7, #8]
 80004e2:	0a12      	lsrs	r2, r2, #8
 80004e4:	4353      	muls	r3, r2
 80004e6:	68ba      	ldr	r2, [r7, #8]
 80004e8:	0a12      	lsrs	r2, r2, #8
 80004ea:	435a      	muls	r2, r3
 80004ec:	0013      	movs	r3, r2
 80004ee:	011b      	lsls	r3, r3, #4
 80004f0:	1a9b      	subs	r3, r3, r2
 80004f2:	43db      	mvns	r3, r3
 80004f4:	400b      	ands	r3, r1
 80004f6:	001a      	movs	r2, r3
 80004f8:	68bb      	ldr	r3, [r7, #8]
 80004fa:	0a1b      	lsrs	r3, r3, #8
 80004fc:	68b9      	ldr	r1, [r7, #8]
 80004fe:	0a09      	lsrs	r1, r1, #8
 8000500:	434b      	muls	r3, r1
 8000502:	68b9      	ldr	r1, [r7, #8]
 8000504:	0a09      	lsrs	r1, r1, #8
 8000506:	434b      	muls	r3, r1
 8000508:	68b9      	ldr	r1, [r7, #8]
 800050a:	0a09      	lsrs	r1, r1, #8
 800050c:	434b      	muls	r3, r1
 800050e:	6879      	ldr	r1, [r7, #4]
 8000510:	434b      	muls	r3, r1
 8000512:	431a      	orrs	r2, r3
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	625a      	str	r2, [r3, #36]	; 0x24
             (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * Alternate));
}
 8000518:	46c0      	nop			; (mov r8, r8)
 800051a:	46bd      	mov	sp, r7
 800051c:	b004      	add	sp, #16
 800051e:	bd80      	pop	{r7, pc}

08000520 <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b082      	sub	sp, #8
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	2201      	movs	r2, #1
 800052e:	431a      	orrs	r2, r3
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	601a      	str	r2, [r3, #0]
}
 8000534:	46c0      	nop			; (mov r8, r8)
 8000536:	46bd      	mov	sp, r7
 8000538:	b002      	add	sp, #8
 800053a:	bd80      	pop	{r7, pc}

0800053c <LL_I2C_Disable>:
  * @rmtoll CR1          PE            LL_I2C_Disable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Disable(I2C_TypeDef *I2Cx)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	2201      	movs	r2, #1
 800054a:	4393      	bics	r3, r2
 800054c:	001a      	movs	r2, r3
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	601a      	str	r2, [r3, #0]
}
 8000552:	46c0      	nop			; (mov r8, r8)
 8000554:	46bd      	mov	sp, r7
 8000556:	b002      	add	sp, #8
 8000558:	bd80      	pop	{r7, pc}
	...

0800055c <LL_I2C_ConfigFilters>:
  *         This parameter is used to configure the digital noise filter on SDA and SCL input.
  *         The digital filter will filter spikes with a length of up to DNF[3:0]*ti2cclk.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ConfigFilters(I2C_TypeDef *I2Cx, uint32_t AnalogFilter, uint32_t DigitalFilter)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b084      	sub	sp, #16
 8000560:	af00      	add	r7, sp, #0
 8000562:	60f8      	str	r0, [r7, #12]
 8000564:	60b9      	str	r1, [r7, #8]
 8000566:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 8000568:	68fb      	ldr	r3, [r7, #12]
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	4a06      	ldr	r2, [pc, #24]	; (8000588 <LL_I2C_ConfigFilters+0x2c>)
 800056e:	401a      	ands	r2, r3
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	0219      	lsls	r1, r3, #8
 8000574:	68bb      	ldr	r3, [r7, #8]
 8000576:	430b      	orrs	r3, r1
 8000578:	431a      	orrs	r2, r3
 800057a:	68fb      	ldr	r3, [r7, #12]
 800057c:	601a      	str	r2, [r3, #0]
}
 800057e:	46c0      	nop			; (mov r8, r8)
 8000580:	46bd      	mov	sp, r7
 8000582:	b004      	add	sp, #16
 8000584:	bd80      	pop	{r7, pc}
 8000586:	46c0      	nop			; (mov r8, r8)
 8000588:	ffffe0ff 	.word	0xffffe0ff

0800058c <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4a03      	ldr	r2, [pc, #12]	; (80005a8 <LL_I2C_EnableClockStretching+0x1c>)
 800059a:	401a      	ands	r2, r3
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	601a      	str	r2, [r3, #0]
}
 80005a0:	46c0      	nop			; (mov r8, r8)
 80005a2:	46bd      	mov	sp, r7
 80005a4:	b002      	add	sp, #8
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	fffdffff 	.word	0xfffdffff

080005ac <LL_I2C_SetTiming>:
  * @param  Timing This parameter must be a value between Min_Data=0 and Max_Data=0xFFFFFFFF.
  * @note   This parameter is computed with the STM32CubeMX Tool.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetTiming(I2C_TypeDef *I2Cx, uint32_t Timing)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
 80005b4:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	683a      	ldr	r2, [r7, #0]
 80005ba:	611a      	str	r2, [r3, #16]
}
 80005bc:	46c0      	nop			; (mov r8, r8)
 80005be:	46bd      	mov	sp, r7
 80005c0:	b002      	add	sp, #8
 80005c2:	bd80      	pop	{r7, pc}

080005c4 <LL_I2C_SetMode>:
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE_ARP
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetMode(I2C_TypeDef *I2Cx, uint32_t PeripheralMode)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
 80005cc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	4a05      	ldr	r2, [pc, #20]	; (80005e8 <LL_I2C_SetMode+0x24>)
 80005d4:	401a      	ands	r2, r3
 80005d6:	683b      	ldr	r3, [r7, #0]
 80005d8:	431a      	orrs	r2, r3
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	601a      	str	r2, [r3, #0]
}
 80005de:	46c0      	nop			; (mov r8, r8)
 80005e0:	46bd      	mov	sp, r7
 80005e2:	b002      	add	sp, #8
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	46c0      	nop			; (mov r8, r8)
 80005e8:	ffcfffff 	.word	0xffcfffff

080005ec <LL_I2C_EnableIT_TX>:
  * @rmtoll CR1          TXIE          LL_I2C_EnableIT_TX
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableIT_TX(I2C_TypeDef *I2Cx)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_TXIE);
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	2202      	movs	r2, #2
 80005fa:	431a      	orrs	r2, r3
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	601a      	str	r2, [r3, #0]
}
 8000600:	46c0      	nop			; (mov r8, r8)
 8000602:	46bd      	mov	sp, r7
 8000604:	b002      	add	sp, #8
 8000606:	bd80      	pop	{r7, pc}

08000608 <LL_I2C_DisableIT_TX>:
  * @rmtoll CR1          TXIE          LL_I2C_DisableIT_TX
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableIT_TX(I2C_TypeDef *I2Cx)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_TXIE);
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	2202      	movs	r2, #2
 8000616:	4393      	bics	r3, r2
 8000618:	001a      	movs	r2, r3
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	601a      	str	r2, [r3, #0]
}
 800061e:	46c0      	nop			; (mov r8, r8)
 8000620:	46bd      	mov	sp, r7
 8000622:	b002      	add	sp, #8
 8000624:	bd80      	pop	{r7, pc}

08000626 <LL_I2C_EnableIT_RX>:
  * @rmtoll CR1          RXIE          LL_I2C_EnableIT_RX
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableIT_RX(I2C_TypeDef *I2Cx)
{
 8000626:	b580      	push	{r7, lr}
 8000628:	b082      	sub	sp, #8
 800062a:	af00      	add	r7, sp, #0
 800062c:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	2204      	movs	r2, #4
 8000634:	431a      	orrs	r2, r3
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	601a      	str	r2, [r3, #0]
}
 800063a:	46c0      	nop			; (mov r8, r8)
 800063c:	46bd      	mov	sp, r7
 800063e:	b002      	add	sp, #8
 8000640:	bd80      	pop	{r7, pc}

08000642 <LL_I2C_DisableIT_RX>:
  * @rmtoll CR1          RXIE          LL_I2C_DisableIT_RX
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableIT_RX(I2C_TypeDef *I2Cx)
{
 8000642:	b580      	push	{r7, lr}
 8000644:	b082      	sub	sp, #8
 8000646:	af00      	add	r7, sp, #0
 8000648:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	2204      	movs	r2, #4
 8000650:	4393      	bics	r3, r2
 8000652:	001a      	movs	r2, r3
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	601a      	str	r2, [r3, #0]
}
 8000658:	46c0      	nop			; (mov r8, r8)
 800065a:	46bd      	mov	sp, r7
 800065c:	b002      	add	sp, #8
 800065e:	bd80      	pop	{r7, pc}

08000660 <LL_I2C_EnableIT_STOP>:
  * @rmtoll CR1          STOPIE        LL_I2C_EnableIT_STOP
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableIT_STOP(I2C_TypeDef *I2Cx)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_STOPIE);
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	2220      	movs	r2, #32
 800066e:	431a      	orrs	r2, r3
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	601a      	str	r2, [r3, #0]
}
 8000674:	46c0      	nop			; (mov r8, r8)
 8000676:	46bd      	mov	sp, r7
 8000678:	b002      	add	sp, #8
 800067a:	bd80      	pop	{r7, pc}

0800067c <LL_I2C_IsActiveFlag_TXIS>:
  * @rmtoll ISR          TXIS          LL_I2C_IsActiveFlag_TXIS
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TXIS(I2C_TypeDef *I2Cx)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TXIS) == (I2C_ISR_TXIS)) ? 1UL : 0UL);
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	699b      	ldr	r3, [r3, #24]
 8000688:	2202      	movs	r2, #2
 800068a:	4013      	ands	r3, r2
 800068c:	2b02      	cmp	r3, #2
 800068e:	d101      	bne.n	8000694 <LL_I2C_IsActiveFlag_TXIS+0x18>
 8000690:	2301      	movs	r3, #1
 8000692:	e000      	b.n	8000696 <LL_I2C_IsActiveFlag_TXIS+0x1a>
 8000694:	2300      	movs	r3, #0
}
 8000696:	0018      	movs	r0, r3
 8000698:	46bd      	mov	sp, r7
 800069a:	b002      	add	sp, #8
 800069c:	bd80      	pop	{r7, pc}

0800069e <LL_I2C_IsActiveFlag_TC>:
  * @rmtoll ISR          TC            LL_I2C_IsActiveFlag_TC
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TC(I2C_TypeDef *I2Cx)
{
 800069e:	b580      	push	{r7, lr}
 80006a0:	b082      	sub	sp, #8
 80006a2:	af00      	add	r7, sp, #0
 80006a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TC) == (I2C_ISR_TC)) ? 1UL : 0UL);
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	699b      	ldr	r3, [r3, #24]
 80006aa:	2240      	movs	r2, #64	; 0x40
 80006ac:	4013      	ands	r3, r2
 80006ae:	2b40      	cmp	r3, #64	; 0x40
 80006b0:	d101      	bne.n	80006b6 <LL_I2C_IsActiveFlag_TC+0x18>
 80006b2:	2301      	movs	r3, #1
 80006b4:	e000      	b.n	80006b8 <LL_I2C_IsActiveFlag_TC+0x1a>
 80006b6:	2300      	movs	r3, #0
}
 80006b8:	0018      	movs	r0, r3
 80006ba:	46bd      	mov	sp, r7
 80006bc:	b002      	add	sp, #8
 80006be:	bd80      	pop	{r7, pc}

080006c0 <LL_I2C_HandleTransfer>:
  *         @arg @ref LL_I2C_GENERATE_RESTART_10BIT_WRITE
  * @retval None
  */
__STATIC_INLINE void LL_I2C_HandleTransfer(I2C_TypeDef *I2Cx, uint32_t SlaveAddr, uint32_t SlaveAddrSize,
                                           uint32_t TransferSize, uint32_t EndMode, uint32_t Request)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b084      	sub	sp, #16
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	60f8      	str	r0, [r7, #12]
 80006c8:	60b9      	str	r1, [r7, #8]
 80006ca:	607a      	str	r2, [r7, #4]
 80006cc:	603b      	str	r3, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 |
 80006ce:	68fb      	ldr	r3, [r7, #12]
 80006d0:	685b      	ldr	r3, [r3, #4]
 80006d2:	69fa      	ldr	r2, [r7, #28]
 80006d4:	0d51      	lsrs	r1, r2, #21
 80006d6:	2280      	movs	r2, #128	; 0x80
 80006d8:	00d2      	lsls	r2, r2, #3
 80006da:	400a      	ands	r2, r1
 80006dc:	490a      	ldr	r1, [pc, #40]	; (8000708 <LL_I2C_HandleTransfer+0x48>)
 80006de:	430a      	orrs	r2, r1
 80006e0:	43d2      	mvns	r2, r2
 80006e2:	401a      	ands	r2, r3
 80006e4:	68b9      	ldr	r1, [r7, #8]
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	4319      	orrs	r1, r3
 80006ea:	683b      	ldr	r3, [r7, #0]
 80006ec:	041b      	lsls	r3, r3, #16
 80006ee:	4319      	orrs	r1, r3
 80006f0:	69bb      	ldr	r3, [r7, #24]
 80006f2:	4319      	orrs	r1, r3
 80006f4:	69fb      	ldr	r3, [r7, #28]
 80006f6:	430b      	orrs	r3, r1
 80006f8:	431a      	orrs	r2, r3
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	605a      	str	r2, [r3, #4]
             (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) |
             I2C_CR2_START | I2C_CR2_STOP | I2C_CR2_RELOAD |
             I2C_CR2_NBYTES | I2C_CR2_AUTOEND | I2C_CR2_HEAD10R,
             SlaveAddr | SlaveAddrSize | (TransferSize << I2C_CR2_NBYTES_Pos) | EndMode | Request);
}
 80006fe:	46c0      	nop			; (mov r8, r8)
 8000700:	46bd      	mov	sp, r7
 8000702:	b004      	add	sp, #16
 8000704:	bd80      	pop	{r7, pc}
 8000706:	46c0      	nop			; (mov r8, r8)
 8000708:	03ff7bff 	.word	0x03ff7bff

0800070c <LL_I2C_ReceiveData8>:
  * @rmtoll RXDR         RXDATA        LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(I2C_TypeDef *I2Cx)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000718:	b2db      	uxtb	r3, r3
}
 800071a:	0018      	movs	r0, r3
 800071c:	46bd      	mov	sp, r7
 800071e:	b002      	add	sp, #8
 8000720:	bd80      	pop	{r7, pc}

08000722 <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 8000722:	b580      	push	{r7, lr}
 8000724:	b082      	sub	sp, #8
 8000726:	af00      	add	r7, sp, #0
 8000728:	6078      	str	r0, [r7, #4]
 800072a:	000a      	movs	r2, r1
 800072c:	1cfb      	adds	r3, r7, #3
 800072e:	701a      	strb	r2, [r3, #0]
  WRITE_REG(I2Cx->TXDR, Data);
 8000730:	1cfb      	adds	r3, r7, #3
 8000732:	781a      	ldrb	r2, [r3, #0]
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000738:	46c0      	nop			; (mov r8, r8)
 800073a:	46bd      	mov	sp, r7
 800073c:	b002      	add	sp, #8
 800073e:	bd80      	pop	{r7, pc}

08000740 <i2c_init>:

static buffer_t rx_buffer = {0};
static buffer_t tx_buffer = {0};

int32_t i2c_init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
	//GPIO
	LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOB);
 8000744:	2002      	movs	r0, #2
 8000746:	f7ff fe3f 	bl	80003c8 <LL_IOP_GRP1_EnableClock>

	LL_GPIO_SetPinSpeed(I2C1_SCL_GPIO_Port, I2C1_SCL_Pin, LL_GPIO_SPEED_FREQ_LOW);
 800074a:	2380      	movs	r3, #128	; 0x80
 800074c:	005b      	lsls	r3, r3, #1
 800074e:	483b      	ldr	r0, [pc, #236]	; (800083c <i2c_init+0xfc>)
 8000750:	2200      	movs	r2, #0
 8000752:	0019      	movs	r1, r3
 8000754:	f7ff fe7f 	bl	8000456 <LL_GPIO_SetPinSpeed>
	LL_GPIO_SetPinOutputType(I2C1_SCL_GPIO_Port, I2C1_SCL_Pin, LL_GPIO_OUTPUT_OPENDRAIN);
 8000758:	2380      	movs	r3, #128	; 0x80
 800075a:	005b      	lsls	r3, r3, #1
 800075c:	4837      	ldr	r0, [pc, #220]	; (800083c <i2c_init+0xfc>)
 800075e:	2201      	movs	r2, #1
 8000760:	0019      	movs	r1, r3
 8000762:	f7ff fe63 	bl	800042c <LL_GPIO_SetPinOutputType>
	LL_GPIO_SetPinPull(I2C1_SCL_GPIO_Port, I2C1_SCL_Pin, LL_GPIO_PULL_NO);
 8000766:	2380      	movs	r3, #128	; 0x80
 8000768:	005b      	lsls	r3, r3, #1
 800076a:	4834      	ldr	r0, [pc, #208]	; (800083c <i2c_init+0xfc>)
 800076c:	2200      	movs	r2, #0
 800076e:	0019      	movs	r1, r3
 8000770:	f7ff fe8d 	bl	800048e <LL_GPIO_SetPinPull>
	LL_GPIO_SetAFPin_8_15(I2C1_SCL_GPIO_Port, I2C1_SCL_Pin, LL_GPIO_AF_6);
 8000774:	2380      	movs	r3, #128	; 0x80
 8000776:	005b      	lsls	r3, r3, #1
 8000778:	4830      	ldr	r0, [pc, #192]	; (800083c <i2c_init+0xfc>)
 800077a:	2206      	movs	r2, #6
 800077c:	0019      	movs	r1, r3
 800077e:	f7ff fea2 	bl	80004c6 <LL_GPIO_SetAFPin_8_15>
	LL_GPIO_SetPinMode(I2C1_SCL_GPIO_Port, I2C1_SCL_Pin, LL_GPIO_MODE_ALTERNATE);
 8000782:	2380      	movs	r3, #128	; 0x80
 8000784:	005b      	lsls	r3, r3, #1
 8000786:	482d      	ldr	r0, [pc, #180]	; (800083c <i2c_init+0xfc>)
 8000788:	2202      	movs	r2, #2
 800078a:	0019      	movs	r1, r3
 800078c:	f7ff fe32 	bl	80003f4 <LL_GPIO_SetPinMode>

	LL_GPIO_SetPinOutputType(I2C1_SDA_GPIO_Port, I2C1_SDA_Pin, LL_GPIO_OUTPUT_OPENDRAIN);
 8000790:	2380      	movs	r3, #128	; 0x80
 8000792:	009b      	lsls	r3, r3, #2
 8000794:	4829      	ldr	r0, [pc, #164]	; (800083c <i2c_init+0xfc>)
 8000796:	2201      	movs	r2, #1
 8000798:	0019      	movs	r1, r3
 800079a:	f7ff fe47 	bl	800042c <LL_GPIO_SetPinOutputType>
	LL_GPIO_SetPinPull(I2C1_SDA_GPIO_Port, I2C1_SDA_Pin, LL_GPIO_PULL_NO);
 800079e:	2380      	movs	r3, #128	; 0x80
 80007a0:	009b      	lsls	r3, r3, #2
 80007a2:	4826      	ldr	r0, [pc, #152]	; (800083c <i2c_init+0xfc>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	0019      	movs	r1, r3
 80007a8:	f7ff fe71 	bl	800048e <LL_GPIO_SetPinPull>
	LL_GPIO_SetPinSpeed(I2C1_SDA_GPIO_Port, I2C1_SDA_Pin, LL_GPIO_SPEED_FREQ_VERY_HIGH);
 80007ac:	2380      	movs	r3, #128	; 0x80
 80007ae:	009b      	lsls	r3, r3, #2
 80007b0:	4822      	ldr	r0, [pc, #136]	; (800083c <i2c_init+0xfc>)
 80007b2:	2203      	movs	r2, #3
 80007b4:	0019      	movs	r1, r3
 80007b6:	f7ff fe4e 	bl	8000456 <LL_GPIO_SetPinSpeed>
	LL_GPIO_SetAFPin_8_15(I2C1_SDA_GPIO_Port, I2C1_SDA_Pin, LL_GPIO_AF_6);
 80007ba:	2380      	movs	r3, #128	; 0x80
 80007bc:	009b      	lsls	r3, r3, #2
 80007be:	481f      	ldr	r0, [pc, #124]	; (800083c <i2c_init+0xfc>)
 80007c0:	2206      	movs	r2, #6
 80007c2:	0019      	movs	r1, r3
 80007c4:	f7ff fe7f 	bl	80004c6 <LL_GPIO_SetAFPin_8_15>
	LL_GPIO_SetPinMode(I2C1_SDA_GPIO_Port, I2C1_SDA_Pin, LL_GPIO_MODE_ALTERNATE);
 80007c8:	2380      	movs	r3, #128	; 0x80
 80007ca:	009b      	lsls	r3, r3, #2
 80007cc:	481b      	ldr	r0, [pc, #108]	; (800083c <i2c_init+0xfc>)
 80007ce:	2202      	movs	r2, #2
 80007d0:	0019      	movs	r1, r3
 80007d2:	f7ff fe0f 	bl	80003f4 <LL_GPIO_SetPinMode>

	//I2C
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 80007d6:	2380      	movs	r3, #128	; 0x80
 80007d8:	039b      	lsls	r3, r3, #14
 80007da:	0018      	movs	r0, r3
 80007dc:	f7ff fdde 	bl	800039c <LL_APB1_GRP1_EnableClock>

	LL_I2C_Disable(i2c);
 80007e0:	4b17      	ldr	r3, [pc, #92]	; (8000840 <i2c_init+0x100>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	0018      	movs	r0, r3
 80007e6:	f7ff fea9 	bl	800053c <LL_I2C_Disable>
	LL_I2C_ConfigFilters(i2c, LL_I2C_ANALOGFILTER_ENABLE, 0x00);
 80007ea:	4b15      	ldr	r3, [pc, #84]	; (8000840 <i2c_init+0x100>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	2200      	movs	r2, #0
 80007f0:	2100      	movs	r1, #0
 80007f2:	0018      	movs	r0, r3
 80007f4:	f7ff feb2 	bl	800055c <LL_I2C_ConfigFilters>
	LL_I2C_SetTiming(i2c, 0x10707DBC);
 80007f8:	4b11      	ldr	r3, [pc, #68]	; (8000840 <i2c_init+0x100>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4a11      	ldr	r2, [pc, #68]	; (8000844 <i2c_init+0x104>)
 80007fe:	0011      	movs	r1, r2
 8000800:	0018      	movs	r0, r3
 8000802:	f7ff fed3 	bl	80005ac <LL_I2C_SetTiming>
	LL_I2C_EnableClockStretching(i2c);
 8000806:	4b0e      	ldr	r3, [pc, #56]	; (8000840 <i2c_init+0x100>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	0018      	movs	r0, r3
 800080c:	f7ff febe 	bl	800058c <LL_I2C_EnableClockStretching>
	LL_I2C_SetMode(i2c, LL_I2C_MODE_I2C);
 8000810:	4b0b      	ldr	r3, [pc, #44]	; (8000840 <i2c_init+0x100>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	2100      	movs	r1, #0
 8000816:	0018      	movs	r0, r3
 8000818:	f7ff fed4 	bl	80005c4 <LL_I2C_SetMode>
	LL_I2C_Enable(i2c);
 800081c:	4b08      	ldr	r3, [pc, #32]	; (8000840 <i2c_init+0x100>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	0018      	movs	r0, r3
 8000822:	f7ff fe7d 	bl	8000520 <LL_I2C_Enable>

	NVIC_SetPriority(I2C1_IRQn, 0);
 8000826:	2100      	movs	r1, #0
 8000828:	2017      	movs	r0, #23
 800082a:	f7ff fd49 	bl	80002c0 <__NVIC_SetPriority>
	NVIC_EnableIRQ(I2C1_IRQn);
 800082e:	2017      	movs	r0, #23
 8000830:	f7ff fd2c 	bl	800028c <__NVIC_EnableIRQ>

	return 0;
 8000834:	2300      	movs	r3, #0
}
 8000836:	0018      	movs	r0, r3
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	50000400 	.word	0x50000400
 8000840:	20000000 	.word	0x20000000
 8000844:	10707dbc 	.word	0x10707dbc

08000848 <i2c_reg_write_it>:

int32_t i2c_reg_write_it(uint16_t slave_addr, uint16_t reg_addr, uint8_t *data_ptr, uint16_t size)
{
 8000848:	b5b0      	push	{r4, r5, r7, lr}
 800084a:	b086      	sub	sp, #24
 800084c:	af02      	add	r7, sp, #8
 800084e:	0004      	movs	r4, r0
 8000850:	0008      	movs	r0, r1
 8000852:	60ba      	str	r2, [r7, #8]
 8000854:	0019      	movs	r1, r3
 8000856:	250e      	movs	r5, #14
 8000858:	197b      	adds	r3, r7, r5
 800085a:	1c22      	adds	r2, r4, #0
 800085c:	801a      	strh	r2, [r3, #0]
 800085e:	230c      	movs	r3, #12
 8000860:	18fb      	adds	r3, r7, r3
 8000862:	1c02      	adds	r2, r0, #0
 8000864:	801a      	strh	r2, [r3, #0]
 8000866:	1dbb      	adds	r3, r7, #6
 8000868:	1c0a      	adds	r2, r1, #0
 800086a:	801a      	strh	r2, [r3, #0]
	tx_buffer.data_ptr = data_ptr;
 800086c:	4b1b      	ldr	r3, [pc, #108]	; (80008dc <i2c_reg_write_it+0x94>)
 800086e:	68ba      	ldr	r2, [r7, #8]
 8000870:	601a      	str	r2, [r3, #0]
	tx_buffer.count = size;
 8000872:	1dbb      	adds	r3, r7, #6
 8000874:	881a      	ldrh	r2, [r3, #0]
 8000876:	4b19      	ldr	r3, [pc, #100]	; (80008dc <i2c_reg_write_it+0x94>)
 8000878:	605a      	str	r2, [r3, #4]

	LL_I2C_HandleTransfer(i2c, slave_addr, LL_I2C_ADDRSLAVE_7BIT, (uint32_t)(size+1), LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 800087a:	4b19      	ldr	r3, [pc, #100]	; (80008e0 <i2c_reg_write_it+0x98>)
 800087c:	6818      	ldr	r0, [r3, #0]
 800087e:	197b      	adds	r3, r7, r5
 8000880:	8819      	ldrh	r1, [r3, #0]
 8000882:	1dbb      	adds	r3, r7, #6
 8000884:	881b      	ldrh	r3, [r3, #0]
 8000886:	3301      	adds	r3, #1
 8000888:	001a      	movs	r2, r3
 800088a:	4b16      	ldr	r3, [pc, #88]	; (80008e4 <i2c_reg_write_it+0x9c>)
 800088c:	9301      	str	r3, [sp, #4]
 800088e:	2380      	movs	r3, #128	; 0x80
 8000890:	049b      	lsls	r3, r3, #18
 8000892:	9300      	str	r3, [sp, #0]
 8000894:	0013      	movs	r3, r2
 8000896:	2200      	movs	r2, #0
 8000898:	f7ff ff12 	bl	80006c0 <LL_I2C_HandleTransfer>

	while(LL_I2C_IsActiveFlag_TXIS(i2c) == 0)
 800089c:	46c0      	nop			; (mov r8, r8)
 800089e:	4b10      	ldr	r3, [pc, #64]	; (80008e0 <i2c_reg_write_it+0x98>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	0018      	movs	r0, r3
 80008a4:	f7ff feea 	bl	800067c <LL_I2C_IsActiveFlag_TXIS>
 80008a8:	1e03      	subs	r3, r0, #0
 80008aa:	d0f8      	beq.n	800089e <i2c_reg_write_it+0x56>
		;

	LL_I2C_TransmitData8(i2c, reg_addr);
 80008ac:	4b0c      	ldr	r3, [pc, #48]	; (80008e0 <i2c_reg_write_it+0x98>)
 80008ae:	681a      	ldr	r2, [r3, #0]
 80008b0:	230c      	movs	r3, #12
 80008b2:	18fb      	adds	r3, r7, r3
 80008b4:	881b      	ldrh	r3, [r3, #0]
 80008b6:	b2db      	uxtb	r3, r3
 80008b8:	0019      	movs	r1, r3
 80008ba:	0010      	movs	r0, r2
 80008bc:	f7ff ff31 	bl	8000722 <LL_I2C_TransmitData8>

	LL_I2C_EnableIT_TX(I2C1);
 80008c0:	4b09      	ldr	r3, [pc, #36]	; (80008e8 <i2c_reg_write_it+0xa0>)
 80008c2:	0018      	movs	r0, r3
 80008c4:	f7ff fe92 	bl	80005ec <LL_I2C_EnableIT_TX>
	LL_I2C_EnableIT_STOP(I2C1);
 80008c8:	4b07      	ldr	r3, [pc, #28]	; (80008e8 <i2c_reg_write_it+0xa0>)
 80008ca:	0018      	movs	r0, r3
 80008cc:	f7ff fec8 	bl	8000660 <LL_I2C_EnableIT_STOP>

	return 0;
 80008d0:	2300      	movs	r3, #0
}
 80008d2:	0018      	movs	r0, r3
 80008d4:	46bd      	mov	sp, r7
 80008d6:	b004      	add	sp, #16
 80008d8:	bdb0      	pop	{r4, r5, r7, pc}
 80008da:	46c0      	nop			; (mov r8, r8)
 80008dc:	20000034 	.word	0x20000034
 80008e0:	20000000 	.word	0x20000000
 80008e4:	80002000 	.word	0x80002000
 80008e8:	40005400 	.word	0x40005400

080008ec <i2c_reg_read_it>:

int32_t i2c_reg_read_it(uint16_t slave_addr, uint16_t reg_addr, uint8_t *data_ptr, uint16_t size)
{
 80008ec:	b5b0      	push	{r4, r5, r7, lr}
 80008ee:	b086      	sub	sp, #24
 80008f0:	af02      	add	r7, sp, #8
 80008f2:	0004      	movs	r4, r0
 80008f4:	0008      	movs	r0, r1
 80008f6:	60ba      	str	r2, [r7, #8]
 80008f8:	0019      	movs	r1, r3
 80008fa:	250e      	movs	r5, #14
 80008fc:	197b      	adds	r3, r7, r5
 80008fe:	1c22      	adds	r2, r4, #0
 8000900:	801a      	strh	r2, [r3, #0]
 8000902:	230c      	movs	r3, #12
 8000904:	18fb      	adds	r3, r7, r3
 8000906:	1c02      	adds	r2, r0, #0
 8000908:	801a      	strh	r2, [r3, #0]
 800090a:	1dbb      	adds	r3, r7, #6
 800090c:	1c0a      	adds	r2, r1, #0
 800090e:	801a      	strh	r2, [r3, #0]
	rx_buffer.data_ptr = data_ptr;
 8000910:	4b24      	ldr	r3, [pc, #144]	; (80009a4 <i2c_reg_read_it+0xb8>)
 8000912:	68ba      	ldr	r2, [r7, #8]
 8000914:	601a      	str	r2, [r3, #0]
	rx_buffer.count = size;
 8000916:	1dbb      	adds	r3, r7, #6
 8000918:	881a      	ldrh	r2, [r3, #0]
 800091a:	4b22      	ldr	r3, [pc, #136]	; (80009a4 <i2c_reg_read_it+0xb8>)
 800091c:	605a      	str	r2, [r3, #4]

	LL_I2C_HandleTransfer(i2c, slave_addr, LL_I2C_ADDRSLAVE_7BIT, 1, LL_I2C_MODE_SOFTEND, LL_I2C_GENERATE_START_WRITE);
 800091e:	4b22      	ldr	r3, [pc, #136]	; (80009a8 <i2c_reg_read_it+0xbc>)
 8000920:	6818      	ldr	r0, [r3, #0]
 8000922:	197b      	adds	r3, r7, r5
 8000924:	8819      	ldrh	r1, [r3, #0]
 8000926:	4b21      	ldr	r3, [pc, #132]	; (80009ac <i2c_reg_read_it+0xc0>)
 8000928:	9301      	str	r3, [sp, #4]
 800092a:	2300      	movs	r3, #0
 800092c:	9300      	str	r3, [sp, #0]
 800092e:	2301      	movs	r3, #1
 8000930:	2200      	movs	r2, #0
 8000932:	f7ff fec5 	bl	80006c0 <LL_I2C_HandleTransfer>

	while(LL_I2C_IsActiveFlag_TXIS(i2c) == 0)
 8000936:	46c0      	nop			; (mov r8, r8)
 8000938:	4b1b      	ldr	r3, [pc, #108]	; (80009a8 <i2c_reg_read_it+0xbc>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	0018      	movs	r0, r3
 800093e:	f7ff fe9d 	bl	800067c <LL_I2C_IsActiveFlag_TXIS>
 8000942:	1e03      	subs	r3, r0, #0
 8000944:	d0f8      	beq.n	8000938 <i2c_reg_read_it+0x4c>
		;

	LL_I2C_TransmitData8(i2c, reg_addr);
 8000946:	4b18      	ldr	r3, [pc, #96]	; (80009a8 <i2c_reg_read_it+0xbc>)
 8000948:	681a      	ldr	r2, [r3, #0]
 800094a:	230c      	movs	r3, #12
 800094c:	18fb      	adds	r3, r7, r3
 800094e:	881b      	ldrh	r3, [r3, #0]
 8000950:	b2db      	uxtb	r3, r3
 8000952:	0019      	movs	r1, r3
 8000954:	0010      	movs	r0, r2
 8000956:	f7ff fee4 	bl	8000722 <LL_I2C_TransmitData8>

	while(LL_I2C_IsActiveFlag_TC(i2c) == 0)
 800095a:	46c0      	nop			; (mov r8, r8)
 800095c:	4b12      	ldr	r3, [pc, #72]	; (80009a8 <i2c_reg_read_it+0xbc>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	0018      	movs	r0, r3
 8000962:	f7ff fe9c 	bl	800069e <LL_I2C_IsActiveFlag_TC>
 8000966:	1e03      	subs	r3, r0, #0
 8000968:	d0f8      	beq.n	800095c <i2c_reg_read_it+0x70>
		;

	LL_I2C_HandleTransfer(i2c, slave_addr, LL_I2C_ADDRSLAVE_7BIT, (uint32_t)size, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_READ);
 800096a:	4b0f      	ldr	r3, [pc, #60]	; (80009a8 <i2c_reg_read_it+0xbc>)
 800096c:	6818      	ldr	r0, [r3, #0]
 800096e:	230e      	movs	r3, #14
 8000970:	18fb      	adds	r3, r7, r3
 8000972:	8819      	ldrh	r1, [r3, #0]
 8000974:	1dbb      	adds	r3, r7, #6
 8000976:	881a      	ldrh	r2, [r3, #0]
 8000978:	4b0d      	ldr	r3, [pc, #52]	; (80009b0 <i2c_reg_read_it+0xc4>)
 800097a:	9301      	str	r3, [sp, #4]
 800097c:	2380      	movs	r3, #128	; 0x80
 800097e:	049b      	lsls	r3, r3, #18
 8000980:	9300      	str	r3, [sp, #0]
 8000982:	0013      	movs	r3, r2
 8000984:	2200      	movs	r2, #0
 8000986:	f7ff fe9b 	bl	80006c0 <LL_I2C_HandleTransfer>

	LL_I2C_EnableIT_RX(I2C1);
 800098a:	4b0a      	ldr	r3, [pc, #40]	; (80009b4 <i2c_reg_read_it+0xc8>)
 800098c:	0018      	movs	r0, r3
 800098e:	f7ff fe4a 	bl	8000626 <LL_I2C_EnableIT_RX>
	LL_I2C_EnableIT_STOP(I2C1);
 8000992:	4b08      	ldr	r3, [pc, #32]	; (80009b4 <i2c_reg_read_it+0xc8>)
 8000994:	0018      	movs	r0, r3
 8000996:	f7ff fe63 	bl	8000660 <LL_I2C_EnableIT_STOP>

	return 0;
 800099a:	2300      	movs	r3, #0
}
 800099c:	0018      	movs	r0, r3
 800099e:	46bd      	mov	sp, r7
 80009a0:	b004      	add	sp, #16
 80009a2:	bdb0      	pop	{r4, r5, r7, pc}
 80009a4:	2000002c 	.word	0x2000002c
 80009a8:	20000000 	.word	0x20000000
 80009ac:	80002000 	.word	0x80002000
 80009b0:	80002400 	.word	0x80002400
 80009b4:	40005400 	.word	0x40005400

080009b8 <i2c_it_transmit_callback>:

void i2c_it_transmit_callback(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
	if(tx_buffer.count > 0)
 80009bc:	4b10      	ldr	r3, [pc, #64]	; (8000a00 <i2c_it_transmit_callback+0x48>)
 80009be:	685b      	ldr	r3, [r3, #4]
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d012      	beq.n	80009ea <i2c_it_transmit_callback+0x32>
	{
		LL_I2C_TransmitData8(i2c, *tx_buffer.data_ptr);
 80009c4:	4b0f      	ldr	r3, [pc, #60]	; (8000a04 <i2c_it_transmit_callback+0x4c>)
 80009c6:	681a      	ldr	r2, [r3, #0]
 80009c8:	4b0d      	ldr	r3, [pc, #52]	; (8000a00 <i2c_it_transmit_callback+0x48>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	0019      	movs	r1, r3
 80009d0:	0010      	movs	r0, r2
 80009d2:	f7ff fea6 	bl	8000722 <LL_I2C_TransmitData8>

		tx_buffer.data_ptr++;
 80009d6:	4b0a      	ldr	r3, [pc, #40]	; (8000a00 <i2c_it_transmit_callback+0x48>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	1c5a      	adds	r2, r3, #1
 80009dc:	4b08      	ldr	r3, [pc, #32]	; (8000a00 <i2c_it_transmit_callback+0x48>)
 80009de:	601a      	str	r2, [r3, #0]
		tx_buffer.count--;
 80009e0:	4b07      	ldr	r3, [pc, #28]	; (8000a00 <i2c_it_transmit_callback+0x48>)
 80009e2:	685b      	ldr	r3, [r3, #4]
 80009e4:	1e5a      	subs	r2, r3, #1
 80009e6:	4b06      	ldr	r3, [pc, #24]	; (8000a00 <i2c_it_transmit_callback+0x48>)
 80009e8:	605a      	str	r2, [r3, #4]
	}

	if(tx_buffer.count <= 0)
 80009ea:	4b05      	ldr	r3, [pc, #20]	; (8000a00 <i2c_it_transmit_callback+0x48>)
 80009ec:	685b      	ldr	r3, [r3, #4]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d103      	bne.n	80009fa <i2c_it_transmit_callback+0x42>
	{
		LL_I2C_DisableIT_TX(I2C1);
 80009f2:	4b05      	ldr	r3, [pc, #20]	; (8000a08 <i2c_it_transmit_callback+0x50>)
 80009f4:	0018      	movs	r0, r3
 80009f6:	f7ff fe07 	bl	8000608 <LL_I2C_DisableIT_TX>
	}
}
 80009fa:	46c0      	nop			; (mov r8, r8)
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	20000034 	.word	0x20000034
 8000a04:	20000000 	.word	0x20000000
 8000a08:	40005400 	.word	0x40005400

08000a0c <i2c_it_receive_callback>:

void i2c_it_receive_callback(void)
{
 8000a0c:	b5b0      	push	{r4, r5, r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
	if(rx_buffer.count > 0)
 8000a10:	4b10      	ldr	r3, [pc, #64]	; (8000a54 <i2c_it_receive_callback+0x48>)
 8000a12:	685b      	ldr	r3, [r3, #4]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d012      	beq.n	8000a3e <i2c_it_receive_callback+0x32>
	{
		*rx_buffer.data_ptr = LL_I2C_ReceiveData8(i2c);
 8000a18:	4b0f      	ldr	r3, [pc, #60]	; (8000a58 <i2c_it_receive_callback+0x4c>)
 8000a1a:	681a      	ldr	r2, [r3, #0]
 8000a1c:	4b0d      	ldr	r3, [pc, #52]	; (8000a54 <i2c_it_receive_callback+0x48>)
 8000a1e:	681c      	ldr	r4, [r3, #0]
 8000a20:	0010      	movs	r0, r2
 8000a22:	f7ff fe73 	bl	800070c <LL_I2C_ReceiveData8>
 8000a26:	0003      	movs	r3, r0
 8000a28:	7023      	strb	r3, [r4, #0]

		rx_buffer.data_ptr++;
 8000a2a:	4b0a      	ldr	r3, [pc, #40]	; (8000a54 <i2c_it_receive_callback+0x48>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	1c5a      	adds	r2, r3, #1
 8000a30:	4b08      	ldr	r3, [pc, #32]	; (8000a54 <i2c_it_receive_callback+0x48>)
 8000a32:	601a      	str	r2, [r3, #0]
		rx_buffer.count--;
 8000a34:	4b07      	ldr	r3, [pc, #28]	; (8000a54 <i2c_it_receive_callback+0x48>)
 8000a36:	685b      	ldr	r3, [r3, #4]
 8000a38:	1e5a      	subs	r2, r3, #1
 8000a3a:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <i2c_it_receive_callback+0x48>)
 8000a3c:	605a      	str	r2, [r3, #4]
	}

	if(rx_buffer.count <= 0)
 8000a3e:	4b05      	ldr	r3, [pc, #20]	; (8000a54 <i2c_it_receive_callback+0x48>)
 8000a40:	685b      	ldr	r3, [r3, #4]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d103      	bne.n	8000a4e <i2c_it_receive_callback+0x42>
	{
		LL_I2C_DisableIT_RX(I2C1);
 8000a46:	4b05      	ldr	r3, [pc, #20]	; (8000a5c <i2c_it_receive_callback+0x50>)
 8000a48:	0018      	movs	r0, r3
 8000a4a:	f7ff fdfa 	bl	8000642 <LL_I2C_DisableIT_RX>
	}
}
 8000a4e:	46c0      	nop			; (mov r8, r8)
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bdb0      	pop	{r4, r5, r7, pc}
 8000a54:	2000002c 	.word	0x2000002c
 8000a58:	20000000 	.word	0x20000000
 8000a5c:	40005400 	.word	0x40005400

08000a60 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000a64:	4b04      	ldr	r3, [pc, #16]	; (8000a78 <LL_RCC_HSI_Enable+0x18>)
 8000a66:	681a      	ldr	r2, [r3, #0]
 8000a68:	4b03      	ldr	r3, [pc, #12]	; (8000a78 <LL_RCC_HSI_Enable+0x18>)
 8000a6a:	2180      	movs	r1, #128	; 0x80
 8000a6c:	0049      	lsls	r1, r1, #1
 8000a6e:	430a      	orrs	r2, r1
 8000a70:	601a      	str	r2, [r3, #0]
}
 8000a72:	46c0      	nop			; (mov r8, r8)
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	40021000 	.word	0x40021000

08000a7c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8000a80:	4b07      	ldr	r3, [pc, #28]	; (8000aa0 <LL_RCC_HSI_IsReady+0x24>)
 8000a82:	681a      	ldr	r2, [r3, #0]
 8000a84:	2380      	movs	r3, #128	; 0x80
 8000a86:	00db      	lsls	r3, r3, #3
 8000a88:	401a      	ands	r2, r3
 8000a8a:	2380      	movs	r3, #128	; 0x80
 8000a8c:	00db      	lsls	r3, r3, #3
 8000a8e:	429a      	cmp	r2, r3
 8000a90:	d101      	bne.n	8000a96 <LL_RCC_HSI_IsReady+0x1a>
 8000a92:	2301      	movs	r3, #1
 8000a94:	e000      	b.n	8000a98 <LL_RCC_HSI_IsReady+0x1c>
 8000a96:	2300      	movs	r3, #0
}
 8000a98:	0018      	movs	r0, r3
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	46c0      	nop			; (mov r8, r8)
 8000aa0:	40021000 	.word	0x40021000

08000aa4 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_LSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_LSE
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000aac:	4b06      	ldr	r3, [pc, #24]	; (8000ac8 <LL_RCC_SetSysClkSource+0x24>)
 8000aae:	689b      	ldr	r3, [r3, #8]
 8000ab0:	2207      	movs	r2, #7
 8000ab2:	4393      	bics	r3, r2
 8000ab4:	0019      	movs	r1, r3
 8000ab6:	4b04      	ldr	r3, [pc, #16]	; (8000ac8 <LL_RCC_SetSysClkSource+0x24>)
 8000ab8:	687a      	ldr	r2, [r7, #4]
 8000aba:	430a      	orrs	r2, r1
 8000abc:	609a      	str	r2, [r3, #8]
}
 8000abe:	46c0      	nop			; (mov r8, r8)
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	b002      	add	sp, #8
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	46c0      	nop			; (mov r8, r8)
 8000ac8:	40021000 	.word	0x40021000

08000acc <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_LSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000ad0:	4b03      	ldr	r3, [pc, #12]	; (8000ae0 <LL_RCC_GetSysClkSource+0x14>)
 8000ad2:	689b      	ldr	r3, [r3, #8]
 8000ad4:	2238      	movs	r2, #56	; 0x38
 8000ad6:	4013      	ands	r3, r2
}
 8000ad8:	0018      	movs	r0, r3
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	46c0      	nop			; (mov r8, r8)
 8000ae0:	40021000 	.word	0x40021000

08000ae4 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000aec:	4b06      	ldr	r3, [pc, #24]	; (8000b08 <LL_RCC_SetAHBPrescaler+0x24>)
 8000aee:	689b      	ldr	r3, [r3, #8]
 8000af0:	4a06      	ldr	r2, [pc, #24]	; (8000b0c <LL_RCC_SetAHBPrescaler+0x28>)
 8000af2:	4013      	ands	r3, r2
 8000af4:	0019      	movs	r1, r3
 8000af6:	4b04      	ldr	r3, [pc, #16]	; (8000b08 <LL_RCC_SetAHBPrescaler+0x24>)
 8000af8:	687a      	ldr	r2, [r7, #4]
 8000afa:	430a      	orrs	r2, r1
 8000afc:	609a      	str	r2, [r3, #8]
}
 8000afe:	46c0      	nop			; (mov r8, r8)
 8000b00:	46bd      	mov	sp, r7
 8000b02:	b002      	add	sp, #8
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	46c0      	nop			; (mov r8, r8)
 8000b08:	40021000 	.word	0x40021000
 8000b0c:	fffff0ff 	.word	0xfffff0ff

08000b10 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, Prescaler);
 8000b18:	4b06      	ldr	r3, [pc, #24]	; (8000b34 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000b1a:	689b      	ldr	r3, [r3, #8]
 8000b1c:	4a06      	ldr	r2, [pc, #24]	; (8000b38 <LL_RCC_SetAPB1Prescaler+0x28>)
 8000b1e:	4013      	ands	r3, r2
 8000b20:	0019      	movs	r1, r3
 8000b22:	4b04      	ldr	r3, [pc, #16]	; (8000b34 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000b24:	687a      	ldr	r2, [r7, #4]
 8000b26:	430a      	orrs	r2, r1
 8000b28:	609a      	str	r2, [r3, #8]
}
 8000b2a:	46c0      	nop			; (mov r8, r8)
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	b002      	add	sp, #8
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	46c0      	nop			; (mov r8, r8)
 8000b34:	40021000 	.word	0x40021000
 8000b38:	ffff8fff 	.word	0xffff8fff

08000b3c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000b40:	4b04      	ldr	r3, [pc, #16]	; (8000b54 <LL_RCC_PLL_Enable+0x18>)
 8000b42:	681a      	ldr	r2, [r3, #0]
 8000b44:	4b03      	ldr	r3, [pc, #12]	; (8000b54 <LL_RCC_PLL_Enable+0x18>)
 8000b46:	2180      	movs	r1, #128	; 0x80
 8000b48:	0449      	lsls	r1, r1, #17
 8000b4a:	430a      	orrs	r2, r1
 8000b4c:	601a      	str	r2, [r3, #0]
}
 8000b4e:	46c0      	nop			; (mov r8, r8)
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	40021000 	.word	0x40021000

08000b58 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8000b5c:	4b07      	ldr	r3, [pc, #28]	; (8000b7c <LL_RCC_PLL_IsReady+0x24>)
 8000b5e:	681a      	ldr	r2, [r3, #0]
 8000b60:	2380      	movs	r3, #128	; 0x80
 8000b62:	049b      	lsls	r3, r3, #18
 8000b64:	401a      	ands	r2, r3
 8000b66:	2380      	movs	r3, #128	; 0x80
 8000b68:	049b      	lsls	r3, r3, #18
 8000b6a:	429a      	cmp	r2, r3
 8000b6c:	d101      	bne.n	8000b72 <LL_RCC_PLL_IsReady+0x1a>
 8000b6e:	2301      	movs	r3, #1
 8000b70:	e000      	b.n	8000b74 <LL_RCC_PLL_IsReady+0x1c>
 8000b72:	2300      	movs	r3, #0
}
 8000b74:	0018      	movs	r0, r3
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	46c0      	nop			; (mov r8, r8)
 8000b7c:	40021000 	.word	0x40021000

08000b80 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b084      	sub	sp, #16
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	60f8      	str	r0, [r7, #12]
 8000b88:	60b9      	str	r1, [r7, #8]
 8000b8a:	607a      	str	r2, [r7, #4]
 8000b8c:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 8000b8e:	4b0a      	ldr	r3, [pc, #40]	; (8000bb8 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8000b90:	68db      	ldr	r3, [r3, #12]
 8000b92:	4a0a      	ldr	r2, [pc, #40]	; (8000bbc <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 8000b94:	4013      	ands	r3, r2
 8000b96:	0019      	movs	r1, r3
 8000b98:	68fa      	ldr	r2, [r7, #12]
 8000b9a:	68bb      	ldr	r3, [r7, #8]
 8000b9c:	431a      	orrs	r2, r3
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	021b      	lsls	r3, r3, #8
 8000ba2:	431a      	orrs	r2, r3
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	431a      	orrs	r2, r3
 8000ba8:	4b03      	ldr	r3, [pc, #12]	; (8000bb8 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8000baa:	430a      	orrs	r2, r1
 8000bac:	60da      	str	r2, [r3, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 8000bae:	46c0      	nop			; (mov r8, r8)
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	b004      	add	sp, #16
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	46c0      	nop			; (mov r8, r8)
 8000bb8:	40021000 	.word	0x40021000
 8000bbc:	1fff808c 	.word	0x1fff808c

08000bc0 <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 8000bc4:	4b04      	ldr	r3, [pc, #16]	; (8000bd8 <LL_RCC_PLL_EnableDomain_SYS+0x18>)
 8000bc6:	68da      	ldr	r2, [r3, #12]
 8000bc8:	4b03      	ldr	r3, [pc, #12]	; (8000bd8 <LL_RCC_PLL_EnableDomain_SYS+0x18>)
 8000bca:	2180      	movs	r1, #128	; 0x80
 8000bcc:	0549      	lsls	r1, r1, #21
 8000bce:	430a      	orrs	r2, r1
 8000bd0:	60da      	str	r2, [r3, #12]
}
 8000bd2:	46c0      	nop			; (mov r8, r8)
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	40021000 	.word	0x40021000

08000bdc <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000be4:	4b06      	ldr	r3, [pc, #24]	; (8000c00 <LL_FLASH_SetLatency+0x24>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	2207      	movs	r2, #7
 8000bea:	4393      	bics	r3, r2
 8000bec:	0019      	movs	r1, r3
 8000bee:	4b04      	ldr	r3, [pc, #16]	; (8000c00 <LL_FLASH_SetLatency+0x24>)
 8000bf0:	687a      	ldr	r2, [r7, #4]
 8000bf2:	430a      	orrs	r2, r1
 8000bf4:	601a      	str	r2, [r3, #0]
}
 8000bf6:	46c0      	nop			; (mov r8, r8)
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	b002      	add	sp, #8
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	46c0      	nop			; (mov r8, r8)
 8000c00:	40022000 	.word	0x40022000

08000c04 <LL_SYSTICK_EnableIT>:
  * @brief  Enable SysTick exception request
  * @rmtoll STK_CTRL     TICKINT       LL_SYSTICK_EnableIT
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_EnableIT(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8000c08:	4b04      	ldr	r3, [pc, #16]	; (8000c1c <LL_SYSTICK_EnableIT+0x18>)
 8000c0a:	681a      	ldr	r2, [r3, #0]
 8000c0c:	4b03      	ldr	r3, [pc, #12]	; (8000c1c <LL_SYSTICK_EnableIT+0x18>)
 8000c0e:	2102      	movs	r1, #2
 8000c10:	430a      	orrs	r2, r1
 8000c12:	601a      	str	r2, [r3, #0]
}
 8000c14:	46c0      	nop			; (mov r8, r8)
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	46c0      	nop			; (mov r8, r8)
 8000c1c:	e000e010 	.word	0xe000e010

08000c20 <main>:

static uint8_t data_w[8] = {0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18};
static uint8_t data_r[8] = {0};

int main(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
	rcc_init();
 8000c24:	f000 f82c 	bl	8000c80 <rcc_init>
	i2c_init();
 8000c28:	f7ff fd8a 	bl	8000740 <i2c_init>

	i2c_reg_write_it(EEPROM_ADDR, 0x00, data_w, sizeof(data_w));
 8000c2c:	4a11      	ldr	r2, [pc, #68]	; (8000c74 <main+0x54>)
 8000c2e:	2308      	movs	r3, #8
 8000c30:	2100      	movs	r1, #0
 8000c32:	20a0      	movs	r0, #160	; 0xa0
 8000c34:	f7ff fe08 	bl	8000848 <i2c_reg_write_it>

	software_timer_task_init(&i2c_timer, I2C_TASK_TIME);
 8000c38:	23fa      	movs	r3, #250	; 0xfa
 8000c3a:	009a      	lsls	r2, r3, #2
 8000c3c:	4b0e      	ldr	r3, [pc, #56]	; (8000c78 <main+0x58>)
 8000c3e:	0011      	movs	r1, r2
 8000c40:	0018      	movs	r0, r3
 8000c42:	f000 f859 	bl	8000cf8 <software_timer_task_init>

	while (1)
	{
		  if((software_timer_get_ms_tick() - i2c_timer.ms_tick) >= i2c_timer.task_time)
 8000c46:	f000 f875 	bl	8000d34 <software_timer_get_ms_tick>
 8000c4a:	0002      	movs	r2, r0
 8000c4c:	4b0a      	ldr	r3, [pc, #40]	; (8000c78 <main+0x58>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	1ad2      	subs	r2, r2, r3
 8000c52:	4b09      	ldr	r3, [pc, #36]	; (8000c78 <main+0x58>)
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	429a      	cmp	r2, r3
 8000c58:	d3f5      	bcc.n	8000c46 <main+0x26>
		  {
			  	i2c_timer.ms_tick = software_timer_get_ms_tick();
 8000c5a:	f000 f86b 	bl	8000d34 <software_timer_get_ms_tick>
 8000c5e:	0002      	movs	r2, r0
 8000c60:	4b05      	ldr	r3, [pc, #20]	; (8000c78 <main+0x58>)
 8000c62:	601a      	str	r2, [r3, #0]
				i2c_reg_read_it(EEPROM_ADDR, 0x00, data_r, sizeof(data_r));
 8000c64:	4a05      	ldr	r2, [pc, #20]	; (8000c7c <main+0x5c>)
 8000c66:	2308      	movs	r3, #8
 8000c68:	2100      	movs	r1, #0
 8000c6a:	20a0      	movs	r0, #160	; 0xa0
 8000c6c:	f7ff fe3e 	bl	80008ec <i2c_reg_read_it>
		  if((software_timer_get_ms_tick() - i2c_timer.ms_tick) >= i2c_timer.task_time)
 8000c70:	e7e9      	b.n	8000c46 <main+0x26>
 8000c72:	46c0      	nop			; (mov r8, r8)
 8000c74:	20000004 	.word	0x20000004
 8000c78:	2000003c 	.word	0x2000003c
 8000c7c:	20000044 	.word	0x20000044

08000c80 <rcc_init>:
		  }
	}
}

void rcc_init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
	LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 8000c84:	2002      	movs	r0, #2
 8000c86:	f7ff ffa9 	bl	8000bdc <LL_FLASH_SetLatency>

	LL_RCC_HSI_Enable();
 8000c8a:	f7ff fee9 	bl	8000a60 <LL_RCC_HSI_Enable>
	while(LL_RCC_HSI_IsReady() != 1)
 8000c8e:	46c0      	nop			; (mov r8, r8)
 8000c90:	f7ff fef4 	bl	8000a7c <LL_RCC_HSI_IsReady>
 8000c94:	0003      	movs	r3, r0
 8000c96:	2b01      	cmp	r3, #1
 8000c98:	d1fa      	bne.n	8000c90 <rcc_init+0x10>
		;

	LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_1, 8, LL_RCC_PLLR_DIV_2);
 8000c9a:	2380      	movs	r3, #128	; 0x80
 8000c9c:	059b      	lsls	r3, r3, #22
 8000c9e:	2208      	movs	r2, #8
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	2002      	movs	r0, #2
 8000ca4:	f7ff ff6c 	bl	8000b80 <LL_RCC_PLL_ConfigDomain_SYS>

	LL_RCC_PLL_Enable();
 8000ca8:	f7ff ff48 	bl	8000b3c <LL_RCC_PLL_Enable>
	while(LL_RCC_PLL_IsReady() != 1)
 8000cac:	46c0      	nop			; (mov r8, r8)
 8000cae:	f7ff ff53 	bl	8000b58 <LL_RCC_PLL_IsReady>
 8000cb2:	0003      	movs	r3, r0
 8000cb4:	2b01      	cmp	r3, #1
 8000cb6:	d1fa      	bne.n	8000cae <rcc_init+0x2e>
		;

	LL_RCC_PLL_EnableDomain_SYS();
 8000cb8:	f7ff ff82 	bl	8000bc0 <LL_RCC_PLL_EnableDomain_SYS>

	LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000cbc:	2000      	movs	r0, #0
 8000cbe:	f7ff ff11 	bl	8000ae4 <LL_RCC_SetAHBPrescaler>
	LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8000cc2:	2000      	movs	r0, #0
 8000cc4:	f7ff ff24 	bl	8000b10 <LL_RCC_SetAPB1Prescaler>

	LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000cc8:	2002      	movs	r0, #2
 8000cca:	f7ff feeb 	bl	8000aa4 <LL_RCC_SetSysClkSource>
	while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000cce:	46c0      	nop			; (mov r8, r8)
 8000cd0:	f7ff fefc 	bl	8000acc <LL_RCC_GetSysClkSource>
 8000cd4:	0003      	movs	r3, r0
 8000cd6:	2b10      	cmp	r3, #16
 8000cd8:	d1fa      	bne.n	8000cd0 <rcc_init+0x50>
		;

	LL_SetSystemCoreClock(64000000);
 8000cda:	4b06      	ldr	r3, [pc, #24]	; (8000cf4 <rcc_init+0x74>)
 8000cdc:	0018      	movs	r0, r3
 8000cde:	f7ff fac7 	bl	8000270 <LL_SetSystemCoreClock>
	LL_Init1msTick(64000000);
 8000ce2:	4b04      	ldr	r3, [pc, #16]	; (8000cf4 <rcc_init+0x74>)
 8000ce4:	0018      	movs	r0, r3
 8000ce6:	f7ff fab3 	bl	8000250 <LL_Init1msTick>
	LL_SYSTICK_EnableIT();
 8000cea:	f7ff ff8b 	bl	8000c04 <LL_SYSTICK_EnableIT>
}
 8000cee:	46c0      	nop			; (mov r8, r8)
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	03d09000 	.word	0x03d09000

08000cf8 <software_timer_task_init>:

static uint32_t ms_tick = 0;
software_timer_t timer = {0};

void software_timer_task_init(software_timer_t *timer, uint32_t time)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
 8000d00:	6039      	str	r1, [r7, #0]
	timer->ms_tick = software_timer_get_ms_tick();
 8000d02:	f000 f817 	bl	8000d34 <software_timer_get_ms_tick>
 8000d06:	0002      	movs	r2, r0
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	601a      	str	r2, [r3, #0]
	timer->task_time = time;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	683a      	ldr	r2, [r7, #0]
 8000d10:	605a      	str	r2, [r3, #4]
}
 8000d12:	46c0      	nop			; (mov r8, r8)
 8000d14:	46bd      	mov	sp, r7
 8000d16:	b002      	add	sp, #8
 8000d18:	bd80      	pop	{r7, pc}
	...

08000d1c <software_timer_inc_ms_tick>:

void software_timer_inc_ms_tick(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
	ms_tick++;
 8000d20:	4b03      	ldr	r3, [pc, #12]	; (8000d30 <software_timer_inc_ms_tick+0x14>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	1c5a      	adds	r2, r3, #1
 8000d26:	4b02      	ldr	r3, [pc, #8]	; (8000d30 <software_timer_inc_ms_tick+0x14>)
 8000d28:	601a      	str	r2, [r3, #0]
}
 8000d2a:	46c0      	nop			; (mov r8, r8)
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	2000004c 	.word	0x2000004c

08000d34 <software_timer_get_ms_tick>:

uint32_t software_timer_get_ms_tick(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
	return ms_tick;
 8000d38:	4b02      	ldr	r3, [pc, #8]	; (8000d44 <software_timer_get_ms_tick+0x10>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
}
 8000d3c:	0018      	movs	r0, r3
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	46c0      	nop			; (mov r8, r8)
 8000d44:	2000004c 	.word	0x2000004c

08000d48 <LL_I2C_IsEnabledIT_TX>:
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->CR1, I2C_CR1_TXIE) == (I2C_CR1_TXIE)) ? 1UL : 0UL);
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	2202      	movs	r2, #2
 8000d56:	4013      	ands	r3, r2
 8000d58:	2b02      	cmp	r3, #2
 8000d5a:	d101      	bne.n	8000d60 <LL_I2C_IsEnabledIT_TX+0x18>
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	e000      	b.n	8000d62 <LL_I2C_IsEnabledIT_TX+0x1a>
 8000d60:	2300      	movs	r3, #0
}
 8000d62:	0018      	movs	r0, r3
 8000d64:	46bd      	mov	sp, r7
 8000d66:	b002      	add	sp, #8
 8000d68:	bd80      	pop	{r7, pc}

08000d6a <LL_I2C_IsEnabledIT_RX>:
{
 8000d6a:	b580      	push	{r7, lr}
 8000d6c:	b082      	sub	sp, #8
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->CR1, I2C_CR1_RXIE) == (I2C_CR1_RXIE)) ? 1UL : 0UL);
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	2204      	movs	r2, #4
 8000d78:	4013      	ands	r3, r2
 8000d7a:	2b04      	cmp	r3, #4
 8000d7c:	d101      	bne.n	8000d82 <LL_I2C_IsEnabledIT_RX+0x18>
 8000d7e:	2301      	movs	r3, #1
 8000d80:	e000      	b.n	8000d84 <LL_I2C_IsEnabledIT_RX+0x1a>
 8000d82:	2300      	movs	r3, #0
}
 8000d84:	0018      	movs	r0, r3
 8000d86:	46bd      	mov	sp, r7
 8000d88:	b002      	add	sp, #8
 8000d8a:	bd80      	pop	{r7, pc}

08000d8c <LL_I2C_DisableIT_STOP>:
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_STOPIE);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	2220      	movs	r2, #32
 8000d9a:	4393      	bics	r3, r2
 8000d9c:	001a      	movs	r2, r3
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	601a      	str	r2, [r3, #0]
}
 8000da2:	46c0      	nop			; (mov r8, r8)
 8000da4:	46bd      	mov	sp, r7
 8000da6:	b002      	add	sp, #8
 8000da8:	bd80      	pop	{r7, pc}

08000daa <LL_I2C_IsEnabledIT_STOP>:
{
 8000daa:	b580      	push	{r7, lr}
 8000dac:	b082      	sub	sp, #8
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->CR1, I2C_CR1_STOPIE) == (I2C_CR1_STOPIE)) ? 1UL : 0UL);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	2220      	movs	r2, #32
 8000db8:	4013      	ands	r3, r2
 8000dba:	2b20      	cmp	r3, #32
 8000dbc:	d101      	bne.n	8000dc2 <LL_I2C_IsEnabledIT_STOP+0x18>
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	e000      	b.n	8000dc4 <LL_I2C_IsEnabledIT_STOP+0x1a>
 8000dc2:	2300      	movs	r3, #0
}
 8000dc4:	0018      	movs	r0, r3
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	b002      	add	sp, #8
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <LL_I2C_IsActiveFlag_TXIS>:
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TXIS) == (I2C_ISR_TXIS)) ? 1UL : 0UL);
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	699b      	ldr	r3, [r3, #24]
 8000dd8:	2202      	movs	r2, #2
 8000dda:	4013      	ands	r3, r2
 8000ddc:	2b02      	cmp	r3, #2
 8000dde:	d101      	bne.n	8000de4 <LL_I2C_IsActiveFlag_TXIS+0x18>
 8000de0:	2301      	movs	r3, #1
 8000de2:	e000      	b.n	8000de6 <LL_I2C_IsActiveFlag_TXIS+0x1a>
 8000de4:	2300      	movs	r3, #0
}
 8000de6:	0018      	movs	r0, r3
 8000de8:	46bd      	mov	sp, r7
 8000dea:	b002      	add	sp, #8
 8000dec:	bd80      	pop	{r7, pc}

08000dee <LL_I2C_IsActiveFlag_RXNE>:
{
 8000dee:	b580      	push	{r7, lr}
 8000df0:	b082      	sub	sp, #8
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE)) ? 1UL : 0UL);
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	699b      	ldr	r3, [r3, #24]
 8000dfa:	2204      	movs	r2, #4
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	2b04      	cmp	r3, #4
 8000e00:	d101      	bne.n	8000e06 <LL_I2C_IsActiveFlag_RXNE+0x18>
 8000e02:	2301      	movs	r3, #1
 8000e04:	e000      	b.n	8000e08 <LL_I2C_IsActiveFlag_RXNE+0x1a>
 8000e06:	2300      	movs	r3, #0
}
 8000e08:	0018      	movs	r0, r3
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	b002      	add	sp, #8
 8000e0e:	bd80      	pop	{r7, pc}

08000e10 <LL_I2C_IsActiveFlag_STOP>:
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_STOPF) == (I2C_ISR_STOPF)) ? 1UL : 0UL);
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	699b      	ldr	r3, [r3, #24]
 8000e1c:	2220      	movs	r2, #32
 8000e1e:	4013      	ands	r3, r2
 8000e20:	2b20      	cmp	r3, #32
 8000e22:	d101      	bne.n	8000e28 <LL_I2C_IsActiveFlag_STOP+0x18>
 8000e24:	2301      	movs	r3, #1
 8000e26:	e000      	b.n	8000e2a <LL_I2C_IsActiveFlag_STOP+0x1a>
 8000e28:	2300      	movs	r3, #0
}
 8000e2a:	0018      	movs	r0, r3
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	b002      	add	sp, #8
 8000e30:	bd80      	pop	{r7, pc}

08000e32 <LL_I2C_ClearFlag_STOP>:
{
 8000e32:	b580      	push	{r7, lr}
 8000e34:	b082      	sub	sp, #8
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->ICR, I2C_ICR_STOPCF);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	69db      	ldr	r3, [r3, #28]
 8000e3e:	2220      	movs	r2, #32
 8000e40:	431a      	orrs	r2, r3
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	61da      	str	r2, [r3, #28]
}
 8000e46:	46c0      	nop			; (mov r8, r8)
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	b002      	add	sp, #8
 8000e4c:	bd80      	pop	{r7, pc}

08000e4e <SysTick_Handler>:
 */

#include "main.h"

void SysTick_Handler(void)
{
 8000e4e:	b580      	push	{r7, lr}
 8000e50:	af00      	add	r7, sp, #0
	software_timer_inc_ms_tick();
 8000e52:	f7ff ff63 	bl	8000d1c <software_timer_inc_ms_tick>
}
 8000e56:	46c0      	nop			; (mov r8, r8)
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}

08000e5c <I2C1_IRQHandler>:

void I2C1_IRQHandler(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
	if(LL_I2C_IsActiveFlag_TXIS(I2C1) && LL_I2C_IsEnabledIT_TX(I2C1))
 8000e60:	4b1a      	ldr	r3, [pc, #104]	; (8000ecc <I2C1_IRQHandler+0x70>)
 8000e62:	0018      	movs	r0, r3
 8000e64:	f7ff ffb2 	bl	8000dcc <LL_I2C_IsActiveFlag_TXIS>
 8000e68:	1e03      	subs	r3, r0, #0
 8000e6a:	d008      	beq.n	8000e7e <I2C1_IRQHandler+0x22>
 8000e6c:	4b17      	ldr	r3, [pc, #92]	; (8000ecc <I2C1_IRQHandler+0x70>)
 8000e6e:	0018      	movs	r0, r3
 8000e70:	f7ff ff6a 	bl	8000d48 <LL_I2C_IsEnabledIT_TX>
 8000e74:	1e03      	subs	r3, r0, #0
 8000e76:	d002      	beq.n	8000e7e <I2C1_IRQHandler+0x22>
	{
		i2c_it_transmit_callback();
 8000e78:	f7ff fd9e 	bl	80009b8 <i2c_it_transmit_callback>
 8000e7c:	e023      	b.n	8000ec6 <I2C1_IRQHandler+0x6a>
	}
	else if(LL_I2C_IsActiveFlag_RXNE(I2C1) && LL_I2C_IsEnabledIT_RX(I2C1))
 8000e7e:	4b13      	ldr	r3, [pc, #76]	; (8000ecc <I2C1_IRQHandler+0x70>)
 8000e80:	0018      	movs	r0, r3
 8000e82:	f7ff ffb4 	bl	8000dee <LL_I2C_IsActiveFlag_RXNE>
 8000e86:	1e03      	subs	r3, r0, #0
 8000e88:	d008      	beq.n	8000e9c <I2C1_IRQHandler+0x40>
 8000e8a:	4b10      	ldr	r3, [pc, #64]	; (8000ecc <I2C1_IRQHandler+0x70>)
 8000e8c:	0018      	movs	r0, r3
 8000e8e:	f7ff ff6c 	bl	8000d6a <LL_I2C_IsEnabledIT_RX>
 8000e92:	1e03      	subs	r3, r0, #0
 8000e94:	d002      	beq.n	8000e9c <I2C1_IRQHandler+0x40>
	{
		i2c_it_receive_callback();
 8000e96:	f7ff fdb9 	bl	8000a0c <i2c_it_receive_callback>
 8000e9a:	e014      	b.n	8000ec6 <I2C1_IRQHandler+0x6a>
	}
	else if(LL_I2C_IsActiveFlag_STOP(I2C1) && LL_I2C_IsEnabledIT_STOP(I2C1))
 8000e9c:	4b0b      	ldr	r3, [pc, #44]	; (8000ecc <I2C1_IRQHandler+0x70>)
 8000e9e:	0018      	movs	r0, r3
 8000ea0:	f7ff ffb6 	bl	8000e10 <LL_I2C_IsActiveFlag_STOP>
 8000ea4:	1e03      	subs	r3, r0, #0
 8000ea6:	d00e      	beq.n	8000ec6 <I2C1_IRQHandler+0x6a>
 8000ea8:	4b08      	ldr	r3, [pc, #32]	; (8000ecc <I2C1_IRQHandler+0x70>)
 8000eaa:	0018      	movs	r0, r3
 8000eac:	f7ff ff7d 	bl	8000daa <LL_I2C_IsEnabledIT_STOP>
 8000eb0:	1e03      	subs	r3, r0, #0
 8000eb2:	d008      	beq.n	8000ec6 <I2C1_IRQHandler+0x6a>
	{
		LL_I2C_ClearFlag_STOP(I2C1);
 8000eb4:	4b05      	ldr	r3, [pc, #20]	; (8000ecc <I2C1_IRQHandler+0x70>)
 8000eb6:	0018      	movs	r0, r3
 8000eb8:	f7ff ffbb 	bl	8000e32 <LL_I2C_ClearFlag_STOP>
		LL_I2C_DisableIT_STOP(I2C1);
 8000ebc:	4b03      	ldr	r3, [pc, #12]	; (8000ecc <I2C1_IRQHandler+0x70>)
 8000ebe:	0018      	movs	r0, r3
 8000ec0:	f7ff ff64 	bl	8000d8c <LL_I2C_DisableIT_STOP>
	}
}
 8000ec4:	e7ff      	b.n	8000ec6 <I2C1_IRQHandler+0x6a>
 8000ec6:	46c0      	nop			; (mov r8, r8)
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	40005400 	.word	0x40005400

08000ed0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ed4:	46c0      	nop			; (mov r8, r8)
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
	...

08000edc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000edc:	480d      	ldr	r0, [pc, #52]	; (8000f14 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ede:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ee0:	f7ff fff6 	bl	8000ed0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ee4:	480c      	ldr	r0, [pc, #48]	; (8000f18 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ee6:	490d      	ldr	r1, [pc, #52]	; (8000f1c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ee8:	4a0d      	ldr	r2, [pc, #52]	; (8000f20 <LoopForever+0xe>)
  movs r3, #0
 8000eea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000eec:	e002      	b.n	8000ef4 <LoopCopyDataInit>

08000eee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ef0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ef2:	3304      	adds	r3, #4

08000ef4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ef4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ef6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ef8:	d3f9      	bcc.n	8000eee <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000efa:	4a0a      	ldr	r2, [pc, #40]	; (8000f24 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000efc:	4c0a      	ldr	r4, [pc, #40]	; (8000f28 <LoopForever+0x16>)
  movs r3, #0
 8000efe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f00:	e001      	b.n	8000f06 <LoopFillZerobss>

08000f02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f04:	3204      	adds	r2, #4

08000f06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f08:	d3fb      	bcc.n	8000f02 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000f0a:	f000 f811 	bl	8000f30 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f0e:	f7ff fe87 	bl	8000c20 <main>

08000f12 <LoopForever>:

LoopForever:
    b LoopForever
 8000f12:	e7fe      	b.n	8000f12 <LoopForever>
  ldr   r0, =_estack
 8000f14:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000f18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f1c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000f20:	08000f98 	.word	0x08000f98
  ldr r2, =_sbss
 8000f24:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000f28:	20000050 	.word	0x20000050

08000f2c <ADC_COMP_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f2c:	e7fe      	b.n	8000f2c <ADC_COMP_IRQHandler>
	...

08000f30 <__libc_init_array>:
 8000f30:	b570      	push	{r4, r5, r6, lr}
 8000f32:	2600      	movs	r6, #0
 8000f34:	4d0c      	ldr	r5, [pc, #48]	; (8000f68 <__libc_init_array+0x38>)
 8000f36:	4c0d      	ldr	r4, [pc, #52]	; (8000f6c <__libc_init_array+0x3c>)
 8000f38:	1b64      	subs	r4, r4, r5
 8000f3a:	10a4      	asrs	r4, r4, #2
 8000f3c:	42a6      	cmp	r6, r4
 8000f3e:	d109      	bne.n	8000f54 <__libc_init_array+0x24>
 8000f40:	2600      	movs	r6, #0
 8000f42:	f000 f819 	bl	8000f78 <_init>
 8000f46:	4d0a      	ldr	r5, [pc, #40]	; (8000f70 <__libc_init_array+0x40>)
 8000f48:	4c0a      	ldr	r4, [pc, #40]	; (8000f74 <__libc_init_array+0x44>)
 8000f4a:	1b64      	subs	r4, r4, r5
 8000f4c:	10a4      	asrs	r4, r4, #2
 8000f4e:	42a6      	cmp	r6, r4
 8000f50:	d105      	bne.n	8000f5e <__libc_init_array+0x2e>
 8000f52:	bd70      	pop	{r4, r5, r6, pc}
 8000f54:	00b3      	lsls	r3, r6, #2
 8000f56:	58eb      	ldr	r3, [r5, r3]
 8000f58:	4798      	blx	r3
 8000f5a:	3601      	adds	r6, #1
 8000f5c:	e7ee      	b.n	8000f3c <__libc_init_array+0xc>
 8000f5e:	00b3      	lsls	r3, r6, #2
 8000f60:	58eb      	ldr	r3, [r5, r3]
 8000f62:	4798      	blx	r3
 8000f64:	3601      	adds	r6, #1
 8000f66:	e7f2      	b.n	8000f4e <__libc_init_array+0x1e>
 8000f68:	08000f90 	.word	0x08000f90
 8000f6c:	08000f90 	.word	0x08000f90
 8000f70:	08000f90 	.word	0x08000f90
 8000f74:	08000f94 	.word	0x08000f94

08000f78 <_init>:
 8000f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f7a:	46c0      	nop			; (mov r8, r8)
 8000f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f7e:	bc08      	pop	{r3}
 8000f80:	469e      	mov	lr, r3
 8000f82:	4770      	bx	lr

08000f84 <_fini>:
 8000f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f86:	46c0      	nop			; (mov r8, r8)
 8000f88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f8a:	bc08      	pop	{r3}
 8000f8c:	469e      	mov	lr, r3
 8000f8e:	4770      	bx	lr
