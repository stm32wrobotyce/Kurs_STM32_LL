
08_03_Kurs_STM32_LL_SPI_Master_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001b40  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08001bfc  08001bfc  00011bfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001c08  08001c08  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  08001c08  08001c08  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001c08  08001c08  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001c08  08001c08  00011c08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001c0c  08001c0c  00011c0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  08001c10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000334  20000008  08001c18  00020008  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000033c  08001c18  0002033c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003482  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000b89  00000000  00000000  000234b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000510  00000000  00000000  00024040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000498  00000000  00000000  00024550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001f3f  00000000  00000000  000249e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003e4b  00000000  00000000  00026927  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00060ac4  00000000  00000000  0002a772  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0008b236  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001148  00000000  00000000  0008b288  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000008 	.word	0x20000008
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08001be4 	.word	0x08001be4

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	2000000c 	.word	0x2000000c
 8000100:	08001be4 	.word	0x08001be4

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
 8000222:	6078      	str	r0, [r7, #4]
 8000224:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8000226:	6839      	ldr	r1, [r7, #0]
 8000228:	6878      	ldr	r0, [r7, #4]
 800022a:	f7ff ff6b 	bl	8000104 <__udivsi3>
 800022e:	0003      	movs	r3, r0
 8000230:	001a      	movs	r2, r3
 8000232:	4b06      	ldr	r3, [pc, #24]	; (800024c <LL_InitTick+0x30>)
 8000234:	3a01      	subs	r2, #1
 8000236:	605a      	str	r2, [r3, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8000238:	4b04      	ldr	r3, [pc, #16]	; (800024c <LL_InitTick+0x30>)
 800023a:	2200      	movs	r2, #0
 800023c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800023e:	4b03      	ldr	r3, [pc, #12]	; (800024c <LL_InitTick+0x30>)
 8000240:	2205      	movs	r2, #5
 8000242:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8000244:	46c0      	nop			; (mov r8, r8)
 8000246:	46bd      	mov	sp, r7
 8000248:	b002      	add	sp, #8
 800024a:	bd80      	pop	{r7, pc}
 800024c:	e000e010 	.word	0xe000e010

08000250 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b082      	sub	sp, #8
 8000254:	af00      	add	r7, sp, #0
 8000256:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8000258:	23fa      	movs	r3, #250	; 0xfa
 800025a:	009a      	lsls	r2, r3, #2
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	0011      	movs	r1, r2
 8000260:	0018      	movs	r0, r3
 8000262:	f7ff ffdb 	bl	800021c <LL_InitTick>
}
 8000266:	46c0      	nop			; (mov r8, r8)
 8000268:	46bd      	mov	sp, r7
 800026a:	b002      	add	sp, #8
 800026c:	bd80      	pop	{r7, pc}
	...

08000270 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8000278:	4b03      	ldr	r3, [pc, #12]	; (8000288 <LL_SetSystemCoreClock+0x18>)
 800027a:	687a      	ldr	r2, [r7, #4]
 800027c:	601a      	str	r2, [r3, #0]
}
 800027e:	46c0      	nop			; (mov r8, r8)
 8000280:	46bd      	mov	sp, r7
 8000282:	b002      	add	sp, #8
 8000284:	bd80      	pop	{r7, pc}
 8000286:	46c0      	nop			; (mov r8, r8)
 8000288:	20000004 	.word	0x20000004

0800028c <W25Q64_Init>:
#define	WIBOND_ID					0xEF
#define SPI_DEVICE_ID				0x40
#define CAPACITY_64_MBIT			0x17

uint8_t W25Q64_Init()
{
 800028c:	b580      	push	{r7, lr}
 800028e:	b082      	sub	sp, #8
 8000290:	af00      	add	r7, sp, #0
	struct memory_info w25q64_memory;

	W25Q64_ResetFlash();
 8000292:	f000 f817 	bl	80002c4 <W25Q64_ResetFlash>
	W25Q64_get_JEDEC_ID(&w25q64_memory);
 8000296:	1d3b      	adds	r3, r7, #4
 8000298:	0018      	movs	r0, r3
 800029a:	f000 f905 	bl	80004a8 <W25Q64_get_JEDEC_ID>

	if(WIBOND_ID == w25q64_memory.manufacturer_ID && SPI_DEVICE_ID == w25q64_memory.memory_type && CAPACITY_64_MBIT == w25q64_memory.capacity)
 800029e:	1d3b      	adds	r3, r7, #4
 80002a0:	781b      	ldrb	r3, [r3, #0]
 80002a2:	2bef      	cmp	r3, #239	; 0xef
 80002a4:	d109      	bne.n	80002ba <W25Q64_Init+0x2e>
 80002a6:	1d3b      	adds	r3, r7, #4
 80002a8:	785b      	ldrb	r3, [r3, #1]
 80002aa:	2b40      	cmp	r3, #64	; 0x40
 80002ac:	d105      	bne.n	80002ba <W25Q64_Init+0x2e>
 80002ae:	1d3b      	adds	r3, r7, #4
 80002b0:	789b      	ldrb	r3, [r3, #2]
 80002b2:	2b17      	cmp	r3, #23
 80002b4:	d101      	bne.n	80002ba <W25Q64_Init+0x2e>
		return OK;
 80002b6:	2300      	movs	r3, #0
 80002b8:	e000      	b.n	80002bc <W25Q64_Init+0x30>
	else
		return ERROR;
 80002ba:	2301      	movs	r3, #1
}
 80002bc:	0018      	movs	r0, r3
 80002be:	46bd      	mov	sp, r7
 80002c0:	b002      	add	sp, #8
 80002c2:	bd80      	pop	{r7, pc}

080002c4 <W25Q64_ResetFlash>:

void W25Q64_ResetFlash(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b082      	sub	sp, #8
 80002c8:	af00      	add	r7, sp, #0
	uint8_t data_to_send[] = { ENABLE_RESET, RESET };
 80002ca:	1d3b      	adds	r3, r7, #4
 80002cc:	4a07      	ldr	r2, [pc, #28]	; (80002ec <W25Q64_ResetFlash+0x28>)
 80002ce:	801a      	strh	r2, [r3, #0]

	W25Q64_Set_ChipSelect_Low();
 80002d0:	f000 f998 	bl	8000604 <W25Q64_Set_ChipSelect_Low>
	W25Q64_SPI_Transmit_Data(data_to_send, 2);
 80002d4:	1d3b      	adds	r3, r7, #4
 80002d6:	2102      	movs	r1, #2
 80002d8:	0018      	movs	r0, r3
 80002da:	f000 f933 	bl	8000544 <W25Q64_SPI_Transmit_Data>
	W25Q64_Set_ChipSelect_High();
 80002de:	f000 f998 	bl	8000612 <W25Q64_Set_ChipSelect_High>
}
 80002e2:	46c0      	nop			; (mov r8, r8)
 80002e4:	46bd      	mov	sp, r7
 80002e6:	b002      	add	sp, #8
 80002e8:	bd80      	pop	{r7, pc}
 80002ea:	46c0      	nop			; (mov r8, r8)
 80002ec:	ffff9966 	.word	0xffff9966

080002f0 <W25Q64_WriteEnable>:

void W25Q64_WriteEnable(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b082      	sub	sp, #8
 80002f4:	af00      	add	r7, sp, #0
	uint8_t data_to_send =  WRITE_ENABLE;
 80002f6:	1dfb      	adds	r3, r7, #7
 80002f8:	2206      	movs	r2, #6
 80002fa:	701a      	strb	r2, [r3, #0]

	W25Q64_Set_ChipSelect_Low();
 80002fc:	f000 f982 	bl	8000604 <W25Q64_Set_ChipSelect_Low>
	W25Q64_SPI_Transmit_Data(&data_to_send, 1);
 8000300:	1dfb      	adds	r3, r7, #7
 8000302:	2101      	movs	r1, #1
 8000304:	0018      	movs	r0, r3
 8000306:	f000 f91d 	bl	8000544 <W25Q64_SPI_Transmit_Data>
	W25Q64_Set_ChipSelect_High();
 800030a:	f000 f982 	bl	8000612 <W25Q64_Set_ChipSelect_High>
}
 800030e:	46c0      	nop			; (mov r8, r8)
 8000310:	46bd      	mov	sp, r7
 8000312:	b002      	add	sp, #8
 8000314:	bd80      	pop	{r7, pc}

08000316 <W25Q64_ReadStatusRegister1>:
	W25Q64_SPI_Transmit_Data(&data_to_send, 1);
	W25Q64_Set_ChipSelect_High();
}

uint8_t W25Q64_ReadStatusRegister1(void)
{
 8000316:	b580      	push	{r7, lr}
 8000318:	b082      	sub	sp, #8
 800031a:	af00      	add	r7, sp, #0
	uint8_t data_to_send = READ_STATUS_REG1;
 800031c:	1dfb      	adds	r3, r7, #7
 800031e:	2205      	movs	r2, #5
 8000320:	701a      	strb	r2, [r3, #0]
	uint8_t receive_data = 0;
 8000322:	1dbb      	adds	r3, r7, #6
 8000324:	2200      	movs	r2, #0
 8000326:	701a      	strb	r2, [r3, #0]

	W25Q64_Set_ChipSelect_Low();
 8000328:	f000 f96c 	bl	8000604 <W25Q64_Set_ChipSelect_Low>
	W25Q64_SPI_Transmit_Data(&data_to_send, 1);
 800032c:	1dfb      	adds	r3, r7, #7
 800032e:	2101      	movs	r1, #1
 8000330:	0018      	movs	r0, r3
 8000332:	f000 f907 	bl	8000544 <W25Q64_SPI_Transmit_Data>
	W25Q64_SPI_Receive_Data(&receive_data, 1);
 8000336:	1dbb      	adds	r3, r7, #6
 8000338:	2101      	movs	r1, #1
 800033a:	0018      	movs	r0, r3
 800033c:	f000 f91a 	bl	8000574 <W25Q64_SPI_Receive_Data>
	W25Q64_Set_ChipSelect_High();
 8000340:	f000 f967 	bl	8000612 <W25Q64_Set_ChipSelect_High>

	return receive_data;
 8000344:	1dbb      	adds	r3, r7, #6
 8000346:	781b      	ldrb	r3, [r3, #0]
}
 8000348:	0018      	movs	r0, r3
 800034a:	46bd      	mov	sp, r7
 800034c:	b002      	add	sp, #8
 800034e:	bd80      	pop	{r7, pc}

08000350 <W25Q64_ReadDataBytes>:
	W25Q64_SPI_Transmit_Data(data_to_send, 2);
	W25Q64_Set_ChipSelect_High();
}

uint8_t W25Q64_ReadDataBytes(uint32_t adress, uint8_t *data, uint16_t size)
{
 8000350:	b5b0      	push	{r4, r5, r7, lr}
 8000352:	b086      	sub	sp, #24
 8000354:	af00      	add	r7, sp, #0
 8000356:	60f8      	str	r0, [r7, #12]
 8000358:	60b9      	str	r1, [r7, #8]
 800035a:	1dbb      	adds	r3, r7, #6
 800035c:	801a      	strh	r2, [r3, #0]
	uint8_t data_to_send[] = { 0, 0, 0, 0 };
 800035e:	2410      	movs	r4, #16
 8000360:	193b      	adds	r3, r7, r4
 8000362:	2200      	movs	r2, #0
 8000364:	601a      	str	r2, [r3, #0]
	uint8_t status;

	W25Q64_WaitForWriteInProgressClear();
 8000366:	f000 f8df 	bl	8000528 <W25Q64_WaitForWriteInProgressClear>

	data_to_send[0] = READ_DATA;
 800036a:	0021      	movs	r1, r4
 800036c:	187b      	adds	r3, r7, r1
 800036e:	2203      	movs	r2, #3
 8000370:	701a      	strb	r2, [r3, #0]
	data_to_send[1] = (adress >> 16) & 0xff;
 8000372:	68fb      	ldr	r3, [r7, #12]
 8000374:	0c1b      	lsrs	r3, r3, #16
 8000376:	b2da      	uxtb	r2, r3
 8000378:	187b      	adds	r3, r7, r1
 800037a:	705a      	strb	r2, [r3, #1]
	data_to_send[2] = (adress >> 8) & 0xff;
 800037c:	68fb      	ldr	r3, [r7, #12]
 800037e:	0a1b      	lsrs	r3, r3, #8
 8000380:	b2da      	uxtb	r2, r3
 8000382:	187b      	adds	r3, r7, r1
 8000384:	709a      	strb	r2, [r3, #2]
	data_to_send[3] = adress & 0xff;
 8000386:	68fb      	ldr	r3, [r7, #12]
 8000388:	b2da      	uxtb	r2, r3
 800038a:	000c      	movs	r4, r1
 800038c:	187b      	adds	r3, r7, r1
 800038e:	70da      	strb	r2, [r3, #3]

	W25Q64_Set_ChipSelect_Low();
 8000390:	f000 f938 	bl	8000604 <W25Q64_Set_ChipSelect_Low>
	W25Q64_SPI_Transmit_Data(data_to_send, 4);
 8000394:	193b      	adds	r3, r7, r4
 8000396:	2104      	movs	r1, #4
 8000398:	0018      	movs	r0, r3
 800039a:	f000 f8d3 	bl	8000544 <W25Q64_SPI_Transmit_Data>
	status = W25Q64_SPI_Receive_Data_DMA(data, size);
 800039e:	2517      	movs	r5, #23
 80003a0:	197c      	adds	r4, r7, r5
 80003a2:	1dbb      	adds	r3, r7, #6
 80003a4:	881a      	ldrh	r2, [r3, #0]
 80003a6:	68bb      	ldr	r3, [r7, #8]
 80003a8:	0011      	movs	r1, r2
 80003aa:	0018      	movs	r0, r3
 80003ac:	f000 f912 	bl	80005d4 <W25Q64_SPI_Receive_Data_DMA>
 80003b0:	0003      	movs	r3, r0
 80003b2:	7023      	strb	r3, [r4, #0]
	//W25Q64_Set_ChipSelect_High();

	return status;
 80003b4:	197b      	adds	r3, r7, r5
 80003b6:	781b      	ldrb	r3, [r3, #0]
}
 80003b8:	0018      	movs	r0, r3
 80003ba:	46bd      	mov	sp, r7
 80003bc:	b006      	add	sp, #24
 80003be:	bdb0      	pop	{r4, r5, r7, pc}

080003c0 <W25Q64_PageProgram>:

uint8_t W25Q64_PageProgram(uint32_t page_adress, uint8_t *data, uint16_t size)
{
 80003c0:	b5b0      	push	{r4, r5, r7, lr}
 80003c2:	b086      	sub	sp, #24
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	60f8      	str	r0, [r7, #12]
 80003c8:	60b9      	str	r1, [r7, #8]
 80003ca:	1dbb      	adds	r3, r7, #6
 80003cc:	801a      	strh	r2, [r3, #0]
	uint8_t data_to_send[] = { 0, 0, 0, 0 };
 80003ce:	2410      	movs	r4, #16
 80003d0:	193b      	adds	r3, r7, r4
 80003d2:	2200      	movs	r2, #0
 80003d4:	601a      	str	r2, [r3, #0]
	uint8_t status;

	W25Q64_WaitForWriteInProgressClear();
 80003d6:	f000 f8a7 	bl	8000528 <W25Q64_WaitForWriteInProgressClear>
	W25Q64_WriteEnable_and_WaitForWriteEnableLatch();
 80003da:	f000 f895 	bl	8000508 <W25Q64_WriteEnable_and_WaitForWriteEnableLatch>

	data_to_send[0] = PAGE_PROGRAM;
 80003de:	0021      	movs	r1, r4
 80003e0:	187b      	adds	r3, r7, r1
 80003e2:	2202      	movs	r2, #2
 80003e4:	701a      	strb	r2, [r3, #0]
	data_to_send[1] = (page_adress >> 16) & 0xff;
 80003e6:	68fb      	ldr	r3, [r7, #12]
 80003e8:	0c1b      	lsrs	r3, r3, #16
 80003ea:	b2da      	uxtb	r2, r3
 80003ec:	187b      	adds	r3, r7, r1
 80003ee:	705a      	strb	r2, [r3, #1]
	data_to_send[2] = (page_adress >> 8) & 0xff;
 80003f0:	68fb      	ldr	r3, [r7, #12]
 80003f2:	0a1b      	lsrs	r3, r3, #8
 80003f4:	b2da      	uxtb	r2, r3
 80003f6:	187b      	adds	r3, r7, r1
 80003f8:	709a      	strb	r2, [r3, #2]
	data_to_send[3] = page_adress & 0xff;
 80003fa:	68fb      	ldr	r3, [r7, #12]
 80003fc:	b2da      	uxtb	r2, r3
 80003fe:	000c      	movs	r4, r1
 8000400:	187b      	adds	r3, r7, r1
 8000402:	70da      	strb	r2, [r3, #3]

	W25Q64_Set_ChipSelect_Low();
 8000404:	f000 f8fe 	bl	8000604 <W25Q64_Set_ChipSelect_Low>
	W25Q64_SPI_Transmit_Data(data_to_send, 4);
 8000408:	193b      	adds	r3, r7, r4
 800040a:	2104      	movs	r1, #4
 800040c:	0018      	movs	r0, r3
 800040e:	f000 f899 	bl	8000544 <W25Q64_SPI_Transmit_Data>
	status = W25Q64_SPI_Transmit_Data_DMA(data, size);
 8000412:	2517      	movs	r5, #23
 8000414:	197c      	adds	r4, r7, r5
 8000416:	1dbb      	adds	r3, r7, #6
 8000418:	881a      	ldrh	r2, [r3, #0]
 800041a:	68bb      	ldr	r3, [r7, #8]
 800041c:	0011      	movs	r1, r2
 800041e:	0018      	movs	r0, r3
 8000420:	f000 f8c0 	bl	80005a4 <W25Q64_SPI_Transmit_Data_DMA>
 8000424:	0003      	movs	r3, r0
 8000426:	7023      	strb	r3, [r4, #0]
	//W25Q64_Set_ChipSelect_High();

	return status;
 8000428:	197b      	adds	r3, r7, r5
 800042a:	781b      	ldrb	r3, [r3, #0]
}
 800042c:	0018      	movs	r0, r3
 800042e:	46bd      	mov	sp, r7
 8000430:	b006      	add	sp, #24
 8000432:	bdb0      	pop	{r4, r5, r7, pc}

08000434 <W25Q64_SectorErase>:

uint8_t W25Q64_SectorErase(uint16_t sector_number)
{
 8000434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000436:	b087      	sub	sp, #28
 8000438:	af00      	add	r7, sp, #0
 800043a:	0002      	movs	r2, r0
 800043c:	1dbb      	adds	r3, r7, #6
 800043e:	801a      	strh	r2, [r3, #0]
	uint32_t adress;
	adress = sector_number * SECTOR_SIZE;
 8000440:	1dbb      	adds	r3, r7, #6
 8000442:	881b      	ldrh	r3, [r3, #0]
 8000444:	031b      	lsls	r3, r3, #12
 8000446:	617b      	str	r3, [r7, #20]
	uint8_t data_to_send[] = { 0, 0, 0, 0 };
 8000448:	240c      	movs	r4, #12
 800044a:	193b      	adds	r3, r7, r4
 800044c:	2200      	movs	r2, #0
 800044e:	601a      	str	r2, [r3, #0]
	uint8_t status;

	W25Q64_WaitForWriteInProgressClear();
 8000450:	f000 f86a 	bl	8000528 <W25Q64_WaitForWriteInProgressClear>
	W25Q64_WriteEnable_and_WaitForWriteEnableLatch();
 8000454:	f000 f858 	bl	8000508 <W25Q64_WriteEnable_and_WaitForWriteEnableLatch>

	data_to_send[0] = SECTOR_ERASE;
 8000458:	0021      	movs	r1, r4
 800045a:	187b      	adds	r3, r7, r1
 800045c:	2220      	movs	r2, #32
 800045e:	701a      	strb	r2, [r3, #0]
	data_to_send[1] = (adress >> 16) & 0xff;
 8000460:	697b      	ldr	r3, [r7, #20]
 8000462:	0c1b      	lsrs	r3, r3, #16
 8000464:	b2da      	uxtb	r2, r3
 8000466:	187b      	adds	r3, r7, r1
 8000468:	705a      	strb	r2, [r3, #1]
	data_to_send[2] = (adress >> 8) & 0xff;
 800046a:	697b      	ldr	r3, [r7, #20]
 800046c:	0a1b      	lsrs	r3, r3, #8
 800046e:	b2da      	uxtb	r2, r3
 8000470:	187b      	adds	r3, r7, r1
 8000472:	709a      	strb	r2, [r3, #2]
	data_to_send[3] = adress & 0xff;
 8000474:	697b      	ldr	r3, [r7, #20]
 8000476:	b2da      	uxtb	r2, r3
 8000478:	000d      	movs	r5, r1
 800047a:	187b      	adds	r3, r7, r1
 800047c:	70da      	strb	r2, [r3, #3]

	W25Q64_Set_ChipSelect_Low();
 800047e:	f000 f8c1 	bl	8000604 <W25Q64_Set_ChipSelect_Low>
	status = W25Q64_SPI_Transmit_Data(data_to_send, 4);
 8000482:	2613      	movs	r6, #19
 8000484:	19bc      	adds	r4, r7, r6
 8000486:	197b      	adds	r3, r7, r5
 8000488:	2104      	movs	r1, #4
 800048a:	0018      	movs	r0, r3
 800048c:	f000 f85a 	bl	8000544 <W25Q64_SPI_Transmit_Data>
 8000490:	0003      	movs	r3, r0
 8000492:	7023      	strb	r3, [r4, #0]
	W25Q64_Set_ChipSelect_High();
 8000494:	f000 f8bd 	bl	8000612 <W25Q64_Set_ChipSelect_High>

	W25Q64_WaitForWriteInProgressClear();
 8000498:	f000 f846 	bl	8000528 <W25Q64_WaitForWriteInProgressClear>

	return status;
 800049c:	19bb      	adds	r3, r7, r6
 800049e:	781b      	ldrb	r3, [r3, #0]
}
 80004a0:	0018      	movs	r0, r3
 80004a2:	46bd      	mov	sp, r7
 80004a4:	b007      	add	sp, #28
 80004a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080004a8 <W25Q64_get_JEDEC_ID>:

	return status;
}

void W25Q64_get_JEDEC_ID(struct memory_info *info)
{
 80004a8:	b5b0      	push	{r4, r5, r7, lr}
 80004aa:	b084      	sub	sp, #16
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
	uint8_t data_to_send = 0x9F;
 80004b0:	250f      	movs	r5, #15
 80004b2:	197b      	adds	r3, r7, r5
 80004b4:	229f      	movs	r2, #159	; 0x9f
 80004b6:	701a      	strb	r2, [r3, #0]
	uint8_t receive_data[3] = { 0, 0, 0 };
 80004b8:	240c      	movs	r4, #12
 80004ba:	193b      	adds	r3, r7, r4
 80004bc:	4a11      	ldr	r2, [pc, #68]	; (8000504 <W25Q64_get_JEDEC_ID+0x5c>)
 80004be:	8811      	ldrh	r1, [r2, #0]
 80004c0:	8019      	strh	r1, [r3, #0]
 80004c2:	7892      	ldrb	r2, [r2, #2]
 80004c4:	709a      	strb	r2, [r3, #2]

	W25Q64_Set_ChipSelect_Low();
 80004c6:	f000 f89d 	bl	8000604 <W25Q64_Set_ChipSelect_Low>

	W25Q64_SPI_Transmit_Data(&data_to_send, 1);
 80004ca:	197b      	adds	r3, r7, r5
 80004cc:	2101      	movs	r1, #1
 80004ce:	0018      	movs	r0, r3
 80004d0:	f000 f838 	bl	8000544 <W25Q64_SPI_Transmit_Data>
	W25Q64_SPI_Receive_Data(receive_data, 3);
 80004d4:	193b      	adds	r3, r7, r4
 80004d6:	2103      	movs	r1, #3
 80004d8:	0018      	movs	r0, r3
 80004da:	f000 f84b 	bl	8000574 <W25Q64_SPI_Receive_Data>

	W25Q64_Set_ChipSelect_High();
 80004de:	f000 f898 	bl	8000612 <W25Q64_Set_ChipSelect_High>

	info->manufacturer_ID = receive_data[0];
 80004e2:	193b      	adds	r3, r7, r4
 80004e4:	781a      	ldrb	r2, [r3, #0]
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	701a      	strb	r2, [r3, #0]
	info->memory_type = receive_data[1];
 80004ea:	193b      	adds	r3, r7, r4
 80004ec:	785a      	ldrb	r2, [r3, #1]
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	705a      	strb	r2, [r3, #1]
	info->capacity = receive_data[2];
 80004f2:	193b      	adds	r3, r7, r4
 80004f4:	789a      	ldrb	r2, [r3, #2]
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	709a      	strb	r2, [r3, #2]
}
 80004fa:	46c0      	nop			; (mov r8, r8)
 80004fc:	46bd      	mov	sp, r7
 80004fe:	b004      	add	sp, #16
 8000500:	bdb0      	pop	{r4, r5, r7, pc}
 8000502:	46c0      	nop			; (mov r8, r8)
 8000504:	08001bfc 	.word	0x08001bfc

08000508 <W25Q64_WriteEnable_and_WaitForWriteEnableLatch>:

void W25Q64_WriteEnable_and_WaitForWriteEnableLatch(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
	while(!(W25Q64_ReadStatusRegister1() & W25Q64_WRITE_ENABLE_LATCH))
 800050c:	e001      	b.n	8000512 <W25Q64_WriteEnable_and_WaitForWriteEnableLatch+0xa>
	{
		W25Q64_WriteEnable();
 800050e:	f7ff feef 	bl	80002f0 <W25Q64_WriteEnable>
	while(!(W25Q64_ReadStatusRegister1() & W25Q64_WRITE_ENABLE_LATCH))
 8000512:	f7ff ff00 	bl	8000316 <W25Q64_ReadStatusRegister1>
 8000516:	0003      	movs	r3, r0
 8000518:	001a      	movs	r2, r3
 800051a:	2302      	movs	r3, #2
 800051c:	4013      	ands	r3, r2
 800051e:	d0f6      	beq.n	800050e <W25Q64_WriteEnable_and_WaitForWriteEnableLatch+0x6>
	}
}
 8000520:	46c0      	nop			; (mov r8, r8)
 8000522:	46c0      	nop			; (mov r8, r8)
 8000524:	46bd      	mov	sp, r7
 8000526:	bd80      	pop	{r7, pc}

08000528 <W25Q64_WaitForWriteInProgressClear>:
		;
	}
}

void W25Q64_WaitForWriteInProgressClear(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
	while((W25Q64_ReadStatusRegister1() & W25Q64_WRITE_IN_PROGRESS))
 800052c:	46c0      	nop			; (mov r8, r8)
 800052e:	f7ff fef2 	bl	8000316 <W25Q64_ReadStatusRegister1>
 8000532:	0003      	movs	r3, r0
 8000534:	001a      	movs	r2, r3
 8000536:	2301      	movs	r3, #1
 8000538:	4013      	ands	r3, r2
 800053a:	d1f8      	bne.n	800052e <W25Q64_WaitForWriteInProgressClear+0x6>
	{
		;
	}
}
 800053c:	46c0      	nop			; (mov r8, r8)
 800053e:	46c0      	nop			; (mov r8, r8)
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}

08000544 <W25Q64_SPI_Transmit_Data>:

uint8_t W25Q64_SPI_Transmit_Data(uint8_t *data, uint16_t size)
{
 8000544:	b590      	push	{r4, r7, lr}
 8000546:	b085      	sub	sp, #20
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
 800054c:	000a      	movs	r2, r1
 800054e:	1cbb      	adds	r3, r7, #2
 8000550:	801a      	strh	r2, [r3, #0]
	uint8_t status = 0;
 8000552:	240f      	movs	r4, #15
 8000554:	193b      	adds	r3, r7, r4
 8000556:	2200      	movs	r2, #0
 8000558:	701a      	strb	r2, [r3, #0]

	spi_write_data(data, size);
 800055a:	1cbb      	adds	r3, r7, #2
 800055c:	881a      	ldrh	r2, [r3, #0]
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	0011      	movs	r1, r2
 8000562:	0018      	movs	r0, r3
 8000564:	f001 f894 	bl	8001690 <spi_write_data>

	return status;
 8000568:	193b      	adds	r3, r7, r4
 800056a:	781b      	ldrb	r3, [r3, #0]
}
 800056c:	0018      	movs	r0, r3
 800056e:	46bd      	mov	sp, r7
 8000570:	b005      	add	sp, #20
 8000572:	bd90      	pop	{r4, r7, pc}

08000574 <W25Q64_SPI_Receive_Data>:

uint8_t W25Q64_SPI_Receive_Data(uint8_t *data, uint16_t size)
{
 8000574:	b590      	push	{r4, r7, lr}
 8000576:	b085      	sub	sp, #20
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
 800057c:	000a      	movs	r2, r1
 800057e:	1cbb      	adds	r3, r7, #2
 8000580:	801a      	strh	r2, [r3, #0]
	uint8_t status = 0;
 8000582:	240f      	movs	r4, #15
 8000584:	193b      	adds	r3, r7, r4
 8000586:	2200      	movs	r2, #0
 8000588:	701a      	strb	r2, [r3, #0]

	spi_read_data(data, size);
 800058a:	1cbb      	adds	r3, r7, #2
 800058c:	881a      	ldrh	r2, [r3, #0]
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	0011      	movs	r1, r2
 8000592:	0018      	movs	r0, r3
 8000594:	f001 f8ce 	bl	8001734 <spi_read_data>

	return status;
 8000598:	193b      	adds	r3, r7, r4
 800059a:	781b      	ldrb	r3, [r3, #0]
}
 800059c:	0018      	movs	r0, r3
 800059e:	46bd      	mov	sp, r7
 80005a0:	b005      	add	sp, #20
 80005a2:	bd90      	pop	{r4, r7, pc}

080005a4 <W25Q64_SPI_Transmit_Data_DMA>:

uint8_t W25Q64_SPI_Transmit_Data_DMA(uint8_t *data, uint16_t size)
{
 80005a4:	b590      	push	{r4, r7, lr}
 80005a6:	b085      	sub	sp, #20
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
 80005ac:	000a      	movs	r2, r1
 80005ae:	1cbb      	adds	r3, r7, #2
 80005b0:	801a      	strh	r2, [r3, #0]
	uint8_t status = 0;
 80005b2:	240f      	movs	r4, #15
 80005b4:	193b      	adds	r3, r7, r4
 80005b6:	2200      	movs	r2, #0
 80005b8:	701a      	strb	r2, [r3, #0]

	spi_write_data_dma(data, size);
 80005ba:	1cbb      	adds	r3, r7, #2
 80005bc:	881a      	ldrh	r2, [r3, #0]
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	0011      	movs	r1, r2
 80005c2:	0018      	movs	r0, r3
 80005c4:	f001 f918 	bl	80017f8 <spi_write_data_dma>

	return status;
 80005c8:	193b      	adds	r3, r7, r4
 80005ca:	781b      	ldrb	r3, [r3, #0]
}
 80005cc:	0018      	movs	r0, r3
 80005ce:	46bd      	mov	sp, r7
 80005d0:	b005      	add	sp, #20
 80005d2:	bd90      	pop	{r4, r7, pc}

080005d4 <W25Q64_SPI_Receive_Data_DMA>:

uint8_t W25Q64_SPI_Receive_Data_DMA(uint8_t *data, uint16_t size)
{
 80005d4:	b590      	push	{r4, r7, lr}
 80005d6:	b085      	sub	sp, #20
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
 80005dc:	000a      	movs	r2, r1
 80005de:	1cbb      	adds	r3, r7, #2
 80005e0:	801a      	strh	r2, [r3, #0]
	uint8_t status = 0;
 80005e2:	240f      	movs	r4, #15
 80005e4:	193b      	adds	r3, r7, r4
 80005e6:	2200      	movs	r2, #0
 80005e8:	701a      	strb	r2, [r3, #0]

	spi_read_data_dma(data, size);
 80005ea:	1cbb      	adds	r3, r7, #2
 80005ec:	881a      	ldrh	r2, [r3, #0]
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	0011      	movs	r1, r2
 80005f2:	0018      	movs	r0, r3
 80005f4:	f001 f942 	bl	800187c <spi_read_data_dma>

	return status;
 80005f8:	193b      	adds	r3, r7, r4
 80005fa:	781b      	ldrb	r3, [r3, #0]
}
 80005fc:	0018      	movs	r0, r3
 80005fe:	46bd      	mov	sp, r7
 8000600:	b005      	add	sp, #20
 8000602:	bd90      	pop	{r4, r7, pc}

08000604 <W25Q64_Set_ChipSelect_Low>:

void W25Q64_Set_ChipSelect_Low(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
	spi_cs_set_low();
 8000608:	f001 f837 	bl	800167a <spi_cs_set_low>
}
 800060c:	46c0      	nop			; (mov r8, r8)
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}

08000612 <W25Q64_Set_ChipSelect_High>:

void W25Q64_Set_ChipSelect_High(void)
{
 8000612:	b580      	push	{r7, lr}
 8000614:	af00      	add	r7, sp, #0
	spi_cs_set_high();
 8000616:	f001 f825 	bl	8001664 <spi_cs_set_high>
}
 800061a:	46c0      	nop			; (mov r8, r8)
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}

08000620 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000624:	4b04      	ldr	r3, [pc, #16]	; (8000638 <LL_RCC_HSI_Enable+0x18>)
 8000626:	681a      	ldr	r2, [r3, #0]
 8000628:	4b03      	ldr	r3, [pc, #12]	; (8000638 <LL_RCC_HSI_Enable+0x18>)
 800062a:	2180      	movs	r1, #128	; 0x80
 800062c:	0049      	lsls	r1, r1, #1
 800062e:	430a      	orrs	r2, r1
 8000630:	601a      	str	r2, [r3, #0]
}
 8000632:	46c0      	nop			; (mov r8, r8)
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	40021000 	.word	0x40021000

0800063c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8000640:	4b07      	ldr	r3, [pc, #28]	; (8000660 <LL_RCC_HSI_IsReady+0x24>)
 8000642:	681a      	ldr	r2, [r3, #0]
 8000644:	2380      	movs	r3, #128	; 0x80
 8000646:	00db      	lsls	r3, r3, #3
 8000648:	401a      	ands	r2, r3
 800064a:	2380      	movs	r3, #128	; 0x80
 800064c:	00db      	lsls	r3, r3, #3
 800064e:	429a      	cmp	r2, r3
 8000650:	d101      	bne.n	8000656 <LL_RCC_HSI_IsReady+0x1a>
 8000652:	2301      	movs	r3, #1
 8000654:	e000      	b.n	8000658 <LL_RCC_HSI_IsReady+0x1c>
 8000656:	2300      	movs	r3, #0
}
 8000658:	0018      	movs	r0, r3
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	46c0      	nop			; (mov r8, r8)
 8000660:	40021000 	.word	0x40021000

08000664 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_LSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_LSE
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800066c:	4b06      	ldr	r3, [pc, #24]	; (8000688 <LL_RCC_SetSysClkSource+0x24>)
 800066e:	689b      	ldr	r3, [r3, #8]
 8000670:	2207      	movs	r2, #7
 8000672:	4393      	bics	r3, r2
 8000674:	0019      	movs	r1, r3
 8000676:	4b04      	ldr	r3, [pc, #16]	; (8000688 <LL_RCC_SetSysClkSource+0x24>)
 8000678:	687a      	ldr	r2, [r7, #4]
 800067a:	430a      	orrs	r2, r1
 800067c:	609a      	str	r2, [r3, #8]
}
 800067e:	46c0      	nop			; (mov r8, r8)
 8000680:	46bd      	mov	sp, r7
 8000682:	b002      	add	sp, #8
 8000684:	bd80      	pop	{r7, pc}
 8000686:	46c0      	nop			; (mov r8, r8)
 8000688:	40021000 	.word	0x40021000

0800068c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_LSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000690:	4b03      	ldr	r3, [pc, #12]	; (80006a0 <LL_RCC_GetSysClkSource+0x14>)
 8000692:	689b      	ldr	r3, [r3, #8]
 8000694:	2238      	movs	r2, #56	; 0x38
 8000696:	4013      	ands	r3, r2
}
 8000698:	0018      	movs	r0, r3
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	46c0      	nop			; (mov r8, r8)
 80006a0:	40021000 	.word	0x40021000

080006a4 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80006ac:	4b06      	ldr	r3, [pc, #24]	; (80006c8 <LL_RCC_SetAHBPrescaler+0x24>)
 80006ae:	689b      	ldr	r3, [r3, #8]
 80006b0:	4a06      	ldr	r2, [pc, #24]	; (80006cc <LL_RCC_SetAHBPrescaler+0x28>)
 80006b2:	4013      	ands	r3, r2
 80006b4:	0019      	movs	r1, r3
 80006b6:	4b04      	ldr	r3, [pc, #16]	; (80006c8 <LL_RCC_SetAHBPrescaler+0x24>)
 80006b8:	687a      	ldr	r2, [r7, #4]
 80006ba:	430a      	orrs	r2, r1
 80006bc:	609a      	str	r2, [r3, #8]
}
 80006be:	46c0      	nop			; (mov r8, r8)
 80006c0:	46bd      	mov	sp, r7
 80006c2:	b002      	add	sp, #8
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	46c0      	nop			; (mov r8, r8)
 80006c8:	40021000 	.word	0x40021000
 80006cc:	fffff0ff 	.word	0xfffff0ff

080006d0 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, Prescaler);
 80006d8:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <LL_RCC_SetAPB1Prescaler+0x24>)
 80006da:	689b      	ldr	r3, [r3, #8]
 80006dc:	4a06      	ldr	r2, [pc, #24]	; (80006f8 <LL_RCC_SetAPB1Prescaler+0x28>)
 80006de:	4013      	ands	r3, r2
 80006e0:	0019      	movs	r1, r3
 80006e2:	4b04      	ldr	r3, [pc, #16]	; (80006f4 <LL_RCC_SetAPB1Prescaler+0x24>)
 80006e4:	687a      	ldr	r2, [r7, #4]
 80006e6:	430a      	orrs	r2, r1
 80006e8:	609a      	str	r2, [r3, #8]
}
 80006ea:	46c0      	nop			; (mov r8, r8)
 80006ec:	46bd      	mov	sp, r7
 80006ee:	b002      	add	sp, #8
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	46c0      	nop			; (mov r8, r8)
 80006f4:	40021000 	.word	0x40021000
 80006f8:	ffff8fff 	.word	0xffff8fff

080006fc <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000700:	4b04      	ldr	r3, [pc, #16]	; (8000714 <LL_RCC_PLL_Enable+0x18>)
 8000702:	681a      	ldr	r2, [r3, #0]
 8000704:	4b03      	ldr	r3, [pc, #12]	; (8000714 <LL_RCC_PLL_Enable+0x18>)
 8000706:	2180      	movs	r1, #128	; 0x80
 8000708:	0449      	lsls	r1, r1, #17
 800070a:	430a      	orrs	r2, r1
 800070c:	601a      	str	r2, [r3, #0]
}
 800070e:	46c0      	nop			; (mov r8, r8)
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	40021000 	.word	0x40021000

08000718 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800071c:	4b07      	ldr	r3, [pc, #28]	; (800073c <LL_RCC_PLL_IsReady+0x24>)
 800071e:	681a      	ldr	r2, [r3, #0]
 8000720:	2380      	movs	r3, #128	; 0x80
 8000722:	049b      	lsls	r3, r3, #18
 8000724:	401a      	ands	r2, r3
 8000726:	2380      	movs	r3, #128	; 0x80
 8000728:	049b      	lsls	r3, r3, #18
 800072a:	429a      	cmp	r2, r3
 800072c:	d101      	bne.n	8000732 <LL_RCC_PLL_IsReady+0x1a>
 800072e:	2301      	movs	r3, #1
 8000730:	e000      	b.n	8000734 <LL_RCC_PLL_IsReady+0x1c>
 8000732:	2300      	movs	r3, #0
}
 8000734:	0018      	movs	r0, r3
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	46c0      	nop			; (mov r8, r8)
 800073c:	40021000 	.word	0x40021000

08000740 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b084      	sub	sp, #16
 8000744:	af00      	add	r7, sp, #0
 8000746:	60f8      	str	r0, [r7, #12]
 8000748:	60b9      	str	r1, [r7, #8]
 800074a:	607a      	str	r2, [r7, #4]
 800074c:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 800074e:	4b0a      	ldr	r3, [pc, #40]	; (8000778 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8000750:	68db      	ldr	r3, [r3, #12]
 8000752:	4a0a      	ldr	r2, [pc, #40]	; (800077c <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 8000754:	4013      	ands	r3, r2
 8000756:	0019      	movs	r1, r3
 8000758:	68fa      	ldr	r2, [r7, #12]
 800075a:	68bb      	ldr	r3, [r7, #8]
 800075c:	431a      	orrs	r2, r3
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	021b      	lsls	r3, r3, #8
 8000762:	431a      	orrs	r2, r3
 8000764:	683b      	ldr	r3, [r7, #0]
 8000766:	431a      	orrs	r2, r3
 8000768:	4b03      	ldr	r3, [pc, #12]	; (8000778 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 800076a:	430a      	orrs	r2, r1
 800076c:	60da      	str	r2, [r3, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 800076e:	46c0      	nop			; (mov r8, r8)
 8000770:	46bd      	mov	sp, r7
 8000772:	b004      	add	sp, #16
 8000774:	bd80      	pop	{r7, pc}
 8000776:	46c0      	nop			; (mov r8, r8)
 8000778:	40021000 	.word	0x40021000
 800077c:	1fff808c 	.word	0x1fff808c

08000780 <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 8000784:	4b04      	ldr	r3, [pc, #16]	; (8000798 <LL_RCC_PLL_EnableDomain_SYS+0x18>)
 8000786:	68da      	ldr	r2, [r3, #12]
 8000788:	4b03      	ldr	r3, [pc, #12]	; (8000798 <LL_RCC_PLL_EnableDomain_SYS+0x18>)
 800078a:	2180      	movs	r1, #128	; 0x80
 800078c:	0549      	lsls	r1, r1, #21
 800078e:	430a      	orrs	r2, r1
 8000790:	60da      	str	r2, [r3, #12]
}
 8000792:	46c0      	nop			; (mov r8, r8)
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	40021000 	.word	0x40021000

0800079c <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80007a4:	4b06      	ldr	r3, [pc, #24]	; (80007c0 <LL_FLASH_SetLatency+0x24>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	2207      	movs	r2, #7
 80007aa:	4393      	bics	r3, r2
 80007ac:	0019      	movs	r1, r3
 80007ae:	4b04      	ldr	r3, [pc, #16]	; (80007c0 <LL_FLASH_SetLatency+0x24>)
 80007b0:	687a      	ldr	r2, [r7, #4]
 80007b2:	430a      	orrs	r2, r1
 80007b4:	601a      	str	r2, [r3, #0]
}
 80007b6:	46c0      	nop			; (mov r8, r8)
 80007b8:	46bd      	mov	sp, r7
 80007ba:	b002      	add	sp, #8
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	46c0      	nop			; (mov r8, r8)
 80007c0:	40022000 	.word	0x40022000

080007c4 <LL_SYSTICK_EnableIT>:
  * @brief  Enable SysTick exception request
  * @rmtoll STK_CTRL     TICKINT       LL_SYSTICK_EnableIT
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_EnableIT(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80007c8:	4b04      	ldr	r3, [pc, #16]	; (80007dc <LL_SYSTICK_EnableIT+0x18>)
 80007ca:	681a      	ldr	r2, [r3, #0]
 80007cc:	4b03      	ldr	r3, [pc, #12]	; (80007dc <LL_SYSTICK_EnableIT+0x18>)
 80007ce:	2102      	movs	r1, #2
 80007d0:	430a      	orrs	r2, r1
 80007d2:	601a      	str	r2, [r3, #0]
}
 80007d4:	46c0      	nop			; (mov r8, r8)
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	46c0      	nop			; (mov r8, r8)
 80007dc:	e000e010 	.word	0xe000e010

080007e0 <main>:
uint8_t write_buffer[SIZE_BUFFER];

state_t state = READ_1;

int main(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
	rcc_init();
 80007e6:	f000 f84d 	bl	8000884 <rcc_init>
	spi_init();
 80007ea:	f000 fddf 	bl	80013ac <spi_init>

	for (uint32_t i = 0; i < SIZE_BUFFER; i++) {
 80007ee:	2300      	movs	r3, #0
 80007f0:	607b      	str	r3, [r7, #4]
 80007f2:	e009      	b.n	8000808 <main+0x28>
		write_buffer[i] = i;
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	b2d9      	uxtb	r1, r3
 80007f8:	4a1e      	ldr	r2, [pc, #120]	; (8000874 <main+0x94>)
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	18d3      	adds	r3, r2, r3
 80007fe:	1c0a      	adds	r2, r1, #0
 8000800:	701a      	strb	r2, [r3, #0]
	for (uint32_t i = 0; i < SIZE_BUFFER; i++) {
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	3301      	adds	r3, #1
 8000806:	607b      	str	r3, [r7, #4]
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	2bff      	cmp	r3, #255	; 0xff
 800080c:	d9f2      	bls.n	80007f4 <main+0x14>
	}

	W25Q64_Init();
 800080e:	f7ff fd3d 	bl	800028c <W25Q64_Init>
	W25Q64_SectorErase(0);
 8000812:	2000      	movs	r0, #0
 8000814:	f7ff fe0e 	bl	8000434 <W25Q64_SectorErase>

	while (1)
	{
		if(state == READ_1)
 8000818:	4b17      	ldr	r3, [pc, #92]	; (8000878 <main+0x98>)
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	2b00      	cmp	r3, #0
 800081e:	d10a      	bne.n	8000836 <main+0x56>
		{
			W25Q64_ReadDataBytes(0x0000, read_buffer_1, SIZE_BUFFER);
 8000820:	2380      	movs	r3, #128	; 0x80
 8000822:	005a      	lsls	r2, r3, #1
 8000824:	4b15      	ldr	r3, [pc, #84]	; (800087c <main+0x9c>)
 8000826:	0019      	movs	r1, r3
 8000828:	2000      	movs	r0, #0
 800082a:	f7ff fd91 	bl	8000350 <W25Q64_ReadDataBytes>
			state = WAIT;
 800082e:	4b12      	ldr	r3, [pc, #72]	; (8000878 <main+0x98>)
 8000830:	2203      	movs	r2, #3
 8000832:	701a      	strb	r2, [r3, #0]
 8000834:	e7f0      	b.n	8000818 <main+0x38>
		}
		else if(state == WRITE)
 8000836:	4b10      	ldr	r3, [pc, #64]	; (8000878 <main+0x98>)
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	2b01      	cmp	r3, #1
 800083c:	d10a      	bne.n	8000854 <main+0x74>
		{
			W25Q64_PageProgram(0x0000, write_buffer, SIZE_BUFFER);
 800083e:	2380      	movs	r3, #128	; 0x80
 8000840:	005a      	lsls	r2, r3, #1
 8000842:	4b0c      	ldr	r3, [pc, #48]	; (8000874 <main+0x94>)
 8000844:	0019      	movs	r1, r3
 8000846:	2000      	movs	r0, #0
 8000848:	f7ff fdba 	bl	80003c0 <W25Q64_PageProgram>
			state = WAIT;
 800084c:	4b0a      	ldr	r3, [pc, #40]	; (8000878 <main+0x98>)
 800084e:	2203      	movs	r2, #3
 8000850:	701a      	strb	r2, [r3, #0]
 8000852:	e7e1      	b.n	8000818 <main+0x38>
		}
		else if(state == READ_2)
 8000854:	4b08      	ldr	r3, [pc, #32]	; (8000878 <main+0x98>)
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	2b02      	cmp	r3, #2
 800085a:	d1dd      	bne.n	8000818 <main+0x38>
		{
			W25Q64_ReadDataBytes(0x0000, read_buffer_2, SIZE_BUFFER);
 800085c:	2380      	movs	r3, #128	; 0x80
 800085e:	005a      	lsls	r2, r3, #1
 8000860:	4b07      	ldr	r3, [pc, #28]	; (8000880 <main+0xa0>)
 8000862:	0019      	movs	r1, r3
 8000864:	2000      	movs	r0, #0
 8000866:	f7ff fd73 	bl	8000350 <W25Q64_ReadDataBytes>
			state = STOP;
 800086a:	4b03      	ldr	r3, [pc, #12]	; (8000878 <main+0x98>)
 800086c:	2204      	movs	r2, #4
 800086e:	701a      	strb	r2, [r3, #0]
		if(state == READ_1)
 8000870:	e7d2      	b.n	8000818 <main+0x38>
 8000872:	46c0      	nop			; (mov r8, r8)
 8000874:	20000224 	.word	0x20000224
 8000878:	20000324 	.word	0x20000324
 800087c:	20000024 	.word	0x20000024
 8000880:	20000124 	.word	0x20000124

08000884 <rcc_init>:
		}
	}
}

void rcc_init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
	LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 8000888:	2002      	movs	r0, #2
 800088a:	f7ff ff87 	bl	800079c <LL_FLASH_SetLatency>

	LL_RCC_HSI_Enable();
 800088e:	f7ff fec7 	bl	8000620 <LL_RCC_HSI_Enable>
	while(LL_RCC_HSI_IsReady() != 1)
 8000892:	46c0      	nop			; (mov r8, r8)
 8000894:	f7ff fed2 	bl	800063c <LL_RCC_HSI_IsReady>
 8000898:	0003      	movs	r3, r0
 800089a:	2b01      	cmp	r3, #1
 800089c:	d1fa      	bne.n	8000894 <rcc_init+0x10>
		;

	LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_1, 8, LL_RCC_PLLR_DIV_2);
 800089e:	2380      	movs	r3, #128	; 0x80
 80008a0:	059b      	lsls	r3, r3, #22
 80008a2:	2208      	movs	r2, #8
 80008a4:	2100      	movs	r1, #0
 80008a6:	2002      	movs	r0, #2
 80008a8:	f7ff ff4a 	bl	8000740 <LL_RCC_PLL_ConfigDomain_SYS>

	LL_RCC_PLL_Enable();
 80008ac:	f7ff ff26 	bl	80006fc <LL_RCC_PLL_Enable>
	while(LL_RCC_PLL_IsReady() != 1)
 80008b0:	46c0      	nop			; (mov r8, r8)
 80008b2:	f7ff ff31 	bl	8000718 <LL_RCC_PLL_IsReady>
 80008b6:	0003      	movs	r3, r0
 80008b8:	2b01      	cmp	r3, #1
 80008ba:	d1fa      	bne.n	80008b2 <rcc_init+0x2e>
		;

	LL_RCC_PLL_EnableDomain_SYS();
 80008bc:	f7ff ff60 	bl	8000780 <LL_RCC_PLL_EnableDomain_SYS>

	LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80008c0:	2000      	movs	r0, #0
 80008c2:	f7ff feef 	bl	80006a4 <LL_RCC_SetAHBPrescaler>
	LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 80008c6:	2000      	movs	r0, #0
 80008c8:	f7ff ff02 	bl	80006d0 <LL_RCC_SetAPB1Prescaler>

	LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 80008cc:	2002      	movs	r0, #2
 80008ce:	f7ff fec9 	bl	8000664 <LL_RCC_SetSysClkSource>
	while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80008d2:	46c0      	nop			; (mov r8, r8)
 80008d4:	f7ff feda 	bl	800068c <LL_RCC_GetSysClkSource>
 80008d8:	0003      	movs	r3, r0
 80008da:	2b10      	cmp	r3, #16
 80008dc:	d1fa      	bne.n	80008d4 <rcc_init+0x50>
		;

	LL_SetSystemCoreClock(64000000);
 80008de:	4b06      	ldr	r3, [pc, #24]	; (80008f8 <rcc_init+0x74>)
 80008e0:	0018      	movs	r0, r3
 80008e2:	f7ff fcc5 	bl	8000270 <LL_SetSystemCoreClock>
	LL_Init1msTick(64000000);
 80008e6:	4b04      	ldr	r3, [pc, #16]	; (80008f8 <rcc_init+0x74>)
 80008e8:	0018      	movs	r0, r3
 80008ea:	f7ff fcb1 	bl	8000250 <LL_Init1msTick>
	LL_SYSTICK_EnableIT();
 80008ee:	f7ff ff69 	bl	80007c4 <LL_SYSTICK_EnableIT>
}
 80008f2:	46c0      	nop			; (mov r8, r8)
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	03d09000 	.word	0x03d09000

080008fc <spi_transfer_cplt_callback>:

void spi_transfer_cplt_callback(transfer_type_t type)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
 8000902:	0002      	movs	r2, r0
 8000904:	1dfb      	adds	r3, r7, #7
 8000906:	701a      	strb	r2, [r3, #0]
	if(type == TRANSMIT && state == WAIT)
 8000908:	1dfb      	adds	r3, r7, #7
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	2b00      	cmp	r3, #0
 800090e:	d107      	bne.n	8000920 <spi_transfer_cplt_callback+0x24>
 8000910:	4b0b      	ldr	r3, [pc, #44]	; (8000940 <spi_transfer_cplt_callback+0x44>)
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	2b03      	cmp	r3, #3
 8000916:	d103      	bne.n	8000920 <spi_transfer_cplt_callback+0x24>
	{
		state = READ_2;
 8000918:	4b09      	ldr	r3, [pc, #36]	; (8000940 <spi_transfer_cplt_callback+0x44>)
 800091a:	2202      	movs	r2, #2
 800091c:	701a      	strb	r2, [r3, #0]
	}
	else if(type == RECEIVE && state == WAIT)
	{
		state = WRITE;
	}
}
 800091e:	e00a      	b.n	8000936 <spi_transfer_cplt_callback+0x3a>
	else if(type == RECEIVE && state == WAIT)
 8000920:	1dfb      	adds	r3, r7, #7
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	2b01      	cmp	r3, #1
 8000926:	d106      	bne.n	8000936 <spi_transfer_cplt_callback+0x3a>
 8000928:	4b05      	ldr	r3, [pc, #20]	; (8000940 <spi_transfer_cplt_callback+0x44>)
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	2b03      	cmp	r3, #3
 800092e:	d102      	bne.n	8000936 <spi_transfer_cplt_callback+0x3a>
		state = WRITE;
 8000930:	4b03      	ldr	r3, [pc, #12]	; (8000940 <spi_transfer_cplt_callback+0x44>)
 8000932:	2201      	movs	r2, #1
 8000934:	701a      	strb	r2, [r3, #0]
}
 8000936:	46c0      	nop			; (mov r8, r8)
 8000938:	46bd      	mov	sp, r7
 800093a:	b002      	add	sp, #8
 800093c:	bd80      	pop	{r7, pc}
 800093e:	46c0      	nop			; (mov r8, r8)
 8000940:	20000324 	.word	0x20000324

08000944 <software_timer_inc_ms_tick>:
	timer->ms_tick = software_timer_get_ms_tick();
	timer->task_time = time;
}

void software_timer_inc_ms_tick(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
	ms_tick++;
 8000948:	4b03      	ldr	r3, [pc, #12]	; (8000958 <software_timer_inc_ms_tick+0x14>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	1c5a      	adds	r2, r3, #1
 800094e:	4b02      	ldr	r3, [pc, #8]	; (8000958 <software_timer_inc_ms_tick+0x14>)
 8000950:	601a      	str	r2, [r3, #0]
}
 8000952:	46c0      	nop			; (mov r8, r8)
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	20000328 	.word	0x20000328

0800095c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
 8000962:	0002      	movs	r2, r0
 8000964:	1dfb      	adds	r3, r7, #7
 8000966:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000968:	1dfb      	adds	r3, r7, #7
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	2b7f      	cmp	r3, #127	; 0x7f
 800096e:	d809      	bhi.n	8000984 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000970:	1dfb      	adds	r3, r7, #7
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	001a      	movs	r2, r3
 8000976:	231f      	movs	r3, #31
 8000978:	401a      	ands	r2, r3
 800097a:	4b04      	ldr	r3, [pc, #16]	; (800098c <__NVIC_EnableIRQ+0x30>)
 800097c:	2101      	movs	r1, #1
 800097e:	4091      	lsls	r1, r2
 8000980:	000a      	movs	r2, r1
 8000982:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000984:	46c0      	nop			; (mov r8, r8)
 8000986:	46bd      	mov	sp, r7
 8000988:	b002      	add	sp, #8
 800098a:	bd80      	pop	{r7, pc}
 800098c:	e000e100 	.word	0xe000e100

08000990 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000990:	b590      	push	{r4, r7, lr}
 8000992:	b083      	sub	sp, #12
 8000994:	af00      	add	r7, sp, #0
 8000996:	0002      	movs	r2, r0
 8000998:	6039      	str	r1, [r7, #0]
 800099a:	1dfb      	adds	r3, r7, #7
 800099c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800099e:	1dfb      	adds	r3, r7, #7
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	2b7f      	cmp	r3, #127	; 0x7f
 80009a4:	d828      	bhi.n	80009f8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009a6:	4a2f      	ldr	r2, [pc, #188]	; (8000a64 <__NVIC_SetPriority+0xd4>)
 80009a8:	1dfb      	adds	r3, r7, #7
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	b25b      	sxtb	r3, r3
 80009ae:	089b      	lsrs	r3, r3, #2
 80009b0:	33c0      	adds	r3, #192	; 0xc0
 80009b2:	009b      	lsls	r3, r3, #2
 80009b4:	589b      	ldr	r3, [r3, r2]
 80009b6:	1dfa      	adds	r2, r7, #7
 80009b8:	7812      	ldrb	r2, [r2, #0]
 80009ba:	0011      	movs	r1, r2
 80009bc:	2203      	movs	r2, #3
 80009be:	400a      	ands	r2, r1
 80009c0:	00d2      	lsls	r2, r2, #3
 80009c2:	21ff      	movs	r1, #255	; 0xff
 80009c4:	4091      	lsls	r1, r2
 80009c6:	000a      	movs	r2, r1
 80009c8:	43d2      	mvns	r2, r2
 80009ca:	401a      	ands	r2, r3
 80009cc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	019b      	lsls	r3, r3, #6
 80009d2:	22ff      	movs	r2, #255	; 0xff
 80009d4:	401a      	ands	r2, r3
 80009d6:	1dfb      	adds	r3, r7, #7
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	0018      	movs	r0, r3
 80009dc:	2303      	movs	r3, #3
 80009de:	4003      	ands	r3, r0
 80009e0:	00db      	lsls	r3, r3, #3
 80009e2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009e4:	481f      	ldr	r0, [pc, #124]	; (8000a64 <__NVIC_SetPriority+0xd4>)
 80009e6:	1dfb      	adds	r3, r7, #7
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	b25b      	sxtb	r3, r3
 80009ec:	089b      	lsrs	r3, r3, #2
 80009ee:	430a      	orrs	r2, r1
 80009f0:	33c0      	adds	r3, #192	; 0xc0
 80009f2:	009b      	lsls	r3, r3, #2
 80009f4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80009f6:	e031      	b.n	8000a5c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009f8:	4a1b      	ldr	r2, [pc, #108]	; (8000a68 <__NVIC_SetPriority+0xd8>)
 80009fa:	1dfb      	adds	r3, r7, #7
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	0019      	movs	r1, r3
 8000a00:	230f      	movs	r3, #15
 8000a02:	400b      	ands	r3, r1
 8000a04:	3b08      	subs	r3, #8
 8000a06:	089b      	lsrs	r3, r3, #2
 8000a08:	3306      	adds	r3, #6
 8000a0a:	009b      	lsls	r3, r3, #2
 8000a0c:	18d3      	adds	r3, r2, r3
 8000a0e:	3304      	adds	r3, #4
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	1dfa      	adds	r2, r7, #7
 8000a14:	7812      	ldrb	r2, [r2, #0]
 8000a16:	0011      	movs	r1, r2
 8000a18:	2203      	movs	r2, #3
 8000a1a:	400a      	ands	r2, r1
 8000a1c:	00d2      	lsls	r2, r2, #3
 8000a1e:	21ff      	movs	r1, #255	; 0xff
 8000a20:	4091      	lsls	r1, r2
 8000a22:	000a      	movs	r2, r1
 8000a24:	43d2      	mvns	r2, r2
 8000a26:	401a      	ands	r2, r3
 8000a28:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	019b      	lsls	r3, r3, #6
 8000a2e:	22ff      	movs	r2, #255	; 0xff
 8000a30:	401a      	ands	r2, r3
 8000a32:	1dfb      	adds	r3, r7, #7
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	0018      	movs	r0, r3
 8000a38:	2303      	movs	r3, #3
 8000a3a:	4003      	ands	r3, r0
 8000a3c:	00db      	lsls	r3, r3, #3
 8000a3e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a40:	4809      	ldr	r0, [pc, #36]	; (8000a68 <__NVIC_SetPriority+0xd8>)
 8000a42:	1dfb      	adds	r3, r7, #7
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	001c      	movs	r4, r3
 8000a48:	230f      	movs	r3, #15
 8000a4a:	4023      	ands	r3, r4
 8000a4c:	3b08      	subs	r3, #8
 8000a4e:	089b      	lsrs	r3, r3, #2
 8000a50:	430a      	orrs	r2, r1
 8000a52:	3306      	adds	r3, #6
 8000a54:	009b      	lsls	r3, r3, #2
 8000a56:	18c3      	adds	r3, r0, r3
 8000a58:	3304      	adds	r3, #4
 8000a5a:	601a      	str	r2, [r3, #0]
}
 8000a5c:	46c0      	nop			; (mov r8, r8)
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	b003      	add	sp, #12
 8000a62:	bd90      	pop	{r4, r7, pc}
 8000a64:	e000e100 	.word	0xe000e100
 8000a68:	e000ed00 	.word	0xe000ed00

08000a6c <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_RNG  (*)
  * @note   (*) RNG & CRYP Peripherals available only on STM32G081xx
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b084      	sub	sp, #16
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8000a74:	4b07      	ldr	r3, [pc, #28]	; (8000a94 <LL_AHB1_GRP1_EnableClock+0x28>)
 8000a76:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8000a78:	4b06      	ldr	r3, [pc, #24]	; (8000a94 <LL_AHB1_GRP1_EnableClock+0x28>)
 8000a7a:	687a      	ldr	r2, [r7, #4]
 8000a7c:	430a      	orrs	r2, r1
 8000a7e:	639a      	str	r2, [r3, #56]	; 0x38
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000a80:	4b04      	ldr	r3, [pc, #16]	; (8000a94 <LL_AHB1_GRP1_EnableClock+0x28>)
 8000a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a84:	687a      	ldr	r2, [r7, #4]
 8000a86:	4013      	ands	r3, r2
 8000a88:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a8a:	68fb      	ldr	r3, [r7, #12]
}
 8000a8c:	46c0      	nop			; (mov r8, r8)
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	b004      	add	sp, #16
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	40021000 	.word	0x40021000

08000a98 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_ADC
  * @note (*) peripheral not available on all devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b084      	sub	sp, #16
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APBENR2, Periphs);
 8000aa0:	4b07      	ldr	r3, [pc, #28]	; (8000ac0 <LL_APB2_GRP1_EnableClock+0x28>)
 8000aa2:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8000aa4:	4b06      	ldr	r3, [pc, #24]	; (8000ac0 <LL_APB2_GRP1_EnableClock+0x28>)
 8000aa6:	687a      	ldr	r2, [r7, #4]
 8000aa8:	430a      	orrs	r2, r1
 8000aaa:	641a      	str	r2, [r3, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APBENR2, Periphs);
 8000aac:	4b04      	ldr	r3, [pc, #16]	; (8000ac0 <LL_APB2_GRP1_EnableClock+0x28>)
 8000aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab0:	687a      	ldr	r2, [r7, #4]
 8000ab2:	4013      	ands	r3, r2
 8000ab4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ab6:	68fb      	ldr	r3, [r7, #12]
}
 8000ab8:	46c0      	nop			; (mov r8, r8)
 8000aba:	46bd      	mov	sp, r7
 8000abc:	b004      	add	sp, #16
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	40021000 	.word	0x40021000

08000ac4 <LL_IOP_GRP1_EnableClock>:
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOE
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOF
  * @retval None
  */
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b084      	sub	sp, #16
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 8000acc:	4b07      	ldr	r3, [pc, #28]	; (8000aec <LL_IOP_GRP1_EnableClock+0x28>)
 8000ace:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000ad0:	4b06      	ldr	r3, [pc, #24]	; (8000aec <LL_IOP_GRP1_EnableClock+0x28>)
 8000ad2:	687a      	ldr	r2, [r7, #4]
 8000ad4:	430a      	orrs	r2, r1
 8000ad6:	635a      	str	r2, [r3, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8000ad8:	4b04      	ldr	r3, [pc, #16]	; (8000aec <LL_IOP_GRP1_EnableClock+0x28>)
 8000ada:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000adc:	687a      	ldr	r2, [r7, #4]
 8000ade:	4013      	ands	r3, r2
 8000ae0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ae2:	68fb      	ldr	r3, [r7, #12]
}
 8000ae4:	46c0      	nop			; (mov r8, r8)
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	b004      	add	sp, #16
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	40021000 	.word	0x40021000

08000af0 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b084      	sub	sp, #16
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	60f8      	str	r0, [r7, #12]
 8000af8:	60b9      	str	r1, [r7, #8]
 8000afa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	6819      	ldr	r1, [r3, #0]
 8000b00:	68bb      	ldr	r3, [r7, #8]
 8000b02:	435b      	muls	r3, r3
 8000b04:	001a      	movs	r2, r3
 8000b06:	0013      	movs	r3, r2
 8000b08:	005b      	lsls	r3, r3, #1
 8000b0a:	189b      	adds	r3, r3, r2
 8000b0c:	43db      	mvns	r3, r3
 8000b0e:	400b      	ands	r3, r1
 8000b10:	001a      	movs	r2, r3
 8000b12:	68bb      	ldr	r3, [r7, #8]
 8000b14:	435b      	muls	r3, r3
 8000b16:	6879      	ldr	r1, [r7, #4]
 8000b18:	434b      	muls	r3, r1
 8000b1a:	431a      	orrs	r2, r3
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	601a      	str	r2, [r3, #0]
}
 8000b20:	46c0      	nop			; (mov r8, r8)
 8000b22:	46bd      	mov	sp, r7
 8000b24:	b004      	add	sp, #16
 8000b26:	bd80      	pop	{r7, pc}

08000b28 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b084      	sub	sp, #16
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	60f8      	str	r0, [r7, #12]
 8000b30:	60b9      	str	r1, [r7, #8]
 8000b32:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	685b      	ldr	r3, [r3, #4]
 8000b38:	68ba      	ldr	r2, [r7, #8]
 8000b3a:	43d2      	mvns	r2, r2
 8000b3c:	401a      	ands	r2, r3
 8000b3e:	68bb      	ldr	r3, [r7, #8]
 8000b40:	6879      	ldr	r1, [r7, #4]
 8000b42:	434b      	muls	r3, r1
 8000b44:	431a      	orrs	r2, r3
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	605a      	str	r2, [r3, #4]
}
 8000b4a:	46c0      	nop			; (mov r8, r8)
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	b004      	add	sp, #16
 8000b50:	bd80      	pop	{r7, pc}

08000b52 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8000b52:	b580      	push	{r7, lr}
 8000b54:	b084      	sub	sp, #16
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	60f8      	str	r0, [r7, #12]
 8000b5a:	60b9      	str	r1, [r7, #8]
 8000b5c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	6899      	ldr	r1, [r3, #8]
 8000b62:	68bb      	ldr	r3, [r7, #8]
 8000b64:	435b      	muls	r3, r3
 8000b66:	001a      	movs	r2, r3
 8000b68:	0013      	movs	r3, r2
 8000b6a:	005b      	lsls	r3, r3, #1
 8000b6c:	189b      	adds	r3, r3, r2
 8000b6e:	43db      	mvns	r3, r3
 8000b70:	400b      	ands	r3, r1
 8000b72:	001a      	movs	r2, r3
 8000b74:	68bb      	ldr	r3, [r7, #8]
 8000b76:	435b      	muls	r3, r3
 8000b78:	6879      	ldr	r1, [r7, #4]
 8000b7a:	434b      	muls	r3, r1
 8000b7c:	431a      	orrs	r2, r3
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	609a      	str	r2, [r3, #8]
}
 8000b82:	46c0      	nop			; (mov r8, r8)
 8000b84:	46bd      	mov	sp, r7
 8000b86:	b004      	add	sp, #16
 8000b88:	bd80      	pop	{r7, pc}

08000b8a <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8000b8a:	b580      	push	{r7, lr}
 8000b8c:	b084      	sub	sp, #16
 8000b8e:	af00      	add	r7, sp, #0
 8000b90:	60f8      	str	r0, [r7, #12]
 8000b92:	60b9      	str	r1, [r7, #8]
 8000b94:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	68d9      	ldr	r1, [r3, #12]
 8000b9a:	68bb      	ldr	r3, [r7, #8]
 8000b9c:	435b      	muls	r3, r3
 8000b9e:	001a      	movs	r2, r3
 8000ba0:	0013      	movs	r3, r2
 8000ba2:	005b      	lsls	r3, r3, #1
 8000ba4:	189b      	adds	r3, r3, r2
 8000ba6:	43db      	mvns	r3, r3
 8000ba8:	400b      	ands	r3, r1
 8000baa:	001a      	movs	r2, r3
 8000bac:	68bb      	ldr	r3, [r7, #8]
 8000bae:	435b      	muls	r3, r3
 8000bb0:	6879      	ldr	r1, [r7, #4]
 8000bb2:	434b      	muls	r3, r1
 8000bb4:	431a      	orrs	r2, r3
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	60da      	str	r2, [r3, #12]
}
 8000bba:	46c0      	nop			; (mov r8, r8)
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	b004      	add	sp, #16
 8000bc0:	bd80      	pop	{r7, pc}

08000bc2 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_6
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8000bc2:	b580      	push	{r7, lr}
 8000bc4:	b084      	sub	sp, #16
 8000bc6:	af00      	add	r7, sp, #0
 8000bc8:	60f8      	str	r0, [r7, #12]
 8000bca:	60b9      	str	r1, [r7, #8]
 8000bcc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	6a19      	ldr	r1, [r3, #32]
 8000bd2:	68bb      	ldr	r3, [r7, #8]
 8000bd4:	435b      	muls	r3, r3
 8000bd6:	68ba      	ldr	r2, [r7, #8]
 8000bd8:	4353      	muls	r3, r2
 8000bda:	68ba      	ldr	r2, [r7, #8]
 8000bdc:	435a      	muls	r2, r3
 8000bde:	0013      	movs	r3, r2
 8000be0:	011b      	lsls	r3, r3, #4
 8000be2:	1a9b      	subs	r3, r3, r2
 8000be4:	43db      	mvns	r3, r3
 8000be6:	400b      	ands	r3, r1
 8000be8:	001a      	movs	r2, r3
 8000bea:	68bb      	ldr	r3, [r7, #8]
 8000bec:	435b      	muls	r3, r3
 8000bee:	68b9      	ldr	r1, [r7, #8]
 8000bf0:	434b      	muls	r3, r1
 8000bf2:	68b9      	ldr	r1, [r7, #8]
 8000bf4:	434b      	muls	r3, r1
 8000bf6:	6879      	ldr	r1, [r7, #4]
 8000bf8:	434b      	muls	r3, r1
 8000bfa:	431a      	orrs	r2, r3
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	621a      	str	r2, [r3, #32]
             ((((Pin * Pin) * Pin) * Pin) * Alternate));
}
 8000c00:	46c0      	nop			; (mov r8, r8)
 8000c02:	46bd      	mov	sp, r7
 8000c04:	b004      	add	sp, #16
 8000c06:	bd80      	pop	{r7, pc}

08000c08 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
 8000c10:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	683a      	ldr	r2, [r7, #0]
 8000c16:	619a      	str	r2, [r3, #24]
}
 8000c18:	46c0      	nop			; (mov r8, r8)
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	b002      	add	sp, #8
 8000c1e:	bd80      	pop	{r7, pc}

08000c20 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
 8000c28:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	683a      	ldr	r2, [r7, #0]
 8000c2e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000c30:	46c0      	nop			; (mov r8, r8)
 8000c32:	46bd      	mov	sp, r7
 8000c34:	b002      	add	sp, #8
 8000c36:	bd80      	pop	{r7, pc}

08000c38 <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	2240      	movs	r2, #64	; 0x40
 8000c46:	431a      	orrs	r2, r3
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	601a      	str	r2, [r3, #0]
}
 8000c4c:	46c0      	nop			; (mov r8, r8)
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	b002      	add	sp, #8
 8000c52:	bd80      	pop	{r7, pc}

08000c54 <LL_SPI_Disable>:
  * @rmtoll CR1          SPE           LL_SPI_Disable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Disable(SPI_TypeDef *SPIx)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	2240      	movs	r2, #64	; 0x40
 8000c62:	4393      	bics	r3, r2
 8000c64:	001a      	movs	r2, r3
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	601a      	str	r2, [r3, #0]
}
 8000c6a:	46c0      	nop			; (mov r8, r8)
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	b002      	add	sp, #8
 8000c70:	bd80      	pop	{r7, pc}
	...

08000c74 <LL_SPI_SetMode>:
  *         @arg @ref LL_SPI_MODE_MASTER
  *         @arg @ref LL_SPI_MODE_SLAVE
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetMode(SPI_TypeDef *SPIx, uint32_t Mode)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
 8000c7c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_MSTR | SPI_CR1_SSI, Mode);
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4a05      	ldr	r2, [pc, #20]	; (8000c98 <LL_SPI_SetMode+0x24>)
 8000c84:	401a      	ands	r2, r3
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	431a      	orrs	r2, r3
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	601a      	str	r2, [r3, #0]
}
 8000c8e:	46c0      	nop			; (mov r8, r8)
 8000c90:	46bd      	mov	sp, r7
 8000c92:	b002      	add	sp, #8
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	46c0      	nop			; (mov r8, r8)
 8000c98:	fffffefb 	.word	0xfffffefb

08000c9c <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
 8000ca4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	685b      	ldr	r3, [r3, #4]
 8000caa:	2210      	movs	r2, #16
 8000cac:	4393      	bics	r3, r2
 8000cae:	001a      	movs	r2, r3
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	431a      	orrs	r2, r3
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	605a      	str	r2, [r3, #4]
}
 8000cb8:	46c0      	nop			; (mov r8, r8)
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	b002      	add	sp, #8
 8000cbe:	bd80      	pop	{r7, pc}

08000cc0 <LL_SPI_SetClockPhase>:
  *         @arg @ref LL_SPI_PHASE_1EDGE
  *         @arg @ref LL_SPI_PHASE_2EDGE
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetClockPhase(SPI_TypeDef *SPIx, uint32_t ClockPhase)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
 8000cc8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPHA, ClockPhase);
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	2201      	movs	r2, #1
 8000cd0:	4393      	bics	r3, r2
 8000cd2:	001a      	movs	r2, r3
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	431a      	orrs	r2, r3
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	601a      	str	r2, [r3, #0]
}
 8000cdc:	46c0      	nop			; (mov r8, r8)
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	b002      	add	sp, #8
 8000ce2:	bd80      	pop	{r7, pc}

08000ce4 <LL_SPI_SetClockPolarity>:
  *         @arg @ref LL_SPI_POLARITY_LOW
  *         @arg @ref LL_SPI_POLARITY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetClockPolarity(SPI_TypeDef *SPIx, uint32_t ClockPolarity)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
 8000cec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPOL, ClockPolarity);
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	2202      	movs	r2, #2
 8000cf4:	4393      	bics	r3, r2
 8000cf6:	001a      	movs	r2, r3
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	431a      	orrs	r2, r3
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	601a      	str	r2, [r3, #0]
}
 8000d00:	46c0      	nop			; (mov r8, r8)
 8000d02:	46bd      	mov	sp, r7
 8000d04:	b002      	add	sp, #8
 8000d06:	bd80      	pop	{r7, pc}

08000d08 <LL_SPI_SetBaudRatePrescaler>:
  *         @arg @ref LL_SPI_BAUDRATEPRESCALER_DIV128
  *         @arg @ref LL_SPI_BAUDRATEPRESCALER_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetBaudRatePrescaler(SPI_TypeDef *SPIx, uint32_t BaudRate)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
 8000d10:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_BR, BaudRate);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	2238      	movs	r2, #56	; 0x38
 8000d18:	4393      	bics	r3, r2
 8000d1a:	001a      	movs	r2, r3
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	431a      	orrs	r2, r3
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	601a      	str	r2, [r3, #0]
}
 8000d24:	46c0      	nop			; (mov r8, r8)
 8000d26:	46bd      	mov	sp, r7
 8000d28:	b002      	add	sp, #8
 8000d2a:	bd80      	pop	{r7, pc}

08000d2c <LL_SPI_SetTransferBitOrder>:
  *         @arg @ref LL_SPI_LSB_FIRST
  *         @arg @ref LL_SPI_MSB_FIRST
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetTransferBitOrder(SPI_TypeDef *SPIx, uint32_t BitOrder)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
 8000d34:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_LSBFIRST, BitOrder);
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	2280      	movs	r2, #128	; 0x80
 8000d3c:	4393      	bics	r3, r2
 8000d3e:	001a      	movs	r2, r3
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	431a      	orrs	r2, r3
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	601a      	str	r2, [r3, #0]
}
 8000d48:	46c0      	nop			; (mov r8, r8)
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	b002      	add	sp, #8
 8000d4e:	bd80      	pop	{r7, pc}

08000d50 <LL_SPI_SetTransferDirection>:
  *         @arg @ref LL_SPI_HALF_DUPLEX_RX
  *         @arg @ref LL_SPI_HALF_DUPLEX_TX
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetTransferDirection(SPI_TypeDef *SPIx, uint32_t TransferDirection)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
 8000d58:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_RXONLY | SPI_CR1_BIDIMODE | SPI_CR1_BIDIOE, TransferDirection);
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4a05      	ldr	r2, [pc, #20]	; (8000d74 <LL_SPI_SetTransferDirection+0x24>)
 8000d60:	401a      	ands	r2, r3
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	431a      	orrs	r2, r3
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	601a      	str	r2, [r3, #0]
}
 8000d6a:	46c0      	nop			; (mov r8, r8)
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	b002      	add	sp, #8
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	46c0      	nop			; (mov r8, r8)
 8000d74:	ffff3bff 	.word	0xffff3bff

08000d78 <LL_SPI_SetDataWidth>:
  *         @arg @ref LL_SPI_DATAWIDTH_15BIT
  *         @arg @ref LL_SPI_DATAWIDTH_16BIT
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetDataWidth(SPI_TypeDef *SPIx, uint32_t DataWidth)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
 8000d80:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_DS, DataWidth);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	4a05      	ldr	r2, [pc, #20]	; (8000d9c <LL_SPI_SetDataWidth+0x24>)
 8000d88:	401a      	ands	r2, r3
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	431a      	orrs	r2, r3
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	605a      	str	r2, [r3, #4]
}
 8000d92:	46c0      	nop			; (mov r8, r8)
 8000d94:	46bd      	mov	sp, r7
 8000d96:	b002      	add	sp, #8
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	46c0      	nop			; (mov r8, r8)
 8000d9c:	fffff0ff 	.word	0xfffff0ff

08000da0 <LL_SPI_SetRxFIFOThreshold>:
  *         @arg @ref LL_SPI_RX_FIFO_TH_HALF
  *         @arg @ref LL_SPI_RX_FIFO_TH_QUARTER
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetRxFIFOThreshold(SPI_TypeDef *SPIx, uint32_t Threshold)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
 8000da8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRXTH, Threshold);
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	4a05      	ldr	r2, [pc, #20]	; (8000dc4 <LL_SPI_SetRxFIFOThreshold+0x24>)
 8000db0:	401a      	ands	r2, r3
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	431a      	orrs	r2, r3
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	605a      	str	r2, [r3, #4]
}
 8000dba:	46c0      	nop			; (mov r8, r8)
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	b002      	add	sp, #8
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	46c0      	nop			; (mov r8, r8)
 8000dc4:	ffffefff 	.word	0xffffefff

08000dc8 <LL_SPI_SetNSSMode>:
  *         @arg @ref LL_SPI_NSS_HARD_INPUT
  *         @arg @ref LL_SPI_NSS_HARD_OUTPUT
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetNSSMode(SPI_TypeDef *SPIx, uint32_t NSS)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
 8000dd0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_SSM,  NSS);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4a0a      	ldr	r2, [pc, #40]	; (8000e00 <LL_SPI_SetNSSMode+0x38>)
 8000dd8:	401a      	ands	r2, r3
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	431a      	orrs	r2, r3
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	601a      	str	r2, [r3, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, ((uint32_t)(NSS >> 16U)));
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	2204      	movs	r2, #4
 8000de8:	4393      	bics	r3, r2
 8000dea:	001a      	movs	r2, r3
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	0c1b      	lsrs	r3, r3, #16
 8000df0:	431a      	orrs	r2, r3
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	605a      	str	r2, [r3, #4]
}
 8000df6:	46c0      	nop			; (mov r8, r8)
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	b002      	add	sp, #8
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	46c0      	nop			; (mov r8, r8)
 8000e00:	fffffdff 	.word	0xfffffdff

08000e04 <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	689b      	ldr	r3, [r3, #8]
 8000e10:	2201      	movs	r2, #1
 8000e12:	4013      	ands	r3, r2
 8000e14:	2b01      	cmp	r3, #1
 8000e16:	d101      	bne.n	8000e1c <LL_SPI_IsActiveFlag_RXNE+0x18>
 8000e18:	2301      	movs	r3, #1
 8000e1a:	e000      	b.n	8000e1e <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8000e1c:	2300      	movs	r3, #0
}
 8000e1e:	0018      	movs	r0, r3
 8000e20:	46bd      	mov	sp, r7
 8000e22:	b002      	add	sp, #8
 8000e24:	bd80      	pop	{r7, pc}

08000e26 <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 8000e26:	b580      	push	{r7, lr}
 8000e28:	b082      	sub	sp, #8
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	689b      	ldr	r3, [r3, #8]
 8000e32:	2202      	movs	r2, #2
 8000e34:	4013      	ands	r3, r2
 8000e36:	2b02      	cmp	r3, #2
 8000e38:	d101      	bne.n	8000e3e <LL_SPI_IsActiveFlag_TXE+0x18>
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	e000      	b.n	8000e40 <LL_SPI_IsActiveFlag_TXE+0x1a>
 8000e3e:	2300      	movs	r3, #0
}
 8000e40:	0018      	movs	r0, r3
 8000e42:	46bd      	mov	sp, r7
 8000e44:	b002      	add	sp, #8
 8000e46:	bd80      	pop	{r7, pc}

08000e48 <LL_SPI_IsActiveFlag_BSY>:
  * @rmtoll SR           BSY           LL_SPI_IsActiveFlag_BSY
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_BSY(SPI_TypeDef *SPIx)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	689b      	ldr	r3, [r3, #8]
 8000e54:	2280      	movs	r2, #128	; 0x80
 8000e56:	4013      	ands	r3, r2
 8000e58:	2b80      	cmp	r3, #128	; 0x80
 8000e5a:	d101      	bne.n	8000e60 <LL_SPI_IsActiveFlag_BSY+0x18>
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	e000      	b.n	8000e62 <LL_SPI_IsActiveFlag_BSY+0x1a>
 8000e60:	2300      	movs	r3, #0
}
 8000e62:	0018      	movs	r0, r3
 8000e64:	46bd      	mov	sp, r7
 8000e66:	b002      	add	sp, #8
 8000e68:	bd80      	pop	{r7, pc}

08000e6a <LL_SPI_GetRxFIFOLevel>:
  *         @arg @ref LL_SPI_RX_FIFO_QUARTER_FULL
  *         @arg @ref LL_SPI_RX_FIFO_HALF_FULL
  *         @arg @ref LL_SPI_RX_FIFO_FULL
  */
__STATIC_INLINE uint32_t LL_SPI_GetRxFIFOLevel(SPI_TypeDef *SPIx)
{
 8000e6a:	b580      	push	{r7, lr}
 8000e6c:	b082      	sub	sp, #8
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(SPIx->SR, SPI_SR_FRLVL));
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	689a      	ldr	r2, [r3, #8]
 8000e76:	23c0      	movs	r3, #192	; 0xc0
 8000e78:	00db      	lsls	r3, r3, #3
 8000e7a:	4013      	ands	r3, r2
}
 8000e7c:	0018      	movs	r0, r3
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	b002      	add	sp, #8
 8000e82:	bd80      	pop	{r7, pc}

08000e84 <LL_SPI_GetTxFIFOLevel>:
  *         @arg @ref LL_SPI_TX_FIFO_QUARTER_FULL
  *         @arg @ref LL_SPI_TX_FIFO_HALF_FULL
  *         @arg @ref LL_SPI_TX_FIFO_FULL
  */
__STATIC_INLINE uint32_t LL_SPI_GetTxFIFOLevel(SPI_TypeDef *SPIx)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(SPIx->SR, SPI_SR_FTLVL));
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	689a      	ldr	r2, [r3, #8]
 8000e90:	23c0      	movs	r3, #192	; 0xc0
 8000e92:	015b      	lsls	r3, r3, #5
 8000e94:	4013      	ands	r3, r2
}
 8000e96:	0018      	movs	r0, r3
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	b002      	add	sp, #8
 8000e9c:	bd80      	pop	{r7, pc}

08000e9e <LL_SPI_ClearFlag_OVR>:
  * @rmtoll SR           OVR           LL_SPI_ClearFlag_OVR
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_ClearFlag_OVR(SPI_TypeDef *SPIx)
{
 8000e9e:	b580      	push	{r7, lr}
 8000ea0:	b084      	sub	sp, #16
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = SPIx->DR;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	68db      	ldr	r3, [r3, #12]
 8000eaa:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8000eac:	68fb      	ldr	r3, [r7, #12]
  tmpreg = SPIx->SR;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	689b      	ldr	r3, [r3, #8]
 8000eb2:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8000eb4:	68fb      	ldr	r3, [r7, #12]
}
 8000eb6:	46c0      	nop			; (mov r8, r8)
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	b004      	add	sp, #16
 8000ebc:	bd80      	pop	{r7, pc}

08000ebe <LL_SPI_EnableDMAReq_RX>:
  * @rmtoll CR2          RXDMAEN       LL_SPI_EnableDMAReq_RX
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_EnableDMAReq_RX(SPI_TypeDef *SPIx)
{
 8000ebe:	b580      	push	{r7, lr}
 8000ec0:	b082      	sub	sp, #8
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_RXDMAEN);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	2201      	movs	r2, #1
 8000ecc:	431a      	orrs	r2, r3
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	605a      	str	r2, [r3, #4]
}
 8000ed2:	46c0      	nop			; (mov r8, r8)
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	b002      	add	sp, #8
 8000ed8:	bd80      	pop	{r7, pc}

08000eda <LL_SPI_DisableDMAReq_RX>:
  * @rmtoll CR2          RXDMAEN       LL_SPI_DisableDMAReq_RX
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_DisableDMAReq_RX(SPI_TypeDef *SPIx)
{
 8000eda:	b580      	push	{r7, lr}
 8000edc:	b082      	sub	sp, #8
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_RXDMAEN);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	4393      	bics	r3, r2
 8000eea:	001a      	movs	r2, r3
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	605a      	str	r2, [r3, #4]
}
 8000ef0:	46c0      	nop			; (mov r8, r8)
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	b002      	add	sp, #8
 8000ef6:	bd80      	pop	{r7, pc}

08000ef8 <LL_SPI_IsEnabledDMAReq_RX>:
  * @rmtoll CR2          RXDMAEN       LL_SPI_IsEnabledDMAReq_RX
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsEnabledDMAReq_RX(SPI_TypeDef *SPIx)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR2, SPI_CR2_RXDMAEN) == (SPI_CR2_RXDMAEN)) ? 1UL : 0UL);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	2201      	movs	r2, #1
 8000f06:	4013      	ands	r3, r2
 8000f08:	2b01      	cmp	r3, #1
 8000f0a:	d101      	bne.n	8000f10 <LL_SPI_IsEnabledDMAReq_RX+0x18>
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	e000      	b.n	8000f12 <LL_SPI_IsEnabledDMAReq_RX+0x1a>
 8000f10:	2300      	movs	r3, #0
}
 8000f12:	0018      	movs	r0, r3
 8000f14:	46bd      	mov	sp, r7
 8000f16:	b002      	add	sp, #8
 8000f18:	bd80      	pop	{r7, pc}

08000f1a <LL_SPI_EnableDMAReq_TX>:
  * @rmtoll CR2          TXDMAEN       LL_SPI_EnableDMAReq_TX
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_EnableDMAReq_TX(SPI_TypeDef *SPIx)
{
 8000f1a:	b580      	push	{r7, lr}
 8000f1c:	b082      	sub	sp, #8
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_TXDMAEN);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	2202      	movs	r2, #2
 8000f28:	431a      	orrs	r2, r3
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	605a      	str	r2, [r3, #4]
}
 8000f2e:	46c0      	nop			; (mov r8, r8)
 8000f30:	46bd      	mov	sp, r7
 8000f32:	b002      	add	sp, #8
 8000f34:	bd80      	pop	{r7, pc}

08000f36 <LL_SPI_DisableDMAReq_TX>:
  * @rmtoll CR2          TXDMAEN       LL_SPI_DisableDMAReq_TX
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_DisableDMAReq_TX(SPI_TypeDef *SPIx)
{
 8000f36:	b580      	push	{r7, lr}
 8000f38:	b082      	sub	sp, #8
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_TXDMAEN);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	2202      	movs	r2, #2
 8000f44:	4393      	bics	r3, r2
 8000f46:	001a      	movs	r2, r3
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	605a      	str	r2, [r3, #4]
}
 8000f4c:	46c0      	nop			; (mov r8, r8)
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	b002      	add	sp, #8
 8000f52:	bd80      	pop	{r7, pc}

08000f54 <LL_SPI_DMA_GetRegAddr>:
  * @rmtoll DR           DR            LL_SPI_DMA_GetRegAddr
  * @param  SPIx SPI Instance
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_SPI_DMA_GetRegAddr(SPI_TypeDef *SPIx)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  return (uint32_t) &(SPIx->DR);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	330c      	adds	r3, #12
}
 8000f60:	0018      	movs	r0, r3
 8000f62:	46bd      	mov	sp, r7
 8000f64:	b002      	add	sp, #8
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	330c      	adds	r3, #12
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	b2db      	uxtb	r3, r3
}
 8000f78:	0018      	movs	r0, r3
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	b002      	add	sp, #8
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	000a      	movs	r2, r1
 8000f8a:	1cfb      	adds	r3, r7, #3
 8000f8c:	701a      	strb	r2, [r3, #0]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	330c      	adds	r3, #12
 8000f92:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	1cfa      	adds	r2, r7, #3
 8000f98:	7812      	ldrb	r2, [r2, #0]
 8000f9a:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 8000f9c:	46c0      	nop			; (mov r8, r8)
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	b004      	add	sp, #16
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <LL_DMA_EnableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
 8000fac:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 8000fb2:	4a0b      	ldr	r2, [pc, #44]	; (8000fe0 <LL_DMA_EnableChannel+0x3c>)
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	18d3      	adds	r3, r2, r3
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	001a      	movs	r2, r3
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	18d3      	adds	r3, r2, r3
 8000fc0:	681a      	ldr	r2, [r3, #0]
 8000fc2:	4907      	ldr	r1, [pc, #28]	; (8000fe0 <LL_DMA_EnableChannel+0x3c>)
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	18cb      	adds	r3, r1, r3
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	0019      	movs	r1, r3
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	18cb      	adds	r3, r1, r3
 8000fd0:	2101      	movs	r1, #1
 8000fd2:	430a      	orrs	r2, r1
 8000fd4:	601a      	str	r2, [r3, #0]
}
 8000fd6:	46c0      	nop			; (mov r8, r8)
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	b004      	add	sp, #16
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	46c0      	nop			; (mov r8, r8)
 8000fe0:	08001c00 	.word	0x08001c00

08000fe4 <LL_DMA_DisableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	60fb      	str	r3, [r7, #12]
  CLEAR_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 8000ff2:	4a0b      	ldr	r2, [pc, #44]	; (8001020 <LL_DMA_DisableChannel+0x3c>)
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	18d3      	adds	r3, r2, r3
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	001a      	movs	r2, r3
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	18d3      	adds	r3, r2, r3
 8001000:	681a      	ldr	r2, [r3, #0]
 8001002:	4907      	ldr	r1, [pc, #28]	; (8001020 <LL_DMA_DisableChannel+0x3c>)
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	18cb      	adds	r3, r1, r3
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	0019      	movs	r1, r3
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	18cb      	adds	r3, r1, r3
 8001010:	2101      	movs	r1, #1
 8001012:	438a      	bics	r2, r1
 8001014:	601a      	str	r2, [r3, #0]
}
 8001016:	46c0      	nop			; (mov r8, r8)
 8001018:	46bd      	mov	sp, r7
 800101a:	b004      	add	sp, #16
 800101c:	bd80      	pop	{r7, pc}
 800101e:	46c0      	nop			; (mov r8, r8)
 8001020:	08001c00 	.word	0x08001c00

08001024 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b086      	sub	sp, #24
 8001028:	af00      	add	r7, sp, #0
 800102a:	60f8      	str	r0, [r7, #12]
 800102c:	60b9      	str	r1, [r7, #8]
 800102e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 8001034:	4a0c      	ldr	r2, [pc, #48]	; (8001068 <LL_DMA_SetDataTransferDirection+0x44>)
 8001036:	68bb      	ldr	r3, [r7, #8]
 8001038:	18d3      	adds	r3, r2, r3
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	001a      	movs	r2, r3
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	18d3      	adds	r3, r2, r3
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a09      	ldr	r2, [pc, #36]	; (800106c <LL_DMA_SetDataTransferDirection+0x48>)
 8001046:	4013      	ands	r3, r2
 8001048:	0019      	movs	r1, r3
 800104a:	4a07      	ldr	r2, [pc, #28]	; (8001068 <LL_DMA_SetDataTransferDirection+0x44>)
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	18d3      	adds	r3, r2, r3
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	001a      	movs	r2, r3
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	18d3      	adds	r3, r2, r3
 8001058:	687a      	ldr	r2, [r7, #4]
 800105a:	430a      	orrs	r2, r1
 800105c:	601a      	str	r2, [r3, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 800105e:	46c0      	nop			; (mov r8, r8)
 8001060:	46bd      	mov	sp, r7
 8001062:	b006      	add	sp, #24
 8001064:	bd80      	pop	{r7, pc}
 8001066:	46c0      	nop			; (mov r8, r8)
 8001068:	08001c00 	.word	0x08001c00
 800106c:	ffffbfef 	.word	0xffffbfef

08001070 <LL_DMA_GetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_PERIPH_TO_MEMORY
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  */
__STATIC_INLINE uint32_t LL_DMA_GetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	60fb      	str	r3, [r7, #12]
  return (READ_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 800107e:	4a07      	ldr	r2, [pc, #28]	; (800109c <LL_DMA_GetDataTransferDirection+0x2c>)
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	18d3      	adds	r3, r2, r3
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	001a      	movs	r2, r3
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	18d3      	adds	r3, r2, r3
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4a04      	ldr	r2, [pc, #16]	; (80010a0 <LL_DMA_GetDataTransferDirection+0x30>)
 8001090:	4013      	ands	r3, r2
                   DMA_CCR_DIR | DMA_CCR_MEM2MEM));
}
 8001092:	0018      	movs	r0, r3
 8001094:	46bd      	mov	sp, r7
 8001096:	b004      	add	sp, #16
 8001098:	bd80      	pop	{r7, pc}
 800109a:	46c0      	nop			; (mov r8, r8)
 800109c:	08001c00 	.word	0x08001c00
 80010a0:	00004010 	.word	0x00004010

080010a4 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b086      	sub	sp, #24
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	60f8      	str	r0, [r7, #12]
 80010ac:	60b9      	str	r1, [r7, #8]
 80010ae:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_CIRC,
 80010b4:	4a0c      	ldr	r2, [pc, #48]	; (80010e8 <LL_DMA_SetMode+0x44>)
 80010b6:	68bb      	ldr	r3, [r7, #8]
 80010b8:	18d3      	adds	r3, r2, r3
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	001a      	movs	r2, r3
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	18d3      	adds	r3, r2, r3
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	2220      	movs	r2, #32
 80010c6:	4393      	bics	r3, r2
 80010c8:	0019      	movs	r1, r3
 80010ca:	4a07      	ldr	r2, [pc, #28]	; (80010e8 <LL_DMA_SetMode+0x44>)
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	18d3      	adds	r3, r2, r3
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	001a      	movs	r2, r3
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	18d3      	adds	r3, r2, r3
 80010d8:	687a      	ldr	r2, [r7, #4]
 80010da:	430a      	orrs	r2, r1
 80010dc:	601a      	str	r2, [r3, #0]
             Mode);
}
 80010de:	46c0      	nop			; (mov r8, r8)
 80010e0:	46bd      	mov	sp, r7
 80010e2:	b006      	add	sp, #24
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	46c0      	nop			; (mov r8, r8)
 80010e8:	08001c00 	.word	0x08001c00

080010ec <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b086      	sub	sp, #24
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	60f8      	str	r0, [r7, #12]
 80010f4:	60b9      	str	r1, [r7, #8]
 80010f6:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PINC,
 80010fc:	4a0c      	ldr	r2, [pc, #48]	; (8001130 <LL_DMA_SetPeriphIncMode+0x44>)
 80010fe:	68bb      	ldr	r3, [r7, #8]
 8001100:	18d3      	adds	r3, r2, r3
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	001a      	movs	r2, r3
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	18d3      	adds	r3, r2, r3
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	2240      	movs	r2, #64	; 0x40
 800110e:	4393      	bics	r3, r2
 8001110:	0019      	movs	r1, r3
 8001112:	4a07      	ldr	r2, [pc, #28]	; (8001130 <LL_DMA_SetPeriphIncMode+0x44>)
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	18d3      	adds	r3, r2, r3
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	001a      	movs	r2, r3
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	18d3      	adds	r3, r2, r3
 8001120:	687a      	ldr	r2, [r7, #4]
 8001122:	430a      	orrs	r2, r1
 8001124:	601a      	str	r2, [r3, #0]
             PeriphOrM2MSrcIncMode);
}
 8001126:	46c0      	nop			; (mov r8, r8)
 8001128:	46bd      	mov	sp, r7
 800112a:	b006      	add	sp, #24
 800112c:	bd80      	pop	{r7, pc}
 800112e:	46c0      	nop			; (mov r8, r8)
 8001130:	08001c00 	.word	0x08001c00

08001134 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b086      	sub	sp, #24
 8001138:	af00      	add	r7, sp, #0
 800113a:	60f8      	str	r0, [r7, #12]
 800113c:	60b9      	str	r1, [r7, #8]
 800113e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MINC,
 8001144:	4a0c      	ldr	r2, [pc, #48]	; (8001178 <LL_DMA_SetMemoryIncMode+0x44>)
 8001146:	68bb      	ldr	r3, [r7, #8]
 8001148:	18d3      	adds	r3, r2, r3
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	001a      	movs	r2, r3
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	18d3      	adds	r3, r2, r3
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	2280      	movs	r2, #128	; 0x80
 8001156:	4393      	bics	r3, r2
 8001158:	0019      	movs	r1, r3
 800115a:	4a07      	ldr	r2, [pc, #28]	; (8001178 <LL_DMA_SetMemoryIncMode+0x44>)
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	18d3      	adds	r3, r2, r3
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	001a      	movs	r2, r3
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	18d3      	adds	r3, r2, r3
 8001168:	687a      	ldr	r2, [r7, #4]
 800116a:	430a      	orrs	r2, r1
 800116c:	601a      	str	r2, [r3, #0]
             MemoryOrM2MDstIncMode);
}
 800116e:	46c0      	nop			; (mov r8, r8)
 8001170:	46bd      	mov	sp, r7
 8001172:	b006      	add	sp, #24
 8001174:	bd80      	pop	{r7, pc}
 8001176:	46c0      	nop			; (mov r8, r8)
 8001178:	08001c00 	.word	0x08001c00

0800117c <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b086      	sub	sp, #24
 8001180:	af00      	add	r7, sp, #0
 8001182:	60f8      	str	r0, [r7, #12]
 8001184:	60b9      	str	r1, [r7, #8]
 8001186:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PSIZE,
 800118c:	4a0c      	ldr	r2, [pc, #48]	; (80011c0 <LL_DMA_SetPeriphSize+0x44>)
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	18d3      	adds	r3, r2, r3
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	001a      	movs	r2, r3
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	18d3      	adds	r3, r2, r3
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a09      	ldr	r2, [pc, #36]	; (80011c4 <LL_DMA_SetPeriphSize+0x48>)
 800119e:	4013      	ands	r3, r2
 80011a0:	0019      	movs	r1, r3
 80011a2:	4a07      	ldr	r2, [pc, #28]	; (80011c0 <LL_DMA_SetPeriphSize+0x44>)
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	18d3      	adds	r3, r2, r3
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	001a      	movs	r2, r3
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	18d3      	adds	r3, r2, r3
 80011b0:	687a      	ldr	r2, [r7, #4]
 80011b2:	430a      	orrs	r2, r1
 80011b4:	601a      	str	r2, [r3, #0]
             PeriphOrM2MSrcDataSize);
}
 80011b6:	46c0      	nop			; (mov r8, r8)
 80011b8:	46bd      	mov	sp, r7
 80011ba:	b006      	add	sp, #24
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	46c0      	nop			; (mov r8, r8)
 80011c0:	08001c00 	.word	0x08001c00
 80011c4:	fffffcff 	.word	0xfffffcff

080011c8 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b086      	sub	sp, #24
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	60f8      	str	r0, [r7, #12]
 80011d0:	60b9      	str	r1, [r7, #8]
 80011d2:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MSIZE,
 80011d8:	4a0c      	ldr	r2, [pc, #48]	; (800120c <LL_DMA_SetMemorySize+0x44>)
 80011da:	68bb      	ldr	r3, [r7, #8]
 80011dc:	18d3      	adds	r3, r2, r3
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	001a      	movs	r2, r3
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	18d3      	adds	r3, r2, r3
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a09      	ldr	r2, [pc, #36]	; (8001210 <LL_DMA_SetMemorySize+0x48>)
 80011ea:	4013      	ands	r3, r2
 80011ec:	0019      	movs	r1, r3
 80011ee:	4a07      	ldr	r2, [pc, #28]	; (800120c <LL_DMA_SetMemorySize+0x44>)
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	18d3      	adds	r3, r2, r3
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	001a      	movs	r2, r3
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	18d3      	adds	r3, r2, r3
 80011fc:	687a      	ldr	r2, [r7, #4]
 80011fe:	430a      	orrs	r2, r1
 8001200:	601a      	str	r2, [r3, #0]
             MemoryOrM2MDstDataSize);
}
 8001202:	46c0      	nop			; (mov r8, r8)
 8001204:	46bd      	mov	sp, r7
 8001206:	b006      	add	sp, #24
 8001208:	bd80      	pop	{r7, pc}
 800120a:	46c0      	nop			; (mov r8, r8)
 800120c:	08001c00 	.word	0x08001c00
 8001210:	fffff3ff 	.word	0xfffff3ff

08001214 <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b086      	sub	sp, #24
 8001218:	af00      	add	r7, sp, #0
 800121a:	60f8      	str	r0, [r7, #12]
 800121c:	60b9      	str	r1, [r7, #8]
 800121e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PL,
 8001224:	4a0c      	ldr	r2, [pc, #48]	; (8001258 <LL_DMA_SetChannelPriorityLevel+0x44>)
 8001226:	68bb      	ldr	r3, [r7, #8]
 8001228:	18d3      	adds	r3, r2, r3
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	001a      	movs	r2, r3
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	18d3      	adds	r3, r2, r3
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a09      	ldr	r2, [pc, #36]	; (800125c <LL_DMA_SetChannelPriorityLevel+0x48>)
 8001236:	4013      	ands	r3, r2
 8001238:	0019      	movs	r1, r3
 800123a:	4a07      	ldr	r2, [pc, #28]	; (8001258 <LL_DMA_SetChannelPriorityLevel+0x44>)
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	18d3      	adds	r3, r2, r3
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	001a      	movs	r2, r3
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	18d3      	adds	r3, r2, r3
 8001248:	687a      	ldr	r2, [r7, #4]
 800124a:	430a      	orrs	r2, r1
 800124c:	601a      	str	r2, [r3, #0]
             Priority);
}
 800124e:	46c0      	nop			; (mov r8, r8)
 8001250:	46bd      	mov	sp, r7
 8001252:	b006      	add	sp, #24
 8001254:	bd80      	pop	{r7, pc}
 8001256:	46c0      	nop			; (mov r8, r8)
 8001258:	08001c00 	.word	0x08001c00
 800125c:	ffffcfff 	.word	0xffffcfff

08001260 <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  NbData Between Min_Data = 0 and Max_Data = 0x0000FFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t NbData)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b086      	sub	sp, #24
 8001264:	af00      	add	r7, sp, #0
 8001266:	60f8      	str	r0, [r7, #12]
 8001268:	60b9      	str	r1, [r7, #8]
 800126a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 8001270:	4a0b      	ldr	r2, [pc, #44]	; (80012a0 <LL_DMA_SetDataLength+0x40>)
 8001272:	68bb      	ldr	r3, [r7, #8]
 8001274:	18d3      	adds	r3, r2, r3
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	001a      	movs	r2, r3
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	18d3      	adds	r3, r2, r3
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	0c1b      	lsrs	r3, r3, #16
 8001282:	0419      	lsls	r1, r3, #16
 8001284:	4a06      	ldr	r2, [pc, #24]	; (80012a0 <LL_DMA_SetDataLength+0x40>)
 8001286:	68bb      	ldr	r3, [r7, #8]
 8001288:	18d3      	adds	r3, r2, r3
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	001a      	movs	r2, r3
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	18d3      	adds	r3, r2, r3
 8001292:	687a      	ldr	r2, [r7, #4]
 8001294:	430a      	orrs	r2, r1
 8001296:	605a      	str	r2, [r3, #4]
             DMA_CNDTR_NDT, NbData);
}
 8001298:	46c0      	nop			; (mov r8, r8)
 800129a:	46bd      	mov	sp, r7
 800129c:	b006      	add	sp, #24
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	08001c00 	.word	0x08001c00

080012a4 <LL_DMA_ConfigAddresses>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ConfigAddresses(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t SrcAddress,
                                            uint32_t DstAddress, uint32_t Direction)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b086      	sub	sp, #24
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	60f8      	str	r0, [r7, #12]
 80012ac:	60b9      	str	r1, [r7, #8]
 80012ae:	607a      	str	r2, [r7, #4]
 80012b0:	603b      	str	r3, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	617b      	str	r3, [r7, #20]
  /* Direction Memory to Periph */
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 80012b6:	6a3b      	ldr	r3, [r7, #32]
 80012b8:	2b10      	cmp	r3, #16
 80012ba:	d112      	bne.n	80012e2 <LL_DMA_ConfigAddresses+0x3e>
  {
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, SrcAddress);
 80012bc:	4a14      	ldr	r2, [pc, #80]	; (8001310 <LL_DMA_ConfigAddresses+0x6c>)
 80012be:	68bb      	ldr	r3, [r7, #8]
 80012c0:	18d3      	adds	r3, r2, r3
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	001a      	movs	r2, r3
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	18d3      	adds	r3, r2, r3
 80012ca:	687a      	ldr	r2, [r7, #4]
 80012cc:	60da      	str	r2, [r3, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, DstAddress);
 80012ce:	4a10      	ldr	r2, [pc, #64]	; (8001310 <LL_DMA_ConfigAddresses+0x6c>)
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	18d3      	adds	r3, r2, r3
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	001a      	movs	r2, r3
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	18d3      	adds	r3, r2, r3
 80012dc:	683a      	ldr	r2, [r7, #0]
 80012de:	609a      	str	r2, [r3, #8]
  else
  {
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, SrcAddress);
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, DstAddress);
  }
}
 80012e0:	e011      	b.n	8001306 <LL_DMA_ConfigAddresses+0x62>
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, SrcAddress);
 80012e2:	4a0b      	ldr	r2, [pc, #44]	; (8001310 <LL_DMA_ConfigAddresses+0x6c>)
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	18d3      	adds	r3, r2, r3
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	001a      	movs	r2, r3
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	18d3      	adds	r3, r2, r3
 80012f0:	687a      	ldr	r2, [r7, #4]
 80012f2:	609a      	str	r2, [r3, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, DstAddress);
 80012f4:	4a06      	ldr	r2, [pc, #24]	; (8001310 <LL_DMA_ConfigAddresses+0x6c>)
 80012f6:	68bb      	ldr	r3, [r7, #8]
 80012f8:	18d3      	adds	r3, r2, r3
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	001a      	movs	r2, r3
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	18d3      	adds	r3, r2, r3
 8001302:	683a      	ldr	r2, [r7, #0]
 8001304:	60da      	str	r2, [r3, #12]
}
 8001306:	46c0      	nop			; (mov r8, r8)
 8001308:	46bd      	mov	sp, r7
 800130a:	b006      	add	sp, #24
 800130c:	bd80      	pop	{r7, pc}
 800130e:	46c0      	nop			; (mov r8, r8)
 8001310:	08001c00 	.word	0x08001c00

08001314 <LL_DMA_SetPeriphRequest>:
  *         @arg @ref LL_DMAMUX_REQ_UCPD2_RX
  *         @arg @ref LL_DMAMUX_REQ_UCPD2_TX
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphRequest(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Request)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b086      	sub	sp, #24
 8001318:	af00      	add	r7, sp, #0
 800131a:	60f8      	str	r0, [r7, #12]
 800131c:	60b9      	str	r1, [r7, #8]
 800131e:	607a      	str	r2, [r7, #4]
  uint32_t dmamux_ccr_offset = ((((uint32_t)DMAx ^ (uint32_t)DMA1) >> 10U) * 7U);
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	0a9b      	lsrs	r3, r3, #10
 8001324:	4a0f      	ldr	r2, [pc, #60]	; (8001364 <LL_DMA_SetPeriphRequest+0x50>)
 8001326:	405a      	eors	r2, r3
 8001328:	0013      	movs	r3, r2
 800132a:	00db      	lsls	r3, r3, #3
 800132c:	1a9b      	subs	r3, r3, r2
 800132e:	617b      	str	r3, [r7, #20]
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, Request);
 8001330:	68ba      	ldr	r2, [r7, #8]
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	18d3      	adds	r3, r2, r3
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	4a0b      	ldr	r2, [pc, #44]	; (8001368 <LL_DMA_SetPeriphRequest+0x54>)
 800133a:	4694      	mov	ip, r2
 800133c:	4463      	add	r3, ip
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	223f      	movs	r2, #63	; 0x3f
 8001342:	4393      	bics	r3, r2
 8001344:	0019      	movs	r1, r3
 8001346:	68ba      	ldr	r2, [r7, #8]
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	18d3      	adds	r3, r2, r3
 800134c:	009b      	lsls	r3, r3, #2
 800134e:	4a06      	ldr	r2, [pc, #24]	; (8001368 <LL_DMA_SetPeriphRequest+0x54>)
 8001350:	4694      	mov	ip, r2
 8001352:	4463      	add	r3, ip
 8001354:	687a      	ldr	r2, [r7, #4]
 8001356:	430a      	orrs	r2, r1
 8001358:	601a      	str	r2, [r3, #0]
}
 800135a:	46c0      	nop			; (mov r8, r8)
 800135c:	46bd      	mov	sp, r7
 800135e:	b006      	add	sp, #24
 8001360:	bd80      	pop	{r7, pc}
 8001362:	46c0      	nop			; (mov r8, r8)
 8001364:	00100080 	.word	0x00100080
 8001368:	40020800 	.word	0x40020800

0800136c <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b084      	sub	sp, #16
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
 8001374:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_TCIE);
 800137a:	4a0b      	ldr	r2, [pc, #44]	; (80013a8 <LL_DMA_EnableIT_TC+0x3c>)
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	18d3      	adds	r3, r2, r3
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	001a      	movs	r2, r3
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	18d3      	adds	r3, r2, r3
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	4907      	ldr	r1, [pc, #28]	; (80013a8 <LL_DMA_EnableIT_TC+0x3c>)
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	18cb      	adds	r3, r1, r3
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	0019      	movs	r1, r3
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	18cb      	adds	r3, r1, r3
 8001398:	2102      	movs	r1, #2
 800139a:	430a      	orrs	r2, r1
 800139c:	601a      	str	r2, [r3, #0]
}
 800139e:	46c0      	nop			; (mov r8, r8)
 80013a0:	46bd      	mov	sp, r7
 80013a2:	b004      	add	sp, #16
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	46c0      	nop			; (mov r8, r8)
 80013a8:	08001c00 	.word	0x08001c00

080013ac <spi_init>:

static buffer_t rx_buffer = {0};
static buffer_t tx_buffer = {0};

void spi_init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
	LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 80013b0:	2001      	movs	r0, #1
 80013b2:	f7ff fb87 	bl	8000ac4 <LL_IOP_GRP1_EnableClock>

	LL_GPIO_SetPinOutputType(SPI_MOSI_GPIO_Port, SPI_MOSI_Pin, LL_GPIO_OUTPUT_PUSHPULL);
 80013b6:	23a0      	movs	r3, #160	; 0xa0
 80013b8:	05db      	lsls	r3, r3, #23
 80013ba:	2200      	movs	r2, #0
 80013bc:	2180      	movs	r1, #128	; 0x80
 80013be:	0018      	movs	r0, r3
 80013c0:	f7ff fbb2 	bl	8000b28 <LL_GPIO_SetPinOutputType>
	LL_GPIO_SetPinPull(SPI_MOSI_GPIO_Port, SPI_MOSI_Pin, LL_GPIO_PULL_NO);
 80013c4:	23a0      	movs	r3, #160	; 0xa0
 80013c6:	05db      	lsls	r3, r3, #23
 80013c8:	2200      	movs	r2, #0
 80013ca:	2180      	movs	r1, #128	; 0x80
 80013cc:	0018      	movs	r0, r3
 80013ce:	f7ff fbdc 	bl	8000b8a <LL_GPIO_SetPinPull>
	LL_GPIO_SetPinSpeed(SPI_MOSI_GPIO_Port, SPI_MOSI_Pin, LL_GPIO_SPEED_FREQ_LOW);
 80013d2:	23a0      	movs	r3, #160	; 0xa0
 80013d4:	05db      	lsls	r3, r3, #23
 80013d6:	2200      	movs	r2, #0
 80013d8:	2180      	movs	r1, #128	; 0x80
 80013da:	0018      	movs	r0, r3
 80013dc:	f7ff fbb9 	bl	8000b52 <LL_GPIO_SetPinSpeed>
	LL_GPIO_SetAFPin_0_7(SPI_MOSI_GPIO_Port, SPI_MOSI_Pin, LL_GPIO_AF_0);
 80013e0:	23a0      	movs	r3, #160	; 0xa0
 80013e2:	05db      	lsls	r3, r3, #23
 80013e4:	2200      	movs	r2, #0
 80013e6:	2180      	movs	r1, #128	; 0x80
 80013e8:	0018      	movs	r0, r3
 80013ea:	f7ff fbea 	bl	8000bc2 <LL_GPIO_SetAFPin_0_7>
	LL_GPIO_SetPinMode(SPI_MOSI_GPIO_Port, SPI_MOSI_Pin, LL_GPIO_MODE_ALTERNATE);
 80013ee:	23a0      	movs	r3, #160	; 0xa0
 80013f0:	05db      	lsls	r3, r3, #23
 80013f2:	2202      	movs	r2, #2
 80013f4:	2180      	movs	r1, #128	; 0x80
 80013f6:	0018      	movs	r0, r3
 80013f8:	f7ff fb7a 	bl	8000af0 <LL_GPIO_SetPinMode>

	LL_GPIO_SetPinOutputType(SPI_MISO_GPIO_Port, SPI_MISO_Pin, LL_GPIO_OUTPUT_PUSHPULL);
 80013fc:	23a0      	movs	r3, #160	; 0xa0
 80013fe:	05db      	lsls	r3, r3, #23
 8001400:	2200      	movs	r2, #0
 8001402:	2140      	movs	r1, #64	; 0x40
 8001404:	0018      	movs	r0, r3
 8001406:	f7ff fb8f 	bl	8000b28 <LL_GPIO_SetPinOutputType>
	LL_GPIO_SetPinPull(SPI_MISO_GPIO_Port, SPI_MISO_Pin, LL_GPIO_PULL_NO);
 800140a:	23a0      	movs	r3, #160	; 0xa0
 800140c:	05db      	lsls	r3, r3, #23
 800140e:	2200      	movs	r2, #0
 8001410:	2140      	movs	r1, #64	; 0x40
 8001412:	0018      	movs	r0, r3
 8001414:	f7ff fbb9 	bl	8000b8a <LL_GPIO_SetPinPull>
	LL_GPIO_SetPinSpeed(SPI_MISO_GPIO_Port, SPI_MISO_Pin, LL_GPIO_SPEED_FREQ_LOW);
 8001418:	23a0      	movs	r3, #160	; 0xa0
 800141a:	05db      	lsls	r3, r3, #23
 800141c:	2200      	movs	r2, #0
 800141e:	2140      	movs	r1, #64	; 0x40
 8001420:	0018      	movs	r0, r3
 8001422:	f7ff fb96 	bl	8000b52 <LL_GPIO_SetPinSpeed>
	LL_GPIO_SetAFPin_0_7(SPI_MISO_GPIO_Port, SPI_MISO_Pin, LL_GPIO_AF_0);
 8001426:	23a0      	movs	r3, #160	; 0xa0
 8001428:	05db      	lsls	r3, r3, #23
 800142a:	2200      	movs	r2, #0
 800142c:	2140      	movs	r1, #64	; 0x40
 800142e:	0018      	movs	r0, r3
 8001430:	f7ff fbc7 	bl	8000bc2 <LL_GPIO_SetAFPin_0_7>
	LL_GPIO_SetPinMode(SPI_MISO_GPIO_Port, SPI_MISO_Pin, LL_GPIO_MODE_ALTERNATE);
 8001434:	23a0      	movs	r3, #160	; 0xa0
 8001436:	05db      	lsls	r3, r3, #23
 8001438:	2202      	movs	r2, #2
 800143a:	2140      	movs	r1, #64	; 0x40
 800143c:	0018      	movs	r0, r3
 800143e:	f7ff fb57 	bl	8000af0 <LL_GPIO_SetPinMode>

	LL_GPIO_SetPinOutputType(SPI_SCK_GPIO_Port, SPI_SCK_Pin, LL_GPIO_OUTPUT_PUSHPULL);
 8001442:	23a0      	movs	r3, #160	; 0xa0
 8001444:	05db      	lsls	r3, r3, #23
 8001446:	2200      	movs	r2, #0
 8001448:	2102      	movs	r1, #2
 800144a:	0018      	movs	r0, r3
 800144c:	f7ff fb6c 	bl	8000b28 <LL_GPIO_SetPinOutputType>
	LL_GPIO_SetPinPull(SPI_SCK_GPIO_Port, SPI_SCK_Pin, LL_GPIO_PULL_NO);
 8001450:	23a0      	movs	r3, #160	; 0xa0
 8001452:	05db      	lsls	r3, r3, #23
 8001454:	2200      	movs	r2, #0
 8001456:	2102      	movs	r1, #2
 8001458:	0018      	movs	r0, r3
 800145a:	f7ff fb96 	bl	8000b8a <LL_GPIO_SetPinPull>
	LL_GPIO_SetPinSpeed(SPI_SCK_GPIO_Port, SPI_SCK_Pin, LL_GPIO_SPEED_FREQ_LOW);
 800145e:	23a0      	movs	r3, #160	; 0xa0
 8001460:	05db      	lsls	r3, r3, #23
 8001462:	2200      	movs	r2, #0
 8001464:	2102      	movs	r1, #2
 8001466:	0018      	movs	r0, r3
 8001468:	f7ff fb73 	bl	8000b52 <LL_GPIO_SetPinSpeed>
	LL_GPIO_SetAFPin_0_7(SPI_SCK_GPIO_Port, SPI_SCK_Pin, LL_GPIO_AF_0);
 800146c:	23a0      	movs	r3, #160	; 0xa0
 800146e:	05db      	lsls	r3, r3, #23
 8001470:	2200      	movs	r2, #0
 8001472:	2102      	movs	r1, #2
 8001474:	0018      	movs	r0, r3
 8001476:	f7ff fba4 	bl	8000bc2 <LL_GPIO_SetAFPin_0_7>
	LL_GPIO_SetPinMode(SPI_SCK_GPIO_Port, SPI_SCK_Pin, LL_GPIO_MODE_ALTERNATE);
 800147a:	23a0      	movs	r3, #160	; 0xa0
 800147c:	05db      	lsls	r3, r3, #23
 800147e:	2202      	movs	r2, #2
 8001480:	2102      	movs	r1, #2
 8001482:	0018      	movs	r0, r3
 8001484:	f7ff fb34 	bl	8000af0 <LL_GPIO_SetPinMode>

	LL_GPIO_SetPinOutputType(SPI_CS_GPIO_Port, SPI_CS_Pin, LL_GPIO_OUTPUT_PUSHPULL);
 8001488:	23a0      	movs	r3, #160	; 0xa0
 800148a:	05db      	lsls	r3, r3, #23
 800148c:	2200      	movs	r2, #0
 800148e:	2110      	movs	r1, #16
 8001490:	0018      	movs	r0, r3
 8001492:	f7ff fb49 	bl	8000b28 <LL_GPIO_SetPinOutputType>
	LL_GPIO_SetPinPull(SPI_CS_GPIO_Port, SPI_CS_Pin, LL_GPIO_PULL_NO);
 8001496:	23a0      	movs	r3, #160	; 0xa0
 8001498:	05db      	lsls	r3, r3, #23
 800149a:	2200      	movs	r2, #0
 800149c:	2110      	movs	r1, #16
 800149e:	0018      	movs	r0, r3
 80014a0:	f7ff fb73 	bl	8000b8a <LL_GPIO_SetPinPull>
	LL_GPIO_SetPinSpeed(SPI_CS_GPIO_Port, SPI_CS_Pin, LL_GPIO_SPEED_FREQ_LOW);
 80014a4:	23a0      	movs	r3, #160	; 0xa0
 80014a6:	05db      	lsls	r3, r3, #23
 80014a8:	2200      	movs	r2, #0
 80014aa:	2110      	movs	r1, #16
 80014ac:	0018      	movs	r0, r3
 80014ae:	f7ff fb50 	bl	8000b52 <LL_GPIO_SetPinSpeed>
	LL_GPIO_SetPinMode(SPI_CS_GPIO_Port, SPI_CS_Pin, LL_GPIO_MODE_OUTPUT);
 80014b2:	23a0      	movs	r3, #160	; 0xa0
 80014b4:	05db      	lsls	r3, r3, #23
 80014b6:	2201      	movs	r2, #1
 80014b8:	2110      	movs	r1, #16
 80014ba:	0018      	movs	r0, r3
 80014bc:	f7ff fb18 	bl	8000af0 <LL_GPIO_SetPinMode>

	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 80014c0:	2380      	movs	r3, #128	; 0x80
 80014c2:	015b      	lsls	r3, r3, #5
 80014c4:	0018      	movs	r0, r3
 80014c6:	f7ff fae7 	bl	8000a98 <LL_APB2_GRP1_EnableClock>

	LL_SPI_Disable(spi);
 80014ca:	4b64      	ldr	r3, [pc, #400]	; (800165c <spi_init+0x2b0>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	0018      	movs	r0, r3
 80014d0:	f7ff fbc0 	bl	8000c54 <LL_SPI_Disable>

	LL_SPI_SetMode(spi, LL_SPI_MODE_MASTER);
 80014d4:	4b61      	ldr	r3, [pc, #388]	; (800165c <spi_init+0x2b0>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	2282      	movs	r2, #130	; 0x82
 80014da:	0052      	lsls	r2, r2, #1
 80014dc:	0011      	movs	r1, r2
 80014de:	0018      	movs	r0, r3
 80014e0:	f7ff fbc8 	bl	8000c74 <LL_SPI_SetMode>
	LL_SPI_SetTransferDirection(spi, LL_SPI_FULL_DUPLEX);
 80014e4:	4b5d      	ldr	r3, [pc, #372]	; (800165c <spi_init+0x2b0>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	2100      	movs	r1, #0
 80014ea:	0018      	movs	r0, r3
 80014ec:	f7ff fc30 	bl	8000d50 <LL_SPI_SetTransferDirection>
	LL_SPI_SetClockPolarity(spi, LL_SPI_POLARITY_LOW);
 80014f0:	4b5a      	ldr	r3, [pc, #360]	; (800165c <spi_init+0x2b0>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	2100      	movs	r1, #0
 80014f6:	0018      	movs	r0, r3
 80014f8:	f7ff fbf4 	bl	8000ce4 <LL_SPI_SetClockPolarity>
	LL_SPI_SetClockPhase(spi, LL_SPI_PHASE_1EDGE);
 80014fc:	4b57      	ldr	r3, [pc, #348]	; (800165c <spi_init+0x2b0>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	2100      	movs	r1, #0
 8001502:	0018      	movs	r0, r3
 8001504:	f7ff fbdc 	bl	8000cc0 <LL_SPI_SetClockPhase>
	LL_SPI_SetNSSMode(spi, LL_SPI_NSS_SOFT);
 8001508:	4b54      	ldr	r3, [pc, #336]	; (800165c <spi_init+0x2b0>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	2280      	movs	r2, #128	; 0x80
 800150e:	0092      	lsls	r2, r2, #2
 8001510:	0011      	movs	r1, r2
 8001512:	0018      	movs	r0, r3
 8001514:	f7ff fc58 	bl	8000dc8 <LL_SPI_SetNSSMode>
	LL_SPI_SetBaudRatePrescaler(spi, LL_SPI_BAUDRATEPRESCALER_DIV8);
 8001518:	4b50      	ldr	r3, [pc, #320]	; (800165c <spi_init+0x2b0>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	2110      	movs	r1, #16
 800151e:	0018      	movs	r0, r3
 8001520:	f7ff fbf2 	bl	8000d08 <LL_SPI_SetBaudRatePrescaler>
	LL_SPI_SetTransferBitOrder(spi, LL_SPI_MSB_FIRST);
 8001524:	4b4d      	ldr	r3, [pc, #308]	; (800165c <spi_init+0x2b0>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	2100      	movs	r1, #0
 800152a:	0018      	movs	r0, r3
 800152c:	f7ff fbfe 	bl	8000d2c <LL_SPI_SetTransferBitOrder>
	LL_SPI_SetDataWidth(spi, LL_SPI_DATAWIDTH_8BIT);
 8001530:	4b4a      	ldr	r3, [pc, #296]	; (800165c <spi_init+0x2b0>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	22e0      	movs	r2, #224	; 0xe0
 8001536:	00d2      	lsls	r2, r2, #3
 8001538:	0011      	movs	r1, r2
 800153a:	0018      	movs	r0, r3
 800153c:	f7ff fc1c 	bl	8000d78 <LL_SPI_SetDataWidth>
	LL_SPI_SetStandard(spi, LL_SPI_PROTOCOL_MOTOROLA);
 8001540:	4b46      	ldr	r3, [pc, #280]	; (800165c <spi_init+0x2b0>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	2100      	movs	r1, #0
 8001546:	0018      	movs	r0, r3
 8001548:	f7ff fba8 	bl	8000c9c <LL_SPI_SetStandard>
	LL_SPI_SetRxFIFOThreshold(spi, LL_SPI_RX_FIFO_TH_QUARTER);
 800154c:	4b43      	ldr	r3, [pc, #268]	; (800165c <spi_init+0x2b0>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	2280      	movs	r2, #128	; 0x80
 8001552:	0152      	lsls	r2, r2, #5
 8001554:	0011      	movs	r1, r2
 8001556:	0018      	movs	r0, r3
 8001558:	f7ff fc22 	bl	8000da0 <LL_SPI_SetRxFIFOThreshold>

	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 800155c:	2001      	movs	r0, #1
 800155e:	f7ff fa85 	bl	8000a6c <LL_AHB1_GRP1_EnableClock>

	LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_1, LL_DMAMUX_REQ_SPI1_TX);
 8001562:	4b3f      	ldr	r3, [pc, #252]	; (8001660 <spi_init+0x2b4>)
 8001564:	2211      	movs	r2, #17
 8001566:	2100      	movs	r1, #0
 8001568:	0018      	movs	r0, r3
 800156a:	f7ff fed3 	bl	8001314 <LL_DMA_SetPeriphRequest>
	LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_1, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 800156e:	4b3c      	ldr	r3, [pc, #240]	; (8001660 <spi_init+0x2b4>)
 8001570:	2210      	movs	r2, #16
 8001572:	2100      	movs	r1, #0
 8001574:	0018      	movs	r0, r3
 8001576:	f7ff fd55 	bl	8001024 <LL_DMA_SetDataTransferDirection>
	LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PRIORITY_HIGH);
 800157a:	2380      	movs	r3, #128	; 0x80
 800157c:	019b      	lsls	r3, r3, #6
 800157e:	4838      	ldr	r0, [pc, #224]	; (8001660 <spi_init+0x2b4>)
 8001580:	001a      	movs	r2, r3
 8001582:	2100      	movs	r1, #0
 8001584:	f7ff fe46 	bl	8001214 <LL_DMA_SetChannelPriorityLevel>
	LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MODE_NORMAL);
 8001588:	4b35      	ldr	r3, [pc, #212]	; (8001660 <spi_init+0x2b4>)
 800158a:	2200      	movs	r2, #0
 800158c:	2100      	movs	r1, #0
 800158e:	0018      	movs	r0, r3
 8001590:	f7ff fd88 	bl	80010a4 <LL_DMA_SetMode>
	LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PERIPH_NOINCREMENT);
 8001594:	4b32      	ldr	r3, [pc, #200]	; (8001660 <spi_init+0x2b4>)
 8001596:	2200      	movs	r2, #0
 8001598:	2100      	movs	r1, #0
 800159a:	0018      	movs	r0, r3
 800159c:	f7ff fda6 	bl	80010ec <LL_DMA_SetPeriphIncMode>
	LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MEMORY_INCREMENT);
 80015a0:	4b2f      	ldr	r3, [pc, #188]	; (8001660 <spi_init+0x2b4>)
 80015a2:	2280      	movs	r2, #128	; 0x80
 80015a4:	2100      	movs	r1, #0
 80015a6:	0018      	movs	r0, r3
 80015a8:	f7ff fdc4 	bl	8001134 <LL_DMA_SetMemoryIncMode>
	LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PDATAALIGN_BYTE);
 80015ac:	4b2c      	ldr	r3, [pc, #176]	; (8001660 <spi_init+0x2b4>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	2100      	movs	r1, #0
 80015b2:	0018      	movs	r0, r3
 80015b4:	f7ff fde2 	bl	800117c <LL_DMA_SetPeriphSize>
	LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MDATAALIGN_BYTE);
 80015b8:	4b29      	ldr	r3, [pc, #164]	; (8001660 <spi_init+0x2b4>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	2100      	movs	r1, #0
 80015be:	0018      	movs	r0, r3
 80015c0:	f7ff fe02 	bl	80011c8 <LL_DMA_SetMemorySize>

	NVIC_SetPriority(DMA1_Channel1_IRQn, 0);
 80015c4:	2100      	movs	r1, #0
 80015c6:	2009      	movs	r0, #9
 80015c8:	f7ff f9e2 	bl	8000990 <__NVIC_SetPriority>
	NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80015cc:	2009      	movs	r0, #9
 80015ce:	f7ff f9c5 	bl	800095c <__NVIC_EnableIRQ>
	LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_1);
 80015d2:	4b23      	ldr	r3, [pc, #140]	; (8001660 <spi_init+0x2b4>)
 80015d4:	2100      	movs	r1, #0
 80015d6:	0018      	movs	r0, r3
 80015d8:	f7ff fec8 	bl	800136c <LL_DMA_EnableIT_TC>

	LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_2, LL_DMAMUX_REQ_SPI1_RX);
 80015dc:	4b20      	ldr	r3, [pc, #128]	; (8001660 <spi_init+0x2b4>)
 80015de:	2210      	movs	r2, #16
 80015e0:	2101      	movs	r1, #1
 80015e2:	0018      	movs	r0, r3
 80015e4:	f7ff fe96 	bl	8001314 <LL_DMA_SetPeriphRequest>
	LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_2, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 80015e8:	4b1d      	ldr	r3, [pc, #116]	; (8001660 <spi_init+0x2b4>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	2101      	movs	r1, #1
 80015ee:	0018      	movs	r0, r3
 80015f0:	f7ff fd18 	bl	8001024 <LL_DMA_SetDataTransferDirection>
	LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PRIORITY_HIGH);
 80015f4:	2380      	movs	r3, #128	; 0x80
 80015f6:	019b      	lsls	r3, r3, #6
 80015f8:	4819      	ldr	r0, [pc, #100]	; (8001660 <spi_init+0x2b4>)
 80015fa:	001a      	movs	r2, r3
 80015fc:	2101      	movs	r1, #1
 80015fe:	f7ff fe09 	bl	8001214 <LL_DMA_SetChannelPriorityLevel>
	LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MODE_NORMAL);
 8001602:	4b17      	ldr	r3, [pc, #92]	; (8001660 <spi_init+0x2b4>)
 8001604:	2200      	movs	r2, #0
 8001606:	2101      	movs	r1, #1
 8001608:	0018      	movs	r0, r3
 800160a:	f7ff fd4b 	bl	80010a4 <LL_DMA_SetMode>
	LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PERIPH_NOINCREMENT);
 800160e:	4b14      	ldr	r3, [pc, #80]	; (8001660 <spi_init+0x2b4>)
 8001610:	2200      	movs	r2, #0
 8001612:	2101      	movs	r1, #1
 8001614:	0018      	movs	r0, r3
 8001616:	f7ff fd69 	bl	80010ec <LL_DMA_SetPeriphIncMode>
	LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MEMORY_INCREMENT);
 800161a:	4b11      	ldr	r3, [pc, #68]	; (8001660 <spi_init+0x2b4>)
 800161c:	2280      	movs	r2, #128	; 0x80
 800161e:	2101      	movs	r1, #1
 8001620:	0018      	movs	r0, r3
 8001622:	f7ff fd87 	bl	8001134 <LL_DMA_SetMemoryIncMode>
	LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PDATAALIGN_BYTE);
 8001626:	4b0e      	ldr	r3, [pc, #56]	; (8001660 <spi_init+0x2b4>)
 8001628:	2200      	movs	r2, #0
 800162a:	2101      	movs	r1, #1
 800162c:	0018      	movs	r0, r3
 800162e:	f7ff fda5 	bl	800117c <LL_DMA_SetPeriphSize>
	LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MDATAALIGN_BYTE);
 8001632:	4b0b      	ldr	r3, [pc, #44]	; (8001660 <spi_init+0x2b4>)
 8001634:	2200      	movs	r2, #0
 8001636:	2101      	movs	r1, #1
 8001638:	0018      	movs	r0, r3
 800163a:	f7ff fdc5 	bl	80011c8 <LL_DMA_SetMemorySize>

	NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0);
 800163e:	2100      	movs	r1, #0
 8001640:	200a      	movs	r0, #10
 8001642:	f7ff f9a5 	bl	8000990 <__NVIC_SetPriority>
	NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8001646:	200a      	movs	r0, #10
 8001648:	f7ff f988 	bl	800095c <__NVIC_EnableIRQ>
	LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_2);
 800164c:	4b04      	ldr	r3, [pc, #16]	; (8001660 <spi_init+0x2b4>)
 800164e:	2101      	movs	r1, #1
 8001650:	0018      	movs	r0, r3
 8001652:	f7ff fe8b 	bl	800136c <LL_DMA_EnableIT_TC>
}
 8001656:	46c0      	nop			; (mov r8, r8)
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	20000000 	.word	0x20000000
 8001660:	40020000 	.word	0x40020000

08001664 <spi_cs_set_high>:

void spi_cs_set_high(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(SPI_CS_GPIO_Port, SPI_CS_Pin);
 8001668:	23a0      	movs	r3, #160	; 0xa0
 800166a:	05db      	lsls	r3, r3, #23
 800166c:	2110      	movs	r1, #16
 800166e:	0018      	movs	r0, r3
 8001670:	f7ff faca 	bl	8000c08 <LL_GPIO_SetOutputPin>
}
 8001674:	46c0      	nop			; (mov r8, r8)
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}

0800167a <spi_cs_set_low>:

void spi_cs_set_low(void)
{
 800167a:	b580      	push	{r7, lr}
 800167c:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(SPI_CS_GPIO_Port, SPI_CS_Pin);
 800167e:	23a0      	movs	r3, #160	; 0xa0
 8001680:	05db      	lsls	r3, r3, #23
 8001682:	2110      	movs	r1, #16
 8001684:	0018      	movs	r0, r3
 8001686:	f7ff facb 	bl	8000c20 <LL_GPIO_ResetOutputPin>
}
 800168a:	46c0      	nop			; (mov r8, r8)
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}

08001690 <spi_write_data>:

void spi_write_data(uint8_t *data, uint32_t size)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b084      	sub	sp, #16
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
 8001698:	6039      	str	r1, [r7, #0]
	uint32_t count = 0;
 800169a:	2300      	movs	r3, #0
 800169c:	60fb      	str	r3, [r7, #12]

	LL_SPI_Enable(spi);
 800169e:	4b24      	ldr	r3, [pc, #144]	; (8001730 <spi_write_data+0xa0>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	0018      	movs	r0, r3
 80016a4:	f7ff fac8 	bl	8000c38 <LL_SPI_Enable>

	while(count < size)
 80016a8:	e013      	b.n	80016d2 <spi_write_data+0x42>
	{
		while (!LL_SPI_IsActiveFlag_TXE(spi))
 80016aa:	46c0      	nop			; (mov r8, r8)
 80016ac:	4b20      	ldr	r3, [pc, #128]	; (8001730 <spi_write_data+0xa0>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	0018      	movs	r0, r3
 80016b2:	f7ff fbb8 	bl	8000e26 <LL_SPI_IsActiveFlag_TXE>
 80016b6:	1e03      	subs	r3, r0, #0
 80016b8:	d0f8      	beq.n	80016ac <spi_write_data+0x1c>
			;

		LL_SPI_TransmitData8(spi, *(data+count));
 80016ba:	4b1d      	ldr	r3, [pc, #116]	; (8001730 <spi_write_data+0xa0>)
 80016bc:	6818      	ldr	r0, [r3, #0]
 80016be:	687a      	ldr	r2, [r7, #4]
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	18d3      	adds	r3, r2, r3
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	0019      	movs	r1, r3
 80016c8:	f7ff fc5a 	bl	8000f80 <LL_SPI_TransmitData8>

		count++;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	3301      	adds	r3, #1
 80016d0:	60fb      	str	r3, [r7, #12]
	while(count < size)
 80016d2:	68fa      	ldr	r2, [r7, #12]
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	429a      	cmp	r2, r3
 80016d8:	d3e7      	bcc.n	80016aa <spi_write_data+0x1a>
	}

	while (LL_SPI_GetTxFIFOLevel(spi) != LL_SPI_TX_FIFO_EMPTY)
 80016da:	46c0      	nop			; (mov r8, r8)
 80016dc:	4b14      	ldr	r3, [pc, #80]	; (8001730 <spi_write_data+0xa0>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	0018      	movs	r0, r3
 80016e2:	f7ff fbcf 	bl	8000e84 <LL_SPI_GetTxFIFOLevel>
 80016e6:	1e03      	subs	r3, r0, #0
 80016e8:	d1f8      	bne.n	80016dc <spi_write_data+0x4c>
		;

	while (LL_SPI_IsActiveFlag_BSY(spi) != 0)
 80016ea:	46c0      	nop			; (mov r8, r8)
 80016ec:	4b10      	ldr	r3, [pc, #64]	; (8001730 <spi_write_data+0xa0>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	0018      	movs	r0, r3
 80016f2:	f7ff fba9 	bl	8000e48 <LL_SPI_IsActiveFlag_BSY>
 80016f6:	1e03      	subs	r3, r0, #0
 80016f8:	d1f8      	bne.n	80016ec <spi_write_data+0x5c>
		;

	LL_SPI_Disable(spi);
 80016fa:	4b0d      	ldr	r3, [pc, #52]	; (8001730 <spi_write_data+0xa0>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	0018      	movs	r0, r3
 8001700:	f7ff faa8 	bl	8000c54 <LL_SPI_Disable>

	while (LL_SPI_GetRxFIFOLevel(spi) != LL_SPI_RX_FIFO_EMPTY)
 8001704:	e004      	b.n	8001710 <spi_write_data+0x80>
	{
		LL_SPI_ReceiveData8(spi);
 8001706:	4b0a      	ldr	r3, [pc, #40]	; (8001730 <spi_write_data+0xa0>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	0018      	movs	r0, r3
 800170c:	f7ff fc2c 	bl	8000f68 <LL_SPI_ReceiveData8>
	while (LL_SPI_GetRxFIFOLevel(spi) != LL_SPI_RX_FIFO_EMPTY)
 8001710:	4b07      	ldr	r3, [pc, #28]	; (8001730 <spi_write_data+0xa0>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	0018      	movs	r0, r3
 8001716:	f7ff fba8 	bl	8000e6a <LL_SPI_GetRxFIFOLevel>
 800171a:	1e03      	subs	r3, r0, #0
 800171c:	d1f3      	bne.n	8001706 <spi_write_data+0x76>
	}

	LL_SPI_ClearFlag_OVR(spi);
 800171e:	4b04      	ldr	r3, [pc, #16]	; (8001730 <spi_write_data+0xa0>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	0018      	movs	r0, r3
 8001724:	f7ff fbbb 	bl	8000e9e <LL_SPI_ClearFlag_OVR>
}
 8001728:	46c0      	nop			; (mov r8, r8)
 800172a:	46bd      	mov	sp, r7
 800172c:	b004      	add	sp, #16
 800172e:	bd80      	pop	{r7, pc}
 8001730:	20000000 	.word	0x20000000

08001734 <spi_read_data>:

void spi_read_data(uint8_t *data, uint32_t size)
{
 8001734:	b590      	push	{r4, r7, lr}
 8001736:	b085      	sub	sp, #20
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	6039      	str	r1, [r7, #0]
	uint32_t count = 0;
 800173e:	2300      	movs	r3, #0
 8001740:	60fb      	str	r3, [r7, #12]

	LL_SPI_Enable(spi);
 8001742:	4b2c      	ldr	r3, [pc, #176]	; (80017f4 <spi_read_data+0xc0>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	0018      	movs	r0, r3
 8001748:	f7ff fa76 	bl	8000c38 <LL_SPI_Enable>

	while(count < size)
 800174c:	e022      	b.n	8001794 <spi_read_data+0x60>
	{
		while (!LL_SPI_IsActiveFlag_TXE(spi))
 800174e:	46c0      	nop			; (mov r8, r8)
 8001750:	4b28      	ldr	r3, [pc, #160]	; (80017f4 <spi_read_data+0xc0>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	0018      	movs	r0, r3
 8001756:	f7ff fb66 	bl	8000e26 <LL_SPI_IsActiveFlag_TXE>
 800175a:	1e03      	subs	r3, r0, #0
 800175c:	d0f8      	beq.n	8001750 <spi_read_data+0x1c>
			;

		LL_SPI_TransmitData8(spi, DUMMY_BYTE);
 800175e:	4b25      	ldr	r3, [pc, #148]	; (80017f4 <spi_read_data+0xc0>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	21ff      	movs	r1, #255	; 0xff
 8001764:	0018      	movs	r0, r3
 8001766:	f7ff fc0b 	bl	8000f80 <LL_SPI_TransmitData8>

		while (!LL_SPI_IsActiveFlag_RXNE(spi))
 800176a:	46c0      	nop			; (mov r8, r8)
 800176c:	4b21      	ldr	r3, [pc, #132]	; (80017f4 <spi_read_data+0xc0>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	0018      	movs	r0, r3
 8001772:	f7ff fb47 	bl	8000e04 <LL_SPI_IsActiveFlag_RXNE>
 8001776:	1e03      	subs	r3, r0, #0
 8001778:	d0f8      	beq.n	800176c <spi_read_data+0x38>
			;

		*(data+count) = LL_SPI_ReceiveData8(spi);
 800177a:	4b1e      	ldr	r3, [pc, #120]	; (80017f4 <spi_read_data+0xc0>)
 800177c:	6819      	ldr	r1, [r3, #0]
 800177e:	687a      	ldr	r2, [r7, #4]
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	18d4      	adds	r4, r2, r3
 8001784:	0008      	movs	r0, r1
 8001786:	f7ff fbef 	bl	8000f68 <LL_SPI_ReceiveData8>
 800178a:	0003      	movs	r3, r0
 800178c:	7023      	strb	r3, [r4, #0]

		count++;
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	3301      	adds	r3, #1
 8001792:	60fb      	str	r3, [r7, #12]
	while(count < size)
 8001794:	68fa      	ldr	r2, [r7, #12]
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	429a      	cmp	r2, r3
 800179a:	d3d8      	bcc.n	800174e <spi_read_data+0x1a>
	}

	while (LL_SPI_GetTxFIFOLevel(spi) != LL_SPI_TX_FIFO_EMPTY)
 800179c:	46c0      	nop			; (mov r8, r8)
 800179e:	4b15      	ldr	r3, [pc, #84]	; (80017f4 <spi_read_data+0xc0>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	0018      	movs	r0, r3
 80017a4:	f7ff fb6e 	bl	8000e84 <LL_SPI_GetTxFIFOLevel>
 80017a8:	1e03      	subs	r3, r0, #0
 80017aa:	d1f8      	bne.n	800179e <spi_read_data+0x6a>
		;

	while (LL_SPI_IsActiveFlag_BSY(spi) != 0)
 80017ac:	46c0      	nop			; (mov r8, r8)
 80017ae:	4b11      	ldr	r3, [pc, #68]	; (80017f4 <spi_read_data+0xc0>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	0018      	movs	r0, r3
 80017b4:	f7ff fb48 	bl	8000e48 <LL_SPI_IsActiveFlag_BSY>
 80017b8:	1e03      	subs	r3, r0, #0
 80017ba:	d1f8      	bne.n	80017ae <spi_read_data+0x7a>
		;

	LL_SPI_Disable(spi);
 80017bc:	4b0d      	ldr	r3, [pc, #52]	; (80017f4 <spi_read_data+0xc0>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	0018      	movs	r0, r3
 80017c2:	f7ff fa47 	bl	8000c54 <LL_SPI_Disable>

	while (LL_SPI_GetRxFIFOLevel(spi) != LL_SPI_RX_FIFO_EMPTY)
 80017c6:	e004      	b.n	80017d2 <spi_read_data+0x9e>
	{
		LL_SPI_ReceiveData8(spi);
 80017c8:	4b0a      	ldr	r3, [pc, #40]	; (80017f4 <spi_read_data+0xc0>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	0018      	movs	r0, r3
 80017ce:	f7ff fbcb 	bl	8000f68 <LL_SPI_ReceiveData8>
	while (LL_SPI_GetRxFIFOLevel(spi) != LL_SPI_RX_FIFO_EMPTY)
 80017d2:	4b08      	ldr	r3, [pc, #32]	; (80017f4 <spi_read_data+0xc0>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	0018      	movs	r0, r3
 80017d8:	f7ff fb47 	bl	8000e6a <LL_SPI_GetRxFIFOLevel>
 80017dc:	1e03      	subs	r3, r0, #0
 80017de:	d1f3      	bne.n	80017c8 <spi_read_data+0x94>
	}

	LL_SPI_ClearFlag_OVR(spi);
 80017e0:	4b04      	ldr	r3, [pc, #16]	; (80017f4 <spi_read_data+0xc0>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	0018      	movs	r0, r3
 80017e6:	f7ff fb5a 	bl	8000e9e <LL_SPI_ClearFlag_OVR>
}
 80017ea:	46c0      	nop			; (mov r8, r8)
 80017ec:	46bd      	mov	sp, r7
 80017ee:	b005      	add	sp, #20
 80017f0:	bd90      	pop	{r4, r7, pc}
 80017f2:	46c0      	nop			; (mov r8, r8)
 80017f4:	20000000 	.word	0x20000000

080017f8 <spi_write_data_dma>:

void spi_write_data_dma(uint8_t *data, uint32_t size)
{
 80017f8:	b5b0      	push	{r4, r5, r7, lr}
 80017fa:	b084      	sub	sp, #16
 80017fc:	af02      	add	r7, sp, #8
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	6039      	str	r1, [r7, #0]
	tx_buffer.data_ptr = data;
 8001802:	4b1a      	ldr	r3, [pc, #104]	; (800186c <spi_write_data_dma+0x74>)
 8001804:	687a      	ldr	r2, [r7, #4]
 8001806:	601a      	str	r2, [r3, #0]
	tx_buffer.count = size;
 8001808:	4b18      	ldr	r3, [pc, #96]	; (800186c <spi_write_data_dma+0x74>)
 800180a:	683a      	ldr	r2, [r7, #0]
 800180c:	605a      	str	r2, [r3, #4]

	LL_DMA_ConfigAddresses(DMA1, LL_DMA_CHANNEL_1, (uint32_t)tx_buffer.data_ptr, LL_SPI_DMA_GetRegAddr(SPI1), LL_DMA_GetDataTransferDirection(DMA1, LL_DMA_CHANNEL_1));
 800180e:	4b17      	ldr	r3, [pc, #92]	; (800186c <spi_write_data_dma+0x74>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	001d      	movs	r5, r3
 8001814:	4b16      	ldr	r3, [pc, #88]	; (8001870 <spi_write_data_dma+0x78>)
 8001816:	0018      	movs	r0, r3
 8001818:	f7ff fb9c 	bl	8000f54 <LL_SPI_DMA_GetRegAddr>
 800181c:	0004      	movs	r4, r0
 800181e:	4b15      	ldr	r3, [pc, #84]	; (8001874 <spi_write_data_dma+0x7c>)
 8001820:	2100      	movs	r1, #0
 8001822:	0018      	movs	r0, r3
 8001824:	f7ff fc24 	bl	8001070 <LL_DMA_GetDataTransferDirection>
 8001828:	0003      	movs	r3, r0
 800182a:	4812      	ldr	r0, [pc, #72]	; (8001874 <spi_write_data_dma+0x7c>)
 800182c:	9300      	str	r3, [sp, #0]
 800182e:	0023      	movs	r3, r4
 8001830:	002a      	movs	r2, r5
 8001832:	2100      	movs	r1, #0
 8001834:	f7ff fd36 	bl	80012a4 <LL_DMA_ConfigAddresses>
	LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_1, tx_buffer.count);
 8001838:	4b0c      	ldr	r3, [pc, #48]	; (800186c <spi_write_data_dma+0x74>)
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	480d      	ldr	r0, [pc, #52]	; (8001874 <spi_write_data_dma+0x7c>)
 800183e:	001a      	movs	r2, r3
 8001840:	2100      	movs	r1, #0
 8001842:	f7ff fd0d 	bl	8001260 <LL_DMA_SetDataLength>

	LL_SPI_EnableDMAReq_TX(SPI1);
 8001846:	4b0a      	ldr	r3, [pc, #40]	; (8001870 <spi_write_data_dma+0x78>)
 8001848:	0018      	movs	r0, r3
 800184a:	f7ff fb66 	bl	8000f1a <LL_SPI_EnableDMAReq_TX>
	LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_1);
 800184e:	4b09      	ldr	r3, [pc, #36]	; (8001874 <spi_write_data_dma+0x7c>)
 8001850:	2100      	movs	r1, #0
 8001852:	0018      	movs	r0, r3
 8001854:	f7ff fba6 	bl	8000fa4 <LL_DMA_EnableChannel>
	LL_SPI_Enable(spi);
 8001858:	4b07      	ldr	r3, [pc, #28]	; (8001878 <spi_write_data_dma+0x80>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	0018      	movs	r0, r3
 800185e:	f7ff f9eb 	bl	8000c38 <LL_SPI_Enable>
}
 8001862:	46c0      	nop			; (mov r8, r8)
 8001864:	46bd      	mov	sp, r7
 8001866:	b002      	add	sp, #8
 8001868:	bdb0      	pop	{r4, r5, r7, pc}
 800186a:	46c0      	nop			; (mov r8, r8)
 800186c:	20000334 	.word	0x20000334
 8001870:	40013000 	.word	0x40013000
 8001874:	40020000 	.word	0x40020000
 8001878:	20000000 	.word	0x20000000

0800187c <spi_read_data_dma>:

void spi_read_data_dma(uint8_t *data, uint32_t size)
{
 800187c:	b5b0      	push	{r4, r5, r7, lr}
 800187e:	b084      	sub	sp, #16
 8001880:	af02      	add	r7, sp, #8
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	6039      	str	r1, [r7, #0]
	tx_buffer.data_ptr = data;
 8001886:	4b31      	ldr	r3, [pc, #196]	; (800194c <spi_read_data_dma+0xd0>)
 8001888:	687a      	ldr	r2, [r7, #4]
 800188a:	601a      	str	r2, [r3, #0]
	tx_buffer.count = size;
 800188c:	4b2f      	ldr	r3, [pc, #188]	; (800194c <spi_read_data_dma+0xd0>)
 800188e:	683a      	ldr	r2, [r7, #0]
 8001890:	605a      	str	r2, [r3, #4]

	rx_buffer.data_ptr = data;
 8001892:	4b2f      	ldr	r3, [pc, #188]	; (8001950 <spi_read_data_dma+0xd4>)
 8001894:	687a      	ldr	r2, [r7, #4]
 8001896:	601a      	str	r2, [r3, #0]
	rx_buffer.count = size;
 8001898:	4b2d      	ldr	r3, [pc, #180]	; (8001950 <spi_read_data_dma+0xd4>)
 800189a:	683a      	ldr	r2, [r7, #0]
 800189c:	605a      	str	r2, [r3, #4]

	LL_DMA_ConfigAddresses(DMA1, LL_DMA_CHANNEL_1, (uint32_t)tx_buffer.data_ptr, LL_SPI_DMA_GetRegAddr(spi), LL_DMA_GetDataTransferDirection(DMA1, LL_DMA_CHANNEL_1));
 800189e:	4b2b      	ldr	r3, [pc, #172]	; (800194c <spi_read_data_dma+0xd0>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	001d      	movs	r5, r3
 80018a4:	4b2b      	ldr	r3, [pc, #172]	; (8001954 <spi_read_data_dma+0xd8>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	0018      	movs	r0, r3
 80018aa:	f7ff fb53 	bl	8000f54 <LL_SPI_DMA_GetRegAddr>
 80018ae:	0004      	movs	r4, r0
 80018b0:	4b29      	ldr	r3, [pc, #164]	; (8001958 <spi_read_data_dma+0xdc>)
 80018b2:	2100      	movs	r1, #0
 80018b4:	0018      	movs	r0, r3
 80018b6:	f7ff fbdb 	bl	8001070 <LL_DMA_GetDataTransferDirection>
 80018ba:	0003      	movs	r3, r0
 80018bc:	4826      	ldr	r0, [pc, #152]	; (8001958 <spi_read_data_dma+0xdc>)
 80018be:	9300      	str	r3, [sp, #0]
 80018c0:	0023      	movs	r3, r4
 80018c2:	002a      	movs	r2, r5
 80018c4:	2100      	movs	r1, #0
 80018c6:	f7ff fced 	bl	80012a4 <LL_DMA_ConfigAddresses>
	LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_1, tx_buffer.count);
 80018ca:	4b20      	ldr	r3, [pc, #128]	; (800194c <spi_read_data_dma+0xd0>)
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	4822      	ldr	r0, [pc, #136]	; (8001958 <spi_read_data_dma+0xdc>)
 80018d0:	001a      	movs	r2, r3
 80018d2:	2100      	movs	r1, #0
 80018d4:	f7ff fcc4 	bl	8001260 <LL_DMA_SetDataLength>

	LL_DMA_ConfigAddresses(DMA1, LL_DMA_CHANNEL_2, LL_SPI_DMA_GetRegAddr(spi), (uint32_t)rx_buffer.data_ptr, LL_DMA_GetDataTransferDirection(DMA1, LL_DMA_CHANNEL_2));
 80018d8:	4b1e      	ldr	r3, [pc, #120]	; (8001954 <spi_read_data_dma+0xd8>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	0018      	movs	r0, r3
 80018de:	f7ff fb39 	bl	8000f54 <LL_SPI_DMA_GetRegAddr>
 80018e2:	0004      	movs	r4, r0
 80018e4:	4b1a      	ldr	r3, [pc, #104]	; (8001950 <spi_read_data_dma+0xd4>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	001d      	movs	r5, r3
 80018ea:	4b1b      	ldr	r3, [pc, #108]	; (8001958 <spi_read_data_dma+0xdc>)
 80018ec:	2101      	movs	r1, #1
 80018ee:	0018      	movs	r0, r3
 80018f0:	f7ff fbbe 	bl	8001070 <LL_DMA_GetDataTransferDirection>
 80018f4:	0003      	movs	r3, r0
 80018f6:	4818      	ldr	r0, [pc, #96]	; (8001958 <spi_read_data_dma+0xdc>)
 80018f8:	9300      	str	r3, [sp, #0]
 80018fa:	002b      	movs	r3, r5
 80018fc:	0022      	movs	r2, r4
 80018fe:	2101      	movs	r1, #1
 8001900:	f7ff fcd0 	bl	80012a4 <LL_DMA_ConfigAddresses>
	LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_2, rx_buffer.count);
 8001904:	4b12      	ldr	r3, [pc, #72]	; (8001950 <spi_read_data_dma+0xd4>)
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	4813      	ldr	r0, [pc, #76]	; (8001958 <spi_read_data_dma+0xdc>)
 800190a:	001a      	movs	r2, r3
 800190c:	2101      	movs	r1, #1
 800190e:	f7ff fca7 	bl	8001260 <LL_DMA_SetDataLength>

	LL_SPI_EnableDMAReq_TX(spi);
 8001912:	4b10      	ldr	r3, [pc, #64]	; (8001954 <spi_read_data_dma+0xd8>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	0018      	movs	r0, r3
 8001918:	f7ff faff 	bl	8000f1a <LL_SPI_EnableDMAReq_TX>
	LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_1);
 800191c:	4b0e      	ldr	r3, [pc, #56]	; (8001958 <spi_read_data_dma+0xdc>)
 800191e:	2100      	movs	r1, #0
 8001920:	0018      	movs	r0, r3
 8001922:	f7ff fb3f 	bl	8000fa4 <LL_DMA_EnableChannel>

	LL_SPI_EnableDMAReq_RX(spi);
 8001926:	4b0b      	ldr	r3, [pc, #44]	; (8001954 <spi_read_data_dma+0xd8>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	0018      	movs	r0, r3
 800192c:	f7ff fac7 	bl	8000ebe <LL_SPI_EnableDMAReq_RX>
	LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_2);
 8001930:	4b09      	ldr	r3, [pc, #36]	; (8001958 <spi_read_data_dma+0xdc>)
 8001932:	2101      	movs	r1, #1
 8001934:	0018      	movs	r0, r3
 8001936:	f7ff fb35 	bl	8000fa4 <LL_DMA_EnableChannel>

	LL_SPI_Enable(spi);
 800193a:	4b06      	ldr	r3, [pc, #24]	; (8001954 <spi_read_data_dma+0xd8>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	0018      	movs	r0, r3
 8001940:	f7ff f97a 	bl	8000c38 <LL_SPI_Enable>
}
 8001944:	46c0      	nop			; (mov r8, r8)
 8001946:	46bd      	mov	sp, r7
 8001948:	b002      	add	sp, #8
 800194a:	bdb0      	pop	{r4, r5, r7, pc}
 800194c:	20000334 	.word	0x20000334
 8001950:	2000032c 	.word	0x2000032c
 8001954:	20000000 	.word	0x20000000
 8001958:	40020000 	.word	0x40020000

0800195c <spi_dma_transmit_callback>:

void spi_dma_transmit_callback(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
	LL_SPI_DisableDMAReq_TX(SPI1);
 8001960:	4b1f      	ldr	r3, [pc, #124]	; (80019e0 <spi_dma_transmit_callback+0x84>)
 8001962:	0018      	movs	r0, r3
 8001964:	f7ff fae7 	bl	8000f36 <LL_SPI_DisableDMAReq_TX>
	LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_1);
 8001968:	4b1e      	ldr	r3, [pc, #120]	; (80019e4 <spi_dma_transmit_callback+0x88>)
 800196a:	2100      	movs	r1, #0
 800196c:	0018      	movs	r0, r3
 800196e:	f7ff fb39 	bl	8000fe4 <LL_DMA_DisableChannel>

	if(!LL_SPI_IsEnabledDMAReq_RX(spi))
 8001972:	4b1d      	ldr	r3, [pc, #116]	; (80019e8 <spi_dma_transmit_callback+0x8c>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	0018      	movs	r0, r3
 8001978:	f7ff fabe 	bl	8000ef8 <LL_SPI_IsEnabledDMAReq_RX>
 800197c:	1e03      	subs	r3, r0, #0
 800197e:	d12b      	bne.n	80019d8 <spi_dma_transmit_callback+0x7c>
	{
		while (LL_SPI_GetTxFIFOLevel(spi) != LL_SPI_TX_FIFO_EMPTY)
 8001980:	46c0      	nop			; (mov r8, r8)
 8001982:	4b19      	ldr	r3, [pc, #100]	; (80019e8 <spi_dma_transmit_callback+0x8c>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	0018      	movs	r0, r3
 8001988:	f7ff fa7c 	bl	8000e84 <LL_SPI_GetTxFIFOLevel>
 800198c:	1e03      	subs	r3, r0, #0
 800198e:	d1f8      	bne.n	8001982 <spi_dma_transmit_callback+0x26>
			;

		while (LL_SPI_IsActiveFlag_BSY(spi) != 0)
 8001990:	46c0      	nop			; (mov r8, r8)
 8001992:	4b15      	ldr	r3, [pc, #84]	; (80019e8 <spi_dma_transmit_callback+0x8c>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	0018      	movs	r0, r3
 8001998:	f7ff fa56 	bl	8000e48 <LL_SPI_IsActiveFlag_BSY>
 800199c:	1e03      	subs	r3, r0, #0
 800199e:	d1f8      	bne.n	8001992 <spi_dma_transmit_callback+0x36>
			;

		LL_SPI_Disable(spi);
 80019a0:	4b11      	ldr	r3, [pc, #68]	; (80019e8 <spi_dma_transmit_callback+0x8c>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	0018      	movs	r0, r3
 80019a6:	f7ff f955 	bl	8000c54 <LL_SPI_Disable>

		while (LL_SPI_GetRxFIFOLevel(spi) != LL_SPI_RX_FIFO_EMPTY)
 80019aa:	e004      	b.n	80019b6 <spi_dma_transmit_callback+0x5a>
		{
			LL_SPI_ReceiveData8(spi);
 80019ac:	4b0e      	ldr	r3, [pc, #56]	; (80019e8 <spi_dma_transmit_callback+0x8c>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	0018      	movs	r0, r3
 80019b2:	f7ff fad9 	bl	8000f68 <LL_SPI_ReceiveData8>
		while (LL_SPI_GetRxFIFOLevel(spi) != LL_SPI_RX_FIFO_EMPTY)
 80019b6:	4b0c      	ldr	r3, [pc, #48]	; (80019e8 <spi_dma_transmit_callback+0x8c>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	0018      	movs	r0, r3
 80019bc:	f7ff fa55 	bl	8000e6a <LL_SPI_GetRxFIFOLevel>
 80019c0:	1e03      	subs	r3, r0, #0
 80019c2:	d1f3      	bne.n	80019ac <spi_dma_transmit_callback+0x50>
		}

		LL_SPI_ClearFlag_OVR(spi);
 80019c4:	4b08      	ldr	r3, [pc, #32]	; (80019e8 <spi_dma_transmit_callback+0x8c>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	0018      	movs	r0, r3
 80019ca:	f7ff fa68 	bl	8000e9e <LL_SPI_ClearFlag_OVR>

		spi_cs_set_high();
 80019ce:	f7ff fe49 	bl	8001664 <spi_cs_set_high>
		spi_transfer_cplt_callback(TRANSMIT);
 80019d2:	2000      	movs	r0, #0
 80019d4:	f7fe ff92 	bl	80008fc <spi_transfer_cplt_callback>
	}
}
 80019d8:	46c0      	nop			; (mov r8, r8)
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	46c0      	nop			; (mov r8, r8)
 80019e0:	40013000 	.word	0x40013000
 80019e4:	40020000 	.word	0x40020000
 80019e8:	20000000 	.word	0x20000000

080019ec <spi_dma_receive_callback>:

void spi_dma_receive_callback(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
	LL_SPI_DisableDMAReq_RX(SPI1);
 80019f0:	4b1b      	ldr	r3, [pc, #108]	; (8001a60 <spi_dma_receive_callback+0x74>)
 80019f2:	0018      	movs	r0, r3
 80019f4:	f7ff fa71 	bl	8000eda <LL_SPI_DisableDMAReq_RX>
	LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_2);
 80019f8:	4b1a      	ldr	r3, [pc, #104]	; (8001a64 <spi_dma_receive_callback+0x78>)
 80019fa:	2101      	movs	r1, #1
 80019fc:	0018      	movs	r0, r3
 80019fe:	f7ff faf1 	bl	8000fe4 <LL_DMA_DisableChannel>

	while (LL_SPI_GetTxFIFOLevel(spi) != LL_SPI_TX_FIFO_EMPTY)
 8001a02:	46c0      	nop			; (mov r8, r8)
 8001a04:	4b18      	ldr	r3, [pc, #96]	; (8001a68 <spi_dma_receive_callback+0x7c>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	0018      	movs	r0, r3
 8001a0a:	f7ff fa3b 	bl	8000e84 <LL_SPI_GetTxFIFOLevel>
 8001a0e:	1e03      	subs	r3, r0, #0
 8001a10:	d1f8      	bne.n	8001a04 <spi_dma_receive_callback+0x18>
		;

	while (LL_SPI_IsActiveFlag_BSY(spi) != 0)
 8001a12:	46c0      	nop			; (mov r8, r8)
 8001a14:	4b14      	ldr	r3, [pc, #80]	; (8001a68 <spi_dma_receive_callback+0x7c>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	0018      	movs	r0, r3
 8001a1a:	f7ff fa15 	bl	8000e48 <LL_SPI_IsActiveFlag_BSY>
 8001a1e:	1e03      	subs	r3, r0, #0
 8001a20:	d1f8      	bne.n	8001a14 <spi_dma_receive_callback+0x28>
		;

	LL_SPI_Disable(spi);
 8001a22:	4b11      	ldr	r3, [pc, #68]	; (8001a68 <spi_dma_receive_callback+0x7c>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	0018      	movs	r0, r3
 8001a28:	f7ff f914 	bl	8000c54 <LL_SPI_Disable>

	while (LL_SPI_GetRxFIFOLevel(spi) != LL_SPI_RX_FIFO_EMPTY)
 8001a2c:	e004      	b.n	8001a38 <spi_dma_receive_callback+0x4c>
	{
		LL_SPI_ReceiveData8(spi);
 8001a2e:	4b0e      	ldr	r3, [pc, #56]	; (8001a68 <spi_dma_receive_callback+0x7c>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	0018      	movs	r0, r3
 8001a34:	f7ff fa98 	bl	8000f68 <LL_SPI_ReceiveData8>
	while (LL_SPI_GetRxFIFOLevel(spi) != LL_SPI_RX_FIFO_EMPTY)
 8001a38:	4b0b      	ldr	r3, [pc, #44]	; (8001a68 <spi_dma_receive_callback+0x7c>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	0018      	movs	r0, r3
 8001a3e:	f7ff fa14 	bl	8000e6a <LL_SPI_GetRxFIFOLevel>
 8001a42:	1e03      	subs	r3, r0, #0
 8001a44:	d1f3      	bne.n	8001a2e <spi_dma_receive_callback+0x42>
	}

	LL_SPI_ClearFlag_OVR(spi);
 8001a46:	4b08      	ldr	r3, [pc, #32]	; (8001a68 <spi_dma_receive_callback+0x7c>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	0018      	movs	r0, r3
 8001a4c:	f7ff fa27 	bl	8000e9e <LL_SPI_ClearFlag_OVR>

	spi_cs_set_high();
 8001a50:	f7ff fe08 	bl	8001664 <spi_cs_set_high>
	spi_transfer_cplt_callback(RECEIVE);
 8001a54:	2001      	movs	r0, #1
 8001a56:	f7fe ff51 	bl	80008fc <spi_transfer_cplt_callback>
}
 8001a5a:	46c0      	nop			; (mov r8, r8)
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	40013000 	.word	0x40013000
 8001a64:	40020000 	.word	0x40020000
 8001a68:	20000000 	.word	0x20000000

08001a6c <LL_DMA_IsActiveFlag_TC1>:
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF1) == (DMA_ISR_TCIF1)) ? 1UL : 0UL);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	2202      	movs	r2, #2
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	2b02      	cmp	r3, #2
 8001a7e:	d101      	bne.n	8001a84 <LL_DMA_IsActiveFlag_TC1+0x18>
 8001a80:	2301      	movs	r3, #1
 8001a82:	e000      	b.n	8001a86 <LL_DMA_IsActiveFlag_TC1+0x1a>
 8001a84:	2300      	movs	r3, #0
}
 8001a86:	0018      	movs	r0, r3
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	b002      	add	sp, #8
 8001a8c:	bd80      	pop	{r7, pc}

08001a8e <LL_DMA_IsActiveFlag_TC2>:
{
 8001a8e:	b580      	push	{r7, lr}
 8001a90:	b082      	sub	sp, #8
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF2) == (DMA_ISR_TCIF2)) ? 1UL : 0UL);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	2220      	movs	r2, #32
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	2b20      	cmp	r3, #32
 8001aa0:	d101      	bne.n	8001aa6 <LL_DMA_IsActiveFlag_TC2+0x18>
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e000      	b.n	8001aa8 <LL_DMA_IsActiveFlag_TC2+0x1a>
 8001aa6:	2300      	movs	r3, #0
}
 8001aa8:	0018      	movs	r0, r3
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	b002      	add	sp, #8
 8001aae:	bd80      	pop	{r7, pc}

08001ab0 <LL_DMA_ClearFlag_TC1>:
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF1);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2202      	movs	r2, #2
 8001abc:	605a      	str	r2, [r3, #4]
}
 8001abe:	46c0      	nop			; (mov r8, r8)
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	b002      	add	sp, #8
 8001ac4:	bd80      	pop	{r7, pc}

08001ac6 <LL_DMA_ClearFlag_TC2>:
{
 8001ac6:	b580      	push	{r7, lr}
 8001ac8:	b082      	sub	sp, #8
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF2);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2220      	movs	r2, #32
 8001ad2:	605a      	str	r2, [r3, #4]
}
 8001ad4:	46c0      	nop			; (mov r8, r8)
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	b002      	add	sp, #8
 8001ada:	bd80      	pop	{r7, pc}

08001adc <SysTick_Handler>:
 */

#include "main.h"

void SysTick_Handler(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
	software_timer_inc_ms_tick();
 8001ae0:	f7fe ff30 	bl	8000944 <software_timer_inc_ms_tick>
}
 8001ae4:	46c0      	nop			; (mov r8, r8)
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
	...

08001aec <DMA_Channel1_IRQHandler>:

void DMA_Channel1_IRQHandler(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
	if (LL_DMA_IsActiveFlag_TC1(DMA1))
 8001af0:	4b07      	ldr	r3, [pc, #28]	; (8001b10 <DMA_Channel1_IRQHandler+0x24>)
 8001af2:	0018      	movs	r0, r3
 8001af4:	f7ff ffba 	bl	8001a6c <LL_DMA_IsActiveFlag_TC1>
 8001af8:	1e03      	subs	r3, r0, #0
 8001afa:	d005      	beq.n	8001b08 <DMA_Channel1_IRQHandler+0x1c>
	{
		LL_DMA_ClearFlag_TC1(DMA1);
 8001afc:	4b04      	ldr	r3, [pc, #16]	; (8001b10 <DMA_Channel1_IRQHandler+0x24>)
 8001afe:	0018      	movs	r0, r3
 8001b00:	f7ff ffd6 	bl	8001ab0 <LL_DMA_ClearFlag_TC1>

		spi_dma_transmit_callback();
 8001b04:	f7ff ff2a 	bl	800195c <spi_dma_transmit_callback>
	}
}
 8001b08:	46c0      	nop			; (mov r8, r8)
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	46c0      	nop			; (mov r8, r8)
 8001b10:	40020000 	.word	0x40020000

08001b14 <DMA_Channel2_3_IRQHandler>:

void DMA_Channel2_3_IRQHandler(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
	if (LL_DMA_IsActiveFlag_TC2(DMA1))
 8001b18:	4b07      	ldr	r3, [pc, #28]	; (8001b38 <DMA_Channel2_3_IRQHandler+0x24>)
 8001b1a:	0018      	movs	r0, r3
 8001b1c:	f7ff ffb7 	bl	8001a8e <LL_DMA_IsActiveFlag_TC2>
 8001b20:	1e03      	subs	r3, r0, #0
 8001b22:	d005      	beq.n	8001b30 <DMA_Channel2_3_IRQHandler+0x1c>
	{
		LL_DMA_ClearFlag_TC2(DMA1);
 8001b24:	4b04      	ldr	r3, [pc, #16]	; (8001b38 <DMA_Channel2_3_IRQHandler+0x24>)
 8001b26:	0018      	movs	r0, r3
 8001b28:	f7ff ffcd 	bl	8001ac6 <LL_DMA_ClearFlag_TC2>

		spi_dma_receive_callback();
 8001b2c:	f7ff ff5e 	bl	80019ec <spi_dma_receive_callback>
	}
}
 8001b30:	46c0      	nop			; (mov r8, r8)
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	46c0      	nop			; (mov r8, r8)
 8001b38:	40020000 	.word	0x40020000

08001b3c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b40:	46c0      	nop			; (mov r8, r8)
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
	...

08001b48 <Reset_Handler>:
 8001b48:	480d      	ldr	r0, [pc, #52]	; (8001b80 <LoopForever+0x2>)
 8001b4a:	4685      	mov	sp, r0
 8001b4c:	f7ff fff6 	bl	8001b3c <SystemInit>
 8001b50:	480c      	ldr	r0, [pc, #48]	; (8001b84 <LoopForever+0x6>)
 8001b52:	490d      	ldr	r1, [pc, #52]	; (8001b88 <LoopForever+0xa>)
 8001b54:	4a0d      	ldr	r2, [pc, #52]	; (8001b8c <LoopForever+0xe>)
 8001b56:	2300      	movs	r3, #0
 8001b58:	e002      	b.n	8001b60 <LoopCopyDataInit>

08001b5a <CopyDataInit>:
 8001b5a:	58d4      	ldr	r4, [r2, r3]
 8001b5c:	50c4      	str	r4, [r0, r3]
 8001b5e:	3304      	adds	r3, #4

08001b60 <LoopCopyDataInit>:
 8001b60:	18c4      	adds	r4, r0, r3
 8001b62:	428c      	cmp	r4, r1
 8001b64:	d3f9      	bcc.n	8001b5a <CopyDataInit>
 8001b66:	4a0a      	ldr	r2, [pc, #40]	; (8001b90 <LoopForever+0x12>)
 8001b68:	4c0a      	ldr	r4, [pc, #40]	; (8001b94 <LoopForever+0x16>)
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	e001      	b.n	8001b72 <LoopFillZerobss>

08001b6e <FillZerobss>:
 8001b6e:	6013      	str	r3, [r2, #0]
 8001b70:	3204      	adds	r2, #4

08001b72 <LoopFillZerobss>:
 8001b72:	42a2      	cmp	r2, r4
 8001b74:	d3fb      	bcc.n	8001b6e <FillZerobss>
 8001b76:	f000 f811 	bl	8001b9c <__libc_init_array>
 8001b7a:	f7fe fe31 	bl	80007e0 <main>

08001b7e <LoopForever>:
 8001b7e:	e7fe      	b.n	8001b7e <LoopForever>
 8001b80:	20009000 	.word	0x20009000
 8001b84:	20000000 	.word	0x20000000
 8001b88:	20000008 	.word	0x20000008
 8001b8c:	08001c10 	.word	0x08001c10
 8001b90:	20000008 	.word	0x20000008
 8001b94:	2000033c 	.word	0x2000033c

08001b98 <ADC_COMP_IRQHandler>:
 8001b98:	e7fe      	b.n	8001b98 <ADC_COMP_IRQHandler>
	...

08001b9c <__libc_init_array>:
 8001b9c:	b570      	push	{r4, r5, r6, lr}
 8001b9e:	2600      	movs	r6, #0
 8001ba0:	4d0c      	ldr	r5, [pc, #48]	; (8001bd4 <__libc_init_array+0x38>)
 8001ba2:	4c0d      	ldr	r4, [pc, #52]	; (8001bd8 <__libc_init_array+0x3c>)
 8001ba4:	1b64      	subs	r4, r4, r5
 8001ba6:	10a4      	asrs	r4, r4, #2
 8001ba8:	42a6      	cmp	r6, r4
 8001baa:	d109      	bne.n	8001bc0 <__libc_init_array+0x24>
 8001bac:	2600      	movs	r6, #0
 8001bae:	f000 f819 	bl	8001be4 <_init>
 8001bb2:	4d0a      	ldr	r5, [pc, #40]	; (8001bdc <__libc_init_array+0x40>)
 8001bb4:	4c0a      	ldr	r4, [pc, #40]	; (8001be0 <__libc_init_array+0x44>)
 8001bb6:	1b64      	subs	r4, r4, r5
 8001bb8:	10a4      	asrs	r4, r4, #2
 8001bba:	42a6      	cmp	r6, r4
 8001bbc:	d105      	bne.n	8001bca <__libc_init_array+0x2e>
 8001bbe:	bd70      	pop	{r4, r5, r6, pc}
 8001bc0:	00b3      	lsls	r3, r6, #2
 8001bc2:	58eb      	ldr	r3, [r5, r3]
 8001bc4:	4798      	blx	r3
 8001bc6:	3601      	adds	r6, #1
 8001bc8:	e7ee      	b.n	8001ba8 <__libc_init_array+0xc>
 8001bca:	00b3      	lsls	r3, r6, #2
 8001bcc:	58eb      	ldr	r3, [r5, r3]
 8001bce:	4798      	blx	r3
 8001bd0:	3601      	adds	r6, #1
 8001bd2:	e7f2      	b.n	8001bba <__libc_init_array+0x1e>
 8001bd4:	08001c08 	.word	0x08001c08
 8001bd8:	08001c08 	.word	0x08001c08
 8001bdc:	08001c08 	.word	0x08001c08
 8001be0:	08001c0c 	.word	0x08001c0c

08001be4 <_init>:
 8001be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001be6:	46c0      	nop			; (mov r8, r8)
 8001be8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001bea:	bc08      	pop	{r3}
 8001bec:	469e      	mov	lr, r3
 8001bee:	4770      	bx	lr

08001bf0 <_fini>:
 8001bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bf2:	46c0      	nop			; (mov r8, r8)
 8001bf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001bf6:	bc08      	pop	{r3}
 8001bf8:	469e      	mov	lr, r3
 8001bfa:	4770      	bx	lr
