
07_01_Kurs_STM32_LL_I2C_Master_Polling.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002758  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08002814  08002814  00012814  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080028d4  080028d4  00020040  2**0
                  CONTENTS
  4 .ARM          00000000  080028d4  080028d4  00020040  2**0
                  CONTENTS
  5 .preinit_array 00000000  080028d4  080028d4  00020040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080028d4  080028d4  000128d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080028d8  080028d8  000128d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000040  20000000  080028dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000007c  20000040  0800291c  00020040  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000bc  0800291c  000200bc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004786  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000c81  00000000  00000000  000247ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000540  00000000  00000000  00025470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000004b8  00000000  00000000  000259b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000029d1  00000000  00000000  00025e68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000049a3  00000000  00000000  00028839  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000601b7  00000000  00000000  0002d1dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0008d393  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000137c  00000000  00000000  0008d3e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000040 	.word	0x20000040
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080027fc 	.word	0x080027fc

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000044 	.word	0x20000044
 8000100:	080027fc 	.word	0x080027fc

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <__aeabi_cfrcmple>:
 800021c:	4684      	mov	ip, r0
 800021e:	0008      	movs	r0, r1
 8000220:	4661      	mov	r1, ip
 8000222:	e7ff      	b.n	8000224 <__aeabi_cfcmpeq>

08000224 <__aeabi_cfcmpeq>:
 8000224:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000226:	f000 fb55 	bl	80008d4 <__lesf2>
 800022a:	2800      	cmp	r0, #0
 800022c:	d401      	bmi.n	8000232 <__aeabi_cfcmpeq+0xe>
 800022e:	2100      	movs	r1, #0
 8000230:	42c8      	cmn	r0, r1
 8000232:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000234 <__aeabi_fcmpeq>:
 8000234:	b510      	push	{r4, lr}
 8000236:	f000 fae1 	bl	80007fc <__eqsf2>
 800023a:	4240      	negs	r0, r0
 800023c:	3001      	adds	r0, #1
 800023e:	bd10      	pop	{r4, pc}

08000240 <__aeabi_fcmplt>:
 8000240:	b510      	push	{r4, lr}
 8000242:	f000 fb47 	bl	80008d4 <__lesf2>
 8000246:	2800      	cmp	r0, #0
 8000248:	db01      	blt.n	800024e <__aeabi_fcmplt+0xe>
 800024a:	2000      	movs	r0, #0
 800024c:	bd10      	pop	{r4, pc}
 800024e:	2001      	movs	r0, #1
 8000250:	bd10      	pop	{r4, pc}
 8000252:	46c0      	nop			; (mov r8, r8)

08000254 <__aeabi_fcmple>:
 8000254:	b510      	push	{r4, lr}
 8000256:	f000 fb3d 	bl	80008d4 <__lesf2>
 800025a:	2800      	cmp	r0, #0
 800025c:	dd01      	ble.n	8000262 <__aeabi_fcmple+0xe>
 800025e:	2000      	movs	r0, #0
 8000260:	bd10      	pop	{r4, pc}
 8000262:	2001      	movs	r0, #1
 8000264:	bd10      	pop	{r4, pc}
 8000266:	46c0      	nop			; (mov r8, r8)

08000268 <__aeabi_fcmpgt>:
 8000268:	b510      	push	{r4, lr}
 800026a:	f000 faed 	bl	8000848 <__gesf2>
 800026e:	2800      	cmp	r0, #0
 8000270:	dc01      	bgt.n	8000276 <__aeabi_fcmpgt+0xe>
 8000272:	2000      	movs	r0, #0
 8000274:	bd10      	pop	{r4, pc}
 8000276:	2001      	movs	r0, #1
 8000278:	bd10      	pop	{r4, pc}
 800027a:	46c0      	nop			; (mov r8, r8)

0800027c <__aeabi_fcmpge>:
 800027c:	b510      	push	{r4, lr}
 800027e:	f000 fae3 	bl	8000848 <__gesf2>
 8000282:	2800      	cmp	r0, #0
 8000284:	da01      	bge.n	800028a <__aeabi_fcmpge+0xe>
 8000286:	2000      	movs	r0, #0
 8000288:	bd10      	pop	{r4, pc}
 800028a:	2001      	movs	r0, #1
 800028c:	bd10      	pop	{r4, pc}
 800028e:	46c0      	nop			; (mov r8, r8)

08000290 <__aeabi_fadd>:
 8000290:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000292:	46c6      	mov	lr, r8
 8000294:	0243      	lsls	r3, r0, #9
 8000296:	0a5b      	lsrs	r3, r3, #9
 8000298:	024e      	lsls	r6, r1, #9
 800029a:	0045      	lsls	r5, r0, #1
 800029c:	004f      	lsls	r7, r1, #1
 800029e:	00da      	lsls	r2, r3, #3
 80002a0:	0fc4      	lsrs	r4, r0, #31
 80002a2:	469c      	mov	ip, r3
 80002a4:	0a70      	lsrs	r0, r6, #9
 80002a6:	4690      	mov	r8, r2
 80002a8:	b500      	push	{lr}
 80002aa:	0e2d      	lsrs	r5, r5, #24
 80002ac:	0e3f      	lsrs	r7, r7, #24
 80002ae:	0fc9      	lsrs	r1, r1, #31
 80002b0:	09b6      	lsrs	r6, r6, #6
 80002b2:	428c      	cmp	r4, r1
 80002b4:	d04b      	beq.n	800034e <__aeabi_fadd+0xbe>
 80002b6:	1bea      	subs	r2, r5, r7
 80002b8:	2a00      	cmp	r2, #0
 80002ba:	dd36      	ble.n	800032a <__aeabi_fadd+0x9a>
 80002bc:	2f00      	cmp	r7, #0
 80002be:	d061      	beq.n	8000384 <__aeabi_fadd+0xf4>
 80002c0:	2dff      	cmp	r5, #255	; 0xff
 80002c2:	d100      	bne.n	80002c6 <__aeabi_fadd+0x36>
 80002c4:	e0ad      	b.n	8000422 <__aeabi_fadd+0x192>
 80002c6:	2380      	movs	r3, #128	; 0x80
 80002c8:	04db      	lsls	r3, r3, #19
 80002ca:	431e      	orrs	r6, r3
 80002cc:	2a1b      	cmp	r2, #27
 80002ce:	dc00      	bgt.n	80002d2 <__aeabi_fadd+0x42>
 80002d0:	e0d3      	b.n	800047a <__aeabi_fadd+0x1ea>
 80002d2:	2001      	movs	r0, #1
 80002d4:	4643      	mov	r3, r8
 80002d6:	1a18      	subs	r0, r3, r0
 80002d8:	0143      	lsls	r3, r0, #5
 80002da:	d400      	bmi.n	80002de <__aeabi_fadd+0x4e>
 80002dc:	e08c      	b.n	80003f8 <__aeabi_fadd+0x168>
 80002de:	0180      	lsls	r0, r0, #6
 80002e0:	0987      	lsrs	r7, r0, #6
 80002e2:	0038      	movs	r0, r7
 80002e4:	f000 fe5c 	bl	8000fa0 <__clzsi2>
 80002e8:	3805      	subs	r0, #5
 80002ea:	4087      	lsls	r7, r0
 80002ec:	4285      	cmp	r5, r0
 80002ee:	dc00      	bgt.n	80002f2 <__aeabi_fadd+0x62>
 80002f0:	e0b6      	b.n	8000460 <__aeabi_fadd+0x1d0>
 80002f2:	1a2d      	subs	r5, r5, r0
 80002f4:	48b3      	ldr	r0, [pc, #716]	; (80005c4 <__aeabi_fadd+0x334>)
 80002f6:	4038      	ands	r0, r7
 80002f8:	0743      	lsls	r3, r0, #29
 80002fa:	d004      	beq.n	8000306 <__aeabi_fadd+0x76>
 80002fc:	230f      	movs	r3, #15
 80002fe:	4003      	ands	r3, r0
 8000300:	2b04      	cmp	r3, #4
 8000302:	d000      	beq.n	8000306 <__aeabi_fadd+0x76>
 8000304:	3004      	adds	r0, #4
 8000306:	0143      	lsls	r3, r0, #5
 8000308:	d400      	bmi.n	800030c <__aeabi_fadd+0x7c>
 800030a:	e078      	b.n	80003fe <__aeabi_fadd+0x16e>
 800030c:	1c6a      	adds	r2, r5, #1
 800030e:	2dfe      	cmp	r5, #254	; 0xfe
 8000310:	d065      	beq.n	80003de <__aeabi_fadd+0x14e>
 8000312:	0180      	lsls	r0, r0, #6
 8000314:	0a43      	lsrs	r3, r0, #9
 8000316:	469c      	mov	ip, r3
 8000318:	b2d2      	uxtb	r2, r2
 800031a:	4663      	mov	r3, ip
 800031c:	05d0      	lsls	r0, r2, #23
 800031e:	4318      	orrs	r0, r3
 8000320:	07e4      	lsls	r4, r4, #31
 8000322:	4320      	orrs	r0, r4
 8000324:	bc80      	pop	{r7}
 8000326:	46b8      	mov	r8, r7
 8000328:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800032a:	2a00      	cmp	r2, #0
 800032c:	d035      	beq.n	800039a <__aeabi_fadd+0x10a>
 800032e:	1b7a      	subs	r2, r7, r5
 8000330:	2d00      	cmp	r5, #0
 8000332:	d000      	beq.n	8000336 <__aeabi_fadd+0xa6>
 8000334:	e0af      	b.n	8000496 <__aeabi_fadd+0x206>
 8000336:	4643      	mov	r3, r8
 8000338:	2b00      	cmp	r3, #0
 800033a:	d100      	bne.n	800033e <__aeabi_fadd+0xae>
 800033c:	e0a7      	b.n	800048e <__aeabi_fadd+0x1fe>
 800033e:	1e53      	subs	r3, r2, #1
 8000340:	2a01      	cmp	r2, #1
 8000342:	d100      	bne.n	8000346 <__aeabi_fadd+0xb6>
 8000344:	e12f      	b.n	80005a6 <__aeabi_fadd+0x316>
 8000346:	2aff      	cmp	r2, #255	; 0xff
 8000348:	d069      	beq.n	800041e <__aeabi_fadd+0x18e>
 800034a:	001a      	movs	r2, r3
 800034c:	e0aa      	b.n	80004a4 <__aeabi_fadd+0x214>
 800034e:	1be9      	subs	r1, r5, r7
 8000350:	2900      	cmp	r1, #0
 8000352:	dd70      	ble.n	8000436 <__aeabi_fadd+0x1a6>
 8000354:	2f00      	cmp	r7, #0
 8000356:	d037      	beq.n	80003c8 <__aeabi_fadd+0x138>
 8000358:	2dff      	cmp	r5, #255	; 0xff
 800035a:	d062      	beq.n	8000422 <__aeabi_fadd+0x192>
 800035c:	2380      	movs	r3, #128	; 0x80
 800035e:	04db      	lsls	r3, r3, #19
 8000360:	431e      	orrs	r6, r3
 8000362:	291b      	cmp	r1, #27
 8000364:	dc00      	bgt.n	8000368 <__aeabi_fadd+0xd8>
 8000366:	e0b0      	b.n	80004ca <__aeabi_fadd+0x23a>
 8000368:	2001      	movs	r0, #1
 800036a:	4440      	add	r0, r8
 800036c:	0143      	lsls	r3, r0, #5
 800036e:	d543      	bpl.n	80003f8 <__aeabi_fadd+0x168>
 8000370:	3501      	adds	r5, #1
 8000372:	2dff      	cmp	r5, #255	; 0xff
 8000374:	d033      	beq.n	80003de <__aeabi_fadd+0x14e>
 8000376:	2301      	movs	r3, #1
 8000378:	4a93      	ldr	r2, [pc, #588]	; (80005c8 <__aeabi_fadd+0x338>)
 800037a:	4003      	ands	r3, r0
 800037c:	0840      	lsrs	r0, r0, #1
 800037e:	4010      	ands	r0, r2
 8000380:	4318      	orrs	r0, r3
 8000382:	e7b9      	b.n	80002f8 <__aeabi_fadd+0x68>
 8000384:	2e00      	cmp	r6, #0
 8000386:	d100      	bne.n	800038a <__aeabi_fadd+0xfa>
 8000388:	e083      	b.n	8000492 <__aeabi_fadd+0x202>
 800038a:	1e51      	subs	r1, r2, #1
 800038c:	2a01      	cmp	r2, #1
 800038e:	d100      	bne.n	8000392 <__aeabi_fadd+0x102>
 8000390:	e0d8      	b.n	8000544 <__aeabi_fadd+0x2b4>
 8000392:	2aff      	cmp	r2, #255	; 0xff
 8000394:	d045      	beq.n	8000422 <__aeabi_fadd+0x192>
 8000396:	000a      	movs	r2, r1
 8000398:	e798      	b.n	80002cc <__aeabi_fadd+0x3c>
 800039a:	27fe      	movs	r7, #254	; 0xfe
 800039c:	1c6a      	adds	r2, r5, #1
 800039e:	4217      	tst	r7, r2
 80003a0:	d000      	beq.n	80003a4 <__aeabi_fadd+0x114>
 80003a2:	e086      	b.n	80004b2 <__aeabi_fadd+0x222>
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d000      	beq.n	80003aa <__aeabi_fadd+0x11a>
 80003a8:	e0b7      	b.n	800051a <__aeabi_fadd+0x28a>
 80003aa:	4643      	mov	r3, r8
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d100      	bne.n	80003b2 <__aeabi_fadd+0x122>
 80003b0:	e0f3      	b.n	800059a <__aeabi_fadd+0x30a>
 80003b2:	2200      	movs	r2, #0
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d0b0      	beq.n	800031a <__aeabi_fadd+0x8a>
 80003b8:	1b98      	subs	r0, r3, r6
 80003ba:	0143      	lsls	r3, r0, #5
 80003bc:	d400      	bmi.n	80003c0 <__aeabi_fadd+0x130>
 80003be:	e0fa      	b.n	80005b6 <__aeabi_fadd+0x326>
 80003c0:	4643      	mov	r3, r8
 80003c2:	000c      	movs	r4, r1
 80003c4:	1af0      	subs	r0, r6, r3
 80003c6:	e797      	b.n	80002f8 <__aeabi_fadd+0x68>
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d100      	bne.n	80003ce <__aeabi_fadd+0x13e>
 80003cc:	e0c8      	b.n	8000560 <__aeabi_fadd+0x2d0>
 80003ce:	1e4a      	subs	r2, r1, #1
 80003d0:	2901      	cmp	r1, #1
 80003d2:	d100      	bne.n	80003d6 <__aeabi_fadd+0x146>
 80003d4:	e0ae      	b.n	8000534 <__aeabi_fadd+0x2a4>
 80003d6:	29ff      	cmp	r1, #255	; 0xff
 80003d8:	d023      	beq.n	8000422 <__aeabi_fadd+0x192>
 80003da:	0011      	movs	r1, r2
 80003dc:	e7c1      	b.n	8000362 <__aeabi_fadd+0xd2>
 80003de:	2300      	movs	r3, #0
 80003e0:	22ff      	movs	r2, #255	; 0xff
 80003e2:	469c      	mov	ip, r3
 80003e4:	e799      	b.n	800031a <__aeabi_fadd+0x8a>
 80003e6:	21fe      	movs	r1, #254	; 0xfe
 80003e8:	1c6a      	adds	r2, r5, #1
 80003ea:	4211      	tst	r1, r2
 80003ec:	d077      	beq.n	80004de <__aeabi_fadd+0x24e>
 80003ee:	2aff      	cmp	r2, #255	; 0xff
 80003f0:	d0f5      	beq.n	80003de <__aeabi_fadd+0x14e>
 80003f2:	0015      	movs	r5, r2
 80003f4:	4446      	add	r6, r8
 80003f6:	0870      	lsrs	r0, r6, #1
 80003f8:	0743      	lsls	r3, r0, #29
 80003fa:	d000      	beq.n	80003fe <__aeabi_fadd+0x16e>
 80003fc:	e77e      	b.n	80002fc <__aeabi_fadd+0x6c>
 80003fe:	08c3      	lsrs	r3, r0, #3
 8000400:	2dff      	cmp	r5, #255	; 0xff
 8000402:	d00e      	beq.n	8000422 <__aeabi_fadd+0x192>
 8000404:	025b      	lsls	r3, r3, #9
 8000406:	0a5b      	lsrs	r3, r3, #9
 8000408:	469c      	mov	ip, r3
 800040a:	b2ea      	uxtb	r2, r5
 800040c:	e785      	b.n	800031a <__aeabi_fadd+0x8a>
 800040e:	2e00      	cmp	r6, #0
 8000410:	d007      	beq.n	8000422 <__aeabi_fadd+0x192>
 8000412:	2280      	movs	r2, #128	; 0x80
 8000414:	03d2      	lsls	r2, r2, #15
 8000416:	4213      	tst	r3, r2
 8000418:	d003      	beq.n	8000422 <__aeabi_fadd+0x192>
 800041a:	4210      	tst	r0, r2
 800041c:	d101      	bne.n	8000422 <__aeabi_fadd+0x192>
 800041e:	000c      	movs	r4, r1
 8000420:	0003      	movs	r3, r0
 8000422:	2b00      	cmp	r3, #0
 8000424:	d0db      	beq.n	80003de <__aeabi_fadd+0x14e>
 8000426:	2080      	movs	r0, #128	; 0x80
 8000428:	03c0      	lsls	r0, r0, #15
 800042a:	4318      	orrs	r0, r3
 800042c:	0240      	lsls	r0, r0, #9
 800042e:	0a43      	lsrs	r3, r0, #9
 8000430:	469c      	mov	ip, r3
 8000432:	22ff      	movs	r2, #255	; 0xff
 8000434:	e771      	b.n	800031a <__aeabi_fadd+0x8a>
 8000436:	2900      	cmp	r1, #0
 8000438:	d0d5      	beq.n	80003e6 <__aeabi_fadd+0x156>
 800043a:	1b7a      	subs	r2, r7, r5
 800043c:	2d00      	cmp	r5, #0
 800043e:	d160      	bne.n	8000502 <__aeabi_fadd+0x272>
 8000440:	4643      	mov	r3, r8
 8000442:	2b00      	cmp	r3, #0
 8000444:	d024      	beq.n	8000490 <__aeabi_fadd+0x200>
 8000446:	1e53      	subs	r3, r2, #1
 8000448:	2a01      	cmp	r2, #1
 800044a:	d073      	beq.n	8000534 <__aeabi_fadd+0x2a4>
 800044c:	2aff      	cmp	r2, #255	; 0xff
 800044e:	d0e7      	beq.n	8000420 <__aeabi_fadd+0x190>
 8000450:	001a      	movs	r2, r3
 8000452:	2a1b      	cmp	r2, #27
 8000454:	dc00      	bgt.n	8000458 <__aeabi_fadd+0x1c8>
 8000456:	e085      	b.n	8000564 <__aeabi_fadd+0x2d4>
 8000458:	2001      	movs	r0, #1
 800045a:	003d      	movs	r5, r7
 800045c:	1980      	adds	r0, r0, r6
 800045e:	e785      	b.n	800036c <__aeabi_fadd+0xdc>
 8000460:	2320      	movs	r3, #32
 8000462:	003a      	movs	r2, r7
 8000464:	1b45      	subs	r5, r0, r5
 8000466:	0038      	movs	r0, r7
 8000468:	3501      	adds	r5, #1
 800046a:	40ea      	lsrs	r2, r5
 800046c:	1b5d      	subs	r5, r3, r5
 800046e:	40a8      	lsls	r0, r5
 8000470:	1e43      	subs	r3, r0, #1
 8000472:	4198      	sbcs	r0, r3
 8000474:	2500      	movs	r5, #0
 8000476:	4310      	orrs	r0, r2
 8000478:	e73e      	b.n	80002f8 <__aeabi_fadd+0x68>
 800047a:	2320      	movs	r3, #32
 800047c:	0030      	movs	r0, r6
 800047e:	1a9b      	subs	r3, r3, r2
 8000480:	0031      	movs	r1, r6
 8000482:	4098      	lsls	r0, r3
 8000484:	40d1      	lsrs	r1, r2
 8000486:	1e43      	subs	r3, r0, #1
 8000488:	4198      	sbcs	r0, r3
 800048a:	4308      	orrs	r0, r1
 800048c:	e722      	b.n	80002d4 <__aeabi_fadd+0x44>
 800048e:	000c      	movs	r4, r1
 8000490:	0003      	movs	r3, r0
 8000492:	0015      	movs	r5, r2
 8000494:	e7b4      	b.n	8000400 <__aeabi_fadd+0x170>
 8000496:	2fff      	cmp	r7, #255	; 0xff
 8000498:	d0c1      	beq.n	800041e <__aeabi_fadd+0x18e>
 800049a:	2380      	movs	r3, #128	; 0x80
 800049c:	4640      	mov	r0, r8
 800049e:	04db      	lsls	r3, r3, #19
 80004a0:	4318      	orrs	r0, r3
 80004a2:	4680      	mov	r8, r0
 80004a4:	2a1b      	cmp	r2, #27
 80004a6:	dd51      	ble.n	800054c <__aeabi_fadd+0x2bc>
 80004a8:	2001      	movs	r0, #1
 80004aa:	000c      	movs	r4, r1
 80004ac:	003d      	movs	r5, r7
 80004ae:	1a30      	subs	r0, r6, r0
 80004b0:	e712      	b.n	80002d8 <__aeabi_fadd+0x48>
 80004b2:	4643      	mov	r3, r8
 80004b4:	1b9f      	subs	r7, r3, r6
 80004b6:	017b      	lsls	r3, r7, #5
 80004b8:	d42b      	bmi.n	8000512 <__aeabi_fadd+0x282>
 80004ba:	2f00      	cmp	r7, #0
 80004bc:	d000      	beq.n	80004c0 <__aeabi_fadd+0x230>
 80004be:	e710      	b.n	80002e2 <__aeabi_fadd+0x52>
 80004c0:	2300      	movs	r3, #0
 80004c2:	2400      	movs	r4, #0
 80004c4:	2200      	movs	r2, #0
 80004c6:	469c      	mov	ip, r3
 80004c8:	e727      	b.n	800031a <__aeabi_fadd+0x8a>
 80004ca:	2320      	movs	r3, #32
 80004cc:	0032      	movs	r2, r6
 80004ce:	0030      	movs	r0, r6
 80004d0:	40ca      	lsrs	r2, r1
 80004d2:	1a59      	subs	r1, r3, r1
 80004d4:	4088      	lsls	r0, r1
 80004d6:	1e43      	subs	r3, r0, #1
 80004d8:	4198      	sbcs	r0, r3
 80004da:	4310      	orrs	r0, r2
 80004dc:	e745      	b.n	800036a <__aeabi_fadd+0xda>
 80004de:	2d00      	cmp	r5, #0
 80004e0:	d14a      	bne.n	8000578 <__aeabi_fadd+0x2e8>
 80004e2:	4643      	mov	r3, r8
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d063      	beq.n	80005b0 <__aeabi_fadd+0x320>
 80004e8:	2200      	movs	r2, #0
 80004ea:	2e00      	cmp	r6, #0
 80004ec:	d100      	bne.n	80004f0 <__aeabi_fadd+0x260>
 80004ee:	e714      	b.n	800031a <__aeabi_fadd+0x8a>
 80004f0:	0030      	movs	r0, r6
 80004f2:	4440      	add	r0, r8
 80004f4:	0143      	lsls	r3, r0, #5
 80004f6:	d400      	bmi.n	80004fa <__aeabi_fadd+0x26a>
 80004f8:	e77e      	b.n	80003f8 <__aeabi_fadd+0x168>
 80004fa:	4b32      	ldr	r3, [pc, #200]	; (80005c4 <__aeabi_fadd+0x334>)
 80004fc:	3501      	adds	r5, #1
 80004fe:	4018      	ands	r0, r3
 8000500:	e77a      	b.n	80003f8 <__aeabi_fadd+0x168>
 8000502:	2fff      	cmp	r7, #255	; 0xff
 8000504:	d08c      	beq.n	8000420 <__aeabi_fadd+0x190>
 8000506:	2380      	movs	r3, #128	; 0x80
 8000508:	4641      	mov	r1, r8
 800050a:	04db      	lsls	r3, r3, #19
 800050c:	4319      	orrs	r1, r3
 800050e:	4688      	mov	r8, r1
 8000510:	e79f      	b.n	8000452 <__aeabi_fadd+0x1c2>
 8000512:	4643      	mov	r3, r8
 8000514:	000c      	movs	r4, r1
 8000516:	1af7      	subs	r7, r6, r3
 8000518:	e6e3      	b.n	80002e2 <__aeabi_fadd+0x52>
 800051a:	4642      	mov	r2, r8
 800051c:	2a00      	cmp	r2, #0
 800051e:	d000      	beq.n	8000522 <__aeabi_fadd+0x292>
 8000520:	e775      	b.n	800040e <__aeabi_fadd+0x17e>
 8000522:	2e00      	cmp	r6, #0
 8000524:	d000      	beq.n	8000528 <__aeabi_fadd+0x298>
 8000526:	e77a      	b.n	800041e <__aeabi_fadd+0x18e>
 8000528:	2380      	movs	r3, #128	; 0x80
 800052a:	03db      	lsls	r3, r3, #15
 800052c:	2400      	movs	r4, #0
 800052e:	469c      	mov	ip, r3
 8000530:	22ff      	movs	r2, #255	; 0xff
 8000532:	e6f2      	b.n	800031a <__aeabi_fadd+0x8a>
 8000534:	0030      	movs	r0, r6
 8000536:	4440      	add	r0, r8
 8000538:	2501      	movs	r5, #1
 800053a:	0143      	lsls	r3, r0, #5
 800053c:	d400      	bmi.n	8000540 <__aeabi_fadd+0x2b0>
 800053e:	e75b      	b.n	80003f8 <__aeabi_fadd+0x168>
 8000540:	2502      	movs	r5, #2
 8000542:	e718      	b.n	8000376 <__aeabi_fadd+0xe6>
 8000544:	4643      	mov	r3, r8
 8000546:	2501      	movs	r5, #1
 8000548:	1b98      	subs	r0, r3, r6
 800054a:	e6c5      	b.n	80002d8 <__aeabi_fadd+0x48>
 800054c:	2320      	movs	r3, #32
 800054e:	4644      	mov	r4, r8
 8000550:	4640      	mov	r0, r8
 8000552:	40d4      	lsrs	r4, r2
 8000554:	1a9a      	subs	r2, r3, r2
 8000556:	4090      	lsls	r0, r2
 8000558:	1e43      	subs	r3, r0, #1
 800055a:	4198      	sbcs	r0, r3
 800055c:	4320      	orrs	r0, r4
 800055e:	e7a4      	b.n	80004aa <__aeabi_fadd+0x21a>
 8000560:	000d      	movs	r5, r1
 8000562:	e74d      	b.n	8000400 <__aeabi_fadd+0x170>
 8000564:	2320      	movs	r3, #32
 8000566:	4641      	mov	r1, r8
 8000568:	4640      	mov	r0, r8
 800056a:	40d1      	lsrs	r1, r2
 800056c:	1a9a      	subs	r2, r3, r2
 800056e:	4090      	lsls	r0, r2
 8000570:	1e43      	subs	r3, r0, #1
 8000572:	4198      	sbcs	r0, r3
 8000574:	4308      	orrs	r0, r1
 8000576:	e770      	b.n	800045a <__aeabi_fadd+0x1ca>
 8000578:	4642      	mov	r2, r8
 800057a:	2a00      	cmp	r2, #0
 800057c:	d100      	bne.n	8000580 <__aeabi_fadd+0x2f0>
 800057e:	e74f      	b.n	8000420 <__aeabi_fadd+0x190>
 8000580:	2e00      	cmp	r6, #0
 8000582:	d100      	bne.n	8000586 <__aeabi_fadd+0x2f6>
 8000584:	e74d      	b.n	8000422 <__aeabi_fadd+0x192>
 8000586:	2280      	movs	r2, #128	; 0x80
 8000588:	03d2      	lsls	r2, r2, #15
 800058a:	4213      	tst	r3, r2
 800058c:	d100      	bne.n	8000590 <__aeabi_fadd+0x300>
 800058e:	e748      	b.n	8000422 <__aeabi_fadd+0x192>
 8000590:	4210      	tst	r0, r2
 8000592:	d000      	beq.n	8000596 <__aeabi_fadd+0x306>
 8000594:	e745      	b.n	8000422 <__aeabi_fadd+0x192>
 8000596:	0003      	movs	r3, r0
 8000598:	e743      	b.n	8000422 <__aeabi_fadd+0x192>
 800059a:	2e00      	cmp	r6, #0
 800059c:	d090      	beq.n	80004c0 <__aeabi_fadd+0x230>
 800059e:	000c      	movs	r4, r1
 80005a0:	4684      	mov	ip, r0
 80005a2:	2200      	movs	r2, #0
 80005a4:	e6b9      	b.n	800031a <__aeabi_fadd+0x8a>
 80005a6:	4643      	mov	r3, r8
 80005a8:	000c      	movs	r4, r1
 80005aa:	1af0      	subs	r0, r6, r3
 80005ac:	3501      	adds	r5, #1
 80005ae:	e693      	b.n	80002d8 <__aeabi_fadd+0x48>
 80005b0:	4684      	mov	ip, r0
 80005b2:	2200      	movs	r2, #0
 80005b4:	e6b1      	b.n	800031a <__aeabi_fadd+0x8a>
 80005b6:	2800      	cmp	r0, #0
 80005b8:	d000      	beq.n	80005bc <__aeabi_fadd+0x32c>
 80005ba:	e71d      	b.n	80003f8 <__aeabi_fadd+0x168>
 80005bc:	2300      	movs	r3, #0
 80005be:	2400      	movs	r4, #0
 80005c0:	469c      	mov	ip, r3
 80005c2:	e6aa      	b.n	800031a <__aeabi_fadd+0x8a>
 80005c4:	fbffffff 	.word	0xfbffffff
 80005c8:	7dffffff 	.word	0x7dffffff

080005cc <__aeabi_fdiv>:
 80005cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005ce:	464f      	mov	r7, r9
 80005d0:	4646      	mov	r6, r8
 80005d2:	46d6      	mov	lr, sl
 80005d4:	0245      	lsls	r5, r0, #9
 80005d6:	b5c0      	push	{r6, r7, lr}
 80005d8:	0047      	lsls	r7, r0, #1
 80005da:	1c0c      	adds	r4, r1, #0
 80005dc:	0a6d      	lsrs	r5, r5, #9
 80005de:	0e3f      	lsrs	r7, r7, #24
 80005e0:	0fc6      	lsrs	r6, r0, #31
 80005e2:	2f00      	cmp	r7, #0
 80005e4:	d100      	bne.n	80005e8 <__aeabi_fdiv+0x1c>
 80005e6:	e070      	b.n	80006ca <__aeabi_fdiv+0xfe>
 80005e8:	2fff      	cmp	r7, #255	; 0xff
 80005ea:	d100      	bne.n	80005ee <__aeabi_fdiv+0x22>
 80005ec:	e075      	b.n	80006da <__aeabi_fdiv+0x10e>
 80005ee:	00eb      	lsls	r3, r5, #3
 80005f0:	2580      	movs	r5, #128	; 0x80
 80005f2:	04ed      	lsls	r5, r5, #19
 80005f4:	431d      	orrs	r5, r3
 80005f6:	2300      	movs	r3, #0
 80005f8:	4699      	mov	r9, r3
 80005fa:	469a      	mov	sl, r3
 80005fc:	3f7f      	subs	r7, #127	; 0x7f
 80005fe:	0260      	lsls	r0, r4, #9
 8000600:	0a43      	lsrs	r3, r0, #9
 8000602:	4698      	mov	r8, r3
 8000604:	0063      	lsls	r3, r4, #1
 8000606:	0e1b      	lsrs	r3, r3, #24
 8000608:	0fe4      	lsrs	r4, r4, #31
 800060a:	2b00      	cmp	r3, #0
 800060c:	d04e      	beq.n	80006ac <__aeabi_fdiv+0xe0>
 800060e:	2bff      	cmp	r3, #255	; 0xff
 8000610:	d046      	beq.n	80006a0 <__aeabi_fdiv+0xd4>
 8000612:	4642      	mov	r2, r8
 8000614:	00d0      	lsls	r0, r2, #3
 8000616:	2280      	movs	r2, #128	; 0x80
 8000618:	04d2      	lsls	r2, r2, #19
 800061a:	4302      	orrs	r2, r0
 800061c:	4690      	mov	r8, r2
 800061e:	2200      	movs	r2, #0
 8000620:	3b7f      	subs	r3, #127	; 0x7f
 8000622:	0031      	movs	r1, r6
 8000624:	1aff      	subs	r7, r7, r3
 8000626:	464b      	mov	r3, r9
 8000628:	4061      	eors	r1, r4
 800062a:	b2c9      	uxtb	r1, r1
 800062c:	4313      	orrs	r3, r2
 800062e:	2b0f      	cmp	r3, #15
 8000630:	d900      	bls.n	8000634 <__aeabi_fdiv+0x68>
 8000632:	e0b5      	b.n	80007a0 <__aeabi_fdiv+0x1d4>
 8000634:	486e      	ldr	r0, [pc, #440]	; (80007f0 <__aeabi_fdiv+0x224>)
 8000636:	009b      	lsls	r3, r3, #2
 8000638:	58c3      	ldr	r3, [r0, r3]
 800063a:	469f      	mov	pc, r3
 800063c:	2300      	movs	r3, #0
 800063e:	4698      	mov	r8, r3
 8000640:	0026      	movs	r6, r4
 8000642:	4645      	mov	r5, r8
 8000644:	4692      	mov	sl, r2
 8000646:	4653      	mov	r3, sl
 8000648:	2b02      	cmp	r3, #2
 800064a:	d100      	bne.n	800064e <__aeabi_fdiv+0x82>
 800064c:	e089      	b.n	8000762 <__aeabi_fdiv+0x196>
 800064e:	2b03      	cmp	r3, #3
 8000650:	d100      	bne.n	8000654 <__aeabi_fdiv+0x88>
 8000652:	e09e      	b.n	8000792 <__aeabi_fdiv+0x1c6>
 8000654:	2b01      	cmp	r3, #1
 8000656:	d018      	beq.n	800068a <__aeabi_fdiv+0xbe>
 8000658:	003b      	movs	r3, r7
 800065a:	337f      	adds	r3, #127	; 0x7f
 800065c:	2b00      	cmp	r3, #0
 800065e:	dd69      	ble.n	8000734 <__aeabi_fdiv+0x168>
 8000660:	076a      	lsls	r2, r5, #29
 8000662:	d004      	beq.n	800066e <__aeabi_fdiv+0xa2>
 8000664:	220f      	movs	r2, #15
 8000666:	402a      	ands	r2, r5
 8000668:	2a04      	cmp	r2, #4
 800066a:	d000      	beq.n	800066e <__aeabi_fdiv+0xa2>
 800066c:	3504      	adds	r5, #4
 800066e:	012a      	lsls	r2, r5, #4
 8000670:	d503      	bpl.n	800067a <__aeabi_fdiv+0xae>
 8000672:	4b60      	ldr	r3, [pc, #384]	; (80007f4 <__aeabi_fdiv+0x228>)
 8000674:	401d      	ands	r5, r3
 8000676:	003b      	movs	r3, r7
 8000678:	3380      	adds	r3, #128	; 0x80
 800067a:	2bfe      	cmp	r3, #254	; 0xfe
 800067c:	dd00      	ble.n	8000680 <__aeabi_fdiv+0xb4>
 800067e:	e070      	b.n	8000762 <__aeabi_fdiv+0x196>
 8000680:	01ad      	lsls	r5, r5, #6
 8000682:	0a6d      	lsrs	r5, r5, #9
 8000684:	b2d8      	uxtb	r0, r3
 8000686:	e002      	b.n	800068e <__aeabi_fdiv+0xc2>
 8000688:	000e      	movs	r6, r1
 800068a:	2000      	movs	r0, #0
 800068c:	2500      	movs	r5, #0
 800068e:	05c0      	lsls	r0, r0, #23
 8000690:	4328      	orrs	r0, r5
 8000692:	07f6      	lsls	r6, r6, #31
 8000694:	4330      	orrs	r0, r6
 8000696:	bce0      	pop	{r5, r6, r7}
 8000698:	46ba      	mov	sl, r7
 800069a:	46b1      	mov	r9, r6
 800069c:	46a8      	mov	r8, r5
 800069e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006a0:	4643      	mov	r3, r8
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d13f      	bne.n	8000726 <__aeabi_fdiv+0x15a>
 80006a6:	2202      	movs	r2, #2
 80006a8:	3fff      	subs	r7, #255	; 0xff
 80006aa:	e003      	b.n	80006b4 <__aeabi_fdiv+0xe8>
 80006ac:	4643      	mov	r3, r8
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d12d      	bne.n	800070e <__aeabi_fdiv+0x142>
 80006b2:	2201      	movs	r2, #1
 80006b4:	0031      	movs	r1, r6
 80006b6:	464b      	mov	r3, r9
 80006b8:	4061      	eors	r1, r4
 80006ba:	b2c9      	uxtb	r1, r1
 80006bc:	4313      	orrs	r3, r2
 80006be:	2b0f      	cmp	r3, #15
 80006c0:	d834      	bhi.n	800072c <__aeabi_fdiv+0x160>
 80006c2:	484d      	ldr	r0, [pc, #308]	; (80007f8 <__aeabi_fdiv+0x22c>)
 80006c4:	009b      	lsls	r3, r3, #2
 80006c6:	58c3      	ldr	r3, [r0, r3]
 80006c8:	469f      	mov	pc, r3
 80006ca:	2d00      	cmp	r5, #0
 80006cc:	d113      	bne.n	80006f6 <__aeabi_fdiv+0x12a>
 80006ce:	2304      	movs	r3, #4
 80006d0:	4699      	mov	r9, r3
 80006d2:	3b03      	subs	r3, #3
 80006d4:	2700      	movs	r7, #0
 80006d6:	469a      	mov	sl, r3
 80006d8:	e791      	b.n	80005fe <__aeabi_fdiv+0x32>
 80006da:	2d00      	cmp	r5, #0
 80006dc:	d105      	bne.n	80006ea <__aeabi_fdiv+0x11e>
 80006de:	2308      	movs	r3, #8
 80006e0:	4699      	mov	r9, r3
 80006e2:	3b06      	subs	r3, #6
 80006e4:	27ff      	movs	r7, #255	; 0xff
 80006e6:	469a      	mov	sl, r3
 80006e8:	e789      	b.n	80005fe <__aeabi_fdiv+0x32>
 80006ea:	230c      	movs	r3, #12
 80006ec:	4699      	mov	r9, r3
 80006ee:	3b09      	subs	r3, #9
 80006f0:	27ff      	movs	r7, #255	; 0xff
 80006f2:	469a      	mov	sl, r3
 80006f4:	e783      	b.n	80005fe <__aeabi_fdiv+0x32>
 80006f6:	0028      	movs	r0, r5
 80006f8:	f000 fc52 	bl	8000fa0 <__clzsi2>
 80006fc:	2776      	movs	r7, #118	; 0x76
 80006fe:	1f43      	subs	r3, r0, #5
 8000700:	409d      	lsls	r5, r3
 8000702:	2300      	movs	r3, #0
 8000704:	427f      	negs	r7, r7
 8000706:	4699      	mov	r9, r3
 8000708:	469a      	mov	sl, r3
 800070a:	1a3f      	subs	r7, r7, r0
 800070c:	e777      	b.n	80005fe <__aeabi_fdiv+0x32>
 800070e:	4640      	mov	r0, r8
 8000710:	f000 fc46 	bl	8000fa0 <__clzsi2>
 8000714:	4642      	mov	r2, r8
 8000716:	1f43      	subs	r3, r0, #5
 8000718:	409a      	lsls	r2, r3
 800071a:	2376      	movs	r3, #118	; 0x76
 800071c:	425b      	negs	r3, r3
 800071e:	4690      	mov	r8, r2
 8000720:	1a1b      	subs	r3, r3, r0
 8000722:	2200      	movs	r2, #0
 8000724:	e77d      	b.n	8000622 <__aeabi_fdiv+0x56>
 8000726:	23ff      	movs	r3, #255	; 0xff
 8000728:	2203      	movs	r2, #3
 800072a:	e77a      	b.n	8000622 <__aeabi_fdiv+0x56>
 800072c:	000e      	movs	r6, r1
 800072e:	20ff      	movs	r0, #255	; 0xff
 8000730:	2500      	movs	r5, #0
 8000732:	e7ac      	b.n	800068e <__aeabi_fdiv+0xc2>
 8000734:	2001      	movs	r0, #1
 8000736:	1ac0      	subs	r0, r0, r3
 8000738:	281b      	cmp	r0, #27
 800073a:	dca6      	bgt.n	800068a <__aeabi_fdiv+0xbe>
 800073c:	379e      	adds	r7, #158	; 0x9e
 800073e:	002a      	movs	r2, r5
 8000740:	40bd      	lsls	r5, r7
 8000742:	40c2      	lsrs	r2, r0
 8000744:	1e6b      	subs	r3, r5, #1
 8000746:	419d      	sbcs	r5, r3
 8000748:	4315      	orrs	r5, r2
 800074a:	076b      	lsls	r3, r5, #29
 800074c:	d004      	beq.n	8000758 <__aeabi_fdiv+0x18c>
 800074e:	230f      	movs	r3, #15
 8000750:	402b      	ands	r3, r5
 8000752:	2b04      	cmp	r3, #4
 8000754:	d000      	beq.n	8000758 <__aeabi_fdiv+0x18c>
 8000756:	3504      	adds	r5, #4
 8000758:	016b      	lsls	r3, r5, #5
 800075a:	d544      	bpl.n	80007e6 <__aeabi_fdiv+0x21a>
 800075c:	2001      	movs	r0, #1
 800075e:	2500      	movs	r5, #0
 8000760:	e795      	b.n	800068e <__aeabi_fdiv+0xc2>
 8000762:	20ff      	movs	r0, #255	; 0xff
 8000764:	2500      	movs	r5, #0
 8000766:	e792      	b.n	800068e <__aeabi_fdiv+0xc2>
 8000768:	2580      	movs	r5, #128	; 0x80
 800076a:	2600      	movs	r6, #0
 800076c:	20ff      	movs	r0, #255	; 0xff
 800076e:	03ed      	lsls	r5, r5, #15
 8000770:	e78d      	b.n	800068e <__aeabi_fdiv+0xc2>
 8000772:	2300      	movs	r3, #0
 8000774:	4698      	mov	r8, r3
 8000776:	2080      	movs	r0, #128	; 0x80
 8000778:	03c0      	lsls	r0, r0, #15
 800077a:	4205      	tst	r5, r0
 800077c:	d009      	beq.n	8000792 <__aeabi_fdiv+0x1c6>
 800077e:	4643      	mov	r3, r8
 8000780:	4203      	tst	r3, r0
 8000782:	d106      	bne.n	8000792 <__aeabi_fdiv+0x1c6>
 8000784:	4645      	mov	r5, r8
 8000786:	4305      	orrs	r5, r0
 8000788:	026d      	lsls	r5, r5, #9
 800078a:	0026      	movs	r6, r4
 800078c:	20ff      	movs	r0, #255	; 0xff
 800078e:	0a6d      	lsrs	r5, r5, #9
 8000790:	e77d      	b.n	800068e <__aeabi_fdiv+0xc2>
 8000792:	2080      	movs	r0, #128	; 0x80
 8000794:	03c0      	lsls	r0, r0, #15
 8000796:	4305      	orrs	r5, r0
 8000798:	026d      	lsls	r5, r5, #9
 800079a:	20ff      	movs	r0, #255	; 0xff
 800079c:	0a6d      	lsrs	r5, r5, #9
 800079e:	e776      	b.n	800068e <__aeabi_fdiv+0xc2>
 80007a0:	4642      	mov	r2, r8
 80007a2:	016b      	lsls	r3, r5, #5
 80007a4:	0150      	lsls	r0, r2, #5
 80007a6:	4283      	cmp	r3, r0
 80007a8:	d219      	bcs.n	80007de <__aeabi_fdiv+0x212>
 80007aa:	221b      	movs	r2, #27
 80007ac:	2500      	movs	r5, #0
 80007ae:	3f01      	subs	r7, #1
 80007b0:	2601      	movs	r6, #1
 80007b2:	001c      	movs	r4, r3
 80007b4:	006d      	lsls	r5, r5, #1
 80007b6:	005b      	lsls	r3, r3, #1
 80007b8:	2c00      	cmp	r4, #0
 80007ba:	db01      	blt.n	80007c0 <__aeabi_fdiv+0x1f4>
 80007bc:	4298      	cmp	r0, r3
 80007be:	d801      	bhi.n	80007c4 <__aeabi_fdiv+0x1f8>
 80007c0:	1a1b      	subs	r3, r3, r0
 80007c2:	4335      	orrs	r5, r6
 80007c4:	3a01      	subs	r2, #1
 80007c6:	2a00      	cmp	r2, #0
 80007c8:	d1f3      	bne.n	80007b2 <__aeabi_fdiv+0x1e6>
 80007ca:	1e5a      	subs	r2, r3, #1
 80007cc:	4193      	sbcs	r3, r2
 80007ce:	431d      	orrs	r5, r3
 80007d0:	003b      	movs	r3, r7
 80007d2:	337f      	adds	r3, #127	; 0x7f
 80007d4:	000e      	movs	r6, r1
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	dd00      	ble.n	80007dc <__aeabi_fdiv+0x210>
 80007da:	e741      	b.n	8000660 <__aeabi_fdiv+0x94>
 80007dc:	e7aa      	b.n	8000734 <__aeabi_fdiv+0x168>
 80007de:	221a      	movs	r2, #26
 80007e0:	2501      	movs	r5, #1
 80007e2:	1a1b      	subs	r3, r3, r0
 80007e4:	e7e4      	b.n	80007b0 <__aeabi_fdiv+0x1e4>
 80007e6:	01ad      	lsls	r5, r5, #6
 80007e8:	2000      	movs	r0, #0
 80007ea:	0a6d      	lsrs	r5, r5, #9
 80007ec:	e74f      	b.n	800068e <__aeabi_fdiv+0xc2>
 80007ee:	46c0      	nop			; (mov r8, r8)
 80007f0:	08002814 	.word	0x08002814
 80007f4:	f7ffffff 	.word	0xf7ffffff
 80007f8:	08002854 	.word	0x08002854

080007fc <__eqsf2>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	0042      	lsls	r2, r0, #1
 8000800:	0245      	lsls	r5, r0, #9
 8000802:	024e      	lsls	r6, r1, #9
 8000804:	004c      	lsls	r4, r1, #1
 8000806:	0fc3      	lsrs	r3, r0, #31
 8000808:	0a6d      	lsrs	r5, r5, #9
 800080a:	2001      	movs	r0, #1
 800080c:	0e12      	lsrs	r2, r2, #24
 800080e:	0a76      	lsrs	r6, r6, #9
 8000810:	0e24      	lsrs	r4, r4, #24
 8000812:	0fc9      	lsrs	r1, r1, #31
 8000814:	2aff      	cmp	r2, #255	; 0xff
 8000816:	d006      	beq.n	8000826 <__eqsf2+0x2a>
 8000818:	2cff      	cmp	r4, #255	; 0xff
 800081a:	d003      	beq.n	8000824 <__eqsf2+0x28>
 800081c:	42a2      	cmp	r2, r4
 800081e:	d101      	bne.n	8000824 <__eqsf2+0x28>
 8000820:	42b5      	cmp	r5, r6
 8000822:	d006      	beq.n	8000832 <__eqsf2+0x36>
 8000824:	bd70      	pop	{r4, r5, r6, pc}
 8000826:	2d00      	cmp	r5, #0
 8000828:	d1fc      	bne.n	8000824 <__eqsf2+0x28>
 800082a:	2cff      	cmp	r4, #255	; 0xff
 800082c:	d1fa      	bne.n	8000824 <__eqsf2+0x28>
 800082e:	2e00      	cmp	r6, #0
 8000830:	d1f8      	bne.n	8000824 <__eqsf2+0x28>
 8000832:	428b      	cmp	r3, r1
 8000834:	d006      	beq.n	8000844 <__eqsf2+0x48>
 8000836:	2001      	movs	r0, #1
 8000838:	2a00      	cmp	r2, #0
 800083a:	d1f3      	bne.n	8000824 <__eqsf2+0x28>
 800083c:	0028      	movs	r0, r5
 800083e:	1e43      	subs	r3, r0, #1
 8000840:	4198      	sbcs	r0, r3
 8000842:	e7ef      	b.n	8000824 <__eqsf2+0x28>
 8000844:	2000      	movs	r0, #0
 8000846:	e7ed      	b.n	8000824 <__eqsf2+0x28>

08000848 <__gesf2>:
 8000848:	b570      	push	{r4, r5, r6, lr}
 800084a:	0042      	lsls	r2, r0, #1
 800084c:	0245      	lsls	r5, r0, #9
 800084e:	024e      	lsls	r6, r1, #9
 8000850:	004c      	lsls	r4, r1, #1
 8000852:	0fc3      	lsrs	r3, r0, #31
 8000854:	0a6d      	lsrs	r5, r5, #9
 8000856:	0e12      	lsrs	r2, r2, #24
 8000858:	0a76      	lsrs	r6, r6, #9
 800085a:	0e24      	lsrs	r4, r4, #24
 800085c:	0fc8      	lsrs	r0, r1, #31
 800085e:	2aff      	cmp	r2, #255	; 0xff
 8000860:	d01b      	beq.n	800089a <__gesf2+0x52>
 8000862:	2cff      	cmp	r4, #255	; 0xff
 8000864:	d00e      	beq.n	8000884 <__gesf2+0x3c>
 8000866:	2a00      	cmp	r2, #0
 8000868:	d11b      	bne.n	80008a2 <__gesf2+0x5a>
 800086a:	2c00      	cmp	r4, #0
 800086c:	d101      	bne.n	8000872 <__gesf2+0x2a>
 800086e:	2e00      	cmp	r6, #0
 8000870:	d01c      	beq.n	80008ac <__gesf2+0x64>
 8000872:	2d00      	cmp	r5, #0
 8000874:	d00c      	beq.n	8000890 <__gesf2+0x48>
 8000876:	4283      	cmp	r3, r0
 8000878:	d01c      	beq.n	80008b4 <__gesf2+0x6c>
 800087a:	2102      	movs	r1, #2
 800087c:	1e58      	subs	r0, r3, #1
 800087e:	4008      	ands	r0, r1
 8000880:	3801      	subs	r0, #1
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	2e00      	cmp	r6, #0
 8000886:	d122      	bne.n	80008ce <__gesf2+0x86>
 8000888:	2a00      	cmp	r2, #0
 800088a:	d1f4      	bne.n	8000876 <__gesf2+0x2e>
 800088c:	2d00      	cmp	r5, #0
 800088e:	d1f2      	bne.n	8000876 <__gesf2+0x2e>
 8000890:	2800      	cmp	r0, #0
 8000892:	d1f6      	bne.n	8000882 <__gesf2+0x3a>
 8000894:	2001      	movs	r0, #1
 8000896:	4240      	negs	r0, r0
 8000898:	e7f3      	b.n	8000882 <__gesf2+0x3a>
 800089a:	2d00      	cmp	r5, #0
 800089c:	d117      	bne.n	80008ce <__gesf2+0x86>
 800089e:	2cff      	cmp	r4, #255	; 0xff
 80008a0:	d0f0      	beq.n	8000884 <__gesf2+0x3c>
 80008a2:	2c00      	cmp	r4, #0
 80008a4:	d1e7      	bne.n	8000876 <__gesf2+0x2e>
 80008a6:	2e00      	cmp	r6, #0
 80008a8:	d1e5      	bne.n	8000876 <__gesf2+0x2e>
 80008aa:	e7e6      	b.n	800087a <__gesf2+0x32>
 80008ac:	2000      	movs	r0, #0
 80008ae:	2d00      	cmp	r5, #0
 80008b0:	d0e7      	beq.n	8000882 <__gesf2+0x3a>
 80008b2:	e7e2      	b.n	800087a <__gesf2+0x32>
 80008b4:	42a2      	cmp	r2, r4
 80008b6:	dc05      	bgt.n	80008c4 <__gesf2+0x7c>
 80008b8:	dbea      	blt.n	8000890 <__gesf2+0x48>
 80008ba:	42b5      	cmp	r5, r6
 80008bc:	d802      	bhi.n	80008c4 <__gesf2+0x7c>
 80008be:	d3e7      	bcc.n	8000890 <__gesf2+0x48>
 80008c0:	2000      	movs	r0, #0
 80008c2:	e7de      	b.n	8000882 <__gesf2+0x3a>
 80008c4:	4243      	negs	r3, r0
 80008c6:	4158      	adcs	r0, r3
 80008c8:	0040      	lsls	r0, r0, #1
 80008ca:	3801      	subs	r0, #1
 80008cc:	e7d9      	b.n	8000882 <__gesf2+0x3a>
 80008ce:	2002      	movs	r0, #2
 80008d0:	4240      	negs	r0, r0
 80008d2:	e7d6      	b.n	8000882 <__gesf2+0x3a>

080008d4 <__lesf2>:
 80008d4:	b570      	push	{r4, r5, r6, lr}
 80008d6:	0042      	lsls	r2, r0, #1
 80008d8:	0245      	lsls	r5, r0, #9
 80008da:	024e      	lsls	r6, r1, #9
 80008dc:	004c      	lsls	r4, r1, #1
 80008de:	0fc3      	lsrs	r3, r0, #31
 80008e0:	0a6d      	lsrs	r5, r5, #9
 80008e2:	0e12      	lsrs	r2, r2, #24
 80008e4:	0a76      	lsrs	r6, r6, #9
 80008e6:	0e24      	lsrs	r4, r4, #24
 80008e8:	0fc8      	lsrs	r0, r1, #31
 80008ea:	2aff      	cmp	r2, #255	; 0xff
 80008ec:	d00b      	beq.n	8000906 <__lesf2+0x32>
 80008ee:	2cff      	cmp	r4, #255	; 0xff
 80008f0:	d00d      	beq.n	800090e <__lesf2+0x3a>
 80008f2:	2a00      	cmp	r2, #0
 80008f4:	d11f      	bne.n	8000936 <__lesf2+0x62>
 80008f6:	2c00      	cmp	r4, #0
 80008f8:	d116      	bne.n	8000928 <__lesf2+0x54>
 80008fa:	2e00      	cmp	r6, #0
 80008fc:	d114      	bne.n	8000928 <__lesf2+0x54>
 80008fe:	2000      	movs	r0, #0
 8000900:	2d00      	cmp	r5, #0
 8000902:	d010      	beq.n	8000926 <__lesf2+0x52>
 8000904:	e009      	b.n	800091a <__lesf2+0x46>
 8000906:	2d00      	cmp	r5, #0
 8000908:	d10c      	bne.n	8000924 <__lesf2+0x50>
 800090a:	2cff      	cmp	r4, #255	; 0xff
 800090c:	d113      	bne.n	8000936 <__lesf2+0x62>
 800090e:	2e00      	cmp	r6, #0
 8000910:	d108      	bne.n	8000924 <__lesf2+0x50>
 8000912:	2a00      	cmp	r2, #0
 8000914:	d008      	beq.n	8000928 <__lesf2+0x54>
 8000916:	4283      	cmp	r3, r0
 8000918:	d012      	beq.n	8000940 <__lesf2+0x6c>
 800091a:	2102      	movs	r1, #2
 800091c:	1e58      	subs	r0, r3, #1
 800091e:	4008      	ands	r0, r1
 8000920:	3801      	subs	r0, #1
 8000922:	e000      	b.n	8000926 <__lesf2+0x52>
 8000924:	2002      	movs	r0, #2
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	2d00      	cmp	r5, #0
 800092a:	d1f4      	bne.n	8000916 <__lesf2+0x42>
 800092c:	2800      	cmp	r0, #0
 800092e:	d1fa      	bne.n	8000926 <__lesf2+0x52>
 8000930:	2001      	movs	r0, #1
 8000932:	4240      	negs	r0, r0
 8000934:	e7f7      	b.n	8000926 <__lesf2+0x52>
 8000936:	2c00      	cmp	r4, #0
 8000938:	d1ed      	bne.n	8000916 <__lesf2+0x42>
 800093a:	2e00      	cmp	r6, #0
 800093c:	d1eb      	bne.n	8000916 <__lesf2+0x42>
 800093e:	e7ec      	b.n	800091a <__lesf2+0x46>
 8000940:	42a2      	cmp	r2, r4
 8000942:	dc05      	bgt.n	8000950 <__lesf2+0x7c>
 8000944:	dbf2      	blt.n	800092c <__lesf2+0x58>
 8000946:	42b5      	cmp	r5, r6
 8000948:	d802      	bhi.n	8000950 <__lesf2+0x7c>
 800094a:	d3ef      	bcc.n	800092c <__lesf2+0x58>
 800094c:	2000      	movs	r0, #0
 800094e:	e7ea      	b.n	8000926 <__lesf2+0x52>
 8000950:	4243      	negs	r3, r0
 8000952:	4158      	adcs	r0, r3
 8000954:	0040      	lsls	r0, r0, #1
 8000956:	3801      	subs	r0, #1
 8000958:	e7e5      	b.n	8000926 <__lesf2+0x52>
 800095a:	46c0      	nop			; (mov r8, r8)

0800095c <__aeabi_fmul>:
 800095c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800095e:	464f      	mov	r7, r9
 8000960:	4646      	mov	r6, r8
 8000962:	46d6      	mov	lr, sl
 8000964:	0244      	lsls	r4, r0, #9
 8000966:	0045      	lsls	r5, r0, #1
 8000968:	b5c0      	push	{r6, r7, lr}
 800096a:	0a64      	lsrs	r4, r4, #9
 800096c:	1c0f      	adds	r7, r1, #0
 800096e:	0e2d      	lsrs	r5, r5, #24
 8000970:	0fc6      	lsrs	r6, r0, #31
 8000972:	2d00      	cmp	r5, #0
 8000974:	d100      	bne.n	8000978 <__aeabi_fmul+0x1c>
 8000976:	e08d      	b.n	8000a94 <__aeabi_fmul+0x138>
 8000978:	2dff      	cmp	r5, #255	; 0xff
 800097a:	d100      	bne.n	800097e <__aeabi_fmul+0x22>
 800097c:	e092      	b.n	8000aa4 <__aeabi_fmul+0x148>
 800097e:	2300      	movs	r3, #0
 8000980:	2080      	movs	r0, #128	; 0x80
 8000982:	4699      	mov	r9, r3
 8000984:	469a      	mov	sl, r3
 8000986:	00e4      	lsls	r4, r4, #3
 8000988:	04c0      	lsls	r0, r0, #19
 800098a:	4304      	orrs	r4, r0
 800098c:	3d7f      	subs	r5, #127	; 0x7f
 800098e:	0278      	lsls	r0, r7, #9
 8000990:	0a43      	lsrs	r3, r0, #9
 8000992:	4698      	mov	r8, r3
 8000994:	007b      	lsls	r3, r7, #1
 8000996:	0e1b      	lsrs	r3, r3, #24
 8000998:	0fff      	lsrs	r7, r7, #31
 800099a:	2b00      	cmp	r3, #0
 800099c:	d100      	bne.n	80009a0 <__aeabi_fmul+0x44>
 800099e:	e070      	b.n	8000a82 <__aeabi_fmul+0x126>
 80009a0:	2bff      	cmp	r3, #255	; 0xff
 80009a2:	d100      	bne.n	80009a6 <__aeabi_fmul+0x4a>
 80009a4:	e086      	b.n	8000ab4 <__aeabi_fmul+0x158>
 80009a6:	4642      	mov	r2, r8
 80009a8:	00d0      	lsls	r0, r2, #3
 80009aa:	2280      	movs	r2, #128	; 0x80
 80009ac:	3b7f      	subs	r3, #127	; 0x7f
 80009ae:	18ed      	adds	r5, r5, r3
 80009b0:	2300      	movs	r3, #0
 80009b2:	04d2      	lsls	r2, r2, #19
 80009b4:	4302      	orrs	r2, r0
 80009b6:	4690      	mov	r8, r2
 80009b8:	469c      	mov	ip, r3
 80009ba:	0031      	movs	r1, r6
 80009bc:	464b      	mov	r3, r9
 80009be:	4079      	eors	r1, r7
 80009c0:	1c68      	adds	r0, r5, #1
 80009c2:	2b0f      	cmp	r3, #15
 80009c4:	d81c      	bhi.n	8000a00 <__aeabi_fmul+0xa4>
 80009c6:	4a76      	ldr	r2, [pc, #472]	; (8000ba0 <__aeabi_fmul+0x244>)
 80009c8:	009b      	lsls	r3, r3, #2
 80009ca:	58d3      	ldr	r3, [r2, r3]
 80009cc:	469f      	mov	pc, r3
 80009ce:	0039      	movs	r1, r7
 80009d0:	4644      	mov	r4, r8
 80009d2:	46e2      	mov	sl, ip
 80009d4:	4653      	mov	r3, sl
 80009d6:	2b02      	cmp	r3, #2
 80009d8:	d00f      	beq.n	80009fa <__aeabi_fmul+0x9e>
 80009da:	2b03      	cmp	r3, #3
 80009dc:	d100      	bne.n	80009e0 <__aeabi_fmul+0x84>
 80009de:	e0d7      	b.n	8000b90 <__aeabi_fmul+0x234>
 80009e0:	2b01      	cmp	r3, #1
 80009e2:	d137      	bne.n	8000a54 <__aeabi_fmul+0xf8>
 80009e4:	2000      	movs	r0, #0
 80009e6:	2400      	movs	r4, #0
 80009e8:	05c0      	lsls	r0, r0, #23
 80009ea:	4320      	orrs	r0, r4
 80009ec:	07c9      	lsls	r1, r1, #31
 80009ee:	4308      	orrs	r0, r1
 80009f0:	bce0      	pop	{r5, r6, r7}
 80009f2:	46ba      	mov	sl, r7
 80009f4:	46b1      	mov	r9, r6
 80009f6:	46a8      	mov	r8, r5
 80009f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009fa:	20ff      	movs	r0, #255	; 0xff
 80009fc:	2400      	movs	r4, #0
 80009fe:	e7f3      	b.n	80009e8 <__aeabi_fmul+0x8c>
 8000a00:	0c26      	lsrs	r6, r4, #16
 8000a02:	0424      	lsls	r4, r4, #16
 8000a04:	0c22      	lsrs	r2, r4, #16
 8000a06:	4644      	mov	r4, r8
 8000a08:	0424      	lsls	r4, r4, #16
 8000a0a:	0c24      	lsrs	r4, r4, #16
 8000a0c:	4643      	mov	r3, r8
 8000a0e:	0027      	movs	r7, r4
 8000a10:	0c1b      	lsrs	r3, r3, #16
 8000a12:	4357      	muls	r7, r2
 8000a14:	4374      	muls	r4, r6
 8000a16:	435a      	muls	r2, r3
 8000a18:	435e      	muls	r6, r3
 8000a1a:	1912      	adds	r2, r2, r4
 8000a1c:	0c3b      	lsrs	r3, r7, #16
 8000a1e:	189b      	adds	r3, r3, r2
 8000a20:	429c      	cmp	r4, r3
 8000a22:	d903      	bls.n	8000a2c <__aeabi_fmul+0xd0>
 8000a24:	2280      	movs	r2, #128	; 0x80
 8000a26:	0252      	lsls	r2, r2, #9
 8000a28:	4694      	mov	ip, r2
 8000a2a:	4466      	add	r6, ip
 8000a2c:	043f      	lsls	r7, r7, #16
 8000a2e:	041a      	lsls	r2, r3, #16
 8000a30:	0c3f      	lsrs	r7, r7, #16
 8000a32:	19d2      	adds	r2, r2, r7
 8000a34:	0194      	lsls	r4, r2, #6
 8000a36:	1e67      	subs	r7, r4, #1
 8000a38:	41bc      	sbcs	r4, r7
 8000a3a:	0c1b      	lsrs	r3, r3, #16
 8000a3c:	0e92      	lsrs	r2, r2, #26
 8000a3e:	199b      	adds	r3, r3, r6
 8000a40:	4314      	orrs	r4, r2
 8000a42:	019b      	lsls	r3, r3, #6
 8000a44:	431c      	orrs	r4, r3
 8000a46:	011b      	lsls	r3, r3, #4
 8000a48:	d400      	bmi.n	8000a4c <__aeabi_fmul+0xf0>
 8000a4a:	e09b      	b.n	8000b84 <__aeabi_fmul+0x228>
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	0862      	lsrs	r2, r4, #1
 8000a50:	401c      	ands	r4, r3
 8000a52:	4314      	orrs	r4, r2
 8000a54:	0002      	movs	r2, r0
 8000a56:	327f      	adds	r2, #127	; 0x7f
 8000a58:	2a00      	cmp	r2, #0
 8000a5a:	dd64      	ble.n	8000b26 <__aeabi_fmul+0x1ca>
 8000a5c:	0763      	lsls	r3, r4, #29
 8000a5e:	d004      	beq.n	8000a6a <__aeabi_fmul+0x10e>
 8000a60:	230f      	movs	r3, #15
 8000a62:	4023      	ands	r3, r4
 8000a64:	2b04      	cmp	r3, #4
 8000a66:	d000      	beq.n	8000a6a <__aeabi_fmul+0x10e>
 8000a68:	3404      	adds	r4, #4
 8000a6a:	0123      	lsls	r3, r4, #4
 8000a6c:	d503      	bpl.n	8000a76 <__aeabi_fmul+0x11a>
 8000a6e:	0002      	movs	r2, r0
 8000a70:	4b4c      	ldr	r3, [pc, #304]	; (8000ba4 <__aeabi_fmul+0x248>)
 8000a72:	3280      	adds	r2, #128	; 0x80
 8000a74:	401c      	ands	r4, r3
 8000a76:	2afe      	cmp	r2, #254	; 0xfe
 8000a78:	dcbf      	bgt.n	80009fa <__aeabi_fmul+0x9e>
 8000a7a:	01a4      	lsls	r4, r4, #6
 8000a7c:	0a64      	lsrs	r4, r4, #9
 8000a7e:	b2d0      	uxtb	r0, r2
 8000a80:	e7b2      	b.n	80009e8 <__aeabi_fmul+0x8c>
 8000a82:	4643      	mov	r3, r8
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d13d      	bne.n	8000b04 <__aeabi_fmul+0x1a8>
 8000a88:	464a      	mov	r2, r9
 8000a8a:	3301      	adds	r3, #1
 8000a8c:	431a      	orrs	r2, r3
 8000a8e:	4691      	mov	r9, r2
 8000a90:	469c      	mov	ip, r3
 8000a92:	e792      	b.n	80009ba <__aeabi_fmul+0x5e>
 8000a94:	2c00      	cmp	r4, #0
 8000a96:	d129      	bne.n	8000aec <__aeabi_fmul+0x190>
 8000a98:	2304      	movs	r3, #4
 8000a9a:	4699      	mov	r9, r3
 8000a9c:	3b03      	subs	r3, #3
 8000a9e:	2500      	movs	r5, #0
 8000aa0:	469a      	mov	sl, r3
 8000aa2:	e774      	b.n	800098e <__aeabi_fmul+0x32>
 8000aa4:	2c00      	cmp	r4, #0
 8000aa6:	d11b      	bne.n	8000ae0 <__aeabi_fmul+0x184>
 8000aa8:	2308      	movs	r3, #8
 8000aaa:	4699      	mov	r9, r3
 8000aac:	3b06      	subs	r3, #6
 8000aae:	25ff      	movs	r5, #255	; 0xff
 8000ab0:	469a      	mov	sl, r3
 8000ab2:	e76c      	b.n	800098e <__aeabi_fmul+0x32>
 8000ab4:	4643      	mov	r3, r8
 8000ab6:	35ff      	adds	r5, #255	; 0xff
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d10b      	bne.n	8000ad4 <__aeabi_fmul+0x178>
 8000abc:	2302      	movs	r3, #2
 8000abe:	464a      	mov	r2, r9
 8000ac0:	431a      	orrs	r2, r3
 8000ac2:	4691      	mov	r9, r2
 8000ac4:	469c      	mov	ip, r3
 8000ac6:	e778      	b.n	80009ba <__aeabi_fmul+0x5e>
 8000ac8:	4653      	mov	r3, sl
 8000aca:	0031      	movs	r1, r6
 8000acc:	2b02      	cmp	r3, #2
 8000ace:	d000      	beq.n	8000ad2 <__aeabi_fmul+0x176>
 8000ad0:	e783      	b.n	80009da <__aeabi_fmul+0x7e>
 8000ad2:	e792      	b.n	80009fa <__aeabi_fmul+0x9e>
 8000ad4:	2303      	movs	r3, #3
 8000ad6:	464a      	mov	r2, r9
 8000ad8:	431a      	orrs	r2, r3
 8000ada:	4691      	mov	r9, r2
 8000adc:	469c      	mov	ip, r3
 8000ade:	e76c      	b.n	80009ba <__aeabi_fmul+0x5e>
 8000ae0:	230c      	movs	r3, #12
 8000ae2:	4699      	mov	r9, r3
 8000ae4:	3b09      	subs	r3, #9
 8000ae6:	25ff      	movs	r5, #255	; 0xff
 8000ae8:	469a      	mov	sl, r3
 8000aea:	e750      	b.n	800098e <__aeabi_fmul+0x32>
 8000aec:	0020      	movs	r0, r4
 8000aee:	f000 fa57 	bl	8000fa0 <__clzsi2>
 8000af2:	2576      	movs	r5, #118	; 0x76
 8000af4:	1f43      	subs	r3, r0, #5
 8000af6:	409c      	lsls	r4, r3
 8000af8:	2300      	movs	r3, #0
 8000afa:	426d      	negs	r5, r5
 8000afc:	4699      	mov	r9, r3
 8000afe:	469a      	mov	sl, r3
 8000b00:	1a2d      	subs	r5, r5, r0
 8000b02:	e744      	b.n	800098e <__aeabi_fmul+0x32>
 8000b04:	4640      	mov	r0, r8
 8000b06:	f000 fa4b 	bl	8000fa0 <__clzsi2>
 8000b0a:	4642      	mov	r2, r8
 8000b0c:	1f43      	subs	r3, r0, #5
 8000b0e:	409a      	lsls	r2, r3
 8000b10:	2300      	movs	r3, #0
 8000b12:	1a2d      	subs	r5, r5, r0
 8000b14:	4690      	mov	r8, r2
 8000b16:	469c      	mov	ip, r3
 8000b18:	3d76      	subs	r5, #118	; 0x76
 8000b1a:	e74e      	b.n	80009ba <__aeabi_fmul+0x5e>
 8000b1c:	2480      	movs	r4, #128	; 0x80
 8000b1e:	2100      	movs	r1, #0
 8000b20:	20ff      	movs	r0, #255	; 0xff
 8000b22:	03e4      	lsls	r4, r4, #15
 8000b24:	e760      	b.n	80009e8 <__aeabi_fmul+0x8c>
 8000b26:	2301      	movs	r3, #1
 8000b28:	1a9b      	subs	r3, r3, r2
 8000b2a:	2b1b      	cmp	r3, #27
 8000b2c:	dd00      	ble.n	8000b30 <__aeabi_fmul+0x1d4>
 8000b2e:	e759      	b.n	80009e4 <__aeabi_fmul+0x88>
 8000b30:	0022      	movs	r2, r4
 8000b32:	309e      	adds	r0, #158	; 0x9e
 8000b34:	40da      	lsrs	r2, r3
 8000b36:	4084      	lsls	r4, r0
 8000b38:	0013      	movs	r3, r2
 8000b3a:	1e62      	subs	r2, r4, #1
 8000b3c:	4194      	sbcs	r4, r2
 8000b3e:	431c      	orrs	r4, r3
 8000b40:	0763      	lsls	r3, r4, #29
 8000b42:	d004      	beq.n	8000b4e <__aeabi_fmul+0x1f2>
 8000b44:	230f      	movs	r3, #15
 8000b46:	4023      	ands	r3, r4
 8000b48:	2b04      	cmp	r3, #4
 8000b4a:	d000      	beq.n	8000b4e <__aeabi_fmul+0x1f2>
 8000b4c:	3404      	adds	r4, #4
 8000b4e:	0163      	lsls	r3, r4, #5
 8000b50:	d51a      	bpl.n	8000b88 <__aeabi_fmul+0x22c>
 8000b52:	2001      	movs	r0, #1
 8000b54:	2400      	movs	r4, #0
 8000b56:	e747      	b.n	80009e8 <__aeabi_fmul+0x8c>
 8000b58:	2080      	movs	r0, #128	; 0x80
 8000b5a:	03c0      	lsls	r0, r0, #15
 8000b5c:	4204      	tst	r4, r0
 8000b5e:	d009      	beq.n	8000b74 <__aeabi_fmul+0x218>
 8000b60:	4643      	mov	r3, r8
 8000b62:	4203      	tst	r3, r0
 8000b64:	d106      	bne.n	8000b74 <__aeabi_fmul+0x218>
 8000b66:	4644      	mov	r4, r8
 8000b68:	4304      	orrs	r4, r0
 8000b6a:	0264      	lsls	r4, r4, #9
 8000b6c:	0039      	movs	r1, r7
 8000b6e:	20ff      	movs	r0, #255	; 0xff
 8000b70:	0a64      	lsrs	r4, r4, #9
 8000b72:	e739      	b.n	80009e8 <__aeabi_fmul+0x8c>
 8000b74:	2080      	movs	r0, #128	; 0x80
 8000b76:	03c0      	lsls	r0, r0, #15
 8000b78:	4304      	orrs	r4, r0
 8000b7a:	0264      	lsls	r4, r4, #9
 8000b7c:	0031      	movs	r1, r6
 8000b7e:	20ff      	movs	r0, #255	; 0xff
 8000b80:	0a64      	lsrs	r4, r4, #9
 8000b82:	e731      	b.n	80009e8 <__aeabi_fmul+0x8c>
 8000b84:	0028      	movs	r0, r5
 8000b86:	e765      	b.n	8000a54 <__aeabi_fmul+0xf8>
 8000b88:	01a4      	lsls	r4, r4, #6
 8000b8a:	2000      	movs	r0, #0
 8000b8c:	0a64      	lsrs	r4, r4, #9
 8000b8e:	e72b      	b.n	80009e8 <__aeabi_fmul+0x8c>
 8000b90:	2080      	movs	r0, #128	; 0x80
 8000b92:	03c0      	lsls	r0, r0, #15
 8000b94:	4304      	orrs	r4, r0
 8000b96:	0264      	lsls	r4, r4, #9
 8000b98:	20ff      	movs	r0, #255	; 0xff
 8000b9a:	0a64      	lsrs	r4, r4, #9
 8000b9c:	e724      	b.n	80009e8 <__aeabi_fmul+0x8c>
 8000b9e:	46c0      	nop			; (mov r8, r8)
 8000ba0:	08002894 	.word	0x08002894
 8000ba4:	f7ffffff 	.word	0xf7ffffff

08000ba8 <__aeabi_fsub>:
 8000ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000baa:	46ce      	mov	lr, r9
 8000bac:	4647      	mov	r7, r8
 8000bae:	0243      	lsls	r3, r0, #9
 8000bb0:	0a5b      	lsrs	r3, r3, #9
 8000bb2:	024e      	lsls	r6, r1, #9
 8000bb4:	00da      	lsls	r2, r3, #3
 8000bb6:	4694      	mov	ip, r2
 8000bb8:	0a72      	lsrs	r2, r6, #9
 8000bba:	4691      	mov	r9, r2
 8000bbc:	0045      	lsls	r5, r0, #1
 8000bbe:	004a      	lsls	r2, r1, #1
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	0e2d      	lsrs	r5, r5, #24
 8000bc4:	001f      	movs	r7, r3
 8000bc6:	0fc4      	lsrs	r4, r0, #31
 8000bc8:	0e12      	lsrs	r2, r2, #24
 8000bca:	0fc9      	lsrs	r1, r1, #31
 8000bcc:	09b6      	lsrs	r6, r6, #6
 8000bce:	2aff      	cmp	r2, #255	; 0xff
 8000bd0:	d05b      	beq.n	8000c8a <__aeabi_fsub+0xe2>
 8000bd2:	2001      	movs	r0, #1
 8000bd4:	4041      	eors	r1, r0
 8000bd6:	428c      	cmp	r4, r1
 8000bd8:	d039      	beq.n	8000c4e <__aeabi_fsub+0xa6>
 8000bda:	1aa8      	subs	r0, r5, r2
 8000bdc:	2800      	cmp	r0, #0
 8000bde:	dd5a      	ble.n	8000c96 <__aeabi_fsub+0xee>
 8000be0:	2a00      	cmp	r2, #0
 8000be2:	d06a      	beq.n	8000cba <__aeabi_fsub+0x112>
 8000be4:	2dff      	cmp	r5, #255	; 0xff
 8000be6:	d100      	bne.n	8000bea <__aeabi_fsub+0x42>
 8000be8:	e0d9      	b.n	8000d9e <__aeabi_fsub+0x1f6>
 8000bea:	2280      	movs	r2, #128	; 0x80
 8000bec:	04d2      	lsls	r2, r2, #19
 8000bee:	4316      	orrs	r6, r2
 8000bf0:	281b      	cmp	r0, #27
 8000bf2:	dc00      	bgt.n	8000bf6 <__aeabi_fsub+0x4e>
 8000bf4:	e0e9      	b.n	8000dca <__aeabi_fsub+0x222>
 8000bf6:	2001      	movs	r0, #1
 8000bf8:	4663      	mov	r3, ip
 8000bfa:	1a18      	subs	r0, r3, r0
 8000bfc:	0143      	lsls	r3, r0, #5
 8000bfe:	d400      	bmi.n	8000c02 <__aeabi_fsub+0x5a>
 8000c00:	e0b4      	b.n	8000d6c <__aeabi_fsub+0x1c4>
 8000c02:	0180      	lsls	r0, r0, #6
 8000c04:	0987      	lsrs	r7, r0, #6
 8000c06:	0038      	movs	r0, r7
 8000c08:	f000 f9ca 	bl	8000fa0 <__clzsi2>
 8000c0c:	3805      	subs	r0, #5
 8000c0e:	4087      	lsls	r7, r0
 8000c10:	4285      	cmp	r5, r0
 8000c12:	dc00      	bgt.n	8000c16 <__aeabi_fsub+0x6e>
 8000c14:	e0cc      	b.n	8000db0 <__aeabi_fsub+0x208>
 8000c16:	1a2d      	subs	r5, r5, r0
 8000c18:	48b5      	ldr	r0, [pc, #724]	; (8000ef0 <__aeabi_fsub+0x348>)
 8000c1a:	4038      	ands	r0, r7
 8000c1c:	0743      	lsls	r3, r0, #29
 8000c1e:	d004      	beq.n	8000c2a <__aeabi_fsub+0x82>
 8000c20:	230f      	movs	r3, #15
 8000c22:	4003      	ands	r3, r0
 8000c24:	2b04      	cmp	r3, #4
 8000c26:	d000      	beq.n	8000c2a <__aeabi_fsub+0x82>
 8000c28:	3004      	adds	r0, #4
 8000c2a:	0143      	lsls	r3, r0, #5
 8000c2c:	d400      	bmi.n	8000c30 <__aeabi_fsub+0x88>
 8000c2e:	e0a0      	b.n	8000d72 <__aeabi_fsub+0x1ca>
 8000c30:	1c6a      	adds	r2, r5, #1
 8000c32:	2dfe      	cmp	r5, #254	; 0xfe
 8000c34:	d100      	bne.n	8000c38 <__aeabi_fsub+0x90>
 8000c36:	e08d      	b.n	8000d54 <__aeabi_fsub+0x1ac>
 8000c38:	0180      	lsls	r0, r0, #6
 8000c3a:	0a47      	lsrs	r7, r0, #9
 8000c3c:	b2d2      	uxtb	r2, r2
 8000c3e:	05d0      	lsls	r0, r2, #23
 8000c40:	4338      	orrs	r0, r7
 8000c42:	07e4      	lsls	r4, r4, #31
 8000c44:	4320      	orrs	r0, r4
 8000c46:	bcc0      	pop	{r6, r7}
 8000c48:	46b9      	mov	r9, r7
 8000c4a:	46b0      	mov	r8, r6
 8000c4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c4e:	1aa8      	subs	r0, r5, r2
 8000c50:	4680      	mov	r8, r0
 8000c52:	2800      	cmp	r0, #0
 8000c54:	dd45      	ble.n	8000ce2 <__aeabi_fsub+0x13a>
 8000c56:	2a00      	cmp	r2, #0
 8000c58:	d070      	beq.n	8000d3c <__aeabi_fsub+0x194>
 8000c5a:	2dff      	cmp	r5, #255	; 0xff
 8000c5c:	d100      	bne.n	8000c60 <__aeabi_fsub+0xb8>
 8000c5e:	e09e      	b.n	8000d9e <__aeabi_fsub+0x1f6>
 8000c60:	2380      	movs	r3, #128	; 0x80
 8000c62:	04db      	lsls	r3, r3, #19
 8000c64:	431e      	orrs	r6, r3
 8000c66:	4643      	mov	r3, r8
 8000c68:	2b1b      	cmp	r3, #27
 8000c6a:	dc00      	bgt.n	8000c6e <__aeabi_fsub+0xc6>
 8000c6c:	e0d2      	b.n	8000e14 <__aeabi_fsub+0x26c>
 8000c6e:	2001      	movs	r0, #1
 8000c70:	4460      	add	r0, ip
 8000c72:	0143      	lsls	r3, r0, #5
 8000c74:	d57a      	bpl.n	8000d6c <__aeabi_fsub+0x1c4>
 8000c76:	3501      	adds	r5, #1
 8000c78:	2dff      	cmp	r5, #255	; 0xff
 8000c7a:	d06b      	beq.n	8000d54 <__aeabi_fsub+0x1ac>
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	4a9d      	ldr	r2, [pc, #628]	; (8000ef4 <__aeabi_fsub+0x34c>)
 8000c80:	4003      	ands	r3, r0
 8000c82:	0840      	lsrs	r0, r0, #1
 8000c84:	4010      	ands	r0, r2
 8000c86:	4318      	orrs	r0, r3
 8000c88:	e7c8      	b.n	8000c1c <__aeabi_fsub+0x74>
 8000c8a:	2e00      	cmp	r6, #0
 8000c8c:	d020      	beq.n	8000cd0 <__aeabi_fsub+0x128>
 8000c8e:	428c      	cmp	r4, r1
 8000c90:	d023      	beq.n	8000cda <__aeabi_fsub+0x132>
 8000c92:	0028      	movs	r0, r5
 8000c94:	38ff      	subs	r0, #255	; 0xff
 8000c96:	2800      	cmp	r0, #0
 8000c98:	d039      	beq.n	8000d0e <__aeabi_fsub+0x166>
 8000c9a:	1b57      	subs	r7, r2, r5
 8000c9c:	2d00      	cmp	r5, #0
 8000c9e:	d000      	beq.n	8000ca2 <__aeabi_fsub+0xfa>
 8000ca0:	e09d      	b.n	8000dde <__aeabi_fsub+0x236>
 8000ca2:	4663      	mov	r3, ip
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d100      	bne.n	8000caa <__aeabi_fsub+0x102>
 8000ca8:	e0db      	b.n	8000e62 <__aeabi_fsub+0x2ba>
 8000caa:	1e7b      	subs	r3, r7, #1
 8000cac:	2f01      	cmp	r7, #1
 8000cae:	d100      	bne.n	8000cb2 <__aeabi_fsub+0x10a>
 8000cb0:	e10d      	b.n	8000ece <__aeabi_fsub+0x326>
 8000cb2:	2fff      	cmp	r7, #255	; 0xff
 8000cb4:	d071      	beq.n	8000d9a <__aeabi_fsub+0x1f2>
 8000cb6:	001f      	movs	r7, r3
 8000cb8:	e098      	b.n	8000dec <__aeabi_fsub+0x244>
 8000cba:	2e00      	cmp	r6, #0
 8000cbc:	d100      	bne.n	8000cc0 <__aeabi_fsub+0x118>
 8000cbe:	e0a7      	b.n	8000e10 <__aeabi_fsub+0x268>
 8000cc0:	1e42      	subs	r2, r0, #1
 8000cc2:	2801      	cmp	r0, #1
 8000cc4:	d100      	bne.n	8000cc8 <__aeabi_fsub+0x120>
 8000cc6:	e0e6      	b.n	8000e96 <__aeabi_fsub+0x2ee>
 8000cc8:	28ff      	cmp	r0, #255	; 0xff
 8000cca:	d068      	beq.n	8000d9e <__aeabi_fsub+0x1f6>
 8000ccc:	0010      	movs	r0, r2
 8000cce:	e78f      	b.n	8000bf0 <__aeabi_fsub+0x48>
 8000cd0:	2001      	movs	r0, #1
 8000cd2:	4041      	eors	r1, r0
 8000cd4:	42a1      	cmp	r1, r4
 8000cd6:	d000      	beq.n	8000cda <__aeabi_fsub+0x132>
 8000cd8:	e77f      	b.n	8000bda <__aeabi_fsub+0x32>
 8000cda:	20ff      	movs	r0, #255	; 0xff
 8000cdc:	4240      	negs	r0, r0
 8000cde:	4680      	mov	r8, r0
 8000ce0:	44a8      	add	r8, r5
 8000ce2:	4640      	mov	r0, r8
 8000ce4:	2800      	cmp	r0, #0
 8000ce6:	d038      	beq.n	8000d5a <__aeabi_fsub+0x1b2>
 8000ce8:	1b51      	subs	r1, r2, r5
 8000cea:	2d00      	cmp	r5, #0
 8000cec:	d100      	bne.n	8000cf0 <__aeabi_fsub+0x148>
 8000cee:	e0ae      	b.n	8000e4e <__aeabi_fsub+0x2a6>
 8000cf0:	2aff      	cmp	r2, #255	; 0xff
 8000cf2:	d100      	bne.n	8000cf6 <__aeabi_fsub+0x14e>
 8000cf4:	e0df      	b.n	8000eb6 <__aeabi_fsub+0x30e>
 8000cf6:	2380      	movs	r3, #128	; 0x80
 8000cf8:	4660      	mov	r0, ip
 8000cfa:	04db      	lsls	r3, r3, #19
 8000cfc:	4318      	orrs	r0, r3
 8000cfe:	4684      	mov	ip, r0
 8000d00:	291b      	cmp	r1, #27
 8000d02:	dc00      	bgt.n	8000d06 <__aeabi_fsub+0x15e>
 8000d04:	e0d9      	b.n	8000eba <__aeabi_fsub+0x312>
 8000d06:	2001      	movs	r0, #1
 8000d08:	0015      	movs	r5, r2
 8000d0a:	1980      	adds	r0, r0, r6
 8000d0c:	e7b1      	b.n	8000c72 <__aeabi_fsub+0xca>
 8000d0e:	20fe      	movs	r0, #254	; 0xfe
 8000d10:	1c6a      	adds	r2, r5, #1
 8000d12:	4210      	tst	r0, r2
 8000d14:	d171      	bne.n	8000dfa <__aeabi_fsub+0x252>
 8000d16:	2d00      	cmp	r5, #0
 8000d18:	d000      	beq.n	8000d1c <__aeabi_fsub+0x174>
 8000d1a:	e0a6      	b.n	8000e6a <__aeabi_fsub+0x2c2>
 8000d1c:	4663      	mov	r3, ip
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d100      	bne.n	8000d24 <__aeabi_fsub+0x17c>
 8000d22:	e0d9      	b.n	8000ed8 <__aeabi_fsub+0x330>
 8000d24:	2200      	movs	r2, #0
 8000d26:	2e00      	cmp	r6, #0
 8000d28:	d100      	bne.n	8000d2c <__aeabi_fsub+0x184>
 8000d2a:	e788      	b.n	8000c3e <__aeabi_fsub+0x96>
 8000d2c:	1b98      	subs	r0, r3, r6
 8000d2e:	0143      	lsls	r3, r0, #5
 8000d30:	d400      	bmi.n	8000d34 <__aeabi_fsub+0x18c>
 8000d32:	e0e1      	b.n	8000ef8 <__aeabi_fsub+0x350>
 8000d34:	4663      	mov	r3, ip
 8000d36:	000c      	movs	r4, r1
 8000d38:	1af0      	subs	r0, r6, r3
 8000d3a:	e76f      	b.n	8000c1c <__aeabi_fsub+0x74>
 8000d3c:	2e00      	cmp	r6, #0
 8000d3e:	d100      	bne.n	8000d42 <__aeabi_fsub+0x19a>
 8000d40:	e0b7      	b.n	8000eb2 <__aeabi_fsub+0x30a>
 8000d42:	0002      	movs	r2, r0
 8000d44:	3a01      	subs	r2, #1
 8000d46:	2801      	cmp	r0, #1
 8000d48:	d100      	bne.n	8000d4c <__aeabi_fsub+0x1a4>
 8000d4a:	e09c      	b.n	8000e86 <__aeabi_fsub+0x2de>
 8000d4c:	28ff      	cmp	r0, #255	; 0xff
 8000d4e:	d026      	beq.n	8000d9e <__aeabi_fsub+0x1f6>
 8000d50:	4690      	mov	r8, r2
 8000d52:	e788      	b.n	8000c66 <__aeabi_fsub+0xbe>
 8000d54:	22ff      	movs	r2, #255	; 0xff
 8000d56:	2700      	movs	r7, #0
 8000d58:	e771      	b.n	8000c3e <__aeabi_fsub+0x96>
 8000d5a:	20fe      	movs	r0, #254	; 0xfe
 8000d5c:	1c6a      	adds	r2, r5, #1
 8000d5e:	4210      	tst	r0, r2
 8000d60:	d064      	beq.n	8000e2c <__aeabi_fsub+0x284>
 8000d62:	2aff      	cmp	r2, #255	; 0xff
 8000d64:	d0f6      	beq.n	8000d54 <__aeabi_fsub+0x1ac>
 8000d66:	0015      	movs	r5, r2
 8000d68:	4466      	add	r6, ip
 8000d6a:	0870      	lsrs	r0, r6, #1
 8000d6c:	0743      	lsls	r3, r0, #29
 8000d6e:	d000      	beq.n	8000d72 <__aeabi_fsub+0x1ca>
 8000d70:	e756      	b.n	8000c20 <__aeabi_fsub+0x78>
 8000d72:	08c3      	lsrs	r3, r0, #3
 8000d74:	2dff      	cmp	r5, #255	; 0xff
 8000d76:	d012      	beq.n	8000d9e <__aeabi_fsub+0x1f6>
 8000d78:	025b      	lsls	r3, r3, #9
 8000d7a:	0a5f      	lsrs	r7, r3, #9
 8000d7c:	b2ea      	uxtb	r2, r5
 8000d7e:	e75e      	b.n	8000c3e <__aeabi_fsub+0x96>
 8000d80:	4662      	mov	r2, ip
 8000d82:	2a00      	cmp	r2, #0
 8000d84:	d100      	bne.n	8000d88 <__aeabi_fsub+0x1e0>
 8000d86:	e096      	b.n	8000eb6 <__aeabi_fsub+0x30e>
 8000d88:	2e00      	cmp	r6, #0
 8000d8a:	d008      	beq.n	8000d9e <__aeabi_fsub+0x1f6>
 8000d8c:	2280      	movs	r2, #128	; 0x80
 8000d8e:	03d2      	lsls	r2, r2, #15
 8000d90:	4213      	tst	r3, r2
 8000d92:	d004      	beq.n	8000d9e <__aeabi_fsub+0x1f6>
 8000d94:	4648      	mov	r0, r9
 8000d96:	4210      	tst	r0, r2
 8000d98:	d101      	bne.n	8000d9e <__aeabi_fsub+0x1f6>
 8000d9a:	000c      	movs	r4, r1
 8000d9c:	464b      	mov	r3, r9
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d0d8      	beq.n	8000d54 <__aeabi_fsub+0x1ac>
 8000da2:	2780      	movs	r7, #128	; 0x80
 8000da4:	03ff      	lsls	r7, r7, #15
 8000da6:	431f      	orrs	r7, r3
 8000da8:	027f      	lsls	r7, r7, #9
 8000daa:	22ff      	movs	r2, #255	; 0xff
 8000dac:	0a7f      	lsrs	r7, r7, #9
 8000dae:	e746      	b.n	8000c3e <__aeabi_fsub+0x96>
 8000db0:	2320      	movs	r3, #32
 8000db2:	003a      	movs	r2, r7
 8000db4:	1b45      	subs	r5, r0, r5
 8000db6:	0038      	movs	r0, r7
 8000db8:	3501      	adds	r5, #1
 8000dba:	40ea      	lsrs	r2, r5
 8000dbc:	1b5d      	subs	r5, r3, r5
 8000dbe:	40a8      	lsls	r0, r5
 8000dc0:	1e43      	subs	r3, r0, #1
 8000dc2:	4198      	sbcs	r0, r3
 8000dc4:	2500      	movs	r5, #0
 8000dc6:	4310      	orrs	r0, r2
 8000dc8:	e728      	b.n	8000c1c <__aeabi_fsub+0x74>
 8000dca:	2320      	movs	r3, #32
 8000dcc:	1a1b      	subs	r3, r3, r0
 8000dce:	0032      	movs	r2, r6
 8000dd0:	409e      	lsls	r6, r3
 8000dd2:	40c2      	lsrs	r2, r0
 8000dd4:	0030      	movs	r0, r6
 8000dd6:	1e43      	subs	r3, r0, #1
 8000dd8:	4198      	sbcs	r0, r3
 8000dda:	4310      	orrs	r0, r2
 8000ddc:	e70c      	b.n	8000bf8 <__aeabi_fsub+0x50>
 8000dde:	2aff      	cmp	r2, #255	; 0xff
 8000de0:	d0db      	beq.n	8000d9a <__aeabi_fsub+0x1f2>
 8000de2:	2380      	movs	r3, #128	; 0x80
 8000de4:	4660      	mov	r0, ip
 8000de6:	04db      	lsls	r3, r3, #19
 8000de8:	4318      	orrs	r0, r3
 8000dea:	4684      	mov	ip, r0
 8000dec:	2f1b      	cmp	r7, #27
 8000dee:	dd56      	ble.n	8000e9e <__aeabi_fsub+0x2f6>
 8000df0:	2001      	movs	r0, #1
 8000df2:	000c      	movs	r4, r1
 8000df4:	0015      	movs	r5, r2
 8000df6:	1a30      	subs	r0, r6, r0
 8000df8:	e700      	b.n	8000bfc <__aeabi_fsub+0x54>
 8000dfa:	4663      	mov	r3, ip
 8000dfc:	1b9f      	subs	r7, r3, r6
 8000dfe:	017b      	lsls	r3, r7, #5
 8000e00:	d43d      	bmi.n	8000e7e <__aeabi_fsub+0x2d6>
 8000e02:	2f00      	cmp	r7, #0
 8000e04:	d000      	beq.n	8000e08 <__aeabi_fsub+0x260>
 8000e06:	e6fe      	b.n	8000c06 <__aeabi_fsub+0x5e>
 8000e08:	2400      	movs	r4, #0
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	2700      	movs	r7, #0
 8000e0e:	e716      	b.n	8000c3e <__aeabi_fsub+0x96>
 8000e10:	0005      	movs	r5, r0
 8000e12:	e7af      	b.n	8000d74 <__aeabi_fsub+0x1cc>
 8000e14:	0032      	movs	r2, r6
 8000e16:	4643      	mov	r3, r8
 8000e18:	4641      	mov	r1, r8
 8000e1a:	40da      	lsrs	r2, r3
 8000e1c:	2320      	movs	r3, #32
 8000e1e:	1a5b      	subs	r3, r3, r1
 8000e20:	409e      	lsls	r6, r3
 8000e22:	0030      	movs	r0, r6
 8000e24:	1e43      	subs	r3, r0, #1
 8000e26:	4198      	sbcs	r0, r3
 8000e28:	4310      	orrs	r0, r2
 8000e2a:	e721      	b.n	8000c70 <__aeabi_fsub+0xc8>
 8000e2c:	2d00      	cmp	r5, #0
 8000e2e:	d1a7      	bne.n	8000d80 <__aeabi_fsub+0x1d8>
 8000e30:	4663      	mov	r3, ip
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d059      	beq.n	8000eea <__aeabi_fsub+0x342>
 8000e36:	2200      	movs	r2, #0
 8000e38:	2e00      	cmp	r6, #0
 8000e3a:	d100      	bne.n	8000e3e <__aeabi_fsub+0x296>
 8000e3c:	e6ff      	b.n	8000c3e <__aeabi_fsub+0x96>
 8000e3e:	0030      	movs	r0, r6
 8000e40:	4460      	add	r0, ip
 8000e42:	0143      	lsls	r3, r0, #5
 8000e44:	d592      	bpl.n	8000d6c <__aeabi_fsub+0x1c4>
 8000e46:	4b2a      	ldr	r3, [pc, #168]	; (8000ef0 <__aeabi_fsub+0x348>)
 8000e48:	3501      	adds	r5, #1
 8000e4a:	4018      	ands	r0, r3
 8000e4c:	e78e      	b.n	8000d6c <__aeabi_fsub+0x1c4>
 8000e4e:	4663      	mov	r3, ip
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d047      	beq.n	8000ee4 <__aeabi_fsub+0x33c>
 8000e54:	1e4b      	subs	r3, r1, #1
 8000e56:	2901      	cmp	r1, #1
 8000e58:	d015      	beq.n	8000e86 <__aeabi_fsub+0x2de>
 8000e5a:	29ff      	cmp	r1, #255	; 0xff
 8000e5c:	d02b      	beq.n	8000eb6 <__aeabi_fsub+0x30e>
 8000e5e:	0019      	movs	r1, r3
 8000e60:	e74e      	b.n	8000d00 <__aeabi_fsub+0x158>
 8000e62:	000c      	movs	r4, r1
 8000e64:	464b      	mov	r3, r9
 8000e66:	003d      	movs	r5, r7
 8000e68:	e784      	b.n	8000d74 <__aeabi_fsub+0x1cc>
 8000e6a:	4662      	mov	r2, ip
 8000e6c:	2a00      	cmp	r2, #0
 8000e6e:	d18b      	bne.n	8000d88 <__aeabi_fsub+0x1e0>
 8000e70:	2e00      	cmp	r6, #0
 8000e72:	d192      	bne.n	8000d9a <__aeabi_fsub+0x1f2>
 8000e74:	2780      	movs	r7, #128	; 0x80
 8000e76:	2400      	movs	r4, #0
 8000e78:	22ff      	movs	r2, #255	; 0xff
 8000e7a:	03ff      	lsls	r7, r7, #15
 8000e7c:	e6df      	b.n	8000c3e <__aeabi_fsub+0x96>
 8000e7e:	4663      	mov	r3, ip
 8000e80:	000c      	movs	r4, r1
 8000e82:	1af7      	subs	r7, r6, r3
 8000e84:	e6bf      	b.n	8000c06 <__aeabi_fsub+0x5e>
 8000e86:	0030      	movs	r0, r6
 8000e88:	4460      	add	r0, ip
 8000e8a:	2501      	movs	r5, #1
 8000e8c:	0143      	lsls	r3, r0, #5
 8000e8e:	d400      	bmi.n	8000e92 <__aeabi_fsub+0x2ea>
 8000e90:	e76c      	b.n	8000d6c <__aeabi_fsub+0x1c4>
 8000e92:	2502      	movs	r5, #2
 8000e94:	e6f2      	b.n	8000c7c <__aeabi_fsub+0xd4>
 8000e96:	4663      	mov	r3, ip
 8000e98:	2501      	movs	r5, #1
 8000e9a:	1b98      	subs	r0, r3, r6
 8000e9c:	e6ae      	b.n	8000bfc <__aeabi_fsub+0x54>
 8000e9e:	2320      	movs	r3, #32
 8000ea0:	4664      	mov	r4, ip
 8000ea2:	4660      	mov	r0, ip
 8000ea4:	40fc      	lsrs	r4, r7
 8000ea6:	1bdf      	subs	r7, r3, r7
 8000ea8:	40b8      	lsls	r0, r7
 8000eaa:	1e43      	subs	r3, r0, #1
 8000eac:	4198      	sbcs	r0, r3
 8000eae:	4320      	orrs	r0, r4
 8000eb0:	e79f      	b.n	8000df2 <__aeabi_fsub+0x24a>
 8000eb2:	0005      	movs	r5, r0
 8000eb4:	e75e      	b.n	8000d74 <__aeabi_fsub+0x1cc>
 8000eb6:	464b      	mov	r3, r9
 8000eb8:	e771      	b.n	8000d9e <__aeabi_fsub+0x1f6>
 8000eba:	2320      	movs	r3, #32
 8000ebc:	4665      	mov	r5, ip
 8000ebe:	4660      	mov	r0, ip
 8000ec0:	40cd      	lsrs	r5, r1
 8000ec2:	1a59      	subs	r1, r3, r1
 8000ec4:	4088      	lsls	r0, r1
 8000ec6:	1e43      	subs	r3, r0, #1
 8000ec8:	4198      	sbcs	r0, r3
 8000eca:	4328      	orrs	r0, r5
 8000ecc:	e71c      	b.n	8000d08 <__aeabi_fsub+0x160>
 8000ece:	4663      	mov	r3, ip
 8000ed0:	000c      	movs	r4, r1
 8000ed2:	2501      	movs	r5, #1
 8000ed4:	1af0      	subs	r0, r6, r3
 8000ed6:	e691      	b.n	8000bfc <__aeabi_fsub+0x54>
 8000ed8:	2e00      	cmp	r6, #0
 8000eda:	d095      	beq.n	8000e08 <__aeabi_fsub+0x260>
 8000edc:	000c      	movs	r4, r1
 8000ede:	464f      	mov	r7, r9
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	e6ac      	b.n	8000c3e <__aeabi_fsub+0x96>
 8000ee4:	464b      	mov	r3, r9
 8000ee6:	000d      	movs	r5, r1
 8000ee8:	e744      	b.n	8000d74 <__aeabi_fsub+0x1cc>
 8000eea:	464f      	mov	r7, r9
 8000eec:	2200      	movs	r2, #0
 8000eee:	e6a6      	b.n	8000c3e <__aeabi_fsub+0x96>
 8000ef0:	fbffffff 	.word	0xfbffffff
 8000ef4:	7dffffff 	.word	0x7dffffff
 8000ef8:	2800      	cmp	r0, #0
 8000efa:	d000      	beq.n	8000efe <__aeabi_fsub+0x356>
 8000efc:	e736      	b.n	8000d6c <__aeabi_fsub+0x1c4>
 8000efe:	2400      	movs	r4, #0
 8000f00:	2700      	movs	r7, #0
 8000f02:	e69c      	b.n	8000c3e <__aeabi_fsub+0x96>

08000f04 <__aeabi_i2f>:
 8000f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f06:	2800      	cmp	r0, #0
 8000f08:	d013      	beq.n	8000f32 <__aeabi_i2f+0x2e>
 8000f0a:	17c3      	asrs	r3, r0, #31
 8000f0c:	18c6      	adds	r6, r0, r3
 8000f0e:	405e      	eors	r6, r3
 8000f10:	0fc4      	lsrs	r4, r0, #31
 8000f12:	0030      	movs	r0, r6
 8000f14:	f000 f844 	bl	8000fa0 <__clzsi2>
 8000f18:	239e      	movs	r3, #158	; 0x9e
 8000f1a:	0005      	movs	r5, r0
 8000f1c:	1a1b      	subs	r3, r3, r0
 8000f1e:	2b96      	cmp	r3, #150	; 0x96
 8000f20:	dc0f      	bgt.n	8000f42 <__aeabi_i2f+0x3e>
 8000f22:	2808      	cmp	r0, #8
 8000f24:	dd01      	ble.n	8000f2a <__aeabi_i2f+0x26>
 8000f26:	3d08      	subs	r5, #8
 8000f28:	40ae      	lsls	r6, r5
 8000f2a:	0276      	lsls	r6, r6, #9
 8000f2c:	0a76      	lsrs	r6, r6, #9
 8000f2e:	b2d8      	uxtb	r0, r3
 8000f30:	e002      	b.n	8000f38 <__aeabi_i2f+0x34>
 8000f32:	2400      	movs	r4, #0
 8000f34:	2000      	movs	r0, #0
 8000f36:	2600      	movs	r6, #0
 8000f38:	05c0      	lsls	r0, r0, #23
 8000f3a:	4330      	orrs	r0, r6
 8000f3c:	07e4      	lsls	r4, r4, #31
 8000f3e:	4320      	orrs	r0, r4
 8000f40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f42:	2b99      	cmp	r3, #153	; 0x99
 8000f44:	dd0c      	ble.n	8000f60 <__aeabi_i2f+0x5c>
 8000f46:	2205      	movs	r2, #5
 8000f48:	0031      	movs	r1, r6
 8000f4a:	1a12      	subs	r2, r2, r0
 8000f4c:	40d1      	lsrs	r1, r2
 8000f4e:	000a      	movs	r2, r1
 8000f50:	0001      	movs	r1, r0
 8000f52:	0030      	movs	r0, r6
 8000f54:	311b      	adds	r1, #27
 8000f56:	4088      	lsls	r0, r1
 8000f58:	1e41      	subs	r1, r0, #1
 8000f5a:	4188      	sbcs	r0, r1
 8000f5c:	4302      	orrs	r2, r0
 8000f5e:	0016      	movs	r6, r2
 8000f60:	2d05      	cmp	r5, #5
 8000f62:	dc12      	bgt.n	8000f8a <__aeabi_i2f+0x86>
 8000f64:	0031      	movs	r1, r6
 8000f66:	4f0d      	ldr	r7, [pc, #52]	; (8000f9c <__aeabi_i2f+0x98>)
 8000f68:	4039      	ands	r1, r7
 8000f6a:	0772      	lsls	r2, r6, #29
 8000f6c:	d009      	beq.n	8000f82 <__aeabi_i2f+0x7e>
 8000f6e:	200f      	movs	r0, #15
 8000f70:	4030      	ands	r0, r6
 8000f72:	2804      	cmp	r0, #4
 8000f74:	d005      	beq.n	8000f82 <__aeabi_i2f+0x7e>
 8000f76:	3104      	adds	r1, #4
 8000f78:	014a      	lsls	r2, r1, #5
 8000f7a:	d502      	bpl.n	8000f82 <__aeabi_i2f+0x7e>
 8000f7c:	239f      	movs	r3, #159	; 0x9f
 8000f7e:	4039      	ands	r1, r7
 8000f80:	1b5b      	subs	r3, r3, r5
 8000f82:	0189      	lsls	r1, r1, #6
 8000f84:	0a4e      	lsrs	r6, r1, #9
 8000f86:	b2d8      	uxtb	r0, r3
 8000f88:	e7d6      	b.n	8000f38 <__aeabi_i2f+0x34>
 8000f8a:	1f6a      	subs	r2, r5, #5
 8000f8c:	4096      	lsls	r6, r2
 8000f8e:	0031      	movs	r1, r6
 8000f90:	4f02      	ldr	r7, [pc, #8]	; (8000f9c <__aeabi_i2f+0x98>)
 8000f92:	4039      	ands	r1, r7
 8000f94:	0772      	lsls	r2, r6, #29
 8000f96:	d0f4      	beq.n	8000f82 <__aeabi_i2f+0x7e>
 8000f98:	e7e9      	b.n	8000f6e <__aeabi_i2f+0x6a>
 8000f9a:	46c0      	nop			; (mov r8, r8)
 8000f9c:	fbffffff 	.word	0xfbffffff

08000fa0 <__clzsi2>:
 8000fa0:	211c      	movs	r1, #28
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	041b      	lsls	r3, r3, #16
 8000fa6:	4298      	cmp	r0, r3
 8000fa8:	d301      	bcc.n	8000fae <__clzsi2+0xe>
 8000faa:	0c00      	lsrs	r0, r0, #16
 8000fac:	3910      	subs	r1, #16
 8000fae:	0a1b      	lsrs	r3, r3, #8
 8000fb0:	4298      	cmp	r0, r3
 8000fb2:	d301      	bcc.n	8000fb8 <__clzsi2+0x18>
 8000fb4:	0a00      	lsrs	r0, r0, #8
 8000fb6:	3908      	subs	r1, #8
 8000fb8:	091b      	lsrs	r3, r3, #4
 8000fba:	4298      	cmp	r0, r3
 8000fbc:	d301      	bcc.n	8000fc2 <__clzsi2+0x22>
 8000fbe:	0900      	lsrs	r0, r0, #4
 8000fc0:	3904      	subs	r1, #4
 8000fc2:	a202      	add	r2, pc, #8	; (adr r2, 8000fcc <__clzsi2+0x2c>)
 8000fc4:	5c10      	ldrb	r0, [r2, r0]
 8000fc6:	1840      	adds	r0, r0, r1
 8000fc8:	4770      	bx	lr
 8000fca:	46c0      	nop			; (mov r8, r8)
 8000fcc:	02020304 	.word	0x02020304
 8000fd0:	01010101 	.word	0x01010101
	...

08000fdc <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
 8000fe4:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8000fe6:	6839      	ldr	r1, [r7, #0]
 8000fe8:	6878      	ldr	r0, [r7, #4]
 8000fea:	f7ff f88b 	bl	8000104 <__udivsi3>
 8000fee:	0003      	movs	r3, r0
 8000ff0:	001a      	movs	r2, r3
 8000ff2:	4b06      	ldr	r3, [pc, #24]	; (800100c <LL_InitTick+0x30>)
 8000ff4:	3a01      	subs	r2, #1
 8000ff6:	605a      	str	r2, [r3, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8000ff8:	4b04      	ldr	r3, [pc, #16]	; (800100c <LL_InitTick+0x30>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ffe:	4b03      	ldr	r3, [pc, #12]	; (800100c <LL_InitTick+0x30>)
 8001000:	2205      	movs	r2, #5
 8001002:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8001004:	46c0      	nop			; (mov r8, r8)
 8001006:	46bd      	mov	sp, r7
 8001008:	b002      	add	sp, #8
 800100a:	bd80      	pop	{r7, pc}
 800100c:	e000e010 	.word	0xe000e010

08001010 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8001018:	23fa      	movs	r3, #250	; 0xfa
 800101a:	009a      	lsls	r2, r3, #2
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	0011      	movs	r1, r2
 8001020:	0018      	movs	r0, r3
 8001022:	f7ff ffdb 	bl	8000fdc <LL_InitTick>
}
 8001026:	46c0      	nop			; (mov r8, r8)
 8001028:	46bd      	mov	sp, r7
 800102a:	b002      	add	sp, #8
 800102c:	bd80      	pop	{r7, pc}
	...

08001030 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8001038:	4b03      	ldr	r3, [pc, #12]	; (8001048 <LL_SetSystemCoreClock+0x18>)
 800103a:	687a      	ldr	r2, [r7, #4]
 800103c:	601a      	str	r2, [r3, #0]
}
 800103e:	46c0      	nop			; (mov r8, r8)
 8001040:	46bd      	mov	sp, r7
 8001042:	b002      	add	sp, #8
 8001044:	bd80      	pop	{r7, pc}
 8001046:	46c0      	nop			; (mov r8, r8)
 8001048:	2000003c 	.word	0x2000003c

0800104c <HTS221_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_RegisterBusIO(HTS221_Object_t *pObj, HTS221_IO_t *pIO)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b084      	sub	sp, #16
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
 8001054:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d103      	bne.n	8001064 <HTS221_RegisterBusIO+0x18>
  {
    ret = HTS221_ERROR;
 800105c:	2301      	movs	r3, #1
 800105e:	425b      	negs	r3, r3
 8001060:	60fb      	str	r3, [r7, #12]
 8001062:	e031      	b.n	80010c8 <HTS221_RegisterBusIO+0x7c>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	685a      	ldr	r2, [r3, #4]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	689a      	ldr	r2, [r3, #8]
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	7b1a      	ldrb	r2, [r3, #12]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	691a      	ldr	r2, [r3, #16]
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	695a      	ldr	r2, [r3, #20]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	699a      	ldr	r2, [r3, #24]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	4a0d      	ldr	r2, [pc, #52]	; (80010d4 <HTS221_RegisterBusIO+0x88>)
 80010a0:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4a0c      	ldr	r2, [pc, #48]	; (80010d8 <HTS221_RegisterBusIO+0x8c>)
 80010a6:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	687a      	ldr	r2, [r7, #4]
 80010ac:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init != NULL)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d005      	beq.n	80010c2 <HTS221_RegisterBusIO+0x76>
    {
      ret = pObj->IO.Init();
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4798      	blx	r3
 80010bc:	0003      	movs	r3, r0
 80010be:	60fb      	str	r3, [r7, #12]
 80010c0:	e002      	b.n	80010c8 <HTS221_RegisterBusIO+0x7c>
    }
    else
    {
      ret = HTS221_ERROR;
 80010c2:	2301      	movs	r3, #1
 80010c4:	425b      	negs	r3, r3
 80010c6:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80010c8:	68fb      	ldr	r3, [r7, #12]
}
 80010ca:	0018      	movs	r0, r3
 80010cc:	46bd      	mov	sp, r7
 80010ce:	b004      	add	sp, #16
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	46c0      	nop			; (mov r8, r8)
 80010d4:	080016f3 	.word	0x080016f3
 80010d8:	0800176d 	.word	0x0800176d

080010dc <HTS221_Init>:
  * @brief  Initialize the HTS221 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_Init(HTS221_Object_t *pObj)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2228      	movs	r2, #40	; 0x28
 80010e8:	5c9b      	ldrb	r3, [r3, r2]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d108      	bne.n	8001100 <HTS221_Init+0x24>
  {
    if (HTS221_Initialize(pObj) != HTS221_OK)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	0018      	movs	r0, r3
 80010f2:	f000 fa8f 	bl	8001614 <HTS221_Initialize>
 80010f6:	1e03      	subs	r3, r0, #0
 80010f8:	d002      	beq.n	8001100 <HTS221_Init+0x24>
    {
      return HTS221_ERROR;
 80010fa:	2301      	movs	r3, #1
 80010fc:	425b      	negs	r3, r3
 80010fe:	e004      	b.n	800110a <HTS221_Init+0x2e>
    }
  }

  pObj->is_initialized = 1;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2228      	movs	r2, #40	; 0x28
 8001104:	2101      	movs	r1, #1
 8001106:	5499      	strb	r1, [r3, r2]

  return HTS221_OK;
 8001108:	2300      	movs	r3, #0
}
 800110a:	0018      	movs	r0, r3
 800110c:	46bd      	mov	sp, r7
 800110e:	b002      	add	sp, #8
 8001110:	bd80      	pop	{r7, pc}

08001112 <HTS221_DeInit>:
  * @brief  Deinitialize the HTS221 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_DeInit(HTS221_Object_t *pObj)
{
 8001112:	b580      	push	{r7, lr}
 8001114:	b082      	sub	sp, #8
 8001116:	af00      	add	r7, sp, #0
 8001118:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2228      	movs	r2, #40	; 0x28
 800111e:	5c9b      	ldrb	r3, [r3, r2]
 8001120:	2b01      	cmp	r3, #1
 8001122:	d111      	bne.n	8001148 <HTS221_DeInit+0x36>
  {
    if (HTS221_HUM_Disable(pObj) != HTS221_OK)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	0018      	movs	r0, r3
 8001128:	f000 f874 	bl	8001214 <HTS221_HUM_Disable>
 800112c:	1e03      	subs	r3, r0, #0
 800112e:	d002      	beq.n	8001136 <HTS221_DeInit+0x24>
    {
      return HTS221_ERROR;
 8001130:	2301      	movs	r3, #1
 8001132:	425b      	negs	r3, r3
 8001134:	e00d      	b.n	8001152 <HTS221_DeInit+0x40>
    }

    if (HTS221_TEMP_Disable(pObj) != HTS221_OK)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	0018      	movs	r0, r3
 800113a:	f000 f951 	bl	80013e0 <HTS221_TEMP_Disable>
 800113e:	1e03      	subs	r3, r0, #0
 8001140:	d002      	beq.n	8001148 <HTS221_DeInit+0x36>
    {
      return HTS221_ERROR;
 8001142:	2301      	movs	r3, #1
 8001144:	425b      	negs	r3, r3
 8001146:	e004      	b.n	8001152 <HTS221_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2228      	movs	r2, #40	; 0x28
 800114c:	2100      	movs	r1, #0
 800114e:	5499      	strb	r1, [r3, r2]

  return HTS221_OK;
 8001150:	2300      	movs	r3, #0
}
 8001152:	0018      	movs	r0, r3
 8001154:	46bd      	mov	sp, r7
 8001156:	b002      	add	sp, #8
 8001158:	bd80      	pop	{r7, pc}

0800115a <HTS221_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_ReadID(HTS221_Object_t *pObj, uint8_t *Id)
{
 800115a:	b580      	push	{r7, lr}
 800115c:	b082      	sub	sp, #8
 800115e:	af00      	add	r7, sp, #0
 8001160:	6078      	str	r0, [r7, #4]
 8001162:	6039      	str	r1, [r7, #0]
  if (hts221_device_id_get(&(pObj->Ctx), Id) != HTS221_OK)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	331c      	adds	r3, #28
 8001168:	683a      	ldr	r2, [r7, #0]
 800116a:	0011      	movs	r1, r2
 800116c:	0018      	movs	r0, r3
 800116e:	f000 fc61 	bl	8001a34 <hts221_device_id_get>
 8001172:	1e03      	subs	r3, r0, #0
 8001174:	d002      	beq.n	800117c <HTS221_ReadID+0x22>
  {
    return HTS221_ERROR;
 8001176:	2301      	movs	r3, #1
 8001178:	425b      	negs	r3, r3
 800117a:	e000      	b.n	800117e <HTS221_ReadID+0x24>
  }

  return HTS221_OK;
 800117c:	2300      	movs	r3, #0
}
 800117e:	0018      	movs	r0, r3
 8001180:	46bd      	mov	sp, r7
 8001182:	b002      	add	sp, #8
 8001184:	bd80      	pop	{r7, pc}
	...

08001188 <HTS221_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to HTS221 sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_GetCapabilities(HTS221_Object_t *pObj, HTS221_Capabilities_t *Capabilities)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 1;
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	2201      	movs	r2, #1
 8001196:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 0;
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	2200      	movs	r2, #0
 800119c:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	2201      	movs	r2, #1
 80011a2:	701a      	strb	r2, [r3, #0]
  Capabilities->LowPower    = 0;
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	2200      	movs	r2, #0
 80011a8:	70da      	strb	r2, [r3, #3]
  Capabilities->HumMaxOdr   = 12.5f;
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	4a06      	ldr	r2, [pc, #24]	; (80011c8 <HTS221_GetCapabilities+0x40>)
 80011ae:	605a      	str	r2, [r3, #4]
  Capabilities->TempMaxOdr  = 12.5f;
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	4a05      	ldr	r2, [pc, #20]	; (80011c8 <HTS221_GetCapabilities+0x40>)
 80011b4:	609a      	str	r2, [r3, #8]
  Capabilities->PressMaxOdr = 0.0f;
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	2200      	movs	r2, #0
 80011ba:	60da      	str	r2, [r3, #12]
  return HTS221_OK;
 80011bc:	2300      	movs	r3, #0
}
 80011be:	0018      	movs	r0, r3
 80011c0:	46bd      	mov	sp, r7
 80011c2:	b002      	add	sp, #8
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	46c0      	nop			; (mov r8, r8)
 80011c8:	41480000 	.word	0x41480000

080011cc <HTS221_HUM_Enable>:
  * @brief  Enable the HTS221 humidity sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_Enable(HTS221_Object_t *pObj)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->hum_is_enabled == 1U)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2229      	movs	r2, #41	; 0x29
 80011d8:	5c9b      	ldrb	r3, [r3, r2]
 80011da:	2b01      	cmp	r3, #1
 80011dc:	d101      	bne.n	80011e2 <HTS221_HUM_Enable+0x16>
  {
    return HTS221_OK;
 80011de:	2300      	movs	r3, #0
 80011e0:	e014      	b.n	800120c <HTS221_HUM_Enable+0x40>
  }

  /* Check if the HTS221 temperature sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->temp_is_enabled == 0U)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	222a      	movs	r2, #42	; 0x2a
 80011e6:	5c9b      	ldrb	r3, [r3, r2]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d10a      	bne.n	8001202 <HTS221_HUM_Enable+0x36>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	331c      	adds	r3, #28
 80011f0:	2101      	movs	r1, #1
 80011f2:	0018      	movs	r0, r3
 80011f4:	f000 fc30 	bl	8001a58 <hts221_power_on_set>
 80011f8:	1e03      	subs	r3, r0, #0
 80011fa:	d002      	beq.n	8001202 <HTS221_HUM_Enable+0x36>
    {
      return HTS221_ERROR;
 80011fc:	2301      	movs	r3, #1
 80011fe:	425b      	negs	r3, r3
 8001200:	e004      	b.n	800120c <HTS221_HUM_Enable+0x40>
    }
  }

  pObj->hum_is_enabled = 1;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2229      	movs	r2, #41	; 0x29
 8001206:	2101      	movs	r1, #1
 8001208:	5499      	strb	r1, [r3, r2]

  return HTS221_OK;
 800120a:	2300      	movs	r3, #0
}
 800120c:	0018      	movs	r0, r3
 800120e:	46bd      	mov	sp, r7
 8001210:	b002      	add	sp, #8
 8001212:	bd80      	pop	{r7, pc}

08001214 <HTS221_HUM_Disable>:
  * @brief  Disable the HTS221 humidity sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_Disable(HTS221_Object_t *pObj)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->hum_is_enabled == 0U)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2229      	movs	r2, #41	; 0x29
 8001220:	5c9b      	ldrb	r3, [r3, r2]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d101      	bne.n	800122a <HTS221_HUM_Disable+0x16>
  {
    return HTS221_OK;
 8001226:	2300      	movs	r3, #0
 8001228:	e014      	b.n	8001254 <HTS221_HUM_Disable+0x40>
  }

  /* Check if the HTS221 temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	222a      	movs	r2, #42	; 0x2a
 800122e:	5c9b      	ldrb	r3, [r3, r2]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d10a      	bne.n	800124a <HTS221_HUM_Disable+0x36>
  {
    /* Power off the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	331c      	adds	r3, #28
 8001238:	2100      	movs	r1, #0
 800123a:	0018      	movs	r0, r3
 800123c:	f000 fc0c 	bl	8001a58 <hts221_power_on_set>
 8001240:	1e03      	subs	r3, r0, #0
 8001242:	d002      	beq.n	800124a <HTS221_HUM_Disable+0x36>
    {
      return HTS221_ERROR;
 8001244:	2301      	movs	r3, #1
 8001246:	425b      	negs	r3, r3
 8001248:	e004      	b.n	8001254 <HTS221_HUM_Disable+0x40>
    }
  }

  pObj->hum_is_enabled = 0;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2229      	movs	r2, #41	; 0x29
 800124e:	2100      	movs	r1, #0
 8001250:	5499      	strb	r1, [r3, r2]

  return HTS221_OK;
 8001252:	2300      	movs	r3, #0
}
 8001254:	0018      	movs	r0, r3
 8001256:	46bd      	mov	sp, r7
 8001258:	b002      	add	sp, #8
 800125a:	bd80      	pop	{r7, pc}

0800125c <HTS221_HUM_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	6039      	str	r1, [r7, #0]
  return HTS221_GetOutputDataRate(pObj, Odr);
 8001266:	683a      	ldr	r2, [r7, #0]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	0011      	movs	r1, r2
 800126c:	0018      	movs	r0, r3
 800126e:	f000 f961 	bl	8001534 <HTS221_GetOutputDataRate>
 8001272:	0003      	movs	r3, r0
}
 8001274:	0018      	movs	r0, r3
 8001276:	46bd      	mov	sp, r7
 8001278:	b002      	add	sp, #8
 800127a:	bd80      	pop	{r7, pc}

0800127c <HTS221_HUM_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	6039      	str	r1, [r7, #0]
  return HTS221_SetOutputDataRate(pObj, Odr);
 8001286:	683a      	ldr	r2, [r7, #0]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	1c11      	adds	r1, r2, #0
 800128c:	0018      	movs	r0, r3
 800128e:	f000 f991 	bl	80015b4 <HTS221_SetOutputDataRate>
 8001292:	0003      	movs	r3, r0
}
 8001294:	0018      	movs	r0, r3
 8001296:	46bd      	mov	sp, r7
 8001298:	b002      	add	sp, #8
 800129a:	bd80      	pop	{r7, pc}

0800129c <HTS221_HUM_GetHumidity>:
  * @param  pObj the device pObj
  * @param  Value pointer where the humidity value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_GetHumidity(HTS221_Object_t *pObj, float *Value)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b088      	sub	sp, #32
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_humidity;
  lin_t lin_hum;

  if (hts221_hum_adc_point_0_get(&(pObj->Ctx), &lin_hum.x0) != HTS221_OK)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	331c      	adds	r3, #28
 80012aa:	220c      	movs	r2, #12
 80012ac:	18ba      	adds	r2, r7, r2
 80012ae:	0011      	movs	r1, r2
 80012b0:	0018      	movs	r0, r3
 80012b2:	f000 fcb7 	bl	8001c24 <hts221_hum_adc_point_0_get>
 80012b6:	1e03      	subs	r3, r0, #0
 80012b8:	d002      	beq.n	80012c0 <HTS221_HUM_GetHumidity+0x24>
  {
    return HTS221_ERROR;
 80012ba:	2301      	movs	r3, #1
 80012bc:	425b      	negs	r3, r3
 80012be:	e064      	b.n	800138a <HTS221_HUM_GetHumidity+0xee>
  }

  if (hts221_hum_rh_point_0_get(&(pObj->Ctx), &lin_hum.y0) != HTS221_OK)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	331c      	adds	r3, #28
 80012c4:	001a      	movs	r2, r3
 80012c6:	230c      	movs	r3, #12
 80012c8:	18fb      	adds	r3, r7, r3
 80012ca:	3304      	adds	r3, #4
 80012cc:	0019      	movs	r1, r3
 80012ce:	0010      	movs	r0, r2
 80012d0:	f000 fbf0 	bl	8001ab4 <hts221_hum_rh_point_0_get>
 80012d4:	1e03      	subs	r3, r0, #0
 80012d6:	d002      	beq.n	80012de <HTS221_HUM_GetHumidity+0x42>
  {
    return HTS221_ERROR;
 80012d8:	2301      	movs	r3, #1
 80012da:	425b      	negs	r3, r3
 80012dc:	e055      	b.n	800138a <HTS221_HUM_GetHumidity+0xee>
  }

  if (hts221_hum_adc_point_1_get(&(pObj->Ctx), &lin_hum.x1) != HTS221_OK)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	331c      	adds	r3, #28
 80012e2:	001a      	movs	r2, r3
 80012e4:	230c      	movs	r3, #12
 80012e6:	18fb      	adds	r3, r7, r3
 80012e8:	3308      	adds	r3, #8
 80012ea:	0019      	movs	r1, r3
 80012ec:	0010      	movs	r0, r2
 80012ee:	f000 fcc3 	bl	8001c78 <hts221_hum_adc_point_1_get>
 80012f2:	1e03      	subs	r3, r0, #0
 80012f4:	d002      	beq.n	80012fc <HTS221_HUM_GetHumidity+0x60>
  {
    return HTS221_ERROR;
 80012f6:	2301      	movs	r3, #1
 80012f8:	425b      	negs	r3, r3
 80012fa:	e046      	b.n	800138a <HTS221_HUM_GetHumidity+0xee>
  }

  if (hts221_hum_rh_point_1_get(&(pObj->Ctx), &lin_hum.y1) != HTS221_OK)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	331c      	adds	r3, #28
 8001300:	001a      	movs	r2, r3
 8001302:	230c      	movs	r3, #12
 8001304:	18fb      	adds	r3, r7, r3
 8001306:	330c      	adds	r3, #12
 8001308:	0019      	movs	r1, r3
 800130a:	0010      	movs	r0, r2
 800130c:	f000 fbf4 	bl	8001af8 <hts221_hum_rh_point_1_get>
 8001310:	1e03      	subs	r3, r0, #0
 8001312:	d002      	beq.n	800131a <HTS221_HUM_GetHumidity+0x7e>
  {
    return HTS221_ERROR;
 8001314:	2301      	movs	r3, #1
 8001316:	425b      	negs	r3, r3
 8001318:	e037      	b.n	800138a <HTS221_HUM_GetHumidity+0xee>
 800131a:	211c      	movs	r1, #28
 800131c:	187b      	adds	r3, r7, r1
 800131e:	2200      	movs	r2, #0
 8001320:	801a      	strh	r2, [r3, #0]
  }

  (void)memset(&data_raw_humidity.i16bit, 0x00, sizeof(int16_t));
  if (hts221_humidity_raw_get(&(pObj->Ctx), &data_raw_humidity.i16bit) != HTS221_OK)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	331c      	adds	r3, #28
 8001326:	187a      	adds	r2, r7, r1
 8001328:	0011      	movs	r1, r2
 800132a:	0018      	movs	r0, r3
 800132c:	f000 fb34 	bl	8001998 <hts221_humidity_raw_get>
 8001330:	1e03      	subs	r3, r0, #0
 8001332:	d002      	beq.n	800133a <HTS221_HUM_GetHumidity+0x9e>
  {
    return HTS221_ERROR;
 8001334:	2301      	movs	r3, #1
 8001336:	425b      	negs	r3, r3
 8001338:	e027      	b.n	800138a <HTS221_HUM_GetHumidity+0xee>
  }

  *Value = Linear_Interpolation(&lin_hum, (float)data_raw_humidity.i16bit);
 800133a:	231c      	movs	r3, #28
 800133c:	18fb      	adds	r3, r7, r3
 800133e:	2200      	movs	r2, #0
 8001340:	5e9b      	ldrsh	r3, [r3, r2]
 8001342:	0018      	movs	r0, r3
 8001344:	f7ff fdde 	bl	8000f04 <__aeabi_i2f>
 8001348:	1c02      	adds	r2, r0, #0
 800134a:	230c      	movs	r3, #12
 800134c:	18fb      	adds	r3, r7, r3
 800134e:	1c11      	adds	r1, r2, #0
 8001350:	0018      	movs	r0, r3
 8001352:	f000 f98a 	bl	800166a <Linear_Interpolation>
 8001356:	1c02      	adds	r2, r0, #0
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	601a      	str	r2, [r3, #0]

  if (*Value < 0.0f)
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	2100      	movs	r1, #0
 8001362:	1c18      	adds	r0, r3, #0
 8001364:	f7fe ff6c 	bl	8000240 <__aeabi_fcmplt>
 8001368:	1e03      	subs	r3, r0, #0
 800136a:	d002      	beq.n	8001372 <HTS221_HUM_GetHumidity+0xd6>
  {
    *Value = 0.0f;
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	2200      	movs	r2, #0
 8001370:	601a      	str	r2, [r3, #0]
  }

  if (*Value > 100.0f)
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4907      	ldr	r1, [pc, #28]	; (8001394 <HTS221_HUM_GetHumidity+0xf8>)
 8001378:	1c18      	adds	r0, r3, #0
 800137a:	f7fe ff75 	bl	8000268 <__aeabi_fcmpgt>
 800137e:	1e03      	subs	r3, r0, #0
 8001380:	d002      	beq.n	8001388 <HTS221_HUM_GetHumidity+0xec>
  {
    *Value = 100.0f;
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	4a03      	ldr	r2, [pc, #12]	; (8001394 <HTS221_HUM_GetHumidity+0xf8>)
 8001386:	601a      	str	r2, [r3, #0]
  }

  return HTS221_OK;
 8001388:	2300      	movs	r3, #0
}
 800138a:	0018      	movs	r0, r3
 800138c:	46bd      	mov	sp, r7
 800138e:	b008      	add	sp, #32
 8001390:	bd80      	pop	{r7, pc}
 8001392:	46c0      	nop			; (mov r8, r8)
 8001394:	42c80000 	.word	0x42c80000

08001398 <HTS221_TEMP_Enable>:
  * @brief  Enable the HTS221 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_Enable(HTS221_Object_t *pObj)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	222a      	movs	r2, #42	; 0x2a
 80013a4:	5c9b      	ldrb	r3, [r3, r2]
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	d101      	bne.n	80013ae <HTS221_TEMP_Enable+0x16>
  {
    return HTS221_OK;
 80013aa:	2300      	movs	r3, #0
 80013ac:	e014      	b.n	80013d8 <HTS221_TEMP_Enable+0x40>
  }

  /* Check if the HTS221 humidity sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->hum_is_enabled == 0U)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2229      	movs	r2, #41	; 0x29
 80013b2:	5c9b      	ldrb	r3, [r3, r2]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d10a      	bne.n	80013ce <HTS221_TEMP_Enable+0x36>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	331c      	adds	r3, #28
 80013bc:	2101      	movs	r1, #1
 80013be:	0018      	movs	r0, r3
 80013c0:	f000 fb4a 	bl	8001a58 <hts221_power_on_set>
 80013c4:	1e03      	subs	r3, r0, #0
 80013c6:	d002      	beq.n	80013ce <HTS221_TEMP_Enable+0x36>
    {
      return HTS221_ERROR;
 80013c8:	2301      	movs	r3, #1
 80013ca:	425b      	negs	r3, r3
 80013cc:	e004      	b.n	80013d8 <HTS221_TEMP_Enable+0x40>
    }
  }

  pObj->temp_is_enabled = 1;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	222a      	movs	r2, #42	; 0x2a
 80013d2:	2101      	movs	r1, #1
 80013d4:	5499      	strb	r1, [r3, r2]

  return HTS221_OK;
 80013d6:	2300      	movs	r3, #0
}
 80013d8:	0018      	movs	r0, r3
 80013da:	46bd      	mov	sp, r7
 80013dc:	b002      	add	sp, #8
 80013de:	bd80      	pop	{r7, pc}

080013e0 <HTS221_TEMP_Disable>:
  * @brief  Disable the HTS221 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_Disable(HTS221_Object_t *pObj)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	222a      	movs	r2, #42	; 0x2a
 80013ec:	5c9b      	ldrb	r3, [r3, r2]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d101      	bne.n	80013f6 <HTS221_TEMP_Disable+0x16>
  {
    return HTS221_OK;
 80013f2:	2300      	movs	r3, #0
 80013f4:	e014      	b.n	8001420 <HTS221_TEMP_Disable+0x40>
  }

  /* Check if the HTS221 humidity sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->hum_is_enabled == 0U)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2229      	movs	r2, #41	; 0x29
 80013fa:	5c9b      	ldrb	r3, [r3, r2]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d10a      	bne.n	8001416 <HTS221_TEMP_Disable+0x36>
  {
    /* Power off the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	331c      	adds	r3, #28
 8001404:	2100      	movs	r1, #0
 8001406:	0018      	movs	r0, r3
 8001408:	f000 fb26 	bl	8001a58 <hts221_power_on_set>
 800140c:	1e03      	subs	r3, r0, #0
 800140e:	d002      	beq.n	8001416 <HTS221_TEMP_Disable+0x36>
    {
      return HTS221_ERROR;
 8001410:	2301      	movs	r3, #1
 8001412:	425b      	negs	r3, r3
 8001414:	e004      	b.n	8001420 <HTS221_TEMP_Disable+0x40>
    }
  }

  pObj->temp_is_enabled = 0;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	222a      	movs	r2, #42	; 0x2a
 800141a:	2100      	movs	r1, #0
 800141c:	5499      	strb	r1, [r3, r2]

  return HTS221_OK;
 800141e:	2300      	movs	r3, #0
}
 8001420:	0018      	movs	r0, r3
 8001422:	46bd      	mov	sp, r7
 8001424:	b002      	add	sp, #8
 8001426:	bd80      	pop	{r7, pc}

08001428 <HTS221_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	6039      	str	r1, [r7, #0]
  return HTS221_GetOutputDataRate(pObj, Odr);
 8001432:	683a      	ldr	r2, [r7, #0]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	0011      	movs	r1, r2
 8001438:	0018      	movs	r0, r3
 800143a:	f000 f87b 	bl	8001534 <HTS221_GetOutputDataRate>
 800143e:	0003      	movs	r3, r0
}
 8001440:	0018      	movs	r0, r3
 8001442:	46bd      	mov	sp, r7
 8001444:	b002      	add	sp, #8
 8001446:	bd80      	pop	{r7, pc}

08001448 <HTS221_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
 8001450:	6039      	str	r1, [r7, #0]
  return HTS221_SetOutputDataRate(pObj, Odr);
 8001452:	683a      	ldr	r2, [r7, #0]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	1c11      	adds	r1, r2, #0
 8001458:	0018      	movs	r0, r3
 800145a:	f000 f8ab 	bl	80015b4 <HTS221_SetOutputDataRate>
 800145e:	0003      	movs	r3, r0
}
 8001460:	0018      	movs	r0, r3
 8001462:	46bd      	mov	sp, r7
 8001464:	b002      	add	sp, #8
 8001466:	bd80      	pop	{r7, pc}

08001468 <HTS221_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_GetTemperature(HTS221_Object_t *pObj, float *Value)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b088      	sub	sp, #32
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
 8001470:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_temperature;
  lin_t lin_temp;

  if (hts221_temp_adc_point_0_get(&(pObj->Ctx), &lin_temp.x0) != HTS221_OK)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	331c      	adds	r3, #28
 8001476:	220c      	movs	r2, #12
 8001478:	18ba      	adds	r2, r7, r2
 800147a:	0011      	movs	r1, r2
 800147c:	0018      	movs	r0, r3
 800147e:	f000 fc25 	bl	8001ccc <hts221_temp_adc_point_0_get>
 8001482:	1e03      	subs	r3, r0, #0
 8001484:	d002      	beq.n	800148c <HTS221_TEMP_GetTemperature+0x24>
  {
    return HTS221_ERROR;
 8001486:	2301      	movs	r3, #1
 8001488:	425b      	negs	r3, r3
 800148a:	e04e      	b.n	800152a <HTS221_TEMP_GetTemperature+0xc2>
  }

  if (hts221_temp_deg_point_0_get(&(pObj->Ctx), &lin_temp.y0) != HTS221_OK)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	331c      	adds	r3, #28
 8001490:	001a      	movs	r2, r3
 8001492:	230c      	movs	r3, #12
 8001494:	18fb      	adds	r3, r7, r3
 8001496:	3304      	adds	r3, #4
 8001498:	0019      	movs	r1, r3
 800149a:	0010      	movs	r0, r2
 800149c:	f000 fb4e 	bl	8001b3c <hts221_temp_deg_point_0_get>
 80014a0:	1e03      	subs	r3, r0, #0
 80014a2:	d002      	beq.n	80014aa <HTS221_TEMP_GetTemperature+0x42>
  {
    return HTS221_ERROR;
 80014a4:	2301      	movs	r3, #1
 80014a6:	425b      	negs	r3, r3
 80014a8:	e03f      	b.n	800152a <HTS221_TEMP_GetTemperature+0xc2>
  }

  if (hts221_temp_adc_point_1_get(&(pObj->Ctx), &lin_temp.x1) != HTS221_OK)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	331c      	adds	r3, #28
 80014ae:	001a      	movs	r2, r3
 80014b0:	230c      	movs	r3, #12
 80014b2:	18fb      	adds	r3, r7, r3
 80014b4:	3308      	adds	r3, #8
 80014b6:	0019      	movs	r1, r3
 80014b8:	0010      	movs	r0, r2
 80014ba:	f000 fc31 	bl	8001d20 <hts221_temp_adc_point_1_get>
 80014be:	1e03      	subs	r3, r0, #0
 80014c0:	d002      	beq.n	80014c8 <HTS221_TEMP_GetTemperature+0x60>
  {
    return HTS221_ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	425b      	negs	r3, r3
 80014c6:	e030      	b.n	800152a <HTS221_TEMP_GetTemperature+0xc2>
  }

  if (hts221_temp_deg_point_1_get(&(pObj->Ctx), &lin_temp.y1) != HTS221_OK)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	331c      	adds	r3, #28
 80014cc:	001a      	movs	r2, r3
 80014ce:	230c      	movs	r3, #12
 80014d0:	18fb      	adds	r3, r7, r3
 80014d2:	330c      	adds	r3, #12
 80014d4:	0019      	movs	r1, r3
 80014d6:	0010      	movs	r0, r2
 80014d8:	f000 fb6a 	bl	8001bb0 <hts221_temp_deg_point_1_get>
 80014dc:	1e03      	subs	r3, r0, #0
 80014de:	d002      	beq.n	80014e6 <HTS221_TEMP_GetTemperature+0x7e>
  {
    return HTS221_ERROR;
 80014e0:	2301      	movs	r3, #1
 80014e2:	425b      	negs	r3, r3
 80014e4:	e021      	b.n	800152a <HTS221_TEMP_GetTemperature+0xc2>
 80014e6:	211c      	movs	r1, #28
 80014e8:	187b      	adds	r3, r7, r1
 80014ea:	2200      	movs	r2, #0
 80014ec:	801a      	strh	r2, [r3, #0]
  }

  (void)memset(&data_raw_temperature.i16bit, 0x00, sizeof(int16_t));
  if (hts221_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != HTS221_OK)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	331c      	adds	r3, #28
 80014f2:	187a      	adds	r2, r7, r1
 80014f4:	0011      	movs	r1, r2
 80014f6:	0018      	movs	r0, r3
 80014f8:	f000 fa75 	bl	80019e6 <hts221_temperature_raw_get>
 80014fc:	1e03      	subs	r3, r0, #0
 80014fe:	d002      	beq.n	8001506 <HTS221_TEMP_GetTemperature+0x9e>
  {
    return HTS221_ERROR;
 8001500:	2301      	movs	r3, #1
 8001502:	425b      	negs	r3, r3
 8001504:	e011      	b.n	800152a <HTS221_TEMP_GetTemperature+0xc2>
  }

  *Value = Linear_Interpolation(&lin_temp, (float)data_raw_temperature.i16bit);
 8001506:	231c      	movs	r3, #28
 8001508:	18fb      	adds	r3, r7, r3
 800150a:	2200      	movs	r2, #0
 800150c:	5e9b      	ldrsh	r3, [r3, r2]
 800150e:	0018      	movs	r0, r3
 8001510:	f7ff fcf8 	bl	8000f04 <__aeabi_i2f>
 8001514:	1c02      	adds	r2, r0, #0
 8001516:	230c      	movs	r3, #12
 8001518:	18fb      	adds	r3, r7, r3
 800151a:	1c11      	adds	r1, r2, #0
 800151c:	0018      	movs	r0, r3
 800151e:	f000 f8a4 	bl	800166a <Linear_Interpolation>
 8001522:	1c02      	adds	r2, r0, #0
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	601a      	str	r2, [r3, #0]

  return HTS221_OK;
 8001528:	2300      	movs	r3, #0
}
 800152a:	0018      	movs	r0, r3
 800152c:	46bd      	mov	sp, r7
 800152e:	b008      	add	sp, #32
 8001530:	bd80      	pop	{r7, pc}
	...

08001534 <HTS221_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t HTS221_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b084      	sub	sp, #16
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	6039      	str	r1, [r7, #0]
  int32_t ret = HTS221_OK;
 800153e:	2300      	movs	r3, #0
 8001540:	60fb      	str	r3, [r7, #12]
  hts221_odr_t odr_low_level;

  if (hts221_data_rate_get(&(pObj->Ctx), &odr_low_level) != HTS221_OK)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	331c      	adds	r3, #28
 8001546:	220b      	movs	r2, #11
 8001548:	18ba      	adds	r2, r7, r2
 800154a:	0011      	movs	r1, r2
 800154c:	0018      	movs	r0, r3
 800154e:	f000 f9bc 	bl	80018ca <hts221_data_rate_get>
 8001552:	1e03      	subs	r3, r0, #0
 8001554:	d002      	beq.n	800155c <HTS221_GetOutputDataRate+0x28>
  {
    return HTS221_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	425b      	negs	r3, r3
 800155a:	e023      	b.n	80015a4 <HTS221_GetOutputDataRate+0x70>
  }

  switch (odr_low_level)
 800155c:	230b      	movs	r3, #11
 800155e:	18fb      	adds	r3, r7, r3
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	2b03      	cmp	r3, #3
 8001564:	d015      	beq.n	8001592 <HTS221_GetOutputDataRate+0x5e>
 8001566:	dc18      	bgt.n	800159a <HTS221_GetOutputDataRate+0x66>
 8001568:	2b02      	cmp	r3, #2
 800156a:	d00e      	beq.n	800158a <HTS221_GetOutputDataRate+0x56>
 800156c:	dc15      	bgt.n	800159a <HTS221_GetOutputDataRate+0x66>
 800156e:	2b00      	cmp	r3, #0
 8001570:	d002      	beq.n	8001578 <HTS221_GetOutputDataRate+0x44>
 8001572:	2b01      	cmp	r3, #1
 8001574:	d004      	beq.n	8001580 <HTS221_GetOutputDataRate+0x4c>
 8001576:	e010      	b.n	800159a <HTS221_GetOutputDataRate+0x66>
  {
    case HTS221_ONE_SHOT:
      *Odr = 0.0f;
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	2200      	movs	r2, #0
 800157c:	601a      	str	r2, [r3, #0]
      break;
 800157e:	e010      	b.n	80015a2 <HTS221_GetOutputDataRate+0x6e>

    case HTS221_ODR_1Hz:
      *Odr = 1.0f;
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	22fe      	movs	r2, #254	; 0xfe
 8001584:	0592      	lsls	r2, r2, #22
 8001586:	601a      	str	r2, [r3, #0]
      break;
 8001588:	e00b      	b.n	80015a2 <HTS221_GetOutputDataRate+0x6e>

    case HTS221_ODR_7Hz:
      *Odr = 7.0f;
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	4a07      	ldr	r2, [pc, #28]	; (80015ac <HTS221_GetOutputDataRate+0x78>)
 800158e:	601a      	str	r2, [r3, #0]
      break;
 8001590:	e007      	b.n	80015a2 <HTS221_GetOutputDataRate+0x6e>

    case HTS221_ODR_12Hz5:
      *Odr = 12.5f;
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	4a06      	ldr	r2, [pc, #24]	; (80015b0 <HTS221_GetOutputDataRate+0x7c>)
 8001596:	601a      	str	r2, [r3, #0]
      break;
 8001598:	e003      	b.n	80015a2 <HTS221_GetOutputDataRate+0x6e>

    default:
      ret = HTS221_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	425b      	negs	r3, r3
 800159e:	60fb      	str	r3, [r7, #12]
      break;
 80015a0:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 80015a2:	68fb      	ldr	r3, [r7, #12]
}
 80015a4:	0018      	movs	r0, r3
 80015a6:	46bd      	mov	sp, r7
 80015a8:	b004      	add	sp, #16
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	40e00000 	.word	0x40e00000
 80015b0:	41480000 	.word	0x41480000

080015b4 <HTS221_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t HTS221_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	6039      	str	r1, [r7, #0]
  hts221_odr_t new_odr;

  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
            : (Odr <= 7.0f) ? HTS221_ODR_7Hz
 80015be:	21fe      	movs	r1, #254	; 0xfe
 80015c0:	0589      	lsls	r1, r1, #22
 80015c2:	6838      	ldr	r0, [r7, #0]
 80015c4:	f7fe fe46 	bl	8000254 <__aeabi_fcmple>
 80015c8:	1e03      	subs	r3, r0, #0
 80015ca:	d001      	beq.n	80015d0 <HTS221_SetOutputDataRate+0x1c>
 80015cc:	2301      	movs	r3, #1
 80015ce:	e008      	b.n	80015e2 <HTS221_SetOutputDataRate+0x2e>
 80015d0:	490f      	ldr	r1, [pc, #60]	; (8001610 <HTS221_SetOutputDataRate+0x5c>)
 80015d2:	6838      	ldr	r0, [r7, #0]
 80015d4:	f7fe fe3e 	bl	8000254 <__aeabi_fcmple>
 80015d8:	1e03      	subs	r3, r0, #0
 80015da:	d001      	beq.n	80015e0 <HTS221_SetOutputDataRate+0x2c>
 80015dc:	2302      	movs	r3, #2
 80015de:	e000      	b.n	80015e2 <HTS221_SetOutputDataRate+0x2e>
 80015e0:	2303      	movs	r3, #3
  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
 80015e2:	210f      	movs	r1, #15
 80015e4:	187a      	adds	r2, r7, r1
 80015e6:	7013      	strb	r3, [r2, #0]
            :                 HTS221_ODR_12Hz5;

  if (hts221_data_rate_set(&(pObj->Ctx), new_odr) != HTS221_OK)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	331c      	adds	r3, #28
 80015ec:	001a      	movs	r2, r3
 80015ee:	187b      	adds	r3, r7, r1
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	0019      	movs	r1, r3
 80015f4:	0010      	movs	r0, r2
 80015f6:	f000 f938 	bl	800186a <hts221_data_rate_set>
 80015fa:	1e03      	subs	r3, r0, #0
 80015fc:	d002      	beq.n	8001604 <HTS221_SetOutputDataRate+0x50>
  {
    return HTS221_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	425b      	negs	r3, r3
 8001602:	e000      	b.n	8001606 <HTS221_SetOutputDataRate+0x52>
  }

  return HTS221_OK;
 8001604:	2300      	movs	r3, #0
}
 8001606:	0018      	movs	r0, r3
 8001608:	46bd      	mov	sp, r7
 800160a:	b004      	add	sp, #16
 800160c:	bd80      	pop	{r7, pc}
 800160e:	46c0      	nop			; (mov r8, r8)
 8001610:	40e00000 	.word	0x40e00000

08001614 <HTS221_Initialize>:
  * @brief  Initialize the HTS221 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t HTS221_Initialize(HTS221_Object_t *pObj)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  /* Power off the component. */
  if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	331c      	adds	r3, #28
 8001620:	2100      	movs	r1, #0
 8001622:	0018      	movs	r0, r3
 8001624:	f000 fa18 	bl	8001a58 <hts221_power_on_set>
 8001628:	1e03      	subs	r3, r0, #0
 800162a:	d002      	beq.n	8001632 <HTS221_Initialize+0x1e>
  {
    return HTS221_ERROR;
 800162c:	2301      	movs	r3, #1
 800162e:	425b      	negs	r3, r3
 8001630:	e017      	b.n	8001662 <HTS221_Initialize+0x4e>
  }

  /* Enable BDU */
  if (hts221_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	331c      	adds	r3, #28
 8001636:	2101      	movs	r1, #1
 8001638:	0018      	movs	r0, r3
 800163a:	f000 f97d 	bl	8001938 <hts221_block_data_update_set>
 800163e:	1e03      	subs	r3, r0, #0
 8001640:	d002      	beq.n	8001648 <HTS221_Initialize+0x34>
  {
    return HTS221_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	425b      	negs	r3, r3
 8001646:	e00c      	b.n	8001662 <HTS221_Initialize+0x4e>
  }

  /* Set default ODR */
  if (HTS221_SetOutputDataRate(pObj, 1.0f) != HTS221_OK)
 8001648:	22fe      	movs	r2, #254	; 0xfe
 800164a:	0592      	lsls	r2, r2, #22
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	1c11      	adds	r1, r2, #0
 8001650:	0018      	movs	r0, r3
 8001652:	f7ff ffaf 	bl	80015b4 <HTS221_SetOutputDataRate>
 8001656:	1e03      	subs	r3, r0, #0
 8001658:	d002      	beq.n	8001660 <HTS221_Initialize+0x4c>
  {
    return HTS221_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	425b      	negs	r3, r3
 800165e:	e000      	b.n	8001662 <HTS221_Initialize+0x4e>
  }

  return HTS221_OK;
 8001660:	2300      	movs	r3, #0
}
 8001662:	0018      	movs	r0, r3
 8001664:	46bd      	mov	sp, r7
 8001666:	b002      	add	sp, #8
 8001668:	bd80      	pop	{r7, pc}

0800166a <Linear_Interpolation>:
  * @param  Lin the line
  * @param  Coeff the coefficient
  * @retval Calculation result
  */
static float Linear_Interpolation(lin_t *Lin, float Coeff)
{
 800166a:	b5b0      	push	{r4, r5, r7, lr}
 800166c:	b082      	sub	sp, #8
 800166e:	af00      	add	r7, sp, #0
 8001670:	6078      	str	r0, [r7, #4]
 8001672:	6039      	str	r1, [r7, #0]
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	68da      	ldr	r2, [r3, #12]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	1c19      	adds	r1, r3, #0
 800167e:	1c10      	adds	r0, r2, #0
 8001680:	f7ff fa92 	bl	8000ba8 <__aeabi_fsub>
 8001684:	1c03      	adds	r3, r0, #0
 8001686:	6839      	ldr	r1, [r7, #0]
 8001688:	1c18      	adds	r0, r3, #0
 800168a:	f7ff f967 	bl	800095c <__aeabi_fmul>
 800168e:	1c03      	adds	r3, r0, #0
 8001690:	1c1c      	adds	r4, r3, #0
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	689a      	ldr	r2, [r3, #8]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	1c19      	adds	r1, r3, #0
 800169c:	1c10      	adds	r0, r2, #0
 800169e:	f7ff f95d 	bl	800095c <__aeabi_fmul>
 80016a2:	1c03      	adds	r3, r0, #0
 80016a4:	1c1d      	adds	r5, r3, #0
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	68db      	ldr	r3, [r3, #12]
 80016ae:	1c19      	adds	r1, r3, #0
 80016b0:	1c10      	adds	r0, r2, #0
 80016b2:	f7ff f953 	bl	800095c <__aeabi_fmul>
 80016b6:	1c03      	adds	r3, r0, #0
 80016b8:	1c19      	adds	r1, r3, #0
 80016ba:	1c28      	adds	r0, r5, #0
 80016bc:	f7ff fa74 	bl	8000ba8 <__aeabi_fsub>
 80016c0:	1c03      	adds	r3, r0, #0
 80016c2:	1c19      	adds	r1, r3, #0
 80016c4:	1c20      	adds	r0, r4, #0
 80016c6:	f7fe fde3 	bl	8000290 <__aeabi_fadd>
 80016ca:	1c03      	adds	r3, r0, #0
 80016cc:	1c1c      	adds	r4, r3, #0
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	689a      	ldr	r2, [r3, #8]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	1c19      	adds	r1, r3, #0
 80016d8:	1c10      	adds	r0, r2, #0
 80016da:	f7ff fa65 	bl	8000ba8 <__aeabi_fsub>
 80016de:	1c03      	adds	r3, r0, #0
 80016e0:	1c19      	adds	r1, r3, #0
 80016e2:	1c20      	adds	r0, r4, #0
 80016e4:	f7fe ff72 	bl	80005cc <__aeabi_fdiv>
 80016e8:	1c03      	adds	r3, r0, #0
}
 80016ea:	1c18      	adds	r0, r3, #0
 80016ec:	46bd      	mov	sp, r7
 80016ee:	b002      	add	sp, #8
 80016f0:	bdb0      	pop	{r4, r5, r7, pc}

080016f2 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80016f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016f4:	b087      	sub	sp, #28
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	60f8      	str	r0, [r7, #12]
 80016fa:	0008      	movs	r0, r1
 80016fc:	607a      	str	r2, [r7, #4]
 80016fe:	0019      	movs	r1, r3
 8001700:	250b      	movs	r5, #11
 8001702:	197b      	adds	r3, r7, r5
 8001704:	1c02      	adds	r2, r0, #0
 8001706:	701a      	strb	r2, [r3, #0]
 8001708:	2608      	movs	r6, #8
 800170a:	19bb      	adds	r3, r7, r6
 800170c:	1c0a      	adds	r2, r1, #0
 800170e:	801a      	strh	r2, [r3, #0]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d111      	bne.n	8001740 <ReadRegWrap+0x4e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	695c      	ldr	r4, [r3, #20]
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	7b1b      	ldrb	r3, [r3, #12]
 8001724:	b298      	uxth	r0, r3
 8001726:	197b      	adds	r3, r7, r5
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	2280      	movs	r2, #128	; 0x80
 800172c:	4252      	negs	r2, r2
 800172e:	4313      	orrs	r3, r2
 8001730:	b2db      	uxtb	r3, r3
 8001732:	b299      	uxth	r1, r3
 8001734:	19bb      	adds	r3, r7, r6
 8001736:	881b      	ldrh	r3, [r3, #0]
 8001738:	687a      	ldr	r2, [r7, #4]
 800173a:	47a0      	blx	r4
 800173c:	0003      	movs	r3, r0
 800173e:	e011      	b.n	8001764 <ReadRegWrap+0x72>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	695c      	ldr	r4, [r3, #20]
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	7b1b      	ldrb	r3, [r3, #12]
 8001748:	b298      	uxth	r0, r3
 800174a:	230b      	movs	r3, #11
 800174c:	18fb      	adds	r3, r7, r3
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	2240      	movs	r2, #64	; 0x40
 8001752:	4313      	orrs	r3, r2
 8001754:	b2db      	uxtb	r3, r3
 8001756:	b299      	uxth	r1, r3
 8001758:	2308      	movs	r3, #8
 800175a:	18fb      	adds	r3, r7, r3
 800175c:	881b      	ldrh	r3, [r3, #0]
 800175e:	687a      	ldr	r2, [r7, #4]
 8001760:	47a0      	blx	r4
 8001762:	0003      	movs	r3, r0
  }
}
 8001764:	0018      	movs	r0, r3
 8001766:	46bd      	mov	sp, r7
 8001768:	b007      	add	sp, #28
 800176a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800176c <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800176c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800176e:	b087      	sub	sp, #28
 8001770:	af00      	add	r7, sp, #0
 8001772:	60f8      	str	r0, [r7, #12]
 8001774:	0008      	movs	r0, r1
 8001776:	607a      	str	r2, [r7, #4]
 8001778:	0019      	movs	r1, r3
 800177a:	250b      	movs	r5, #11
 800177c:	197b      	adds	r3, r7, r5
 800177e:	1c02      	adds	r2, r0, #0
 8001780:	701a      	strb	r2, [r3, #0]
 8001782:	2608      	movs	r6, #8
 8001784:	19bb      	adds	r3, r7, r6
 8001786:	1c0a      	adds	r2, r1, #0
 8001788:	801a      	strh	r2, [r3, #0]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d111      	bne.n	80017ba <WriteRegWrap+0x4e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	691c      	ldr	r4, [r3, #16]
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	7b1b      	ldrb	r3, [r3, #12]
 800179e:	b298      	uxth	r0, r3
 80017a0:	197b      	adds	r3, r7, r5
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	2280      	movs	r2, #128	; 0x80
 80017a6:	4252      	negs	r2, r2
 80017a8:	4313      	orrs	r3, r2
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	b299      	uxth	r1, r3
 80017ae:	19bb      	adds	r3, r7, r6
 80017b0:	881b      	ldrh	r3, [r3, #0]
 80017b2:	687a      	ldr	r2, [r7, #4]
 80017b4:	47a0      	blx	r4
 80017b6:	0003      	movs	r3, r0
 80017b8:	e011      	b.n	80017de <WriteRegWrap+0x72>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	691c      	ldr	r4, [r3, #16]
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	7b1b      	ldrb	r3, [r3, #12]
 80017c2:	b298      	uxth	r0, r3
 80017c4:	230b      	movs	r3, #11
 80017c6:	18fb      	adds	r3, r7, r3
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	2240      	movs	r2, #64	; 0x40
 80017cc:	4313      	orrs	r3, r2
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	b299      	uxth	r1, r3
 80017d2:	2308      	movs	r3, #8
 80017d4:	18fb      	adds	r3, r7, r3
 80017d6:	881b      	ldrh	r3, [r3, #0]
 80017d8:	687a      	ldr	r2, [r7, #4]
 80017da:	47a0      	blx	r4
 80017dc:	0003      	movs	r3, r0
  }
}
 80017de:	0018      	movs	r0, r3
 80017e0:	46bd      	mov	sp, r7
 80017e2:	b007      	add	sp, #28
 80017e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080017e6 <hts221_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_read_reg(stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                        uint16_t len)
{
 80017e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017e8:	b087      	sub	sp, #28
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	60f8      	str	r0, [r7, #12]
 80017ee:	0008      	movs	r0, r1
 80017f0:	607a      	str	r2, [r7, #4]
 80017f2:	0019      	movs	r1, r3
 80017f4:	260b      	movs	r6, #11
 80017f6:	19bb      	adds	r3, r7, r6
 80017f8:	1c02      	adds	r2, r0, #0
 80017fa:	701a      	strb	r2, [r3, #0]
 80017fc:	2508      	movs	r5, #8
 80017fe:	197b      	adds	r3, r7, r5
 8001800:	1c0a      	adds	r2, r1, #0
 8001802:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	685c      	ldr	r4, [r3, #4]
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	6898      	ldr	r0, [r3, #8]
 800180c:	197b      	adds	r3, r7, r5
 800180e:	881d      	ldrh	r5, [r3, #0]
 8001810:	687a      	ldr	r2, [r7, #4]
 8001812:	19bb      	adds	r3, r7, r6
 8001814:	7819      	ldrb	r1, [r3, #0]
 8001816:	002b      	movs	r3, r5
 8001818:	47a0      	blx	r4
 800181a:	0003      	movs	r3, r0
 800181c:	617b      	str	r3, [r7, #20]

  return ret;
 800181e:	697b      	ldr	r3, [r7, #20]
}
 8001820:	0018      	movs	r0, r3
 8001822:	46bd      	mov	sp, r7
 8001824:	b007      	add	sp, #28
 8001826:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001828 <hts221_write_reg>:
  *
  */
int32_t hts221_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8001828:	b5f0      	push	{r4, r5, r6, r7, lr}
 800182a:	b087      	sub	sp, #28
 800182c:	af00      	add	r7, sp, #0
 800182e:	60f8      	str	r0, [r7, #12]
 8001830:	0008      	movs	r0, r1
 8001832:	607a      	str	r2, [r7, #4]
 8001834:	0019      	movs	r1, r3
 8001836:	260b      	movs	r6, #11
 8001838:	19bb      	adds	r3, r7, r6
 800183a:	1c02      	adds	r2, r0, #0
 800183c:	701a      	strb	r2, [r3, #0]
 800183e:	2508      	movs	r5, #8
 8001840:	197b      	adds	r3, r7, r5
 8001842:	1c0a      	adds	r2, r1, #0
 8001844:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	681c      	ldr	r4, [r3, #0]
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	6898      	ldr	r0, [r3, #8]
 800184e:	197b      	adds	r3, r7, r5
 8001850:	881d      	ldrh	r5, [r3, #0]
 8001852:	687a      	ldr	r2, [r7, #4]
 8001854:	19bb      	adds	r3, r7, r6
 8001856:	7819      	ldrb	r1, [r3, #0]
 8001858:	002b      	movs	r3, r5
 800185a:	47a0      	blx	r4
 800185c:	0003      	movs	r3, r0
 800185e:	617b      	str	r3, [r7, #20]

  return ret;
 8001860:	697b      	ldr	r3, [r7, #20]
}
 8001862:	0018      	movs	r0, r3
 8001864:	46bd      	mov	sp, r7
 8001866:	b007      	add	sp, #28
 8001868:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800186a <hts221_data_rate_set>:
  * @param  val     change the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_set(stmdev_ctx_t *ctx, hts221_odr_t val)
{
 800186a:	b590      	push	{r4, r7, lr}
 800186c:	b085      	sub	sp, #20
 800186e:	af00      	add	r7, sp, #0
 8001870:	6078      	str	r0, [r7, #4]
 8001872:	000a      	movs	r2, r1
 8001874:	1cfb      	adds	r3, r7, #3
 8001876:	701a      	strb	r2, [r3, #0]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8001878:	2408      	movs	r4, #8
 800187a:	193a      	adds	r2, r7, r4
 800187c:	6878      	ldr	r0, [r7, #4]
 800187e:	2301      	movs	r3, #1
 8001880:	2120      	movs	r1, #32
 8001882:	f7ff ffb0 	bl	80017e6 <hts221_read_reg>
 8001886:	0003      	movs	r3, r0
 8001888:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d117      	bne.n	80018c0 <hts221_data_rate_set+0x56>
  {
    reg.odr = (uint8_t)val;
 8001890:	1cfb      	adds	r3, r7, #3
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	2203      	movs	r2, #3
 8001896:	4013      	ands	r3, r2
 8001898:	b2da      	uxtb	r2, r3
 800189a:	193b      	adds	r3, r7, r4
 800189c:	2103      	movs	r1, #3
 800189e:	400a      	ands	r2, r1
 80018a0:	0010      	movs	r0, r2
 80018a2:	781a      	ldrb	r2, [r3, #0]
 80018a4:	2103      	movs	r1, #3
 80018a6:	438a      	bics	r2, r1
 80018a8:	1c11      	adds	r1, r2, #0
 80018aa:	1c02      	adds	r2, r0, #0
 80018ac:	430a      	orrs	r2, r1
 80018ae:	701a      	strb	r2, [r3, #0]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80018b0:	193a      	adds	r2, r7, r4
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	2301      	movs	r3, #1
 80018b6:	2120      	movs	r1, #32
 80018b8:	f7ff ffb6 	bl	8001828 <hts221_write_reg>
 80018bc:	0003      	movs	r3, r0
 80018be:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80018c0:	68fb      	ldr	r3, [r7, #12]
}
 80018c2:	0018      	movs	r0, r3
 80018c4:	46bd      	mov	sp, r7
 80018c6:	b005      	add	sp, #20
 80018c8:	bd90      	pop	{r4, r7, pc}

080018ca <hts221_data_rate_get>:
  * @param  val     Get the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_get(stmdev_ctx_t *ctx, hts221_odr_t *val)
{
 80018ca:	b590      	push	{r4, r7, lr}
 80018cc:	b085      	sub	sp, #20
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	6078      	str	r0, [r7, #4]
 80018d2:	6039      	str	r1, [r7, #0]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80018d4:	2408      	movs	r4, #8
 80018d6:	193a      	adds	r2, r7, r4
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	2301      	movs	r3, #1
 80018dc:	2120      	movs	r1, #32
 80018de:	f7ff ff82 	bl	80017e6 <hts221_read_reg>
 80018e2:	0003      	movs	r3, r0
 80018e4:	60fb      	str	r3, [r7, #12]

  switch (reg.odr)
 80018e6:	193b      	adds	r3, r7, r4
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	079b      	lsls	r3, r3, #30
 80018ec:	0f9b      	lsrs	r3, r3, #30
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	2b03      	cmp	r3, #3
 80018f2:	d014      	beq.n	800191e <hts221_data_rate_get+0x54>
 80018f4:	dc17      	bgt.n	8001926 <hts221_data_rate_get+0x5c>
 80018f6:	2b02      	cmp	r3, #2
 80018f8:	d00d      	beq.n	8001916 <hts221_data_rate_get+0x4c>
 80018fa:	dc14      	bgt.n	8001926 <hts221_data_rate_get+0x5c>
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d002      	beq.n	8001906 <hts221_data_rate_get+0x3c>
 8001900:	2b01      	cmp	r3, #1
 8001902:	d004      	beq.n	800190e <hts221_data_rate_get+0x44>
 8001904:	e00f      	b.n	8001926 <hts221_data_rate_get+0x5c>
  {
    case HTS221_ONE_SHOT:
      *val = HTS221_ONE_SHOT;
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	2200      	movs	r2, #0
 800190a:	701a      	strb	r2, [r3, #0]
      break;
 800190c:	e00f      	b.n	800192e <hts221_data_rate_get+0x64>

    case HTS221_ODR_1Hz:
      *val = HTS221_ODR_1Hz;
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	2201      	movs	r2, #1
 8001912:	701a      	strb	r2, [r3, #0]
      break;
 8001914:	e00b      	b.n	800192e <hts221_data_rate_get+0x64>

    case HTS221_ODR_7Hz:
      *val = HTS221_ODR_7Hz;
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	2202      	movs	r2, #2
 800191a:	701a      	strb	r2, [r3, #0]
      break;
 800191c:	e007      	b.n	800192e <hts221_data_rate_get+0x64>

    case HTS221_ODR_12Hz5:
      *val = HTS221_ODR_12Hz5;
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	2203      	movs	r2, #3
 8001922:	701a      	strb	r2, [r3, #0]
      break;
 8001924:	e003      	b.n	800192e <hts221_data_rate_get+0x64>

    default:
      *val = HTS221_ODR_ND;
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	2204      	movs	r2, #4
 800192a:	701a      	strb	r2, [r3, #0]
      break;
 800192c:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 800192e:	68fb      	ldr	r3, [r7, #12]
}
 8001930:	0018      	movs	r0, r3
 8001932:	46bd      	mov	sp, r7
 8001934:	b005      	add	sp, #20
 8001936:	bd90      	pop	{r4, r7, pc}

08001938 <hts221_block_data_update_set>:
  * @param  val     change the values of bdu in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001938:	b590      	push	{r4, r7, lr}
 800193a:	b085      	sub	sp, #20
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
 8001940:	000a      	movs	r2, r1
 8001942:	1cfb      	adds	r3, r7, #3
 8001944:	701a      	strb	r2, [r3, #0]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8001946:	2408      	movs	r4, #8
 8001948:	193a      	adds	r2, r7, r4
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	2301      	movs	r3, #1
 800194e:	2120      	movs	r1, #32
 8001950:	f7ff ff49 	bl	80017e6 <hts221_read_reg>
 8001954:	0003      	movs	r3, r0
 8001956:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d117      	bne.n	800198e <hts221_block_data_update_set+0x56>
  {
    reg.bdu = val;
 800195e:	1cfb      	adds	r3, r7, #3
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	2201      	movs	r2, #1
 8001964:	4013      	ands	r3, r2
 8001966:	b2da      	uxtb	r2, r3
 8001968:	193b      	adds	r3, r7, r4
 800196a:	2101      	movs	r1, #1
 800196c:	400a      	ands	r2, r1
 800196e:	0090      	lsls	r0, r2, #2
 8001970:	781a      	ldrb	r2, [r3, #0]
 8001972:	2104      	movs	r1, #4
 8001974:	438a      	bics	r2, r1
 8001976:	1c11      	adds	r1, r2, #0
 8001978:	1c02      	adds	r2, r0, #0
 800197a:	430a      	orrs	r2, r1
 800197c:	701a      	strb	r2, [r3, #0]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 800197e:	193a      	adds	r2, r7, r4
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	2301      	movs	r3, #1
 8001984:	2120      	movs	r1, #32
 8001986:	f7ff ff4f 	bl	8001828 <hts221_write_reg>
 800198a:	0003      	movs	r3, r0
 800198c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800198e:	68fb      	ldr	r3, [r7, #12]
}
 8001990:	0018      	movs	r0, r3
 8001992:	46bd      	mov	sp, r7
 8001994:	b005      	add	sp, #20
 8001996:	bd90      	pop	{r4, r7, pc}

08001998 <hts221_humidity_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_humidity_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8001998:	b590      	push	{r4, r7, lr}
 800199a:	b085      	sub	sp, #20
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_HUMIDITY_OUT_L, buff, 2);
 80019a2:	2408      	movs	r4, #8
 80019a4:	193a      	adds	r2, r7, r4
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	2302      	movs	r3, #2
 80019aa:	2128      	movs	r1, #40	; 0x28
 80019ac:	f7ff ff1b 	bl	80017e6 <hts221_read_reg>
 80019b0:	0003      	movs	r3, r0
 80019b2:	60fb      	str	r3, [r7, #12]
  *val = (int16_t)buff[1];
 80019b4:	0021      	movs	r1, r4
 80019b6:	187b      	adds	r3, r7, r1
 80019b8:	785b      	ldrb	r3, [r3, #1]
 80019ba:	b21a      	sxth	r2, r3
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	2200      	movs	r2, #0
 80019c4:	5e9b      	ldrsh	r3, [r3, r2]
 80019c6:	b29b      	uxth	r3, r3
 80019c8:	021b      	lsls	r3, r3, #8
 80019ca:	b29a      	uxth	r2, r3
 80019cc:	187b      	adds	r3, r7, r1
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	b29b      	uxth	r3, r3
 80019d2:	18d3      	adds	r3, r2, r3
 80019d4:	b29b      	uxth	r3, r3
 80019d6:	b21a      	sxth	r2, r3
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	801a      	strh	r2, [r3, #0]

  return ret;
 80019dc:	68fb      	ldr	r3, [r7, #12]
}
 80019de:	0018      	movs	r0, r3
 80019e0:	46bd      	mov	sp, r7
 80019e2:	b005      	add	sp, #20
 80019e4:	bd90      	pop	{r4, r7, pc}

080019e6 <hts221_temperature_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80019e6:	b590      	push	{r4, r7, lr}
 80019e8:	b085      	sub	sp, #20
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	6078      	str	r0, [r7, #4]
 80019ee:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_TEMP_OUT_L, buff, 2);
 80019f0:	2408      	movs	r4, #8
 80019f2:	193a      	adds	r2, r7, r4
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	2302      	movs	r3, #2
 80019f8:	212a      	movs	r1, #42	; 0x2a
 80019fa:	f7ff fef4 	bl	80017e6 <hts221_read_reg>
 80019fe:	0003      	movs	r3, r0
 8001a00:	60fb      	str	r3, [r7, #12]
  *val = (int16_t)buff[1];
 8001a02:	0021      	movs	r1, r4
 8001a04:	187b      	adds	r3, r7, r1
 8001a06:	785b      	ldrb	r3, [r3, #1]
 8001a08:	b21a      	sxth	r2, r3
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	2200      	movs	r2, #0
 8001a12:	5e9b      	ldrsh	r3, [r3, r2]
 8001a14:	b29b      	uxth	r3, r3
 8001a16:	021b      	lsls	r3, r3, #8
 8001a18:	b29a      	uxth	r2, r3
 8001a1a:	187b      	adds	r3, r7, r1
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	b29b      	uxth	r3, r3
 8001a20:	18d3      	adds	r3, r2, r3
 8001a22:	b29b      	uxth	r3, r3
 8001a24:	b21a      	sxth	r2, r3
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	801a      	strh	r2, [r3, #0]

  return ret;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
}
 8001a2c:	0018      	movs	r0, r3
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	b005      	add	sp, #20
 8001a32:	bd90      	pop	{r4, r7, pc}

08001a34 <hts221_device_id_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b084      	sub	sp, #16
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_WHO_AM_I, buff, 1);
 8001a3e:	683a      	ldr	r2, [r7, #0]
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	2301      	movs	r3, #1
 8001a44:	210f      	movs	r1, #15
 8001a46:	f7ff fece 	bl	80017e6 <hts221_read_reg>
 8001a4a:	0003      	movs	r3, r0
 8001a4c:	60fb      	str	r3, [r7, #12]

  return ret;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
}
 8001a50:	0018      	movs	r0, r3
 8001a52:	46bd      	mov	sp, r7
 8001a54:	b004      	add	sp, #16
 8001a56:	bd80      	pop	{r7, pc}

08001a58 <hts221_power_on_set>:
  * @param  val     change the values of pd in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_power_on_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001a58:	b590      	push	{r4, r7, lr}
 8001a5a:	b085      	sub	sp, #20
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	000a      	movs	r2, r1
 8001a62:	1cfb      	adds	r3, r7, #3
 8001a64:	701a      	strb	r2, [r3, #0]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8001a66:	2408      	movs	r4, #8
 8001a68:	193a      	adds	r2, r7, r4
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	2120      	movs	r1, #32
 8001a70:	f7ff feb9 	bl	80017e6 <hts221_read_reg>
 8001a74:	0003      	movs	r3, r0
 8001a76:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d115      	bne.n	8001aaa <hts221_power_on_set+0x52>
  {
    reg.pd = val;
 8001a7e:	1cfb      	adds	r3, r7, #3
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	2201      	movs	r2, #1
 8001a84:	4013      	ands	r3, r2
 8001a86:	b2da      	uxtb	r2, r3
 8001a88:	193b      	adds	r3, r7, r4
 8001a8a:	01d0      	lsls	r0, r2, #7
 8001a8c:	781a      	ldrb	r2, [r3, #0]
 8001a8e:	217f      	movs	r1, #127	; 0x7f
 8001a90:	400a      	ands	r2, r1
 8001a92:	1c11      	adds	r1, r2, #0
 8001a94:	1c02      	adds	r2, r0, #0
 8001a96:	430a      	orrs	r2, r1
 8001a98:	701a      	strb	r2, [r3, #0]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8001a9a:	193a      	adds	r2, r7, r4
 8001a9c:	6878      	ldr	r0, [r7, #4]
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	2120      	movs	r1, #32
 8001aa2:	f7ff fec1 	bl	8001828 <hts221_write_reg>
 8001aa6:	0003      	movs	r3, r0
 8001aa8:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
}
 8001aac:	0018      	movs	r0, r3
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	b005      	add	sp, #20
 8001ab2:	bd90      	pop	{r4, r7, pc}

08001ab4 <hts221_hum_rh_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8001ab4:	b590      	push	{r4, r7, lr}
 8001ab6:	b085      	sub	sp, #20
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
 8001abc:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_RH_X2, &coeff, 1);
 8001abe:	240b      	movs	r4, #11
 8001ac0:	193a      	adds	r2, r7, r4
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	2130      	movs	r1, #48	; 0x30
 8001ac8:	f7ff fe8d 	bl	80017e6 <hts221_read_reg>
 8001acc:	0003      	movs	r3, r0
 8001ace:	60fb      	str	r3, [r7, #12]
  *val = coeff / 2.0f;
 8001ad0:	193b      	adds	r3, r7, r4
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	0018      	movs	r0, r3
 8001ad6:	f7ff fa15 	bl	8000f04 <__aeabi_i2f>
 8001ada:	1c03      	adds	r3, r0, #0
 8001adc:	2180      	movs	r1, #128	; 0x80
 8001ade:	05c9      	lsls	r1, r1, #23
 8001ae0:	1c18      	adds	r0, r3, #0
 8001ae2:	f7fe fd73 	bl	80005cc <__aeabi_fdiv>
 8001ae6:	1c03      	adds	r3, r0, #0
 8001ae8:	1c1a      	adds	r2, r3, #0
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	601a      	str	r2, [r3, #0]

  return ret;
 8001aee:	68fb      	ldr	r3, [r7, #12]
}
 8001af0:	0018      	movs	r0, r3
 8001af2:	46bd      	mov	sp, r7
 8001af4:	b005      	add	sp, #20
 8001af6:	bd90      	pop	{r4, r7, pc}

08001af8 <hts221_hum_rh_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8001af8:	b590      	push	{r4, r7, lr}
 8001afa:	b085      	sub	sp, #20
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
 8001b00:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_RH_X2, &coeff, 1);
 8001b02:	240b      	movs	r4, #11
 8001b04:	193a      	adds	r2, r7, r4
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	2301      	movs	r3, #1
 8001b0a:	2131      	movs	r1, #49	; 0x31
 8001b0c:	f7ff fe6b 	bl	80017e6 <hts221_read_reg>
 8001b10:	0003      	movs	r3, r0
 8001b12:	60fb      	str	r3, [r7, #12]
  *val = coeff / 2.0f;
 8001b14:	193b      	adds	r3, r7, r4
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	0018      	movs	r0, r3
 8001b1a:	f7ff f9f3 	bl	8000f04 <__aeabi_i2f>
 8001b1e:	1c03      	adds	r3, r0, #0
 8001b20:	2180      	movs	r1, #128	; 0x80
 8001b22:	05c9      	lsls	r1, r1, #23
 8001b24:	1c18      	adds	r0, r3, #0
 8001b26:	f7fe fd51 	bl	80005cc <__aeabi_fdiv>
 8001b2a:	1c03      	adds	r3, r0, #0
 8001b2c:	1c1a      	adds	r2, r3, #0
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	601a      	str	r2, [r3, #0]

  return ret;
 8001b32:	68fb      	ldr	r3, [r7, #12]
}
 8001b34:	0018      	movs	r0, r3
 8001b36:	46bd      	mov	sp, r7
 8001b38:	b005      	add	sp, #20
 8001b3a:	bd90      	pop	{r4, r7, pc}

08001b3c <hts221_temp_deg_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8001b3c:	b5b0      	push	{r4, r5, r7, lr}
 8001b3e:	b086      	sub	sp, #24
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_DEGC_X8, &coeff_l, 1);
 8001b46:	240f      	movs	r4, #15
 8001b48:	193a      	adds	r2, r7, r4
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	2132      	movs	r1, #50	; 0x32
 8001b50:	f7ff fe49 	bl	80017e6 <hts221_read_reg>
 8001b54:	0003      	movs	r3, r0
 8001b56:	617b      	str	r3, [r7, #20]

  if (ret == 0)
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d123      	bne.n	8001ba6 <hts221_temp_deg_point_0_get+0x6a>
  {
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 8001b5e:	2510      	movs	r5, #16
 8001b60:	197a      	adds	r2, r7, r5
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	2301      	movs	r3, #1
 8001b66:	2135      	movs	r1, #53	; 0x35
 8001b68:	f7ff fe3d 	bl	80017e6 <hts221_read_reg>
 8001b6c:	0003      	movs	r3, r0
 8001b6e:	617b      	str	r3, [r7, #20]
    coeff_h = reg.t0_msb;
 8001b70:	197b      	adds	r3, r7, r5
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	079b      	lsls	r3, r3, #30
 8001b76:	0f9b      	lsrs	r3, r3, #30
 8001b78:	b2da      	uxtb	r2, r3
 8001b7a:	2113      	movs	r1, #19
 8001b7c:	187b      	adds	r3, r7, r1
 8001b7e:	701a      	strb	r2, [r3, #0]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 8001b80:	187b      	adds	r3, r7, r1
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	021b      	lsls	r3, r3, #8
 8001b86:	193a      	adds	r2, r7, r4
 8001b88:	7812      	ldrb	r2, [r2, #0]
 8001b8a:	189b      	adds	r3, r3, r2
 8001b8c:	0018      	movs	r0, r3
 8001b8e:	f7ff f9b9 	bl	8000f04 <__aeabi_i2f>
 8001b92:	1c03      	adds	r3, r0, #0
 8001b94:	2182      	movs	r1, #130	; 0x82
 8001b96:	05c9      	lsls	r1, r1, #23
 8001b98:	1c18      	adds	r0, r3, #0
 8001b9a:	f7fe fd17 	bl	80005cc <__aeabi_fdiv>
 8001b9e:	1c03      	adds	r3, r0, #0
 8001ba0:	1c1a      	adds	r2, r3, #0
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	601a      	str	r2, [r3, #0]
  }

  return ret;
 8001ba6:	697b      	ldr	r3, [r7, #20]
}
 8001ba8:	0018      	movs	r0, r3
 8001baa:	46bd      	mov	sp, r7
 8001bac:	b006      	add	sp, #24
 8001bae:	bdb0      	pop	{r4, r5, r7, pc}

08001bb0 <hts221_temp_deg_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8001bb0:	b5b0      	push	{r4, r5, r7, lr}
 8001bb2:	b086      	sub	sp, #24
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
 8001bb8:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_DEGC_X8, &coeff_l, 1);
 8001bba:	240f      	movs	r4, #15
 8001bbc:	193a      	adds	r2, r7, r4
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	2133      	movs	r1, #51	; 0x33
 8001bc4:	f7ff fe0f 	bl	80017e6 <hts221_read_reg>
 8001bc8:	0003      	movs	r3, r0
 8001bca:	617b      	str	r3, [r7, #20]

  if (ret == 0)
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d123      	bne.n	8001c1a <hts221_temp_deg_point_1_get+0x6a>
  {
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 8001bd2:	2510      	movs	r5, #16
 8001bd4:	197a      	adds	r2, r7, r5
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	2301      	movs	r3, #1
 8001bda:	2135      	movs	r1, #53	; 0x35
 8001bdc:	f7ff fe03 	bl	80017e6 <hts221_read_reg>
 8001be0:	0003      	movs	r3, r0
 8001be2:	617b      	str	r3, [r7, #20]
    coeff_h = reg.t1_msb;
 8001be4:	197b      	adds	r3, r7, r5
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	071b      	lsls	r3, r3, #28
 8001bea:	0f9b      	lsrs	r3, r3, #30
 8001bec:	b2da      	uxtb	r2, r3
 8001bee:	2113      	movs	r1, #19
 8001bf0:	187b      	adds	r3, r7, r1
 8001bf2:	701a      	strb	r2, [r3, #0]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 8001bf4:	187b      	adds	r3, r7, r1
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	021b      	lsls	r3, r3, #8
 8001bfa:	193a      	adds	r2, r7, r4
 8001bfc:	7812      	ldrb	r2, [r2, #0]
 8001bfe:	189b      	adds	r3, r3, r2
 8001c00:	0018      	movs	r0, r3
 8001c02:	f7ff f97f 	bl	8000f04 <__aeabi_i2f>
 8001c06:	1c03      	adds	r3, r0, #0
 8001c08:	2182      	movs	r1, #130	; 0x82
 8001c0a:	05c9      	lsls	r1, r1, #23
 8001c0c:	1c18      	adds	r0, r3, #0
 8001c0e:	f7fe fcdd 	bl	80005cc <__aeabi_fdiv>
 8001c12:	1c03      	adds	r3, r0, #0
 8001c14:	1c1a      	adds	r2, r3, #0
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	601a      	str	r2, [r3, #0]
  }

  return ret;
 8001c1a:	697b      	ldr	r3, [r7, #20]
}
 8001c1c:	0018      	movs	r0, r3
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	b006      	add	sp, #24
 8001c22:	bdb0      	pop	{r4, r5, r7, pc}

08001c24 <hts221_hum_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8001c24:	b590      	push	{r4, r7, lr}
 8001c26:	b085      	sub	sp, #20
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_T0_OUT_L, coeff_p, 2);
 8001c2e:	2408      	movs	r4, #8
 8001c30:	193a      	adds	r2, r7, r4
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	2302      	movs	r3, #2
 8001c36:	2136      	movs	r1, #54	; 0x36
 8001c38:	f7ff fdd5 	bl	80017e6 <hts221_read_reg>
 8001c3c:	0003      	movs	r3, r0
 8001c3e:	60fb      	str	r3, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8001c40:	0021      	movs	r1, r4
 8001c42:	187b      	adds	r3, r7, r1
 8001c44:	785b      	ldrb	r3, [r3, #1]
 8001c46:	b29b      	uxth	r3, r3
 8001c48:	021b      	lsls	r3, r3, #8
 8001c4a:	b29a      	uxth	r2, r3
 8001c4c:	187b      	adds	r3, r7, r1
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	b29b      	uxth	r3, r3
 8001c52:	18d3      	adds	r3, r2, r3
 8001c54:	b29a      	uxth	r2, r3
 8001c56:	210a      	movs	r1, #10
 8001c58:	187b      	adds	r3, r7, r1
 8001c5a:	801a      	strh	r2, [r3, #0]
  *val = coeff * 1.0f;
 8001c5c:	187b      	adds	r3, r7, r1
 8001c5e:	2200      	movs	r2, #0
 8001c60:	5e9b      	ldrsh	r3, [r3, r2]
 8001c62:	0018      	movs	r0, r3
 8001c64:	f7ff f94e 	bl	8000f04 <__aeabi_i2f>
 8001c68:	1c02      	adds	r2, r0, #0
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	601a      	str	r2, [r3, #0]

  return ret;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
}
 8001c70:	0018      	movs	r0, r3
 8001c72:	46bd      	mov	sp, r7
 8001c74:	b005      	add	sp, #20
 8001c76:	bd90      	pop	{r4, r7, pc}

08001c78 <hts221_hum_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8001c78:	b590      	push	{r4, r7, lr}
 8001c7a:	b085      	sub	sp, #20
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
 8001c80:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_T0_OUT_L, coeff_p, 2);
 8001c82:	2408      	movs	r4, #8
 8001c84:	193a      	adds	r2, r7, r4
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	2302      	movs	r3, #2
 8001c8a:	213a      	movs	r1, #58	; 0x3a
 8001c8c:	f7ff fdab 	bl	80017e6 <hts221_read_reg>
 8001c90:	0003      	movs	r3, r0
 8001c92:	60fb      	str	r3, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8001c94:	0021      	movs	r1, r4
 8001c96:	187b      	adds	r3, r7, r1
 8001c98:	785b      	ldrb	r3, [r3, #1]
 8001c9a:	b29b      	uxth	r3, r3
 8001c9c:	021b      	lsls	r3, r3, #8
 8001c9e:	b29a      	uxth	r2, r3
 8001ca0:	187b      	adds	r3, r7, r1
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	b29b      	uxth	r3, r3
 8001ca6:	18d3      	adds	r3, r2, r3
 8001ca8:	b29a      	uxth	r2, r3
 8001caa:	210a      	movs	r1, #10
 8001cac:	187b      	adds	r3, r7, r1
 8001cae:	801a      	strh	r2, [r3, #0]
  *val = coeff * 1.0f;
 8001cb0:	187b      	adds	r3, r7, r1
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	5e9b      	ldrsh	r3, [r3, r2]
 8001cb6:	0018      	movs	r0, r3
 8001cb8:	f7ff f924 	bl	8000f04 <__aeabi_i2f>
 8001cbc:	1c02      	adds	r2, r0, #0
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	601a      	str	r2, [r3, #0]

  return ret;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
}
 8001cc4:	0018      	movs	r0, r3
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	b005      	add	sp, #20
 8001cca:	bd90      	pop	{r4, r7, pc}

08001ccc <hts221_temp_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8001ccc:	b590      	push	{r4, r7, lr}
 8001cce:	b085      	sub	sp, #20
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_OUT_L, coeff_p, 2);
 8001cd6:	2408      	movs	r4, #8
 8001cd8:	193a      	adds	r2, r7, r4
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	2302      	movs	r3, #2
 8001cde:	213c      	movs	r1, #60	; 0x3c
 8001ce0:	f7ff fd81 	bl	80017e6 <hts221_read_reg>
 8001ce4:	0003      	movs	r3, r0
 8001ce6:	60fb      	str	r3, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8001ce8:	0021      	movs	r1, r4
 8001cea:	187b      	adds	r3, r7, r1
 8001cec:	785b      	ldrb	r3, [r3, #1]
 8001cee:	b29b      	uxth	r3, r3
 8001cf0:	021b      	lsls	r3, r3, #8
 8001cf2:	b29a      	uxth	r2, r3
 8001cf4:	187b      	adds	r3, r7, r1
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	b29b      	uxth	r3, r3
 8001cfa:	18d3      	adds	r3, r2, r3
 8001cfc:	b29a      	uxth	r2, r3
 8001cfe:	210a      	movs	r1, #10
 8001d00:	187b      	adds	r3, r7, r1
 8001d02:	801a      	strh	r2, [r3, #0]
  *val = coeff * 1.0f;
 8001d04:	187b      	adds	r3, r7, r1
 8001d06:	2200      	movs	r2, #0
 8001d08:	5e9b      	ldrsh	r3, [r3, r2]
 8001d0a:	0018      	movs	r0, r3
 8001d0c:	f7ff f8fa 	bl	8000f04 <__aeabi_i2f>
 8001d10:	1c02      	adds	r2, r0, #0
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	601a      	str	r2, [r3, #0]

  return ret;
 8001d16:	68fb      	ldr	r3, [r7, #12]
}
 8001d18:	0018      	movs	r0, r3
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	b005      	add	sp, #20
 8001d1e:	bd90      	pop	{r4, r7, pc}

08001d20 <hts221_temp_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8001d20:	b590      	push	{r4, r7, lr}
 8001d22:	b085      	sub	sp, #20
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_OUT_L, coeff_p, 2);
 8001d2a:	2408      	movs	r4, #8
 8001d2c:	193a      	adds	r2, r7, r4
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	2302      	movs	r3, #2
 8001d32:	213e      	movs	r1, #62	; 0x3e
 8001d34:	f7ff fd57 	bl	80017e6 <hts221_read_reg>
 8001d38:	0003      	movs	r3, r0
 8001d3a:	60fb      	str	r3, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8001d3c:	0021      	movs	r1, r4
 8001d3e:	187b      	adds	r3, r7, r1
 8001d40:	785b      	ldrb	r3, [r3, #1]
 8001d42:	b29b      	uxth	r3, r3
 8001d44:	021b      	lsls	r3, r3, #8
 8001d46:	b29a      	uxth	r2, r3
 8001d48:	187b      	adds	r3, r7, r1
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	b29b      	uxth	r3, r3
 8001d4e:	18d3      	adds	r3, r2, r3
 8001d50:	b29a      	uxth	r2, r3
 8001d52:	210a      	movs	r1, #10
 8001d54:	187b      	adds	r3, r7, r1
 8001d56:	801a      	strh	r2, [r3, #0]
  *val = coeff * 1.0f;
 8001d58:	187b      	adds	r3, r7, r1
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	5e9b      	ldrsh	r3, [r3, r2]
 8001d5e:	0018      	movs	r0, r3
 8001d60:	f7ff f8d0 	bl	8000f04 <__aeabi_i2f>
 8001d64:	1c02      	adds	r2, r0, #0
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	601a      	str	r2, [r3, #0]

  return ret;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
}
 8001d6c:	0018      	movs	r0, r3
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	b005      	add	sp, #20
 8001d72:	bd90      	pop	{r4, r7, pc}

08001d74 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1  (1)
  * @note Peripheral marked with (1) are not available all devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APBENR1, Periphs);
 8001d7c:	4b07      	ldr	r3, [pc, #28]	; (8001d9c <LL_APB1_GRP1_EnableClock+0x28>)
 8001d7e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001d80:	4b06      	ldr	r3, [pc, #24]	; (8001d9c <LL_APB1_GRP1_EnableClock+0x28>)
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	430a      	orrs	r2, r1
 8001d86:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 8001d88:	4b04      	ldr	r3, [pc, #16]	; (8001d9c <LL_APB1_GRP1_EnableClock+0x28>)
 8001d8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d8c:	687a      	ldr	r2, [r7, #4]
 8001d8e:	4013      	ands	r3, r2
 8001d90:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001d92:	68fb      	ldr	r3, [r7, #12]
}
 8001d94:	46c0      	nop			; (mov r8, r8)
 8001d96:	46bd      	mov	sp, r7
 8001d98:	b004      	add	sp, #16
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	40021000 	.word	0x40021000

08001da0 <LL_IOP_GRP1_EnableClock>:
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOE
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOF
  * @retval None
  */
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b084      	sub	sp, #16
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 8001da8:	4b07      	ldr	r3, [pc, #28]	; (8001dc8 <LL_IOP_GRP1_EnableClock+0x28>)
 8001daa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001dac:	4b06      	ldr	r3, [pc, #24]	; (8001dc8 <LL_IOP_GRP1_EnableClock+0x28>)
 8001dae:	687a      	ldr	r2, [r7, #4]
 8001db0:	430a      	orrs	r2, r1
 8001db2:	635a      	str	r2, [r3, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8001db4:	4b04      	ldr	r3, [pc, #16]	; (8001dc8 <LL_IOP_GRP1_EnableClock+0x28>)
 8001db6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001db8:	687a      	ldr	r2, [r7, #4]
 8001dba:	4013      	ands	r3, r2
 8001dbc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
}
 8001dc0:	46c0      	nop			; (mov r8, r8)
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	b004      	add	sp, #16
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	40021000 	.word	0x40021000

08001dcc <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b084      	sub	sp, #16
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	60f8      	str	r0, [r7, #12]
 8001dd4:	60b9      	str	r1, [r7, #8]
 8001dd6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	6819      	ldr	r1, [r3, #0]
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	435b      	muls	r3, r3
 8001de0:	001a      	movs	r2, r3
 8001de2:	0013      	movs	r3, r2
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	189b      	adds	r3, r3, r2
 8001de8:	43db      	mvns	r3, r3
 8001dea:	400b      	ands	r3, r1
 8001dec:	001a      	movs	r2, r3
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	435b      	muls	r3, r3
 8001df2:	6879      	ldr	r1, [r7, #4]
 8001df4:	434b      	muls	r3, r1
 8001df6:	431a      	orrs	r2, r3
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	601a      	str	r2, [r3, #0]
}
 8001dfc:	46c0      	nop			; (mov r8, r8)
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	b004      	add	sp, #16
 8001e02:	bd80      	pop	{r7, pc}

08001e04 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b084      	sub	sp, #16
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	60f8      	str	r0, [r7, #12]
 8001e0c:	60b9      	str	r1, [r7, #8]
 8001e0e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	68ba      	ldr	r2, [r7, #8]
 8001e16:	43d2      	mvns	r2, r2
 8001e18:	401a      	ands	r2, r3
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	6879      	ldr	r1, [r7, #4]
 8001e1e:	434b      	muls	r3, r1
 8001e20:	431a      	orrs	r2, r3
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	605a      	str	r2, [r3, #4]
}
 8001e26:	46c0      	nop			; (mov r8, r8)
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	b004      	add	sp, #16
 8001e2c:	bd80      	pop	{r7, pc}

08001e2e <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8001e2e:	b580      	push	{r7, lr}
 8001e30:	b084      	sub	sp, #16
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	60f8      	str	r0, [r7, #12]
 8001e36:	60b9      	str	r1, [r7, #8]
 8001e38:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	6899      	ldr	r1, [r3, #8]
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	435b      	muls	r3, r3
 8001e42:	001a      	movs	r2, r3
 8001e44:	0013      	movs	r3, r2
 8001e46:	005b      	lsls	r3, r3, #1
 8001e48:	189b      	adds	r3, r3, r2
 8001e4a:	43db      	mvns	r3, r3
 8001e4c:	400b      	ands	r3, r1
 8001e4e:	001a      	movs	r2, r3
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	435b      	muls	r3, r3
 8001e54:	6879      	ldr	r1, [r7, #4]
 8001e56:	434b      	muls	r3, r1
 8001e58:	431a      	orrs	r2, r3
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	609a      	str	r2, [r3, #8]
}
 8001e5e:	46c0      	nop			; (mov r8, r8)
 8001e60:	46bd      	mov	sp, r7
 8001e62:	b004      	add	sp, #16
 8001e64:	bd80      	pop	{r7, pc}

08001e66 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8001e66:	b580      	push	{r7, lr}
 8001e68:	b084      	sub	sp, #16
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	60f8      	str	r0, [r7, #12]
 8001e6e:	60b9      	str	r1, [r7, #8]
 8001e70:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	68d9      	ldr	r1, [r3, #12]
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	435b      	muls	r3, r3
 8001e7a:	001a      	movs	r2, r3
 8001e7c:	0013      	movs	r3, r2
 8001e7e:	005b      	lsls	r3, r3, #1
 8001e80:	189b      	adds	r3, r3, r2
 8001e82:	43db      	mvns	r3, r3
 8001e84:	400b      	ands	r3, r1
 8001e86:	001a      	movs	r2, r3
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	435b      	muls	r3, r3
 8001e8c:	6879      	ldr	r1, [r7, #4]
 8001e8e:	434b      	muls	r3, r1
 8001e90:	431a      	orrs	r2, r3
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	60da      	str	r2, [r3, #12]
}
 8001e96:	46c0      	nop			; (mov r8, r8)
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	b004      	add	sp, #16
 8001e9c:	bd80      	pop	{r7, pc}

08001e9e <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_6
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8001e9e:	b580      	push	{r7, lr}
 8001ea0:	b084      	sub	sp, #16
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	60f8      	str	r0, [r7, #12]
 8001ea6:	60b9      	str	r1, [r7, #8]
 8001ea8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	0a1b      	lsrs	r3, r3, #8
 8001eb2:	68ba      	ldr	r2, [r7, #8]
 8001eb4:	0a12      	lsrs	r2, r2, #8
 8001eb6:	4353      	muls	r3, r2
 8001eb8:	68ba      	ldr	r2, [r7, #8]
 8001eba:	0a12      	lsrs	r2, r2, #8
 8001ebc:	4353      	muls	r3, r2
 8001ebe:	68ba      	ldr	r2, [r7, #8]
 8001ec0:	0a12      	lsrs	r2, r2, #8
 8001ec2:	435a      	muls	r2, r3
 8001ec4:	0013      	movs	r3, r2
 8001ec6:	011b      	lsls	r3, r3, #4
 8001ec8:	1a9b      	subs	r3, r3, r2
 8001eca:	43db      	mvns	r3, r3
 8001ecc:	400b      	ands	r3, r1
 8001ece:	001a      	movs	r2, r3
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	0a1b      	lsrs	r3, r3, #8
 8001ed4:	68b9      	ldr	r1, [r7, #8]
 8001ed6:	0a09      	lsrs	r1, r1, #8
 8001ed8:	434b      	muls	r3, r1
 8001eda:	68b9      	ldr	r1, [r7, #8]
 8001edc:	0a09      	lsrs	r1, r1, #8
 8001ede:	434b      	muls	r3, r1
 8001ee0:	68b9      	ldr	r1, [r7, #8]
 8001ee2:	0a09      	lsrs	r1, r1, #8
 8001ee4:	434b      	muls	r3, r1
 8001ee6:	6879      	ldr	r1, [r7, #4]
 8001ee8:	434b      	muls	r3, r1
 8001eea:	431a      	orrs	r2, r3
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	625a      	str	r2, [r3, #36]	; 0x24
             (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * Alternate));
}
 8001ef0:	46c0      	nop			; (mov r8, r8)
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	b004      	add	sp, #16
 8001ef6:	bd80      	pop	{r7, pc}

08001ef8 <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	2201      	movs	r2, #1
 8001f06:	431a      	orrs	r2, r3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	601a      	str	r2, [r3, #0]
}
 8001f0c:	46c0      	nop			; (mov r8, r8)
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	b002      	add	sp, #8
 8001f12:	bd80      	pop	{r7, pc}

08001f14 <LL_I2C_Disable>:
  * @rmtoll CR1          PE            LL_I2C_Disable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Disable(I2C_TypeDef *I2Cx)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	2201      	movs	r2, #1
 8001f22:	4393      	bics	r3, r2
 8001f24:	001a      	movs	r2, r3
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	601a      	str	r2, [r3, #0]
}
 8001f2a:	46c0      	nop			; (mov r8, r8)
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	b002      	add	sp, #8
 8001f30:	bd80      	pop	{r7, pc}
	...

08001f34 <LL_I2C_ConfigFilters>:
  *         This parameter is used to configure the digital noise filter on SDA and SCL input.
  *         The digital filter will filter spikes with a length of up to DNF[3:0]*ti2cclk.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ConfigFilters(I2C_TypeDef *I2Cx, uint32_t AnalogFilter, uint32_t DigitalFilter)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b084      	sub	sp, #16
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	60f8      	str	r0, [r7, #12]
 8001f3c:	60b9      	str	r1, [r7, #8]
 8001f3e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a06      	ldr	r2, [pc, #24]	; (8001f60 <LL_I2C_ConfigFilters+0x2c>)
 8001f46:	401a      	ands	r2, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	0219      	lsls	r1, r3, #8
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	430b      	orrs	r3, r1
 8001f50:	431a      	orrs	r2, r3
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	601a      	str	r2, [r3, #0]
}
 8001f56:	46c0      	nop			; (mov r8, r8)
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	b004      	add	sp, #16
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	46c0      	nop			; (mov r8, r8)
 8001f60:	ffffe0ff 	.word	0xffffe0ff

08001f64 <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a03      	ldr	r2, [pc, #12]	; (8001f80 <LL_I2C_EnableClockStretching+0x1c>)
 8001f72:	401a      	ands	r2, r3
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	601a      	str	r2, [r3, #0]
}
 8001f78:	46c0      	nop			; (mov r8, r8)
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	b002      	add	sp, #8
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	fffdffff 	.word	0xfffdffff

08001f84 <LL_I2C_SetTiming>:
  * @param  Timing This parameter must be a value between Min_Data=0 and Max_Data=0xFFFFFFFF.
  * @note   This parameter is computed with the STM32CubeMX Tool.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetTiming(I2C_TypeDef *I2Cx, uint32_t Timing)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
 8001f8c:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	683a      	ldr	r2, [r7, #0]
 8001f92:	611a      	str	r2, [r3, #16]
}
 8001f94:	46c0      	nop			; (mov r8, r8)
 8001f96:	46bd      	mov	sp, r7
 8001f98:	b002      	add	sp, #8
 8001f9a:	bd80      	pop	{r7, pc}

08001f9c <LL_I2C_SetMode>:
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE_ARP
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetMode(I2C_TypeDef *I2Cx, uint32_t PeripheralMode)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a05      	ldr	r2, [pc, #20]	; (8001fc0 <LL_I2C_SetMode+0x24>)
 8001fac:	401a      	ands	r2, r3
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	431a      	orrs	r2, r3
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	601a      	str	r2, [r3, #0]
}
 8001fb6:	46c0      	nop			; (mov r8, r8)
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	b002      	add	sp, #8
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	46c0      	nop			; (mov r8, r8)
 8001fc0:	ffcfffff 	.word	0xffcfffff

08001fc4 <LL_I2C_IsActiveFlag_TXIS>:
  * @rmtoll ISR          TXIS          LL_I2C_IsActiveFlag_TXIS
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TXIS(I2C_TypeDef *I2Cx)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TXIS) == (I2C_ISR_TXIS)) ? 1UL : 0UL);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	699b      	ldr	r3, [r3, #24]
 8001fd0:	2202      	movs	r2, #2
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	2b02      	cmp	r3, #2
 8001fd6:	d101      	bne.n	8001fdc <LL_I2C_IsActiveFlag_TXIS+0x18>
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e000      	b.n	8001fde <LL_I2C_IsActiveFlag_TXIS+0x1a>
 8001fdc:	2300      	movs	r3, #0
}
 8001fde:	0018      	movs	r0, r3
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	b002      	add	sp, #8
 8001fe4:	bd80      	pop	{r7, pc}

08001fe6 <LL_I2C_IsActiveFlag_RXNE>:
  * @rmtoll ISR          RXNE          LL_I2C_IsActiveFlag_RXNE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_RXNE(I2C_TypeDef *I2Cx)
{
 8001fe6:	b580      	push	{r7, lr}
 8001fe8:	b082      	sub	sp, #8
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE)) ? 1UL : 0UL);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	699b      	ldr	r3, [r3, #24]
 8001ff2:	2204      	movs	r2, #4
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	2b04      	cmp	r3, #4
 8001ff8:	d101      	bne.n	8001ffe <LL_I2C_IsActiveFlag_RXNE+0x18>
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e000      	b.n	8002000 <LL_I2C_IsActiveFlag_RXNE+0x1a>
 8001ffe:	2300      	movs	r3, #0
}
 8002000:	0018      	movs	r0, r3
 8002002:	46bd      	mov	sp, r7
 8002004:	b002      	add	sp, #8
 8002006:	bd80      	pop	{r7, pc}

08002008 <LL_I2C_IsActiveFlag_STOP>:
  * @rmtoll ISR          STOPF         LL_I2C_IsActiveFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_STOP(I2C_TypeDef *I2Cx)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_STOPF) == (I2C_ISR_STOPF)) ? 1UL : 0UL);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	699b      	ldr	r3, [r3, #24]
 8002014:	2220      	movs	r2, #32
 8002016:	4013      	ands	r3, r2
 8002018:	2b20      	cmp	r3, #32
 800201a:	d101      	bne.n	8002020 <LL_I2C_IsActiveFlag_STOP+0x18>
 800201c:	2301      	movs	r3, #1
 800201e:	e000      	b.n	8002022 <LL_I2C_IsActiveFlag_STOP+0x1a>
 8002020:	2300      	movs	r3, #0
}
 8002022:	0018      	movs	r0, r3
 8002024:	46bd      	mov	sp, r7
 8002026:	b002      	add	sp, #8
 8002028:	bd80      	pop	{r7, pc}

0800202a <LL_I2C_IsActiveFlag_TC>:
  * @rmtoll ISR          TC            LL_I2C_IsActiveFlag_TC
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TC(I2C_TypeDef *I2Cx)
{
 800202a:	b580      	push	{r7, lr}
 800202c:	b082      	sub	sp, #8
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TC) == (I2C_ISR_TC)) ? 1UL : 0UL);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	699b      	ldr	r3, [r3, #24]
 8002036:	2240      	movs	r2, #64	; 0x40
 8002038:	4013      	ands	r3, r2
 800203a:	2b40      	cmp	r3, #64	; 0x40
 800203c:	d101      	bne.n	8002042 <LL_I2C_IsActiveFlag_TC+0x18>
 800203e:	2301      	movs	r3, #1
 8002040:	e000      	b.n	8002044 <LL_I2C_IsActiveFlag_TC+0x1a>
 8002042:	2300      	movs	r3, #0
}
 8002044:	0018      	movs	r0, r3
 8002046:	46bd      	mov	sp, r7
 8002048:	b002      	add	sp, #8
 800204a:	bd80      	pop	{r7, pc}

0800204c <LL_I2C_ClearFlag_STOP>:
  * @rmtoll ICR          STOPCF        LL_I2C_ClearFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_STOP(I2C_TypeDef *I2Cx)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->ICR, I2C_ICR_STOPCF);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	69db      	ldr	r3, [r3, #28]
 8002058:	2220      	movs	r2, #32
 800205a:	431a      	orrs	r2, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	61da      	str	r2, [r3, #28]
}
 8002060:	46c0      	nop			; (mov r8, r8)
 8002062:	46bd      	mov	sp, r7
 8002064:	b002      	add	sp, #8
 8002066:	bd80      	pop	{r7, pc}

08002068 <LL_I2C_HandleTransfer>:
  *         @arg @ref LL_I2C_GENERATE_RESTART_10BIT_WRITE
  * @retval None
  */
__STATIC_INLINE void LL_I2C_HandleTransfer(I2C_TypeDef *I2Cx, uint32_t SlaveAddr, uint32_t SlaveAddrSize,
                                           uint32_t TransferSize, uint32_t EndMode, uint32_t Request)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b084      	sub	sp, #16
 800206c:	af00      	add	r7, sp, #0
 800206e:	60f8      	str	r0, [r7, #12]
 8002070:	60b9      	str	r1, [r7, #8]
 8002072:	607a      	str	r2, [r7, #4]
 8002074:	603b      	str	r3, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 |
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	69fa      	ldr	r2, [r7, #28]
 800207c:	0d51      	lsrs	r1, r2, #21
 800207e:	2280      	movs	r2, #128	; 0x80
 8002080:	00d2      	lsls	r2, r2, #3
 8002082:	400a      	ands	r2, r1
 8002084:	490a      	ldr	r1, [pc, #40]	; (80020b0 <LL_I2C_HandleTransfer+0x48>)
 8002086:	430a      	orrs	r2, r1
 8002088:	43d2      	mvns	r2, r2
 800208a:	401a      	ands	r2, r3
 800208c:	68b9      	ldr	r1, [r7, #8]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4319      	orrs	r1, r3
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	041b      	lsls	r3, r3, #16
 8002096:	4319      	orrs	r1, r3
 8002098:	69bb      	ldr	r3, [r7, #24]
 800209a:	4319      	orrs	r1, r3
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	430b      	orrs	r3, r1
 80020a0:	431a      	orrs	r2, r3
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	605a      	str	r2, [r3, #4]
             (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) |
             I2C_CR2_START | I2C_CR2_STOP | I2C_CR2_RELOAD |
             I2C_CR2_NBYTES | I2C_CR2_AUTOEND | I2C_CR2_HEAD10R,
             SlaveAddr | SlaveAddrSize | (TransferSize << I2C_CR2_NBYTES_Pos) | EndMode | Request);
}
 80020a6:	46c0      	nop			; (mov r8, r8)
 80020a8:	46bd      	mov	sp, r7
 80020aa:	b004      	add	sp, #16
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	46c0      	nop			; (mov r8, r8)
 80020b0:	03ff7bff 	.word	0x03ff7bff

080020b4 <LL_I2C_ReceiveData8>:
  * @rmtoll RXDR         RXDATA        LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(I2C_TypeDef *I2Cx)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c0:	b2db      	uxtb	r3, r3
}
 80020c2:	0018      	movs	r0, r3
 80020c4:	46bd      	mov	sp, r7
 80020c6:	b002      	add	sp, #8
 80020c8:	bd80      	pop	{r7, pc}

080020ca <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 80020ca:	b580      	push	{r7, lr}
 80020cc:	b082      	sub	sp, #8
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	6078      	str	r0, [r7, #4]
 80020d2:	000a      	movs	r2, r1
 80020d4:	1cfb      	adds	r3, r7, #3
 80020d6:	701a      	strb	r2, [r3, #0]
  WRITE_REG(I2Cx->TXDR, Data);
 80020d8:	1cfb      	adds	r3, r7, #3
 80020da:	781a      	ldrb	r2, [r3, #0]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	629a      	str	r2, [r3, #40]	; 0x28
}
 80020e0:	46c0      	nop			; (mov r8, r8)
 80020e2:	46bd      	mov	sp, r7
 80020e4:	b002      	add	sp, #8
 80020e6:	bd80      	pop	{r7, pc}

080020e8 <i2c_init>:
#include "i2c.h"

I2C_TypeDef *i2c = I2C1;

int32_t i2c_init(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	af00      	add	r7, sp, #0
	//GPIO
	LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOB);
 80020ec:	2002      	movs	r0, #2
 80020ee:	f7ff fe57 	bl	8001da0 <LL_IOP_GRP1_EnableClock>

	LL_GPIO_SetPinSpeed(I2C1_SCL_GPIO_Port, I2C1_SCL_Pin, LL_GPIO_SPEED_FREQ_LOW);
 80020f2:	2380      	movs	r3, #128	; 0x80
 80020f4:	005b      	lsls	r3, r3, #1
 80020f6:	4838      	ldr	r0, [pc, #224]	; (80021d8 <i2c_init+0xf0>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	0019      	movs	r1, r3
 80020fc:	f7ff fe97 	bl	8001e2e <LL_GPIO_SetPinSpeed>
	LL_GPIO_SetPinOutputType(I2C1_SCL_GPIO_Port, I2C1_SCL_Pin, LL_GPIO_OUTPUT_OPENDRAIN);
 8002100:	2380      	movs	r3, #128	; 0x80
 8002102:	005b      	lsls	r3, r3, #1
 8002104:	4834      	ldr	r0, [pc, #208]	; (80021d8 <i2c_init+0xf0>)
 8002106:	2201      	movs	r2, #1
 8002108:	0019      	movs	r1, r3
 800210a:	f7ff fe7b 	bl	8001e04 <LL_GPIO_SetPinOutputType>
	LL_GPIO_SetPinPull(I2C1_SCL_GPIO_Port, I2C1_SCL_Pin, LL_GPIO_PULL_NO);
 800210e:	2380      	movs	r3, #128	; 0x80
 8002110:	005b      	lsls	r3, r3, #1
 8002112:	4831      	ldr	r0, [pc, #196]	; (80021d8 <i2c_init+0xf0>)
 8002114:	2200      	movs	r2, #0
 8002116:	0019      	movs	r1, r3
 8002118:	f7ff fea5 	bl	8001e66 <LL_GPIO_SetPinPull>
	LL_GPIO_SetAFPin_8_15(I2C1_SCL_GPIO_Port, I2C1_SCL_Pin, LL_GPIO_AF_6);
 800211c:	2380      	movs	r3, #128	; 0x80
 800211e:	005b      	lsls	r3, r3, #1
 8002120:	482d      	ldr	r0, [pc, #180]	; (80021d8 <i2c_init+0xf0>)
 8002122:	2206      	movs	r2, #6
 8002124:	0019      	movs	r1, r3
 8002126:	f7ff feba 	bl	8001e9e <LL_GPIO_SetAFPin_8_15>
	LL_GPIO_SetPinMode(I2C1_SCL_GPIO_Port, I2C1_SCL_Pin, LL_GPIO_MODE_ALTERNATE);
 800212a:	2380      	movs	r3, #128	; 0x80
 800212c:	005b      	lsls	r3, r3, #1
 800212e:	482a      	ldr	r0, [pc, #168]	; (80021d8 <i2c_init+0xf0>)
 8002130:	2202      	movs	r2, #2
 8002132:	0019      	movs	r1, r3
 8002134:	f7ff fe4a 	bl	8001dcc <LL_GPIO_SetPinMode>

	LL_GPIO_SetPinOutputType(I2C1_SDA_GPIO_Port, I2C1_SDA_Pin, LL_GPIO_OUTPUT_OPENDRAIN);
 8002138:	2380      	movs	r3, #128	; 0x80
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	4826      	ldr	r0, [pc, #152]	; (80021d8 <i2c_init+0xf0>)
 800213e:	2201      	movs	r2, #1
 8002140:	0019      	movs	r1, r3
 8002142:	f7ff fe5f 	bl	8001e04 <LL_GPIO_SetPinOutputType>
	LL_GPIO_SetPinPull(I2C1_SDA_GPIO_Port, I2C1_SDA_Pin, LL_GPIO_PULL_NO);
 8002146:	2380      	movs	r3, #128	; 0x80
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	4823      	ldr	r0, [pc, #140]	; (80021d8 <i2c_init+0xf0>)
 800214c:	2200      	movs	r2, #0
 800214e:	0019      	movs	r1, r3
 8002150:	f7ff fe89 	bl	8001e66 <LL_GPIO_SetPinPull>
	LL_GPIO_SetPinSpeed(I2C1_SDA_GPIO_Port, I2C1_SDA_Pin, LL_GPIO_SPEED_FREQ_VERY_HIGH);
 8002154:	2380      	movs	r3, #128	; 0x80
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	481f      	ldr	r0, [pc, #124]	; (80021d8 <i2c_init+0xf0>)
 800215a:	2203      	movs	r2, #3
 800215c:	0019      	movs	r1, r3
 800215e:	f7ff fe66 	bl	8001e2e <LL_GPIO_SetPinSpeed>
	LL_GPIO_SetAFPin_8_15(I2C1_SDA_GPIO_Port, I2C1_SDA_Pin, LL_GPIO_AF_6);
 8002162:	2380      	movs	r3, #128	; 0x80
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	481c      	ldr	r0, [pc, #112]	; (80021d8 <i2c_init+0xf0>)
 8002168:	2206      	movs	r2, #6
 800216a:	0019      	movs	r1, r3
 800216c:	f7ff fe97 	bl	8001e9e <LL_GPIO_SetAFPin_8_15>
	LL_GPIO_SetPinMode(I2C1_SDA_GPIO_Port, I2C1_SDA_Pin, LL_GPIO_MODE_ALTERNATE);
 8002170:	2380      	movs	r3, #128	; 0x80
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	4818      	ldr	r0, [pc, #96]	; (80021d8 <i2c_init+0xf0>)
 8002176:	2202      	movs	r2, #2
 8002178:	0019      	movs	r1, r3
 800217a:	f7ff fe27 	bl	8001dcc <LL_GPIO_SetPinMode>

	//I2C
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 800217e:	2380      	movs	r3, #128	; 0x80
 8002180:	039b      	lsls	r3, r3, #14
 8002182:	0018      	movs	r0, r3
 8002184:	f7ff fdf6 	bl	8001d74 <LL_APB1_GRP1_EnableClock>

	LL_I2C_Disable(i2c);
 8002188:	4b14      	ldr	r3, [pc, #80]	; (80021dc <i2c_init+0xf4>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	0018      	movs	r0, r3
 800218e:	f7ff fec1 	bl	8001f14 <LL_I2C_Disable>
	LL_I2C_ConfigFilters(i2c, LL_I2C_ANALOGFILTER_ENABLE, 0x00);
 8002192:	4b12      	ldr	r3, [pc, #72]	; (80021dc <i2c_init+0xf4>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	2200      	movs	r2, #0
 8002198:	2100      	movs	r1, #0
 800219a:	0018      	movs	r0, r3
 800219c:	f7ff feca 	bl	8001f34 <LL_I2C_ConfigFilters>
	LL_I2C_SetTiming(i2c, 0x10707DBC);
 80021a0:	4b0e      	ldr	r3, [pc, #56]	; (80021dc <i2c_init+0xf4>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a0e      	ldr	r2, [pc, #56]	; (80021e0 <i2c_init+0xf8>)
 80021a6:	0011      	movs	r1, r2
 80021a8:	0018      	movs	r0, r3
 80021aa:	f7ff feeb 	bl	8001f84 <LL_I2C_SetTiming>
	LL_I2C_EnableClockStretching(i2c);
 80021ae:	4b0b      	ldr	r3, [pc, #44]	; (80021dc <i2c_init+0xf4>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	0018      	movs	r0, r3
 80021b4:	f7ff fed6 	bl	8001f64 <LL_I2C_EnableClockStretching>
	LL_I2C_SetMode(i2c, LL_I2C_MODE_I2C);
 80021b8:	4b08      	ldr	r3, [pc, #32]	; (80021dc <i2c_init+0xf4>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	2100      	movs	r1, #0
 80021be:	0018      	movs	r0, r3
 80021c0:	f7ff feec 	bl	8001f9c <LL_I2C_SetMode>
	LL_I2C_Enable(i2c);
 80021c4:	4b05      	ldr	r3, [pc, #20]	; (80021dc <i2c_init+0xf4>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	0018      	movs	r0, r3
 80021ca:	f7ff fe95 	bl	8001ef8 <LL_I2C_Enable>

	return 0;
 80021ce:	2300      	movs	r3, #0
}
 80021d0:	0018      	movs	r0, r3
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	46c0      	nop			; (mov r8, r8)
 80021d8:	50000400 	.word	0x50000400
 80021dc:	20000038 	.word	0x20000038
 80021e0:	10707dbc 	.word	0x10707dbc

080021e4 <i2c_reg_write>:

	return 0;
}

int32_t i2c_reg_write(uint16_t slave_addr, uint16_t reg_addr, uint8_t *data_ptr, uint16_t size)
{
 80021e4:	b5b0      	push	{r4, r5, r7, lr}
 80021e6:	b088      	sub	sp, #32
 80021e8:	af02      	add	r7, sp, #8
 80021ea:	0004      	movs	r4, r0
 80021ec:	0008      	movs	r0, r1
 80021ee:	60ba      	str	r2, [r7, #8]
 80021f0:	0019      	movs	r1, r3
 80021f2:	250e      	movs	r5, #14
 80021f4:	197b      	adds	r3, r7, r5
 80021f6:	1c22      	adds	r2, r4, #0
 80021f8:	801a      	strh	r2, [r3, #0]
 80021fa:	230c      	movs	r3, #12
 80021fc:	18fb      	adds	r3, r7, r3
 80021fe:	1c02      	adds	r2, r0, #0
 8002200:	801a      	strh	r2, [r3, #0]
 8002202:	1dbb      	adds	r3, r7, #6
 8002204:	1c0a      	adds	r2, r1, #0
 8002206:	801a      	strh	r2, [r3, #0]
	uint8_t data_count = size;
 8002208:	2317      	movs	r3, #23
 800220a:	18fb      	adds	r3, r7, r3
 800220c:	1dba      	adds	r2, r7, #6
 800220e:	8812      	ldrh	r2, [r2, #0]
 8002210:	701a      	strb	r2, [r3, #0]

	LL_I2C_HandleTransfer(i2c, slave_addr, LL_I2C_ADDRSLAVE_7BIT, (uint32_t)(size+1), LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 8002212:	4b2a      	ldr	r3, [pc, #168]	; (80022bc <i2c_reg_write+0xd8>)
 8002214:	6818      	ldr	r0, [r3, #0]
 8002216:	197b      	adds	r3, r7, r5
 8002218:	8819      	ldrh	r1, [r3, #0]
 800221a:	1dbb      	adds	r3, r7, #6
 800221c:	881b      	ldrh	r3, [r3, #0]
 800221e:	3301      	adds	r3, #1
 8002220:	001a      	movs	r2, r3
 8002222:	4b27      	ldr	r3, [pc, #156]	; (80022c0 <i2c_reg_write+0xdc>)
 8002224:	9301      	str	r3, [sp, #4]
 8002226:	2380      	movs	r3, #128	; 0x80
 8002228:	049b      	lsls	r3, r3, #18
 800222a:	9300      	str	r3, [sp, #0]
 800222c:	0013      	movs	r3, r2
 800222e:	2200      	movs	r2, #0
 8002230:	f7ff ff1a 	bl	8002068 <LL_I2C_HandleTransfer>

	while(LL_I2C_IsActiveFlag_TXIS(i2c) == 0)
 8002234:	46c0      	nop			; (mov r8, r8)
 8002236:	4b21      	ldr	r3, [pc, #132]	; (80022bc <i2c_reg_write+0xd8>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	0018      	movs	r0, r3
 800223c:	f7ff fec2 	bl	8001fc4 <LL_I2C_IsActiveFlag_TXIS>
 8002240:	1e03      	subs	r3, r0, #0
 8002242:	d0f8      	beq.n	8002236 <i2c_reg_write+0x52>
		;

	LL_I2C_TransmitData8(i2c, reg_addr);
 8002244:	4b1d      	ldr	r3, [pc, #116]	; (80022bc <i2c_reg_write+0xd8>)
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	230c      	movs	r3, #12
 800224a:	18fb      	adds	r3, r7, r3
 800224c:	881b      	ldrh	r3, [r3, #0]
 800224e:	b2db      	uxtb	r3, r3
 8002250:	0019      	movs	r1, r3
 8002252:	0010      	movs	r0, r2
 8002254:	f7ff ff39 	bl	80020ca <LL_I2C_TransmitData8>

	while(data_count > 0)
 8002258:	e018      	b.n	800228c <i2c_reg_write+0xa8>
	{
		while(LL_I2C_IsActiveFlag_TXIS(i2c) == 0)
 800225a:	46c0      	nop			; (mov r8, r8)
 800225c:	4b17      	ldr	r3, [pc, #92]	; (80022bc <i2c_reg_write+0xd8>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	0018      	movs	r0, r3
 8002262:	f7ff feaf 	bl	8001fc4 <LL_I2C_IsActiveFlag_TXIS>
 8002266:	1e03      	subs	r3, r0, #0
 8002268:	d0f8      	beq.n	800225c <i2c_reg_write+0x78>
			;

		LL_I2C_TransmitData8(i2c, *data_ptr);
 800226a:	4b14      	ldr	r3, [pc, #80]	; (80022bc <i2c_reg_write+0xd8>)
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	0019      	movs	r1, r3
 8002274:	0010      	movs	r0, r2
 8002276:	f7ff ff28 	bl	80020ca <LL_I2C_TransmitData8>

		data_ptr++;
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	3301      	adds	r3, #1
 800227e:	60bb      	str	r3, [r7, #8]
		data_count--;
 8002280:	2117      	movs	r1, #23
 8002282:	187b      	adds	r3, r7, r1
 8002284:	781a      	ldrb	r2, [r3, #0]
 8002286:	187b      	adds	r3, r7, r1
 8002288:	3a01      	subs	r2, #1
 800228a:	701a      	strb	r2, [r3, #0]
	while(data_count > 0)
 800228c:	2317      	movs	r3, #23
 800228e:	18fb      	adds	r3, r7, r3
 8002290:	781b      	ldrb	r3, [r3, #0]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d1e1      	bne.n	800225a <i2c_reg_write+0x76>
	}

	while(LL_I2C_IsActiveFlag_STOP(i2c) == 0)
 8002296:	46c0      	nop			; (mov r8, r8)
 8002298:	4b08      	ldr	r3, [pc, #32]	; (80022bc <i2c_reg_write+0xd8>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	0018      	movs	r0, r3
 800229e:	f7ff feb3 	bl	8002008 <LL_I2C_IsActiveFlag_STOP>
 80022a2:	1e03      	subs	r3, r0, #0
 80022a4:	d0f8      	beq.n	8002298 <i2c_reg_write+0xb4>
		;

	LL_I2C_ClearFlag_STOP(i2c);
 80022a6:	4b05      	ldr	r3, [pc, #20]	; (80022bc <i2c_reg_write+0xd8>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	0018      	movs	r0, r3
 80022ac:	f7ff fece 	bl	800204c <LL_I2C_ClearFlag_STOP>

	return 0;
 80022b0:	2300      	movs	r3, #0
}
 80022b2:	0018      	movs	r0, r3
 80022b4:	46bd      	mov	sp, r7
 80022b6:	b006      	add	sp, #24
 80022b8:	bdb0      	pop	{r4, r5, r7, pc}
 80022ba:	46c0      	nop			; (mov r8, r8)
 80022bc:	20000038 	.word	0x20000038
 80022c0:	80002000 	.word	0x80002000

080022c4 <i2c_reg_read>:

int32_t i2c_reg_read(uint16_t slave_addr, uint16_t reg_addr, uint8_t *read_data_ptr, uint16_t read_size)
{
 80022c4:	b5b0      	push	{r4, r5, r7, lr}
 80022c6:	b088      	sub	sp, #32
 80022c8:	af02      	add	r7, sp, #8
 80022ca:	0004      	movs	r4, r0
 80022cc:	0008      	movs	r0, r1
 80022ce:	60ba      	str	r2, [r7, #8]
 80022d0:	0019      	movs	r1, r3
 80022d2:	250e      	movs	r5, #14
 80022d4:	197b      	adds	r3, r7, r5
 80022d6:	1c22      	adds	r2, r4, #0
 80022d8:	801a      	strh	r2, [r3, #0]
 80022da:	230c      	movs	r3, #12
 80022dc:	18fb      	adds	r3, r7, r3
 80022de:	1c02      	adds	r2, r0, #0
 80022e0:	801a      	strh	r2, [r3, #0]
 80022e2:	1dbb      	adds	r3, r7, #6
 80022e4:	1c0a      	adds	r2, r1, #0
 80022e6:	801a      	strh	r2, [r3, #0]
	uint8_t read_data_count = read_size;
 80022e8:	2317      	movs	r3, #23
 80022ea:	18fb      	adds	r3, r7, r3
 80022ec:	1dba      	adds	r2, r7, #6
 80022ee:	8812      	ldrh	r2, [r2, #0]
 80022f0:	701a      	strb	r2, [r3, #0]

	LL_I2C_HandleTransfer(i2c, slave_addr, LL_I2C_ADDRSLAVE_7BIT, 1, LL_I2C_MODE_SOFTEND, LL_I2C_GENERATE_START_WRITE);
 80022f2:	4b34      	ldr	r3, [pc, #208]	; (80023c4 <i2c_reg_read+0x100>)
 80022f4:	6818      	ldr	r0, [r3, #0]
 80022f6:	197b      	adds	r3, r7, r5
 80022f8:	8819      	ldrh	r1, [r3, #0]
 80022fa:	4b33      	ldr	r3, [pc, #204]	; (80023c8 <i2c_reg_read+0x104>)
 80022fc:	9301      	str	r3, [sp, #4]
 80022fe:	2300      	movs	r3, #0
 8002300:	9300      	str	r3, [sp, #0]
 8002302:	2301      	movs	r3, #1
 8002304:	2200      	movs	r2, #0
 8002306:	f7ff feaf 	bl	8002068 <LL_I2C_HandleTransfer>

	while(LL_I2C_IsActiveFlag_TXIS(i2c) == 0)
 800230a:	46c0      	nop			; (mov r8, r8)
 800230c:	4b2d      	ldr	r3, [pc, #180]	; (80023c4 <i2c_reg_read+0x100>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	0018      	movs	r0, r3
 8002312:	f7ff fe57 	bl	8001fc4 <LL_I2C_IsActiveFlag_TXIS>
 8002316:	1e03      	subs	r3, r0, #0
 8002318:	d0f8      	beq.n	800230c <i2c_reg_read+0x48>
		;

	LL_I2C_TransmitData8(i2c, reg_addr);
 800231a:	4b2a      	ldr	r3, [pc, #168]	; (80023c4 <i2c_reg_read+0x100>)
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	230c      	movs	r3, #12
 8002320:	18fb      	adds	r3, r7, r3
 8002322:	881b      	ldrh	r3, [r3, #0]
 8002324:	b2db      	uxtb	r3, r3
 8002326:	0019      	movs	r1, r3
 8002328:	0010      	movs	r0, r2
 800232a:	f7ff fece 	bl	80020ca <LL_I2C_TransmitData8>

	while(LL_I2C_IsActiveFlag_TC(i2c) == 0)
 800232e:	46c0      	nop			; (mov r8, r8)
 8002330:	4b24      	ldr	r3, [pc, #144]	; (80023c4 <i2c_reg_read+0x100>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	0018      	movs	r0, r3
 8002336:	f7ff fe78 	bl	800202a <LL_I2C_IsActiveFlag_TC>
 800233a:	1e03      	subs	r3, r0, #0
 800233c:	d0f8      	beq.n	8002330 <i2c_reg_read+0x6c>
		;

	LL_I2C_HandleTransfer(i2c, slave_addr, LL_I2C_ADDRSLAVE_7BIT, (uint32_t)read_size, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_READ);
 800233e:	4b21      	ldr	r3, [pc, #132]	; (80023c4 <i2c_reg_read+0x100>)
 8002340:	6818      	ldr	r0, [r3, #0]
 8002342:	230e      	movs	r3, #14
 8002344:	18fb      	adds	r3, r7, r3
 8002346:	8819      	ldrh	r1, [r3, #0]
 8002348:	1dbb      	adds	r3, r7, #6
 800234a:	881a      	ldrh	r2, [r3, #0]
 800234c:	4b1f      	ldr	r3, [pc, #124]	; (80023cc <i2c_reg_read+0x108>)
 800234e:	9301      	str	r3, [sp, #4]
 8002350:	2380      	movs	r3, #128	; 0x80
 8002352:	049b      	lsls	r3, r3, #18
 8002354:	9300      	str	r3, [sp, #0]
 8002356:	0013      	movs	r3, r2
 8002358:	2200      	movs	r2, #0
 800235a:	f7ff fe85 	bl	8002068 <LL_I2C_HandleTransfer>

	while(read_data_count > 0)
 800235e:	e019      	b.n	8002394 <i2c_reg_read+0xd0>
	{
		while(LL_I2C_IsActiveFlag_RXNE(i2c) == 0)
 8002360:	46c0      	nop			; (mov r8, r8)
 8002362:	4b18      	ldr	r3, [pc, #96]	; (80023c4 <i2c_reg_read+0x100>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	0018      	movs	r0, r3
 8002368:	f7ff fe3d 	bl	8001fe6 <LL_I2C_IsActiveFlag_RXNE>
 800236c:	1e03      	subs	r3, r0, #0
 800236e:	d0f8      	beq.n	8002362 <i2c_reg_read+0x9e>
			;

		*read_data_ptr = LL_I2C_ReceiveData8(i2c);
 8002370:	4b14      	ldr	r3, [pc, #80]	; (80023c4 <i2c_reg_read+0x100>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	0018      	movs	r0, r3
 8002376:	f7ff fe9d 	bl	80020b4 <LL_I2C_ReceiveData8>
 800237a:	0003      	movs	r3, r0
 800237c:	001a      	movs	r2, r3
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	701a      	strb	r2, [r3, #0]

		read_data_ptr++;
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	3301      	adds	r3, #1
 8002386:	60bb      	str	r3, [r7, #8]
		read_data_count--;
 8002388:	2117      	movs	r1, #23
 800238a:	187b      	adds	r3, r7, r1
 800238c:	781a      	ldrb	r2, [r3, #0]
 800238e:	187b      	adds	r3, r7, r1
 8002390:	3a01      	subs	r2, #1
 8002392:	701a      	strb	r2, [r3, #0]
	while(read_data_count > 0)
 8002394:	2317      	movs	r3, #23
 8002396:	18fb      	adds	r3, r7, r3
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d1e0      	bne.n	8002360 <i2c_reg_read+0x9c>
	}

	while(LL_I2C_IsActiveFlag_STOP(i2c) == 0)
 800239e:	46c0      	nop			; (mov r8, r8)
 80023a0:	4b08      	ldr	r3, [pc, #32]	; (80023c4 <i2c_reg_read+0x100>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	0018      	movs	r0, r3
 80023a6:	f7ff fe2f 	bl	8002008 <LL_I2C_IsActiveFlag_STOP>
 80023aa:	1e03      	subs	r3, r0, #0
 80023ac:	d0f8      	beq.n	80023a0 <i2c_reg_read+0xdc>
		;

	LL_I2C_ClearFlag_STOP(i2c);
 80023ae:	4b05      	ldr	r3, [pc, #20]	; (80023c4 <i2c_reg_read+0x100>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	0018      	movs	r0, r3
 80023b4:	f7ff fe4a 	bl	800204c <LL_I2C_ClearFlag_STOP>

	return 0;
 80023b8:	2300      	movs	r3, #0
}
 80023ba:	0018      	movs	r0, r3
 80023bc:	46bd      	mov	sp, r7
 80023be:	b006      	add	sp, #24
 80023c0:	bdb0      	pop	{r4, r5, r7, pc}
 80023c2:	46c0      	nop			; (mov r8, r8)
 80023c4:	20000038 	.word	0x20000038
 80023c8:	80002000 	.word	0x80002000
 80023cc:	80002400 	.word	0x80002400

080023d0 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80023d4:	4b04      	ldr	r3, [pc, #16]	; (80023e8 <LL_RCC_HSI_Enable+0x18>)
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	4b03      	ldr	r3, [pc, #12]	; (80023e8 <LL_RCC_HSI_Enable+0x18>)
 80023da:	2180      	movs	r1, #128	; 0x80
 80023dc:	0049      	lsls	r1, r1, #1
 80023de:	430a      	orrs	r2, r1
 80023e0:	601a      	str	r2, [r3, #0]
}
 80023e2:	46c0      	nop			; (mov r8, r8)
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	40021000 	.word	0x40021000

080023ec <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80023f0:	4b07      	ldr	r3, [pc, #28]	; (8002410 <LL_RCC_HSI_IsReady+0x24>)
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	2380      	movs	r3, #128	; 0x80
 80023f6:	00db      	lsls	r3, r3, #3
 80023f8:	401a      	ands	r2, r3
 80023fa:	2380      	movs	r3, #128	; 0x80
 80023fc:	00db      	lsls	r3, r3, #3
 80023fe:	429a      	cmp	r2, r3
 8002400:	d101      	bne.n	8002406 <LL_RCC_HSI_IsReady+0x1a>
 8002402:	2301      	movs	r3, #1
 8002404:	e000      	b.n	8002408 <LL_RCC_HSI_IsReady+0x1c>
 8002406:	2300      	movs	r3, #0
}
 8002408:	0018      	movs	r0, r3
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	46c0      	nop			; (mov r8, r8)
 8002410:	40021000 	.word	0x40021000

08002414 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_LSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_LSE
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800241c:	4b06      	ldr	r3, [pc, #24]	; (8002438 <LL_RCC_SetSysClkSource+0x24>)
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	2207      	movs	r2, #7
 8002422:	4393      	bics	r3, r2
 8002424:	0019      	movs	r1, r3
 8002426:	4b04      	ldr	r3, [pc, #16]	; (8002438 <LL_RCC_SetSysClkSource+0x24>)
 8002428:	687a      	ldr	r2, [r7, #4]
 800242a:	430a      	orrs	r2, r1
 800242c:	609a      	str	r2, [r3, #8]
}
 800242e:	46c0      	nop			; (mov r8, r8)
 8002430:	46bd      	mov	sp, r7
 8002432:	b002      	add	sp, #8
 8002434:	bd80      	pop	{r7, pc}
 8002436:	46c0      	nop			; (mov r8, r8)
 8002438:	40021000 	.word	0x40021000

0800243c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_LSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002440:	4b03      	ldr	r3, [pc, #12]	; (8002450 <LL_RCC_GetSysClkSource+0x14>)
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	2238      	movs	r2, #56	; 0x38
 8002446:	4013      	ands	r3, r2
}
 8002448:	0018      	movs	r0, r3
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	46c0      	nop			; (mov r8, r8)
 8002450:	40021000 	.word	0x40021000

08002454 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b082      	sub	sp, #8
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800245c:	4b06      	ldr	r3, [pc, #24]	; (8002478 <LL_RCC_SetAHBPrescaler+0x24>)
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	4a06      	ldr	r2, [pc, #24]	; (800247c <LL_RCC_SetAHBPrescaler+0x28>)
 8002462:	4013      	ands	r3, r2
 8002464:	0019      	movs	r1, r3
 8002466:	4b04      	ldr	r3, [pc, #16]	; (8002478 <LL_RCC_SetAHBPrescaler+0x24>)
 8002468:	687a      	ldr	r2, [r7, #4]
 800246a:	430a      	orrs	r2, r1
 800246c:	609a      	str	r2, [r3, #8]
}
 800246e:	46c0      	nop			; (mov r8, r8)
 8002470:	46bd      	mov	sp, r7
 8002472:	b002      	add	sp, #8
 8002474:	bd80      	pop	{r7, pc}
 8002476:	46c0      	nop			; (mov r8, r8)
 8002478:	40021000 	.word	0x40021000
 800247c:	fffff0ff 	.word	0xfffff0ff

08002480 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, Prescaler);
 8002488:	4b06      	ldr	r3, [pc, #24]	; (80024a4 <LL_RCC_SetAPB1Prescaler+0x24>)
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	4a06      	ldr	r2, [pc, #24]	; (80024a8 <LL_RCC_SetAPB1Prescaler+0x28>)
 800248e:	4013      	ands	r3, r2
 8002490:	0019      	movs	r1, r3
 8002492:	4b04      	ldr	r3, [pc, #16]	; (80024a4 <LL_RCC_SetAPB1Prescaler+0x24>)
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	430a      	orrs	r2, r1
 8002498:	609a      	str	r2, [r3, #8]
}
 800249a:	46c0      	nop			; (mov r8, r8)
 800249c:	46bd      	mov	sp, r7
 800249e:	b002      	add	sp, #8
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	46c0      	nop			; (mov r8, r8)
 80024a4:	40021000 	.word	0x40021000
 80024a8:	ffff8fff 	.word	0xffff8fff

080024ac <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80024b0:	4b04      	ldr	r3, [pc, #16]	; (80024c4 <LL_RCC_PLL_Enable+0x18>)
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	4b03      	ldr	r3, [pc, #12]	; (80024c4 <LL_RCC_PLL_Enable+0x18>)
 80024b6:	2180      	movs	r1, #128	; 0x80
 80024b8:	0449      	lsls	r1, r1, #17
 80024ba:	430a      	orrs	r2, r1
 80024bc:	601a      	str	r2, [r3, #0]
}
 80024be:	46c0      	nop			; (mov r8, r8)
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	40021000 	.word	0x40021000

080024c8 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80024cc:	4b07      	ldr	r3, [pc, #28]	; (80024ec <LL_RCC_PLL_IsReady+0x24>)
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	2380      	movs	r3, #128	; 0x80
 80024d2:	049b      	lsls	r3, r3, #18
 80024d4:	401a      	ands	r2, r3
 80024d6:	2380      	movs	r3, #128	; 0x80
 80024d8:	049b      	lsls	r3, r3, #18
 80024da:	429a      	cmp	r2, r3
 80024dc:	d101      	bne.n	80024e2 <LL_RCC_PLL_IsReady+0x1a>
 80024de:	2301      	movs	r3, #1
 80024e0:	e000      	b.n	80024e4 <LL_RCC_PLL_IsReady+0x1c>
 80024e2:	2300      	movs	r3, #0
}
 80024e4:	0018      	movs	r0, r3
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	46c0      	nop			; (mov r8, r8)
 80024ec:	40021000 	.word	0x40021000

080024f0 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b084      	sub	sp, #16
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	60f8      	str	r0, [r7, #12]
 80024f8:	60b9      	str	r1, [r7, #8]
 80024fa:	607a      	str	r2, [r7, #4]
 80024fc:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 80024fe:	4b0a      	ldr	r3, [pc, #40]	; (8002528 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8002500:	68db      	ldr	r3, [r3, #12]
 8002502:	4a0a      	ldr	r2, [pc, #40]	; (800252c <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 8002504:	4013      	ands	r3, r2
 8002506:	0019      	movs	r1, r3
 8002508:	68fa      	ldr	r2, [r7, #12]
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	431a      	orrs	r2, r3
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	021b      	lsls	r3, r3, #8
 8002512:	431a      	orrs	r2, r3
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	431a      	orrs	r2, r3
 8002518:	4b03      	ldr	r3, [pc, #12]	; (8002528 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 800251a:	430a      	orrs	r2, r1
 800251c:	60da      	str	r2, [r3, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 800251e:	46c0      	nop			; (mov r8, r8)
 8002520:	46bd      	mov	sp, r7
 8002522:	b004      	add	sp, #16
 8002524:	bd80      	pop	{r7, pc}
 8002526:	46c0      	nop			; (mov r8, r8)
 8002528:	40021000 	.word	0x40021000
 800252c:	1fff808c 	.word	0x1fff808c

08002530 <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 8002534:	4b04      	ldr	r3, [pc, #16]	; (8002548 <LL_RCC_PLL_EnableDomain_SYS+0x18>)
 8002536:	68da      	ldr	r2, [r3, #12]
 8002538:	4b03      	ldr	r3, [pc, #12]	; (8002548 <LL_RCC_PLL_EnableDomain_SYS+0x18>)
 800253a:	2180      	movs	r1, #128	; 0x80
 800253c:	0549      	lsls	r1, r1, #21
 800253e:	430a      	orrs	r2, r1
 8002540:	60da      	str	r2, [r3, #12]
}
 8002542:	46c0      	nop			; (mov r8, r8)
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}
 8002548:	40021000 	.word	0x40021000

0800254c <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8002554:	4b06      	ldr	r3, [pc, #24]	; (8002570 <LL_FLASH_SetLatency+0x24>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	2207      	movs	r2, #7
 800255a:	4393      	bics	r3, r2
 800255c:	0019      	movs	r1, r3
 800255e:	4b04      	ldr	r3, [pc, #16]	; (8002570 <LL_FLASH_SetLatency+0x24>)
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	430a      	orrs	r2, r1
 8002564:	601a      	str	r2, [r3, #0]
}
 8002566:	46c0      	nop			; (mov r8, r8)
 8002568:	46bd      	mov	sp, r7
 800256a:	b002      	add	sp, #8
 800256c:	bd80      	pop	{r7, pc}
 800256e:	46c0      	nop			; (mov r8, r8)
 8002570:	40022000 	.word	0x40022000

08002574 <LL_SYSTICK_EnableIT>:
  * @brief  Enable SysTick exception request
  * @rmtoll STK_CTRL     TICKINT       LL_SYSTICK_EnableIT
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_EnableIT(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	af00      	add	r7, sp, #0
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002578:	4b04      	ldr	r3, [pc, #16]	; (800258c <LL_SYSTICK_EnableIT+0x18>)
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	4b03      	ldr	r3, [pc, #12]	; (800258c <LL_SYSTICK_EnableIT+0x18>)
 800257e:	2102      	movs	r1, #2
 8002580:	430a      	orrs	r2, r1
 8002582:	601a      	str	r2, [r3, #0]
}
 8002584:	46c0      	nop			; (mov r8, r8)
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
 800258a:	46c0      	nop			; (mov r8, r8)
 800258c:	e000e010 	.word	0xe000e010

08002590 <main>:

static float temperature = 0.0f;
static float humidity = 0.0f;

int main(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	af00      	add	r7, sp, #0
	rcc_init();
 8002594:	f000 f874 	bl	8002680 <rcc_init>

	io_ctx.BusType = HTS221_I2C_BUS;
 8002598:	4b2d      	ldr	r3, [pc, #180]	; (8002650 <main+0xc0>)
 800259a:	2200      	movs	r2, #0
 800259c:	609a      	str	r2, [r3, #8]
	io_ctx.Address = HTS221_I2C_ADDRESS;
 800259e:	4b2c      	ldr	r3, [pc, #176]	; (8002650 <main+0xc0>)
 80025a0:	22bf      	movs	r2, #191	; 0xbf
 80025a2:	731a      	strb	r2, [r3, #12]
	io_ctx.Init = i2c_init;
 80025a4:	4b2a      	ldr	r3, [pc, #168]	; (8002650 <main+0xc0>)
 80025a6:	4a2b      	ldr	r2, [pc, #172]	; (8002654 <main+0xc4>)
 80025a8:	601a      	str	r2, [r3, #0]
	io_ctx.ReadReg = i2c_reg_read;
 80025aa:	4b29      	ldr	r3, [pc, #164]	; (8002650 <main+0xc0>)
 80025ac:	4a2a      	ldr	r2, [pc, #168]	; (8002658 <main+0xc8>)
 80025ae:	615a      	str	r2, [r3, #20]
	io_ctx.WriteReg = i2c_reg_write;
 80025b0:	4b27      	ldr	r3, [pc, #156]	; (8002650 <main+0xc0>)
 80025b2:	4a2a      	ldr	r2, [pc, #168]	; (800265c <main+0xcc>)
 80025b4:	611a      	str	r2, [r3, #16]

	HTS221_RegisterBusIO(&hts221_obj, &io_ctx);
 80025b6:	4a26      	ldr	r2, [pc, #152]	; (8002650 <main+0xc0>)
 80025b8:	4b29      	ldr	r3, [pc, #164]	; (8002660 <main+0xd0>)
 80025ba:	0011      	movs	r1, r2
 80025bc:	0018      	movs	r0, r3
 80025be:	f7fe fd45 	bl	800104c <HTS221_RegisterBusIO>
	HTS221_COMMON_Driver.Init(&hts221_obj);
 80025c2:	4b28      	ldr	r3, [pc, #160]	; (8002664 <main+0xd4>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a26      	ldr	r2, [pc, #152]	; (8002660 <main+0xd0>)
 80025c8:	0010      	movs	r0, r2
 80025ca:	4798      	blx	r3

	HTS221_COMMON_Driver.ReadID(&hts221_obj, &id);
 80025cc:	4b25      	ldr	r3, [pc, #148]	; (8002664 <main+0xd4>)
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	4925      	ldr	r1, [pc, #148]	; (8002668 <main+0xd8>)
 80025d2:	4a23      	ldr	r2, [pc, #140]	; (8002660 <main+0xd0>)
 80025d4:	0010      	movs	r0, r2
 80025d6:	4798      	blx	r3

	HTS221_TEMP_Driver.Enable(&hts221_obj);
 80025d8:	4b24      	ldr	r3, [pc, #144]	; (800266c <main+0xdc>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a20      	ldr	r2, [pc, #128]	; (8002660 <main+0xd0>)
 80025de:	0010      	movs	r0, r2
 80025e0:	4798      	blx	r3
	HTS221_TEMP_Driver.SetOutputDataRate(&hts221_obj, 1.0f);
 80025e2:	4b22      	ldr	r3, [pc, #136]	; (800266c <main+0xdc>)
 80025e4:	68db      	ldr	r3, [r3, #12]
 80025e6:	21fe      	movs	r1, #254	; 0xfe
 80025e8:	0589      	lsls	r1, r1, #22
 80025ea:	4a1d      	ldr	r2, [pc, #116]	; (8002660 <main+0xd0>)
 80025ec:	0010      	movs	r0, r2
 80025ee:	4798      	blx	r3

	HTS221_HUM_Driver.Enable(&hts221_obj);
 80025f0:	4b1f      	ldr	r3, [pc, #124]	; (8002670 <main+0xe0>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a1a      	ldr	r2, [pc, #104]	; (8002660 <main+0xd0>)
 80025f6:	0010      	movs	r0, r2
 80025f8:	4798      	blx	r3
	HTS221_HUM_Driver.SetOutputDataRate(&hts221_obj, 1.0f);
 80025fa:	4b1d      	ldr	r3, [pc, #116]	; (8002670 <main+0xe0>)
 80025fc:	68db      	ldr	r3, [r3, #12]
 80025fe:	21fe      	movs	r1, #254	; 0xfe
 8002600:	0589      	lsls	r1, r1, #22
 8002602:	4a17      	ldr	r2, [pc, #92]	; (8002660 <main+0xd0>)
 8002604:	0010      	movs	r0, r2
 8002606:	4798      	blx	r3

	software_timer_task_init(&i2c_timer, I2C_TASK_TIME);
 8002608:	23fa      	movs	r3, #250	; 0xfa
 800260a:	009a      	lsls	r2, r3, #2
 800260c:	4b19      	ldr	r3, [pc, #100]	; (8002674 <main+0xe4>)
 800260e:	0011      	movs	r1, r2
 8002610:	0018      	movs	r0, r3
 8002612:	f000 f871 	bl	80026f8 <software_timer_task_init>

	while (1)
	{
		  if((software_timer_get_ms_tick() - i2c_timer.ms_tick) >= i2c_timer.task_time)
 8002616:	f000 f88d 	bl	8002734 <software_timer_get_ms_tick>
 800261a:	0002      	movs	r2, r0
 800261c:	4b15      	ldr	r3, [pc, #84]	; (8002674 <main+0xe4>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	1ad2      	subs	r2, r2, r3
 8002622:	4b14      	ldr	r3, [pc, #80]	; (8002674 <main+0xe4>)
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	429a      	cmp	r2, r3
 8002628:	d3f5      	bcc.n	8002616 <main+0x86>
		  {
			  	i2c_timer.ms_tick = software_timer_get_ms_tick();
 800262a:	f000 f883 	bl	8002734 <software_timer_get_ms_tick>
 800262e:	0002      	movs	r2, r0
 8002630:	4b10      	ldr	r3, [pc, #64]	; (8002674 <main+0xe4>)
 8002632:	601a      	str	r2, [r3, #0]

			  	HTS221_TEMP_Driver.GetTemperature(&hts221_obj, &temperature);
 8002634:	4b0d      	ldr	r3, [pc, #52]	; (800266c <main+0xdc>)
 8002636:	691b      	ldr	r3, [r3, #16]
 8002638:	490f      	ldr	r1, [pc, #60]	; (8002678 <main+0xe8>)
 800263a:	4a09      	ldr	r2, [pc, #36]	; (8002660 <main+0xd0>)
 800263c:	0010      	movs	r0, r2
 800263e:	4798      	blx	r3
			  	HTS221_HUM_Driver.GetHumidity(&hts221_obj, &humidity);
 8002640:	4b0b      	ldr	r3, [pc, #44]	; (8002670 <main+0xe0>)
 8002642:	691b      	ldr	r3, [r3, #16]
 8002644:	490d      	ldr	r1, [pc, #52]	; (800267c <main+0xec>)
 8002646:	4a06      	ldr	r2, [pc, #24]	; (8002660 <main+0xd0>)
 8002648:	0010      	movs	r0, r2
 800264a:	4798      	blx	r3
		  if((software_timer_get_ms_tick() - i2c_timer.ms_tick) >= i2c_timer.task_time)
 800264c:	e7e3      	b.n	8002616 <main+0x86>
 800264e:	46c0      	nop			; (mov r8, r8)
 8002650:	2000008c 	.word	0x2000008c
 8002654:	080020e9 	.word	0x080020e9
 8002658:	080022c5 	.word	0x080022c5
 800265c:	080021e5 	.word	0x080021e5
 8002660:	20000060 	.word	0x20000060
 8002664:	20000000 	.word	0x20000000
 8002668:	2000005c 	.word	0x2000005c
 800266c:	20000024 	.word	0x20000024
 8002670:	20000010 	.word	0x20000010
 8002674:	200000a8 	.word	0x200000a8
 8002678:	200000b0 	.word	0x200000b0
 800267c:	200000b4 	.word	0x200000b4

08002680 <rcc_init>:
		  }
	}
}

void rcc_init(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	af00      	add	r7, sp, #0
	LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 8002684:	2002      	movs	r0, #2
 8002686:	f7ff ff61 	bl	800254c <LL_FLASH_SetLatency>

	LL_RCC_HSI_Enable();
 800268a:	f7ff fea1 	bl	80023d0 <LL_RCC_HSI_Enable>
	while(LL_RCC_HSI_IsReady() != 1)
 800268e:	46c0      	nop			; (mov r8, r8)
 8002690:	f7ff feac 	bl	80023ec <LL_RCC_HSI_IsReady>
 8002694:	0003      	movs	r3, r0
 8002696:	2b01      	cmp	r3, #1
 8002698:	d1fa      	bne.n	8002690 <rcc_init+0x10>
		;

	LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_1, 8, LL_RCC_PLLR_DIV_2);
 800269a:	2380      	movs	r3, #128	; 0x80
 800269c:	059b      	lsls	r3, r3, #22
 800269e:	2208      	movs	r2, #8
 80026a0:	2100      	movs	r1, #0
 80026a2:	2002      	movs	r0, #2
 80026a4:	f7ff ff24 	bl	80024f0 <LL_RCC_PLL_ConfigDomain_SYS>

	LL_RCC_PLL_Enable();
 80026a8:	f7ff ff00 	bl	80024ac <LL_RCC_PLL_Enable>
	while(LL_RCC_PLL_IsReady() != 1)
 80026ac:	46c0      	nop			; (mov r8, r8)
 80026ae:	f7ff ff0b 	bl	80024c8 <LL_RCC_PLL_IsReady>
 80026b2:	0003      	movs	r3, r0
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d1fa      	bne.n	80026ae <rcc_init+0x2e>
		;

	LL_RCC_PLL_EnableDomain_SYS();
 80026b8:	f7ff ff3a 	bl	8002530 <LL_RCC_PLL_EnableDomain_SYS>

	LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80026bc:	2000      	movs	r0, #0
 80026be:	f7ff fec9 	bl	8002454 <LL_RCC_SetAHBPrescaler>
	LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 80026c2:	2000      	movs	r0, #0
 80026c4:	f7ff fedc 	bl	8002480 <LL_RCC_SetAPB1Prescaler>

	LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 80026c8:	2002      	movs	r0, #2
 80026ca:	f7ff fea3 	bl	8002414 <LL_RCC_SetSysClkSource>
	while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80026ce:	46c0      	nop			; (mov r8, r8)
 80026d0:	f7ff feb4 	bl	800243c <LL_RCC_GetSysClkSource>
 80026d4:	0003      	movs	r3, r0
 80026d6:	2b10      	cmp	r3, #16
 80026d8:	d1fa      	bne.n	80026d0 <rcc_init+0x50>
		;

	LL_SetSystemCoreClock(64000000);
 80026da:	4b06      	ldr	r3, [pc, #24]	; (80026f4 <rcc_init+0x74>)
 80026dc:	0018      	movs	r0, r3
 80026de:	f7fe fca7 	bl	8001030 <LL_SetSystemCoreClock>
	LL_Init1msTick(64000000);
 80026e2:	4b04      	ldr	r3, [pc, #16]	; (80026f4 <rcc_init+0x74>)
 80026e4:	0018      	movs	r0, r3
 80026e6:	f7fe fc93 	bl	8001010 <LL_Init1msTick>
	LL_SYSTICK_EnableIT();
 80026ea:	f7ff ff43 	bl	8002574 <LL_SYSTICK_EnableIT>
}
 80026ee:	46c0      	nop			; (mov r8, r8)
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	03d09000 	.word	0x03d09000

080026f8 <software_timer_task_init>:

static uint32_t ms_tick = 0;
software_timer_t timer = {0};

void software_timer_task_init(software_timer_t *timer, uint32_t time)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
 8002700:	6039      	str	r1, [r7, #0]
	timer->ms_tick = software_timer_get_ms_tick();
 8002702:	f000 f817 	bl	8002734 <software_timer_get_ms_tick>
 8002706:	0002      	movs	r2, r0
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	601a      	str	r2, [r3, #0]
	timer->task_time = time;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	683a      	ldr	r2, [r7, #0]
 8002710:	605a      	str	r2, [r3, #4]
}
 8002712:	46c0      	nop			; (mov r8, r8)
 8002714:	46bd      	mov	sp, r7
 8002716:	b002      	add	sp, #8
 8002718:	bd80      	pop	{r7, pc}
	...

0800271c <software_timer_inc_ms_tick>:

void software_timer_inc_ms_tick(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	af00      	add	r7, sp, #0
	ms_tick++;
 8002720:	4b03      	ldr	r3, [pc, #12]	; (8002730 <software_timer_inc_ms_tick+0x14>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	1c5a      	adds	r2, r3, #1
 8002726:	4b02      	ldr	r3, [pc, #8]	; (8002730 <software_timer_inc_ms_tick+0x14>)
 8002728:	601a      	str	r2, [r3, #0]
}
 800272a:	46c0      	nop			; (mov r8, r8)
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}
 8002730:	200000b8 	.word	0x200000b8

08002734 <software_timer_get_ms_tick>:

uint32_t software_timer_get_ms_tick(void)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	af00      	add	r7, sp, #0
	return ms_tick;
 8002738:	4b02      	ldr	r3, [pc, #8]	; (8002744 <software_timer_get_ms_tick+0x10>)
 800273a:	681b      	ldr	r3, [r3, #0]
}
 800273c:	0018      	movs	r0, r3
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
 8002742:	46c0      	nop			; (mov r8, r8)
 8002744:	200000b8 	.word	0x200000b8

08002748 <SysTick_Handler>:
 */

#include "main.h"

void SysTick_Handler(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	af00      	add	r7, sp, #0
	software_timer_inc_ms_tick();
 800274c:	f7ff ffe6 	bl	800271c <software_timer_inc_ms_tick>
}
 8002750:	46c0      	nop			; (mov r8, r8)
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}

08002756 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002756:	b580      	push	{r7, lr}
 8002758:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800275a:	46c0      	nop			; (mov r8, r8)
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}

08002760 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002760:	480d      	ldr	r0, [pc, #52]	; (8002798 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002762:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002764:	f7ff fff7 	bl	8002756 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002768:	480c      	ldr	r0, [pc, #48]	; (800279c <LoopForever+0x6>)
  ldr r1, =_edata
 800276a:	490d      	ldr	r1, [pc, #52]	; (80027a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800276c:	4a0d      	ldr	r2, [pc, #52]	; (80027a4 <LoopForever+0xe>)
  movs r3, #0
 800276e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002770:	e002      	b.n	8002778 <LoopCopyDataInit>

08002772 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002772:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002774:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002776:	3304      	adds	r3, #4

08002778 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002778:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800277a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800277c:	d3f9      	bcc.n	8002772 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800277e:	4a0a      	ldr	r2, [pc, #40]	; (80027a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002780:	4c0a      	ldr	r4, [pc, #40]	; (80027ac <LoopForever+0x16>)
  movs r3, #0
 8002782:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002784:	e001      	b.n	800278a <LoopFillZerobss>

08002786 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002786:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002788:	3204      	adds	r2, #4

0800278a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800278a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800278c:	d3fb      	bcc.n	8002786 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800278e:	f000 f811 	bl	80027b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002792:	f7ff fefd 	bl	8002590 <main>

08002796 <LoopForever>:

LoopForever:
    b LoopForever
 8002796:	e7fe      	b.n	8002796 <LoopForever>
  ldr   r0, =_estack
 8002798:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 800279c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027a0:	20000040 	.word	0x20000040
  ldr r2, =_sidata
 80027a4:	080028dc 	.word	0x080028dc
  ldr r2, =_sbss
 80027a8:	20000040 	.word	0x20000040
  ldr r4, =_ebss
 80027ac:	200000bc 	.word	0x200000bc

080027b0 <ADC_COMP_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80027b0:	e7fe      	b.n	80027b0 <ADC_COMP_IRQHandler>
	...

080027b4 <__libc_init_array>:
 80027b4:	b570      	push	{r4, r5, r6, lr}
 80027b6:	2600      	movs	r6, #0
 80027b8:	4d0c      	ldr	r5, [pc, #48]	; (80027ec <__libc_init_array+0x38>)
 80027ba:	4c0d      	ldr	r4, [pc, #52]	; (80027f0 <__libc_init_array+0x3c>)
 80027bc:	1b64      	subs	r4, r4, r5
 80027be:	10a4      	asrs	r4, r4, #2
 80027c0:	42a6      	cmp	r6, r4
 80027c2:	d109      	bne.n	80027d8 <__libc_init_array+0x24>
 80027c4:	2600      	movs	r6, #0
 80027c6:	f000 f819 	bl	80027fc <_init>
 80027ca:	4d0a      	ldr	r5, [pc, #40]	; (80027f4 <__libc_init_array+0x40>)
 80027cc:	4c0a      	ldr	r4, [pc, #40]	; (80027f8 <__libc_init_array+0x44>)
 80027ce:	1b64      	subs	r4, r4, r5
 80027d0:	10a4      	asrs	r4, r4, #2
 80027d2:	42a6      	cmp	r6, r4
 80027d4:	d105      	bne.n	80027e2 <__libc_init_array+0x2e>
 80027d6:	bd70      	pop	{r4, r5, r6, pc}
 80027d8:	00b3      	lsls	r3, r6, #2
 80027da:	58eb      	ldr	r3, [r5, r3]
 80027dc:	4798      	blx	r3
 80027de:	3601      	adds	r6, #1
 80027e0:	e7ee      	b.n	80027c0 <__libc_init_array+0xc>
 80027e2:	00b3      	lsls	r3, r6, #2
 80027e4:	58eb      	ldr	r3, [r5, r3]
 80027e6:	4798      	blx	r3
 80027e8:	3601      	adds	r6, #1
 80027ea:	e7f2      	b.n	80027d2 <__libc_init_array+0x1e>
 80027ec:	080028d4 	.word	0x080028d4
 80027f0:	080028d4 	.word	0x080028d4
 80027f4:	080028d4 	.word	0x080028d4
 80027f8:	080028d8 	.word	0x080028d8

080027fc <_init>:
 80027fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027fe:	46c0      	nop			; (mov r8, r8)
 8002800:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002802:	bc08      	pop	{r3}
 8002804:	469e      	mov	lr, r3
 8002806:	4770      	bx	lr

08002808 <_fini>:
 8002808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800280a:	46c0      	nop			; (mov r8, r8)
 800280c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800280e:	bc08      	pop	{r3}
 8002810:	469e      	mov	lr, r3
 8002812:	4770      	bx	lr
