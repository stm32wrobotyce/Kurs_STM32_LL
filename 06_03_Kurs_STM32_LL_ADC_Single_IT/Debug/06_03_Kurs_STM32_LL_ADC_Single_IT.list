
06_03_Kurs_STM32_LL_ADC_Single_IT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000bf8  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000cb4  08000cb4  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000cb4  08000cb4  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000cb4  08000cb4  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000cb4  08000cb4  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000cb4  08000cb4  00010cb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000cb8  08000cb8  00010cb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000cbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000028  20000004  08000cc0  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08000cc0  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002417  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000008ba  00000000  00000000  00022443  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000308  00000000  00000000  00022d00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000002a0  00000000  00000000  00023008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000100b2  00000000  00000000  000232a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002d64  00000000  00000000  0003335a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00060629  00000000  00000000  000360be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000966e7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000098c  00000000  00000000  00096738  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000004 	.word	0x20000004
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08000c9c 	.word	0x08000c9c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000008 	.word	0x20000008
 8000100:	08000c9c 	.word	0x08000c9c

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
 8000222:	6078      	str	r0, [r7, #4]
 8000224:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8000226:	6839      	ldr	r1, [r7, #0]
 8000228:	6878      	ldr	r0, [r7, #4]
 800022a:	f7ff ff6b 	bl	8000104 <__udivsi3>
 800022e:	0003      	movs	r3, r0
 8000230:	001a      	movs	r2, r3
 8000232:	4b06      	ldr	r3, [pc, #24]	; (800024c <LL_InitTick+0x30>)
 8000234:	3a01      	subs	r2, #1
 8000236:	605a      	str	r2, [r3, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8000238:	4b04      	ldr	r3, [pc, #16]	; (800024c <LL_InitTick+0x30>)
 800023a:	2200      	movs	r2, #0
 800023c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800023e:	4b03      	ldr	r3, [pc, #12]	; (800024c <LL_InitTick+0x30>)
 8000240:	2205      	movs	r2, #5
 8000242:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8000244:	46c0      	nop			; (mov r8, r8)
 8000246:	46bd      	mov	sp, r7
 8000248:	b002      	add	sp, #8
 800024a:	bd80      	pop	{r7, pc}
 800024c:	e000e010 	.word	0xe000e010

08000250 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b082      	sub	sp, #8
 8000254:	af00      	add	r7, sp, #0
 8000256:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8000258:	23fa      	movs	r3, #250	; 0xfa
 800025a:	009a      	lsls	r2, r3, #2
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	0011      	movs	r1, r2
 8000260:	0018      	movs	r0, r3
 8000262:	f7ff ffdb 	bl	800021c <LL_InitTick>
}
 8000266:	46c0      	nop			; (mov r8, r8)
 8000268:	46bd      	mov	sp, r7
 800026a:	b002      	add	sp, #8
 800026c:	bd80      	pop	{r7, pc}
	...

08000270 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b084      	sub	sp, #16
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8000278:	4b0e      	ldr	r3, [pc, #56]	; (80002b4 <LL_mDelay+0x44>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	60bb      	str	r3, [r7, #8]
   uint32_t tmpDelay; /* MISRAC2012-Rule-17.8 */
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 800027e:	68bb      	ldr	r3, [r7, #8]
  tmpDelay  = Delay;
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	60fb      	str	r3, [r7, #12]
  /* Add a period to guaranty minimum wait */
  if (tmpDelay  < LL_MAX_DELAY)
 8000284:	68fb      	ldr	r3, [r7, #12]
 8000286:	3301      	adds	r3, #1
 8000288:	d00c      	beq.n	80002a4 <LL_mDelay+0x34>
  {
    tmpDelay ++;
 800028a:	68fb      	ldr	r3, [r7, #12]
 800028c:	3301      	adds	r3, #1
 800028e:	60fb      	str	r3, [r7, #12]
  }

  while (tmpDelay  != 0U)
 8000290:	e008      	b.n	80002a4 <LL_mDelay+0x34>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8000292:	4b08      	ldr	r3, [pc, #32]	; (80002b4 <LL_mDelay+0x44>)
 8000294:	681a      	ldr	r2, [r3, #0]
 8000296:	2380      	movs	r3, #128	; 0x80
 8000298:	025b      	lsls	r3, r3, #9
 800029a:	4013      	ands	r3, r2
 800029c:	d002      	beq.n	80002a4 <LL_mDelay+0x34>
    {
      tmpDelay --;
 800029e:	68fb      	ldr	r3, [r7, #12]
 80002a0:	3b01      	subs	r3, #1
 80002a2:	60fb      	str	r3, [r7, #12]
  while (tmpDelay  != 0U)
 80002a4:	68fb      	ldr	r3, [r7, #12]
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d1f3      	bne.n	8000292 <LL_mDelay+0x22>
    }
  }
}
 80002aa:	46c0      	nop			; (mov r8, r8)
 80002ac:	46c0      	nop			; (mov r8, r8)
 80002ae:	46bd      	mov	sp, r7
 80002b0:	b004      	add	sp, #16
 80002b2:	bd80      	pop	{r7, pc}
 80002b4:	e000e010 	.word	0xe000e010

080002b8 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b082      	sub	sp, #8
 80002bc:	af00      	add	r7, sp, #0
 80002be:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80002c0:	4b03      	ldr	r3, [pc, #12]	; (80002d0 <LL_SetSystemCoreClock+0x18>)
 80002c2:	687a      	ldr	r2, [r7, #4]
 80002c4:	601a      	str	r2, [r3, #0]
}
 80002c6:	46c0      	nop			; (mov r8, r8)
 80002c8:	46bd      	mov	sp, r7
 80002ca:	b002      	add	sp, #8
 80002cc:	bd80      	pop	{r7, pc}
 80002ce:	46c0      	nop			; (mov r8, r8)
 80002d0:	20000000 	.word	0x20000000

080002d4 <LL_ADC_REG_ReadConversionData12>:
  * @rmtoll DR       DATA           LL_ADC_REG_ReadConversionData12
  * @param  ADCx ADC instance
  * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
  */
__STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData12(ADC_TypeDef *ADCx)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b082      	sub	sp, #8
 80002d8:	af00      	add	r7, sp, #0
 80002da:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80002e0:	b29b      	uxth	r3, r3
}
 80002e2:	0018      	movs	r0, r3
 80002e4:	46bd      	mov	sp, r7
 80002e6:	b002      	add	sp, #8
 80002e8:	bd80      	pop	{r7, pc}
	...

080002ec <adc_conversion_complete_callback>:

uint32_t adc_data = 0;
uint32_t voltage_mv = 0;

void adc_conversion_complete_callback(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
	  adc_data = LL_ADC_REG_ReadConversionData12(ADC1);
 80002f0:	4b0b      	ldr	r3, [pc, #44]	; (8000320 <adc_conversion_complete_callback+0x34>)
 80002f2:	0018      	movs	r0, r3
 80002f4:	f7ff ffee 	bl	80002d4 <LL_ADC_REG_ReadConversionData12>
 80002f8:	0003      	movs	r3, r0
 80002fa:	001a      	movs	r2, r3
 80002fc:	4b09      	ldr	r3, [pc, #36]	; (8000324 <adc_conversion_complete_callback+0x38>)
 80002fe:	601a      	str	r2, [r3, #0]

	  voltage_mv = CONVERT_ADC_TO_MV(adc_data);
 8000300:	4b08      	ldr	r3, [pc, #32]	; (8000324 <adc_conversion_complete_callback+0x38>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	4a08      	ldr	r2, [pc, #32]	; (8000328 <adc_conversion_complete_callback+0x3c>)
 8000306:	4353      	muls	r3, r2
 8000308:	4908      	ldr	r1, [pc, #32]	; (800032c <adc_conversion_complete_callback+0x40>)
 800030a:	0018      	movs	r0, r3
 800030c:	f7ff fefa 	bl	8000104 <__udivsi3>
 8000310:	0003      	movs	r3, r0
 8000312:	001a      	movs	r2, r3
 8000314:	4b06      	ldr	r3, [pc, #24]	; (8000330 <adc_conversion_complete_callback+0x44>)
 8000316:	601a      	str	r2, [r3, #0]
}
 8000318:	46c0      	nop			; (mov r8, r8)
 800031a:	46bd      	mov	sp, r7
 800031c:	bd80      	pop	{r7, pc}
 800031e:	46c0      	nop			; (mov r8, r8)
 8000320:	40012400 	.word	0x40012400
 8000324:	20000020 	.word	0x20000020
 8000328:	00000ce4 	.word	0x00000ce4
 800032c:	00000fff 	.word	0x00000fff
 8000330:	20000024 	.word	0x20000024

08000334 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b082      	sub	sp, #8
 8000338:	af00      	add	r7, sp, #0
 800033a:	0002      	movs	r2, r0
 800033c:	1dfb      	adds	r3, r7, #7
 800033e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000340:	1dfb      	adds	r3, r7, #7
 8000342:	781b      	ldrb	r3, [r3, #0]
 8000344:	2b7f      	cmp	r3, #127	; 0x7f
 8000346:	d809      	bhi.n	800035c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000348:	1dfb      	adds	r3, r7, #7
 800034a:	781b      	ldrb	r3, [r3, #0]
 800034c:	001a      	movs	r2, r3
 800034e:	231f      	movs	r3, #31
 8000350:	401a      	ands	r2, r3
 8000352:	4b04      	ldr	r3, [pc, #16]	; (8000364 <__NVIC_EnableIRQ+0x30>)
 8000354:	2101      	movs	r1, #1
 8000356:	4091      	lsls	r1, r2
 8000358:	000a      	movs	r2, r1
 800035a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 800035c:	46c0      	nop			; (mov r8, r8)
 800035e:	46bd      	mov	sp, r7
 8000360:	b002      	add	sp, #8
 8000362:	bd80      	pop	{r7, pc}
 8000364:	e000e100 	.word	0xe000e100

08000368 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000368:	b590      	push	{r4, r7, lr}
 800036a:	b083      	sub	sp, #12
 800036c:	af00      	add	r7, sp, #0
 800036e:	0002      	movs	r2, r0
 8000370:	6039      	str	r1, [r7, #0]
 8000372:	1dfb      	adds	r3, r7, #7
 8000374:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000376:	1dfb      	adds	r3, r7, #7
 8000378:	781b      	ldrb	r3, [r3, #0]
 800037a:	2b7f      	cmp	r3, #127	; 0x7f
 800037c:	d828      	bhi.n	80003d0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800037e:	4a2f      	ldr	r2, [pc, #188]	; (800043c <__NVIC_SetPriority+0xd4>)
 8000380:	1dfb      	adds	r3, r7, #7
 8000382:	781b      	ldrb	r3, [r3, #0]
 8000384:	b25b      	sxtb	r3, r3
 8000386:	089b      	lsrs	r3, r3, #2
 8000388:	33c0      	adds	r3, #192	; 0xc0
 800038a:	009b      	lsls	r3, r3, #2
 800038c:	589b      	ldr	r3, [r3, r2]
 800038e:	1dfa      	adds	r2, r7, #7
 8000390:	7812      	ldrb	r2, [r2, #0]
 8000392:	0011      	movs	r1, r2
 8000394:	2203      	movs	r2, #3
 8000396:	400a      	ands	r2, r1
 8000398:	00d2      	lsls	r2, r2, #3
 800039a:	21ff      	movs	r1, #255	; 0xff
 800039c:	4091      	lsls	r1, r2
 800039e:	000a      	movs	r2, r1
 80003a0:	43d2      	mvns	r2, r2
 80003a2:	401a      	ands	r2, r3
 80003a4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80003a6:	683b      	ldr	r3, [r7, #0]
 80003a8:	019b      	lsls	r3, r3, #6
 80003aa:	22ff      	movs	r2, #255	; 0xff
 80003ac:	401a      	ands	r2, r3
 80003ae:	1dfb      	adds	r3, r7, #7
 80003b0:	781b      	ldrb	r3, [r3, #0]
 80003b2:	0018      	movs	r0, r3
 80003b4:	2303      	movs	r3, #3
 80003b6:	4003      	ands	r3, r0
 80003b8:	00db      	lsls	r3, r3, #3
 80003ba:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80003bc:	481f      	ldr	r0, [pc, #124]	; (800043c <__NVIC_SetPriority+0xd4>)
 80003be:	1dfb      	adds	r3, r7, #7
 80003c0:	781b      	ldrb	r3, [r3, #0]
 80003c2:	b25b      	sxtb	r3, r3
 80003c4:	089b      	lsrs	r3, r3, #2
 80003c6:	430a      	orrs	r2, r1
 80003c8:	33c0      	adds	r3, #192	; 0xc0
 80003ca:	009b      	lsls	r3, r3, #2
 80003cc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80003ce:	e031      	b.n	8000434 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80003d0:	4a1b      	ldr	r2, [pc, #108]	; (8000440 <__NVIC_SetPriority+0xd8>)
 80003d2:	1dfb      	adds	r3, r7, #7
 80003d4:	781b      	ldrb	r3, [r3, #0]
 80003d6:	0019      	movs	r1, r3
 80003d8:	230f      	movs	r3, #15
 80003da:	400b      	ands	r3, r1
 80003dc:	3b08      	subs	r3, #8
 80003de:	089b      	lsrs	r3, r3, #2
 80003e0:	3306      	adds	r3, #6
 80003e2:	009b      	lsls	r3, r3, #2
 80003e4:	18d3      	adds	r3, r2, r3
 80003e6:	3304      	adds	r3, #4
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	1dfa      	adds	r2, r7, #7
 80003ec:	7812      	ldrb	r2, [r2, #0]
 80003ee:	0011      	movs	r1, r2
 80003f0:	2203      	movs	r2, #3
 80003f2:	400a      	ands	r2, r1
 80003f4:	00d2      	lsls	r2, r2, #3
 80003f6:	21ff      	movs	r1, #255	; 0xff
 80003f8:	4091      	lsls	r1, r2
 80003fa:	000a      	movs	r2, r1
 80003fc:	43d2      	mvns	r2, r2
 80003fe:	401a      	ands	r2, r3
 8000400:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000402:	683b      	ldr	r3, [r7, #0]
 8000404:	019b      	lsls	r3, r3, #6
 8000406:	22ff      	movs	r2, #255	; 0xff
 8000408:	401a      	ands	r2, r3
 800040a:	1dfb      	adds	r3, r7, #7
 800040c:	781b      	ldrb	r3, [r3, #0]
 800040e:	0018      	movs	r0, r3
 8000410:	2303      	movs	r3, #3
 8000412:	4003      	ands	r3, r0
 8000414:	00db      	lsls	r3, r3, #3
 8000416:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000418:	4809      	ldr	r0, [pc, #36]	; (8000440 <__NVIC_SetPriority+0xd8>)
 800041a:	1dfb      	adds	r3, r7, #7
 800041c:	781b      	ldrb	r3, [r3, #0]
 800041e:	001c      	movs	r4, r3
 8000420:	230f      	movs	r3, #15
 8000422:	4023      	ands	r3, r4
 8000424:	3b08      	subs	r3, #8
 8000426:	089b      	lsrs	r3, r3, #2
 8000428:	430a      	orrs	r2, r1
 800042a:	3306      	adds	r3, #6
 800042c:	009b      	lsls	r3, r3, #2
 800042e:	18c3      	adds	r3, r0, r3
 8000430:	3304      	adds	r3, #4
 8000432:	601a      	str	r2, [r3, #0]
}
 8000434:	46c0      	nop			; (mov r8, r8)
 8000436:	46bd      	mov	sp, r7
 8000438:	b003      	add	sp, #12
 800043a:	bd90      	pop	{r4, r7, pc}
 800043c:	e000e100 	.word	0xe000e100
 8000440:	e000ed00 	.word	0xe000ed00

08000444 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000448:	4b04      	ldr	r3, [pc, #16]	; (800045c <LL_RCC_HSI_Enable+0x18>)
 800044a:	681a      	ldr	r2, [r3, #0]
 800044c:	4b03      	ldr	r3, [pc, #12]	; (800045c <LL_RCC_HSI_Enable+0x18>)
 800044e:	2180      	movs	r1, #128	; 0x80
 8000450:	0049      	lsls	r1, r1, #1
 8000452:	430a      	orrs	r2, r1
 8000454:	601a      	str	r2, [r3, #0]
}
 8000456:	46c0      	nop			; (mov r8, r8)
 8000458:	46bd      	mov	sp, r7
 800045a:	bd80      	pop	{r7, pc}
 800045c:	40021000 	.word	0x40021000

08000460 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8000464:	4b07      	ldr	r3, [pc, #28]	; (8000484 <LL_RCC_HSI_IsReady+0x24>)
 8000466:	681a      	ldr	r2, [r3, #0]
 8000468:	2380      	movs	r3, #128	; 0x80
 800046a:	00db      	lsls	r3, r3, #3
 800046c:	401a      	ands	r2, r3
 800046e:	2380      	movs	r3, #128	; 0x80
 8000470:	00db      	lsls	r3, r3, #3
 8000472:	429a      	cmp	r2, r3
 8000474:	d101      	bne.n	800047a <LL_RCC_HSI_IsReady+0x1a>
 8000476:	2301      	movs	r3, #1
 8000478:	e000      	b.n	800047c <LL_RCC_HSI_IsReady+0x1c>
 800047a:	2300      	movs	r3, #0
}
 800047c:	0018      	movs	r0, r3
 800047e:	46bd      	mov	sp, r7
 8000480:	bd80      	pop	{r7, pc}
 8000482:	46c0      	nop			; (mov r8, r8)
 8000484:	40021000 	.word	0x40021000

08000488 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_LSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_LSE
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b082      	sub	sp, #8
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000490:	4b06      	ldr	r3, [pc, #24]	; (80004ac <LL_RCC_SetSysClkSource+0x24>)
 8000492:	689b      	ldr	r3, [r3, #8]
 8000494:	2207      	movs	r2, #7
 8000496:	4393      	bics	r3, r2
 8000498:	0019      	movs	r1, r3
 800049a:	4b04      	ldr	r3, [pc, #16]	; (80004ac <LL_RCC_SetSysClkSource+0x24>)
 800049c:	687a      	ldr	r2, [r7, #4]
 800049e:	430a      	orrs	r2, r1
 80004a0:	609a      	str	r2, [r3, #8]
}
 80004a2:	46c0      	nop			; (mov r8, r8)
 80004a4:	46bd      	mov	sp, r7
 80004a6:	b002      	add	sp, #8
 80004a8:	bd80      	pop	{r7, pc}
 80004aa:	46c0      	nop			; (mov r8, r8)
 80004ac:	40021000 	.word	0x40021000

080004b0 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_LSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80004b4:	4b03      	ldr	r3, [pc, #12]	; (80004c4 <LL_RCC_GetSysClkSource+0x14>)
 80004b6:	689b      	ldr	r3, [r3, #8]
 80004b8:	2238      	movs	r2, #56	; 0x38
 80004ba:	4013      	ands	r3, r2
}
 80004bc:	0018      	movs	r0, r3
 80004be:	46bd      	mov	sp, r7
 80004c0:	bd80      	pop	{r7, pc}
 80004c2:	46c0      	nop			; (mov r8, r8)
 80004c4:	40021000 	.word	0x40021000

080004c8 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80004d0:	4b06      	ldr	r3, [pc, #24]	; (80004ec <LL_RCC_SetAHBPrescaler+0x24>)
 80004d2:	689b      	ldr	r3, [r3, #8]
 80004d4:	4a06      	ldr	r2, [pc, #24]	; (80004f0 <LL_RCC_SetAHBPrescaler+0x28>)
 80004d6:	4013      	ands	r3, r2
 80004d8:	0019      	movs	r1, r3
 80004da:	4b04      	ldr	r3, [pc, #16]	; (80004ec <LL_RCC_SetAHBPrescaler+0x24>)
 80004dc:	687a      	ldr	r2, [r7, #4]
 80004de:	430a      	orrs	r2, r1
 80004e0:	609a      	str	r2, [r3, #8]
}
 80004e2:	46c0      	nop			; (mov r8, r8)
 80004e4:	46bd      	mov	sp, r7
 80004e6:	b002      	add	sp, #8
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	46c0      	nop			; (mov r8, r8)
 80004ec:	40021000 	.word	0x40021000
 80004f0:	fffff0ff 	.word	0xfffff0ff

080004f4 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, Prescaler);
 80004fc:	4b06      	ldr	r3, [pc, #24]	; (8000518 <LL_RCC_SetAPB1Prescaler+0x24>)
 80004fe:	689b      	ldr	r3, [r3, #8]
 8000500:	4a06      	ldr	r2, [pc, #24]	; (800051c <LL_RCC_SetAPB1Prescaler+0x28>)
 8000502:	4013      	ands	r3, r2
 8000504:	0019      	movs	r1, r3
 8000506:	4b04      	ldr	r3, [pc, #16]	; (8000518 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000508:	687a      	ldr	r2, [r7, #4]
 800050a:	430a      	orrs	r2, r1
 800050c:	609a      	str	r2, [r3, #8]
}
 800050e:	46c0      	nop			; (mov r8, r8)
 8000510:	46bd      	mov	sp, r7
 8000512:	b002      	add	sp, #8
 8000514:	bd80      	pop	{r7, pc}
 8000516:	46c0      	nop			; (mov r8, r8)
 8000518:	40021000 	.word	0x40021000
 800051c:	ffff8fff 	.word	0xffff8fff

08000520 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000524:	4b04      	ldr	r3, [pc, #16]	; (8000538 <LL_RCC_PLL_Enable+0x18>)
 8000526:	681a      	ldr	r2, [r3, #0]
 8000528:	4b03      	ldr	r3, [pc, #12]	; (8000538 <LL_RCC_PLL_Enable+0x18>)
 800052a:	2180      	movs	r1, #128	; 0x80
 800052c:	0449      	lsls	r1, r1, #17
 800052e:	430a      	orrs	r2, r1
 8000530:	601a      	str	r2, [r3, #0]
}
 8000532:	46c0      	nop			; (mov r8, r8)
 8000534:	46bd      	mov	sp, r7
 8000536:	bd80      	pop	{r7, pc}
 8000538:	40021000 	.word	0x40021000

0800053c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8000540:	4b07      	ldr	r3, [pc, #28]	; (8000560 <LL_RCC_PLL_IsReady+0x24>)
 8000542:	681a      	ldr	r2, [r3, #0]
 8000544:	2380      	movs	r3, #128	; 0x80
 8000546:	049b      	lsls	r3, r3, #18
 8000548:	401a      	ands	r2, r3
 800054a:	2380      	movs	r3, #128	; 0x80
 800054c:	049b      	lsls	r3, r3, #18
 800054e:	429a      	cmp	r2, r3
 8000550:	d101      	bne.n	8000556 <LL_RCC_PLL_IsReady+0x1a>
 8000552:	2301      	movs	r3, #1
 8000554:	e000      	b.n	8000558 <LL_RCC_PLL_IsReady+0x1c>
 8000556:	2300      	movs	r3, #0
}
 8000558:	0018      	movs	r0, r3
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}
 800055e:	46c0      	nop			; (mov r8, r8)
 8000560:	40021000 	.word	0x40021000

08000564 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b084      	sub	sp, #16
 8000568:	af00      	add	r7, sp, #0
 800056a:	60f8      	str	r0, [r7, #12]
 800056c:	60b9      	str	r1, [r7, #8]
 800056e:	607a      	str	r2, [r7, #4]
 8000570:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 8000572:	4b0a      	ldr	r3, [pc, #40]	; (800059c <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8000574:	68db      	ldr	r3, [r3, #12]
 8000576:	4a0a      	ldr	r2, [pc, #40]	; (80005a0 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 8000578:	4013      	ands	r3, r2
 800057a:	0019      	movs	r1, r3
 800057c:	68fa      	ldr	r2, [r7, #12]
 800057e:	68bb      	ldr	r3, [r7, #8]
 8000580:	431a      	orrs	r2, r3
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	021b      	lsls	r3, r3, #8
 8000586:	431a      	orrs	r2, r3
 8000588:	683b      	ldr	r3, [r7, #0]
 800058a:	431a      	orrs	r2, r3
 800058c:	4b03      	ldr	r3, [pc, #12]	; (800059c <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 800058e:	430a      	orrs	r2, r1
 8000590:	60da      	str	r2, [r3, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 8000592:	46c0      	nop			; (mov r8, r8)
 8000594:	46bd      	mov	sp, r7
 8000596:	b004      	add	sp, #16
 8000598:	bd80      	pop	{r7, pc}
 800059a:	46c0      	nop			; (mov r8, r8)
 800059c:	40021000 	.word	0x40021000
 80005a0:	1fff808c 	.word	0x1fff808c

080005a4 <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 80005a8:	4b04      	ldr	r3, [pc, #16]	; (80005bc <LL_RCC_PLL_EnableDomain_SYS+0x18>)
 80005aa:	68da      	ldr	r2, [r3, #12]
 80005ac:	4b03      	ldr	r3, [pc, #12]	; (80005bc <LL_RCC_PLL_EnableDomain_SYS+0x18>)
 80005ae:	2180      	movs	r1, #128	; 0x80
 80005b0:	0549      	lsls	r1, r1, #21
 80005b2:	430a      	orrs	r2, r1
 80005b4:	60da      	str	r2, [r3, #12]
}
 80005b6:	46c0      	nop			; (mov r8, r8)
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	40021000 	.word	0x40021000

080005c0 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_ADC
  * @note (*) peripheral not available on all devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b084      	sub	sp, #16
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APBENR2, Periphs);
 80005c8:	4b07      	ldr	r3, [pc, #28]	; (80005e8 <LL_APB2_GRP1_EnableClock+0x28>)
 80005ca:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80005cc:	4b06      	ldr	r3, [pc, #24]	; (80005e8 <LL_APB2_GRP1_EnableClock+0x28>)
 80005ce:	687a      	ldr	r2, [r7, #4]
 80005d0:	430a      	orrs	r2, r1
 80005d2:	641a      	str	r2, [r3, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APBENR2, Periphs);
 80005d4:	4b04      	ldr	r3, [pc, #16]	; (80005e8 <LL_APB2_GRP1_EnableClock+0x28>)
 80005d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d8:	687a      	ldr	r2, [r7, #4]
 80005da:	4013      	ands	r3, r2
 80005dc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005de:	68fb      	ldr	r3, [r7, #12]
}
 80005e0:	46c0      	nop			; (mov r8, r8)
 80005e2:	46bd      	mov	sp, r7
 80005e4:	b004      	add	sp, #16
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	40021000 	.word	0x40021000

080005ec <LL_IOP_GRP1_EnableClock>:
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOE
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOF
  * @retval None
  */
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 80005f4:	4b07      	ldr	r3, [pc, #28]	; (8000614 <LL_IOP_GRP1_EnableClock+0x28>)
 80005f6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80005f8:	4b06      	ldr	r3, [pc, #24]	; (8000614 <LL_IOP_GRP1_EnableClock+0x28>)
 80005fa:	687a      	ldr	r2, [r7, #4]
 80005fc:	430a      	orrs	r2, r1
 80005fe:	635a      	str	r2, [r3, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8000600:	4b04      	ldr	r3, [pc, #16]	; (8000614 <LL_IOP_GRP1_EnableClock+0x28>)
 8000602:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000604:	687a      	ldr	r2, [r7, #4]
 8000606:	4013      	ands	r3, r2
 8000608:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800060a:	68fb      	ldr	r3, [r7, #12]
}
 800060c:	46c0      	nop			; (mov r8, r8)
 800060e:	46bd      	mov	sp, r7
 8000610:	b004      	add	sp, #16
 8000612:	bd80      	pop	{r7, pc}
 8000614:	40021000 	.word	0x40021000

08000618 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000620:	4b06      	ldr	r3, [pc, #24]	; (800063c <LL_FLASH_SetLatency+0x24>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	2207      	movs	r2, #7
 8000626:	4393      	bics	r3, r2
 8000628:	0019      	movs	r1, r3
 800062a:	4b04      	ldr	r3, [pc, #16]	; (800063c <LL_FLASH_SetLatency+0x24>)
 800062c:	687a      	ldr	r2, [r7, #4]
 800062e:	430a      	orrs	r2, r1
 8000630:	601a      	str	r2, [r3, #0]
}
 8000632:	46c0      	nop			; (mov r8, r8)
 8000634:	46bd      	mov	sp, r7
 8000636:	b002      	add	sp, #8
 8000638:	bd80      	pop	{r7, pc}
 800063a:	46c0      	nop			; (mov r8, r8)
 800063c:	40022000 	.word	0x40022000

08000640 <LL_SYSTICK_EnableIT>:
  * @brief  Enable SysTick exception request
  * @rmtoll STK_CTRL     TICKINT       LL_SYSTICK_EnableIT
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_EnableIT(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8000644:	4b04      	ldr	r3, [pc, #16]	; (8000658 <LL_SYSTICK_EnableIT+0x18>)
 8000646:	681a      	ldr	r2, [r3, #0]
 8000648:	4b03      	ldr	r3, [pc, #12]	; (8000658 <LL_SYSTICK_EnableIT+0x18>)
 800064a:	2102      	movs	r1, #2
 800064c:	430a      	orrs	r2, r1
 800064e:	601a      	str	r2, [r3, #0]
}
 8000650:	46c0      	nop			; (mov r8, r8)
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	46c0      	nop			; (mov r8, r8)
 8000658:	e000e010 	.word	0xe000e010

0800065c <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b084      	sub	sp, #16
 8000660:	af00      	add	r7, sp, #0
 8000662:	60f8      	str	r0, [r7, #12]
 8000664:	60b9      	str	r1, [r7, #8]
 8000666:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	6819      	ldr	r1, [r3, #0]
 800066c:	68bb      	ldr	r3, [r7, #8]
 800066e:	435b      	muls	r3, r3
 8000670:	001a      	movs	r2, r3
 8000672:	0013      	movs	r3, r2
 8000674:	005b      	lsls	r3, r3, #1
 8000676:	189b      	adds	r3, r3, r2
 8000678:	43db      	mvns	r3, r3
 800067a:	400b      	ands	r3, r1
 800067c:	001a      	movs	r2, r3
 800067e:	68bb      	ldr	r3, [r7, #8]
 8000680:	435b      	muls	r3, r3
 8000682:	6879      	ldr	r1, [r7, #4]
 8000684:	434b      	muls	r3, r1
 8000686:	431a      	orrs	r2, r3
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	601a      	str	r2, [r3, #0]
}
 800068c:	46c0      	nop			; (mov r8, r8)
 800068e:	46bd      	mov	sp, r7
 8000690:	b004      	add	sp, #16
 8000692:	bd80      	pop	{r7, pc}

08000694 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b084      	sub	sp, #16
 8000698:	af00      	add	r7, sp, #0
 800069a:	60f8      	str	r0, [r7, #12]
 800069c:	60b9      	str	r1, [r7, #8]
 800069e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	6899      	ldr	r1, [r3, #8]
 80006a4:	68bb      	ldr	r3, [r7, #8]
 80006a6:	435b      	muls	r3, r3
 80006a8:	001a      	movs	r2, r3
 80006aa:	0013      	movs	r3, r2
 80006ac:	005b      	lsls	r3, r3, #1
 80006ae:	189b      	adds	r3, r3, r2
 80006b0:	43db      	mvns	r3, r3
 80006b2:	400b      	ands	r3, r1
 80006b4:	001a      	movs	r2, r3
 80006b6:	68bb      	ldr	r3, [r7, #8]
 80006b8:	435b      	muls	r3, r3
 80006ba:	6879      	ldr	r1, [r7, #4]
 80006bc:	434b      	muls	r3, r1
 80006be:	431a      	orrs	r2, r3
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	609a      	str	r2, [r3, #8]
}
 80006c4:	46c0      	nop			; (mov r8, r8)
 80006c6:	46bd      	mov	sp, r7
 80006c8:	b004      	add	sp, #16
 80006ca:	bd80      	pop	{r7, pc}

080006cc <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b084      	sub	sp, #16
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	60f8      	str	r0, [r7, #12]
 80006d4:	60b9      	str	r1, [r7, #8]
 80006d6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	68d9      	ldr	r1, [r3, #12]
 80006dc:	68bb      	ldr	r3, [r7, #8]
 80006de:	435b      	muls	r3, r3
 80006e0:	001a      	movs	r2, r3
 80006e2:	0013      	movs	r3, r2
 80006e4:	005b      	lsls	r3, r3, #1
 80006e6:	189b      	adds	r3, r3, r2
 80006e8:	43db      	mvns	r3, r3
 80006ea:	400b      	ands	r3, r1
 80006ec:	001a      	movs	r2, r3
 80006ee:	68bb      	ldr	r3, [r7, #8]
 80006f0:	435b      	muls	r3, r3
 80006f2:	6879      	ldr	r1, [r7, #4]
 80006f4:	434b      	muls	r3, r1
 80006f6:	431a      	orrs	r2, r3
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	60da      	str	r2, [r3, #12]
}
 80006fc:	46c0      	nop			; (mov r8, r8)
 80006fe:	46bd      	mov	sp, r7
 8000700:	b004      	add	sp, #16
 8000702:	bd80      	pop	{r7, pc}

08000704 <LL_ADC_SetClock>:
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
 800070c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_CKMODE, ClockSource);
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	691b      	ldr	r3, [r3, #16]
 8000712:	009b      	lsls	r3, r3, #2
 8000714:	089a      	lsrs	r2, r3, #2
 8000716:	683b      	ldr	r3, [r7, #0]
 8000718:	431a      	orrs	r2, r3
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	611a      	str	r2, [r3, #16]
}
 800071e:	46c0      	nop			; (mov r8, r8)
 8000720:	46bd      	mov	sp, r7
 8000722:	b002      	add	sp, #8
 8000724:	bd80      	pop	{r7, pc}

08000726 <LL_ADC_SetResolution>:
{
 8000726:	b580      	push	{r7, lr}
 8000728:	b082      	sub	sp, #8
 800072a:	af00      	add	r7, sp, #0
 800072c:	6078      	str	r0, [r7, #4]
 800072e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_RES, Resolution);
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	68db      	ldr	r3, [r3, #12]
 8000734:	2218      	movs	r2, #24
 8000736:	4393      	bics	r3, r2
 8000738:	001a      	movs	r2, r3
 800073a:	683b      	ldr	r3, [r7, #0]
 800073c:	431a      	orrs	r2, r3
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	60da      	str	r2, [r3, #12]
}
 8000742:	46c0      	nop			; (mov r8, r8)
 8000744:	46bd      	mov	sp, r7
 8000746:	b002      	add	sp, #8
 8000748:	bd80      	pop	{r7, pc}

0800074a <LL_ADC_SetDataAlignment>:
{
 800074a:	b580      	push	{r7, lr}
 800074c:	b082      	sub	sp, #8
 800074e:	af00      	add	r7, sp, #0
 8000750:	6078      	str	r0, [r7, #4]
 8000752:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_ALIGN, DataAlignment);
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	68db      	ldr	r3, [r3, #12]
 8000758:	2220      	movs	r2, #32
 800075a:	4393      	bics	r3, r2
 800075c:	001a      	movs	r2, r3
 800075e:	683b      	ldr	r3, [r7, #0]
 8000760:	431a      	orrs	r2, r3
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	60da      	str	r2, [r3, #12]
}
 8000766:	46c0      	nop			; (mov r8, r8)
 8000768:	46bd      	mov	sp, r7
 800076a:	b002      	add	sp, #8
 800076c:	bd80      	pop	{r7, pc}

0800076e <LL_ADC_SetSamplingTimeCommonChannels>:
{
 800076e:	b580      	push	{r7, lr}
 8000770:	b084      	sub	sp, #16
 8000772:	af00      	add	r7, sp, #0
 8000774:	60f8      	str	r0, [r7, #12]
 8000776:	60b9      	str	r1, [r7, #8]
 8000778:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	695b      	ldr	r3, [r3, #20]
 800077e:	68ba      	ldr	r2, [r7, #8]
 8000780:	2104      	movs	r1, #4
 8000782:	400a      	ands	r2, r1
 8000784:	2107      	movs	r1, #7
 8000786:	4091      	lsls	r1, r2
 8000788:	000a      	movs	r2, r1
 800078a:	43d2      	mvns	r2, r2
 800078c:	401a      	ands	r2, r3
 800078e:	68bb      	ldr	r3, [r7, #8]
 8000790:	2104      	movs	r1, #4
 8000792:	400b      	ands	r3, r1
 8000794:	6879      	ldr	r1, [r7, #4]
 8000796:	4099      	lsls	r1, r3
 8000798:	000b      	movs	r3, r1
 800079a:	431a      	orrs	r2, r3
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	615a      	str	r2, [r3, #20]
}
 80007a0:	46c0      	nop			; (mov r8, r8)
 80007a2:	46bd      	mov	sp, r7
 80007a4:	b004      	add	sp, #16
 80007a6:	bd80      	pop	{r7, pc}

080007a8 <LL_ADC_REG_SetSequencerConfigurable>:
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
 80007b0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_CHSELRMOD, Configurability);
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	68db      	ldr	r3, [r3, #12]
 80007b6:	4a05      	ldr	r2, [pc, #20]	; (80007cc <LL_ADC_REG_SetSequencerConfigurable+0x24>)
 80007b8:	401a      	ands	r2, r3
 80007ba:	683b      	ldr	r3, [r7, #0]
 80007bc:	431a      	orrs	r2, r3
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	60da      	str	r2, [r3, #12]
}
 80007c2:	46c0      	nop			; (mov r8, r8)
 80007c4:	46bd      	mov	sp, r7
 80007c6:	b002      	add	sp, #8
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	46c0      	nop			; (mov r8, r8)
 80007cc:	ffdfffff 	.word	0xffdfffff

080007d0 <LL_ADC_REG_GetSequencerConfigurable>:
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_CHSELRMOD));
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	68da      	ldr	r2, [r3, #12]
 80007dc:	2380      	movs	r3, #128	; 0x80
 80007de:	039b      	lsls	r3, r3, #14
 80007e0:	4013      	ands	r3, r2
}
 80007e2:	0018      	movs	r0, r3
 80007e4:	46bd      	mov	sp, r7
 80007e6:	b002      	add	sp, #8
 80007e8:	bd80      	pop	{r7, pc}

080007ea <LL_ADC_REG_SetSequencerChannels>:
{
 80007ea:	b580      	push	{r7, lr}
 80007ec:	b082      	sub	sp, #8
 80007ee:	af00      	add	r7, sp, #0
 80007f0:	6078      	str	r0, [r7, #4]
 80007f2:	6039      	str	r1, [r7, #0]
  WRITE_REG(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80007f4:	683b      	ldr	r3, [r7, #0]
 80007f6:	035b      	lsls	r3, r3, #13
 80007f8:	0b5a      	lsrs	r2, r3, #13
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	629a      	str	r2, [r3, #40]	; 0x28
}
 80007fe:	46c0      	nop			; (mov r8, r8)
 8000800:	46bd      	mov	sp, r7
 8000802:	b002      	add	sp, #8
 8000804:	bd80      	pop	{r7, pc}
	...

08000808 <LL_ADC_REG_SetContinuousMode>:
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
 8000810:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_CONT, Continuous);
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	68db      	ldr	r3, [r3, #12]
 8000816:	4a05      	ldr	r2, [pc, #20]	; (800082c <LL_ADC_REG_SetContinuousMode+0x24>)
 8000818:	401a      	ands	r2, r3
 800081a:	683b      	ldr	r3, [r7, #0]
 800081c:	431a      	orrs	r2, r3
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	60da      	str	r2, [r3, #12]
}
 8000822:	46c0      	nop			; (mov r8, r8)
 8000824:	46bd      	mov	sp, r7
 8000826:	b002      	add	sp, #8
 8000828:	bd80      	pop	{r7, pc}
 800082a:	46c0      	nop			; (mov r8, r8)
 800082c:	ffffdfff 	.word	0xffffdfff

08000830 <LL_ADC_SetChannelSamplingTime>:
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b084      	sub	sp, #16
 8000834:	af00      	add	r7, sp, #0
 8000836:	60f8      	str	r0, [r7, #12]
 8000838:	60b9      	str	r1, [r7, #8]
 800083a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	695b      	ldr	r3, [r3, #20]
 8000840:	68ba      	ldr	r2, [r7, #8]
 8000842:	0212      	lsls	r2, r2, #8
 8000844:	43d2      	mvns	r2, r2
 8000846:	401a      	ands	r2, r3
 8000848:	68bb      	ldr	r3, [r7, #8]
 800084a:	021b      	lsls	r3, r3, #8
 800084c:	6879      	ldr	r1, [r7, #4]
 800084e:	400b      	ands	r3, r1
 8000850:	4904      	ldr	r1, [pc, #16]	; (8000864 <LL_ADC_SetChannelSamplingTime+0x34>)
 8000852:	400b      	ands	r3, r1
 8000854:	431a      	orrs	r2, r3
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	615a      	str	r2, [r3, #20]
}
 800085a:	46c0      	nop			; (mov r8, r8)
 800085c:	46bd      	mov	sp, r7
 800085e:	b004      	add	sp, #16
 8000860:	bd80      	pop	{r7, pc}
 8000862:	46c0      	nop			; (mov r8, r8)
 8000864:	07ffff00 	.word	0x07ffff00

08000868 <LL_ADC_EnableInternalRegulator>:
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	689b      	ldr	r3, [r3, #8]
 8000874:	4a05      	ldr	r2, [pc, #20]	; (800088c <LL_ADC_EnableInternalRegulator+0x24>)
 8000876:	4013      	ands	r3, r2
 8000878:	2280      	movs	r2, #128	; 0x80
 800087a:	0552      	lsls	r2, r2, #21
 800087c:	431a      	orrs	r2, r3
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	609a      	str	r2, [r3, #8]
}
 8000882:	46c0      	nop			; (mov r8, r8)
 8000884:	46bd      	mov	sp, r7
 8000886:	b002      	add	sp, #8
 8000888:	bd80      	pop	{r7, pc}
 800088a:	46c0      	nop			; (mov r8, r8)
 800088c:	6fffffe8 	.word	0x6fffffe8

08000890 <LL_ADC_Enable>:
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	689b      	ldr	r3, [r3, #8]
 800089c:	4a04      	ldr	r2, [pc, #16]	; (80008b0 <LL_ADC_Enable+0x20>)
 800089e:	4013      	ands	r3, r2
 80008a0:	2201      	movs	r2, #1
 80008a2:	431a      	orrs	r2, r3
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	609a      	str	r2, [r3, #8]
}
 80008a8:	46c0      	nop			; (mov r8, r8)
 80008aa:	46bd      	mov	sp, r7
 80008ac:	b002      	add	sp, #8
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	7fffffe8 	.word	0x7fffffe8

080008b4 <LL_ADC_REG_StartConversion>:
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	689b      	ldr	r3, [r3, #8]
 80008c0:	4a04      	ldr	r2, [pc, #16]	; (80008d4 <LL_ADC_REG_StartConversion+0x20>)
 80008c2:	4013      	ands	r3, r2
 80008c4:	2204      	movs	r2, #4
 80008c6:	431a      	orrs	r2, r3
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	609a      	str	r2, [r3, #8]
}
 80008cc:	46c0      	nop			; (mov r8, r8)
 80008ce:	46bd      	mov	sp, r7
 80008d0:	b002      	add	sp, #8
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	7fffffe8 	.word	0x7fffffe8

080008d8 <LL_ADC_IsActiveFlag_ADRDY>:
  * @rmtoll ISR      ADRDY          LL_ADC_IsActiveFlag_ADRDY
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_ADRDY(ADC_TypeDef *ADCx)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	2201      	movs	r2, #1
 80008e6:	4013      	ands	r3, r2
 80008e8:	2b01      	cmp	r3, #1
 80008ea:	d101      	bne.n	80008f0 <LL_ADC_IsActiveFlag_ADRDY+0x18>
 80008ec:	2301      	movs	r3, #1
 80008ee:	e000      	b.n	80008f2 <LL_ADC_IsActiveFlag_ADRDY+0x1a>
 80008f0:	2300      	movs	r3, #0
}
 80008f2:	0018      	movs	r0, r3
 80008f4:	46bd      	mov	sp, r7
 80008f6:	b002      	add	sp, #8
 80008f8:	bd80      	pop	{r7, pc}

080008fa <LL_ADC_IsActiveFlag_CCRDY>:
  * @rmtoll ISR      CCRDY          LL_ADC_IsActiveFlag_CCRDY
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_CCRDY(ADC_TypeDef *ADCx)
{
 80008fa:	b580      	push	{r7, lr}
 80008fc:	b082      	sub	sp, #8
 80008fe:	af00      	add	r7, sp, #0
 8000900:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_CCRDY) == (LL_ADC_FLAG_CCRDY)) ? 1UL : 0UL);
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	681a      	ldr	r2, [r3, #0]
 8000906:	2380      	movs	r3, #128	; 0x80
 8000908:	019b      	lsls	r3, r3, #6
 800090a:	401a      	ands	r2, r3
 800090c:	2380      	movs	r3, #128	; 0x80
 800090e:	019b      	lsls	r3, r3, #6
 8000910:	429a      	cmp	r2, r3
 8000912:	d101      	bne.n	8000918 <LL_ADC_IsActiveFlag_CCRDY+0x1e>
 8000914:	2301      	movs	r3, #1
 8000916:	e000      	b.n	800091a <LL_ADC_IsActiveFlag_CCRDY+0x20>
 8000918:	2300      	movs	r3, #0
}
 800091a:	0018      	movs	r0, r3
 800091c:	46bd      	mov	sp, r7
 800091e:	b002      	add	sp, #8
 8000920:	bd80      	pop	{r7, pc}

08000922 <LL_ADC_ClearFlag_ADRDY>:
  * @rmtoll ISR      ADRDY          LL_ADC_ClearFlag_ADRDY
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_ADRDY(ADC_TypeDef *ADCx)
{
 8000922:	b580      	push	{r7, lr}
 8000924:	b082      	sub	sp, #8
 8000926:	af00      	add	r7, sp, #0
 8000928:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_ADRDY);
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	2201      	movs	r2, #1
 800092e:	601a      	str	r2, [r3, #0]
}
 8000930:	46c0      	nop			; (mov r8, r8)
 8000932:	46bd      	mov	sp, r7
 8000934:	b002      	add	sp, #8
 8000936:	bd80      	pop	{r7, pc}

08000938 <LL_ADC_ClearFlag_CCRDY>:
  * @rmtoll ISR      CCRDY          LL_ADC_ClearFlag_CCRDY
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE void LL_ADC_ClearFlag_CCRDY(ADC_TypeDef *ADCx)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_CCRDY);
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	2280      	movs	r2, #128	; 0x80
 8000944:	0192      	lsls	r2, r2, #6
 8000946:	601a      	str	r2, [r3, #0]
}
 8000948:	46c0      	nop			; (mov r8, r8)
 800094a:	46bd      	mov	sp, r7
 800094c:	b002      	add	sp, #8
 800094e:	bd80      	pop	{r7, pc}

08000950 <LL_ADC_EnableIT_EOC>:
  * @rmtoll IER      EOCIE          LL_ADC_EnableIT_EOC
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_EOC(ADC_TypeDef *ADCx)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	685b      	ldr	r3, [r3, #4]
 800095c:	2204      	movs	r2, #4
 800095e:	431a      	orrs	r2, r3
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	605a      	str	r2, [r3, #4]
}
 8000964:	46c0      	nop			; (mov r8, r8)
 8000966:	46bd      	mov	sp, r7
 8000968:	b002      	add	sp, #8
 800096a:	bd80      	pop	{r7, pc}

0800096c <main>:
#endif



int main(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
	//RCC
	LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 8000972:	2002      	movs	r0, #2
 8000974:	f7ff fe50 	bl	8000618 <LL_FLASH_SetLatency>

	LL_RCC_HSI_Enable();
 8000978:	f7ff fd64 	bl	8000444 <LL_RCC_HSI_Enable>
	while(LL_RCC_HSI_IsReady() != 1)
 800097c:	46c0      	nop			; (mov r8, r8)
 800097e:	f7ff fd6f 	bl	8000460 <LL_RCC_HSI_IsReady>
 8000982:	0003      	movs	r3, r0
 8000984:	2b01      	cmp	r3, #1
 8000986:	d1fa      	bne.n	800097e <main+0x12>
		;

	LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_1, 8, LL_RCC_PLLR_DIV_2);
 8000988:	2380      	movs	r3, #128	; 0x80
 800098a:	059b      	lsls	r3, r3, #22
 800098c:	2208      	movs	r2, #8
 800098e:	2100      	movs	r1, #0
 8000990:	2002      	movs	r0, #2
 8000992:	f7ff fde7 	bl	8000564 <LL_RCC_PLL_ConfigDomain_SYS>

	LL_RCC_PLL_Enable();
 8000996:	f7ff fdc3 	bl	8000520 <LL_RCC_PLL_Enable>
	while(LL_RCC_PLL_IsReady() != 1)
 800099a:	46c0      	nop			; (mov r8, r8)
 800099c:	f7ff fdce 	bl	800053c <LL_RCC_PLL_IsReady>
 80009a0:	0003      	movs	r3, r0
 80009a2:	2b01      	cmp	r3, #1
 80009a4:	d1fa      	bne.n	800099c <main+0x30>
		;

	LL_RCC_PLL_EnableDomain_SYS();
 80009a6:	f7ff fdfd 	bl	80005a4 <LL_RCC_PLL_EnableDomain_SYS>

	LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80009aa:	2000      	movs	r0, #0
 80009ac:	f7ff fd8c 	bl	80004c8 <LL_RCC_SetAHBPrescaler>
	LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 80009b0:	2000      	movs	r0, #0
 80009b2:	f7ff fd9f 	bl	80004f4 <LL_RCC_SetAPB1Prescaler>

	LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 80009b6:	2002      	movs	r0, #2
 80009b8:	f7ff fd66 	bl	8000488 <LL_RCC_SetSysClkSource>
	while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80009bc:	46c0      	nop			; (mov r8, r8)
 80009be:	f7ff fd77 	bl	80004b0 <LL_RCC_GetSysClkSource>
 80009c2:	0003      	movs	r3, r0
 80009c4:	2b10      	cmp	r3, #16
 80009c6:	d1fa      	bne.n	80009be <main+0x52>
		;

	LL_SetSystemCoreClock(64000000);
 80009c8:	4b54      	ldr	r3, [pc, #336]	; (8000b1c <main+0x1b0>)
 80009ca:	0018      	movs	r0, r3
 80009cc:	f7ff fc74 	bl	80002b8 <LL_SetSystemCoreClock>
	LL_Init1msTick(64000000);
 80009d0:	4b52      	ldr	r3, [pc, #328]	; (8000b1c <main+0x1b0>)
 80009d2:	0018      	movs	r0, r3
 80009d4:	f7ff fc3c 	bl	8000250 <LL_Init1msTick>
	LL_SYSTICK_EnableIT();
 80009d8:	f7ff fe32 	bl	8000640 <LL_SYSTICK_EnableIT>

	//GPIO
	LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 80009dc:	2001      	movs	r0, #1
 80009de:	f7ff fe05 	bl	80005ec <LL_IOP_GRP1_EnableClock>

	LL_GPIO_SetPinPull(ADC_Input_GPIO_Port, ADC_Input_Pin, LL_GPIO_PULL_NO);
 80009e2:	23a0      	movs	r3, #160	; 0xa0
 80009e4:	05db      	lsls	r3, r3, #23
 80009e6:	2200      	movs	r2, #0
 80009e8:	2110      	movs	r1, #16
 80009ea:	0018      	movs	r0, r3
 80009ec:	f7ff fe6e 	bl	80006cc <LL_GPIO_SetPinPull>
	LL_GPIO_SetPinSpeed(ADC_Input_GPIO_Port, ADC_Input_Pin, LL_GPIO_SPEED_FREQ_LOW);
 80009f0:	23a0      	movs	r3, #160	; 0xa0
 80009f2:	05db      	lsls	r3, r3, #23
 80009f4:	2200      	movs	r2, #0
 80009f6:	2110      	movs	r1, #16
 80009f8:	0018      	movs	r0, r3
 80009fa:	f7ff fe4b 	bl	8000694 <LL_GPIO_SetPinSpeed>
	LL_GPIO_SetPinMode(ADC_Input_GPIO_Port, ADC_Input_Pin, LL_GPIO_MODE_ANALOG);
 80009fe:	23a0      	movs	r3, #160	; 0xa0
 8000a00:	05db      	lsls	r3, r3, #23
 8000a02:	2203      	movs	r2, #3
 8000a04:	2110      	movs	r1, #16
 8000a06:	0018      	movs	r0, r3
 8000a08:	f7ff fe28 	bl	800065c <LL_GPIO_SetPinMode>

	//ADC
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC);
 8000a0c:	2380      	movs	r3, #128	; 0x80
 8000a0e:	035b      	lsls	r3, r3, #13
 8000a10:	0018      	movs	r0, r3
 8000a12:	f7ff fdd5 	bl	80005c0 <LL_APB2_GRP1_EnableClock>

	LL_ADC_SetResolution(ADC1, LL_ADC_RESOLUTION_12B);
 8000a16:	4b42      	ldr	r3, [pc, #264]	; (8000b20 <main+0x1b4>)
 8000a18:	2100      	movs	r1, #0
 8000a1a:	0018      	movs	r0, r3
 8000a1c:	f7ff fe83 	bl	8000726 <LL_ADC_SetResolution>
	LL_ADC_SetDataAlignment(ADC1, LL_ADC_DATA_ALIGN_RIGHT);
 8000a20:	4b3f      	ldr	r3, [pc, #252]	; (8000b20 <main+0x1b4>)
 8000a22:	2100      	movs	r1, #0
 8000a24:	0018      	movs	r0, r3
 8000a26:	f7ff fe90 	bl	800074a <LL_ADC_SetDataAlignment>
	LL_ADC_SetClock(ADC1, LL_ADC_CLOCK_SYNC_PCLK_DIV4);
 8000a2a:	2380      	movs	r3, #128	; 0x80
 8000a2c:	061b      	lsls	r3, r3, #24
 8000a2e:	4a3c      	ldr	r2, [pc, #240]	; (8000b20 <main+0x1b4>)
 8000a30:	0019      	movs	r1, r3
 8000a32:	0010      	movs	r0, r2
 8000a34:	f7ff fe66 	bl	8000704 <LL_ADC_SetClock>
	LL_ADC_REG_SetContinuousMode(ADC1, LL_ADC_REG_CONV_SINGLE);
 8000a38:	4b39      	ldr	r3, [pc, #228]	; (8000b20 <main+0x1b4>)
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	0018      	movs	r0, r3
 8000a3e:	f7ff fee3 	bl	8000808 <LL_ADC_REG_SetContinuousMode>

	if(LL_ADC_REG_GetSequencerConfigurable(ADC1) != LL_ADC_REG_SEQ_FIXED)
 8000a42:	4b37      	ldr	r3, [pc, #220]	; (8000b20 <main+0x1b4>)
 8000a44:	0018      	movs	r0, r3
 8000a46:	f7ff fec3 	bl	80007d0 <LL_ADC_REG_GetSequencerConfigurable>
 8000a4a:	1e03      	subs	r3, r0, #0
 8000a4c:	d00f      	beq.n	8000a6e <main+0x102>
	{
		LL_ADC_REG_SetSequencerConfigurable(ADC1, LL_ADC_REG_SEQ_FIXED);
 8000a4e:	4b34      	ldr	r3, [pc, #208]	; (8000b20 <main+0x1b4>)
 8000a50:	2100      	movs	r1, #0
 8000a52:	0018      	movs	r0, r3
 8000a54:	f7ff fea8 	bl	80007a8 <LL_ADC_REG_SetSequencerConfigurable>

		while (LL_ADC_IsActiveFlag_CCRDY(ADC1) == 0)
 8000a58:	46c0      	nop			; (mov r8, r8)
 8000a5a:	4b31      	ldr	r3, [pc, #196]	; (8000b20 <main+0x1b4>)
 8000a5c:	0018      	movs	r0, r3
 8000a5e:	f7ff ff4c 	bl	80008fa <LL_ADC_IsActiveFlag_CCRDY>
 8000a62:	1e03      	subs	r3, r0, #0
 8000a64:	d0f9      	beq.n	8000a5a <main+0xee>
			;

		LL_ADC_ClearFlag_CCRDY(ADC1);
 8000a66:	4b2e      	ldr	r3, [pc, #184]	; (8000b20 <main+0x1b4>)
 8000a68:	0018      	movs	r0, r3
 8000a6a:	f7ff ff65 	bl	8000938 <LL_ADC_ClearFlag_CCRDY>
	}

	LL_ADC_SetSamplingTimeCommonChannels(ADC1, LL_ADC_SAMPLINGTIME_COMMON_1, LL_ADC_SAMPLINGTIME_160CYCLES_5);
 8000a6e:	4b2c      	ldr	r3, [pc, #176]	; (8000b20 <main+0x1b4>)
 8000a70:	2207      	movs	r2, #7
 8000a72:	2100      	movs	r1, #0
 8000a74:	0018      	movs	r0, r3
 8000a76:	f7ff fe7a 	bl	800076e <LL_ADC_SetSamplingTimeCommonChannels>
	LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_4, LL_ADC_SAMPLINGTIME_COMMON_1);
 8000a7a:	492a      	ldr	r1, [pc, #168]	; (8000b24 <main+0x1b8>)
 8000a7c:	4b28      	ldr	r3, [pc, #160]	; (8000b20 <main+0x1b4>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	0018      	movs	r0, r3
 8000a82:	f7ff fed5 	bl	8000830 <LL_ADC_SetChannelSamplingTime>

	LL_ADC_REG_SetSequencerChannels(ADC1, LL_ADC_CHANNEL_4);
 8000a86:	4a27      	ldr	r2, [pc, #156]	; (8000b24 <main+0x1b8>)
 8000a88:	4b25      	ldr	r3, [pc, #148]	; (8000b20 <main+0x1b4>)
 8000a8a:	0011      	movs	r1, r2
 8000a8c:	0018      	movs	r0, r3
 8000a8e:	f7ff feac 	bl	80007ea <LL_ADC_REG_SetSequencerChannels>

	while (LL_ADC_IsActiveFlag_CCRDY(ADC1) == 0)
 8000a92:	46c0      	nop			; (mov r8, r8)
 8000a94:	4b22      	ldr	r3, [pc, #136]	; (8000b20 <main+0x1b4>)
 8000a96:	0018      	movs	r0, r3
 8000a98:	f7ff ff2f 	bl	80008fa <LL_ADC_IsActiveFlag_CCRDY>
 8000a9c:	1e03      	subs	r3, r0, #0
 8000a9e:	d0f9      	beq.n	8000a94 <main+0x128>
		;

	LL_ADC_ClearFlag_CCRDY(ADC1);
 8000aa0:	4b1f      	ldr	r3, [pc, #124]	; (8000b20 <main+0x1b4>)
 8000aa2:	0018      	movs	r0, r3
 8000aa4:	f7ff ff48 	bl	8000938 <LL_ADC_ClearFlag_CCRDY>

	NVIC_SetPriority(ADC1_COMP_IRQn, 0);
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	200c      	movs	r0, #12
 8000aac:	f7ff fc5c 	bl	8000368 <__NVIC_SetPriority>
	NVIC_EnableIRQ(ADC1_COMP_IRQn);
 8000ab0:	200c      	movs	r0, #12
 8000ab2:	f7ff fc3f 	bl	8000334 <__NVIC_EnableIRQ>

	LL_ADC_EnableInternalRegulator(ADC1);
 8000ab6:	4b1a      	ldr	r3, [pc, #104]	; (8000b20 <main+0x1b4>)
 8000ab8:	0018      	movs	r0, r3
 8000aba:	f7ff fed5 	bl	8000868 <LL_ADC_EnableInternalRegulator>
	LL_mDelay(1);
 8000abe:	2001      	movs	r0, #1
 8000ac0:	f7ff fbd6 	bl	8000270 <LL_mDelay>

	LL_ADC_ClearFlag_ADRDY(ADC1);
 8000ac4:	4b16      	ldr	r3, [pc, #88]	; (8000b20 <main+0x1b4>)
 8000ac6:	0018      	movs	r0, r3
 8000ac8:	f7ff ff2b 	bl	8000922 <LL_ADC_ClearFlag_ADRDY>
	LL_ADC_Enable(ADC1);
 8000acc:	4b14      	ldr	r3, [pc, #80]	; (8000b20 <main+0x1b4>)
 8000ace:	0018      	movs	r0, r3
 8000ad0:	f7ff fede 	bl	8000890 <LL_ADC_Enable>
	while (LL_ADC_IsActiveFlag_ADRDY(ADC1) == 0)
 8000ad4:	46c0      	nop			; (mov r8, r8)
 8000ad6:	4b12      	ldr	r3, [pc, #72]	; (8000b20 <main+0x1b4>)
 8000ad8:	0018      	movs	r0, r3
 8000ada:	f7ff fefd 	bl	80008d8 <LL_ADC_IsActiveFlag_ADRDY>
 8000ade:	1e03      	subs	r3, r0, #0
 8000ae0:	d0f9      	beq.n	8000ad6 <main+0x16a>
		;

	LL_ADC_EnableIT_EOC(ADC1);
 8000ae2:	4b0f      	ldr	r3, [pc, #60]	; (8000b20 <main+0x1b4>)
 8000ae4:	0018      	movs	r0, r3
 8000ae6:	f7ff ff33 	bl	8000950 <LL_ADC_EnableIT_EOC>

	software_timer_t timer;
	software_timer_task_init(&timer, ADC_TASK_TIME);
 8000aea:	003b      	movs	r3, r7
 8000aec:	2164      	movs	r1, #100	; 0x64
 8000aee:	0018      	movs	r0, r3
 8000af0:	f000 f81a 	bl	8000b28 <software_timer_task_init>

	while (1)
	{
		  if((software_timer_get_ms_tick() - timer.ms_tick) >= timer.task_time)
 8000af4:	f000 f836 	bl	8000b64 <software_timer_get_ms_tick>
 8000af8:	0002      	movs	r2, r0
 8000afa:	003b      	movs	r3, r7
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	1ad2      	subs	r2, r2, r3
 8000b00:	003b      	movs	r3, r7
 8000b02:	685b      	ldr	r3, [r3, #4]
 8000b04:	429a      	cmp	r2, r3
 8000b06:	d3f5      	bcc.n	8000af4 <main+0x188>
		  {
			  timer.ms_tick = software_timer_get_ms_tick();
 8000b08:	f000 f82c 	bl	8000b64 <software_timer_get_ms_tick>
 8000b0c:	0002      	movs	r2, r0
 8000b0e:	003b      	movs	r3, r7
 8000b10:	601a      	str	r2, [r3, #0]

			  LL_ADC_REG_StartConversion(ADC1);
 8000b12:	4b03      	ldr	r3, [pc, #12]	; (8000b20 <main+0x1b4>)
 8000b14:	0018      	movs	r0, r3
 8000b16:	f7ff fecd 	bl	80008b4 <LL_ADC_REG_StartConversion>
		  if((software_timer_get_ms_tick() - timer.ms_tick) >= timer.task_time)
 8000b1a:	e7eb      	b.n	8000af4 <main+0x188>
 8000b1c:	03d09000 	.word	0x03d09000
 8000b20:	40012400 	.word	0x40012400
 8000b24:	10000010 	.word	0x10000010

08000b28 <software_timer_task_init>:

static uint32_t ms_tick = 0;
software_timer_t timer = {0};

void software_timer_task_init(software_timer_t *timer, uint32_t time)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
 8000b30:	6039      	str	r1, [r7, #0]
	timer->ms_tick = software_timer_get_ms_tick();
 8000b32:	f000 f817 	bl	8000b64 <software_timer_get_ms_tick>
 8000b36:	0002      	movs	r2, r0
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	601a      	str	r2, [r3, #0]
	timer->task_time = time;
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	683a      	ldr	r2, [r7, #0]
 8000b40:	605a      	str	r2, [r3, #4]
}
 8000b42:	46c0      	nop			; (mov r8, r8)
 8000b44:	46bd      	mov	sp, r7
 8000b46:	b002      	add	sp, #8
 8000b48:	bd80      	pop	{r7, pc}
	...

08000b4c <software_timer_inc_ms_tick>:

void software_timer_inc_ms_tick(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
	ms_tick++;
 8000b50:	4b03      	ldr	r3, [pc, #12]	; (8000b60 <software_timer_inc_ms_tick+0x14>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	1c5a      	adds	r2, r3, #1
 8000b56:	4b02      	ldr	r3, [pc, #8]	; (8000b60 <software_timer_inc_ms_tick+0x14>)
 8000b58:	601a      	str	r2, [r3, #0]
}
 8000b5a:	46c0      	nop			; (mov r8, r8)
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	20000028 	.word	0x20000028

08000b64 <software_timer_get_ms_tick>:

uint32_t software_timer_get_ms_tick(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
	return ms_tick;
 8000b68:	4b02      	ldr	r3, [pc, #8]	; (8000b74 <software_timer_get_ms_tick+0x10>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
}
 8000b6c:	0018      	movs	r0, r3
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	46c0      	nop			; (mov r8, r8)
 8000b74:	20000028 	.word	0x20000028

08000b78 <LL_ADC_IsActiveFlag_EOC>:
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	2204      	movs	r2, #4
 8000b86:	4013      	ands	r3, r2
 8000b88:	2b04      	cmp	r3, #4
 8000b8a:	d101      	bne.n	8000b90 <LL_ADC_IsActiveFlag_EOC+0x18>
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	e000      	b.n	8000b92 <LL_ADC_IsActiveFlag_EOC+0x1a>
 8000b90:	2300      	movs	r3, #0
}
 8000b92:	0018      	movs	r0, r3
 8000b94:	46bd      	mov	sp, r7
 8000b96:	b002      	add	sp, #8
 8000b98:	bd80      	pop	{r7, pc}

08000b9a <LL_ADC_ClearFlag_EOC>:
{
 8000b9a:	b580      	push	{r7, lr}
 8000b9c:	b082      	sub	sp, #8
 8000b9e:	af00      	add	r7, sp, #0
 8000ba0:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	2204      	movs	r2, #4
 8000ba6:	601a      	str	r2, [r3, #0]
}
 8000ba8:	46c0      	nop			; (mov r8, r8)
 8000baa:	46bd      	mov	sp, r7
 8000bac:	b002      	add	sp, #8
 8000bae:	bd80      	pop	{r7, pc}

08000bb0 <SysTick_Handler>:
 */

#include "main.h"

void SysTick_Handler(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
	software_timer_inc_ms_tick();
 8000bb4:	f7ff ffca 	bl	8000b4c <software_timer_inc_ms_tick>
}
 8000bb8:	46c0      	nop			; (mov r8, r8)
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
	...

08000bc0 <ADC_COMP_IRQHandler>:

void ADC_COMP_IRQHandler(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
	if(LL_ADC_IsActiveFlag_EOC(ADC1) != 0)
 8000bc4:	4b07      	ldr	r3, [pc, #28]	; (8000be4 <ADC_COMP_IRQHandler+0x24>)
 8000bc6:	0018      	movs	r0, r3
 8000bc8:	f7ff ffd6 	bl	8000b78 <LL_ADC_IsActiveFlag_EOC>
 8000bcc:	1e03      	subs	r3, r0, #0
 8000bce:	d005      	beq.n	8000bdc <ADC_COMP_IRQHandler+0x1c>
	{
		adc_conversion_complete_callback();
 8000bd0:	f7ff fb8c 	bl	80002ec <adc_conversion_complete_callback>

		LL_ADC_ClearFlag_EOC(ADC1);
 8000bd4:	4b03      	ldr	r3, [pc, #12]	; (8000be4 <ADC_COMP_IRQHandler+0x24>)
 8000bd6:	0018      	movs	r0, r3
 8000bd8:	f7ff ffdf 	bl	8000b9a <LL_ADC_ClearFlag_EOC>
	}
}
 8000bdc:	46c0      	nop			; (mov r8, r8)
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	46c0      	nop			; (mov r8, r8)
 8000be4:	40012400 	.word	0x40012400

08000be8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
 8000bec:	4b03      	ldr	r3, [pc, #12]	; (8000bfc <SystemInit+0x14>)
 8000bee:	2280      	movs	r2, #128	; 0x80
 8000bf0:	0512      	lsls	r2, r2, #20
 8000bf2:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bf4:	46c0      	nop			; (mov r8, r8)
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	46c0      	nop			; (mov r8, r8)
 8000bfc:	e000ed00 	.word	0xe000ed00

08000c00 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c00:	480d      	ldr	r0, [pc, #52]	; (8000c38 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c02:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c04:	f7ff fff0 	bl	8000be8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c08:	480c      	ldr	r0, [pc, #48]	; (8000c3c <LoopForever+0x6>)
  ldr r1, =_edata
 8000c0a:	490d      	ldr	r1, [pc, #52]	; (8000c40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c0c:	4a0d      	ldr	r2, [pc, #52]	; (8000c44 <LoopForever+0xe>)
  movs r3, #0
 8000c0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c10:	e002      	b.n	8000c18 <LoopCopyDataInit>

08000c12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c16:	3304      	adds	r3, #4

08000c18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c1c:	d3f9      	bcc.n	8000c12 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c1e:	4a0a      	ldr	r2, [pc, #40]	; (8000c48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c20:	4c0a      	ldr	r4, [pc, #40]	; (8000c4c <LoopForever+0x16>)
  movs r3, #0
 8000c22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c24:	e001      	b.n	8000c2a <LoopFillZerobss>

08000c26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c28:	3204      	adds	r2, #4

08000c2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c2c:	d3fb      	bcc.n	8000c26 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c2e:	f000 f811 	bl	8000c54 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c32:	f7ff fe9b 	bl	800096c <main>

08000c36 <LoopForever>:

LoopForever:
    b LoopForever
 8000c36:	e7fe      	b.n	8000c36 <LoopForever>
  ldr   r0, =_estack
 8000c38:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000c3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c40:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000c44:	08000cbc 	.word	0x08000cbc
  ldr r2, =_sbss
 8000c48:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000c4c:	2000002c 	.word	0x2000002c

08000c50 <CEC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c50:	e7fe      	b.n	8000c50 <CEC_IRQHandler>
	...

08000c54 <__libc_init_array>:
 8000c54:	b570      	push	{r4, r5, r6, lr}
 8000c56:	2600      	movs	r6, #0
 8000c58:	4d0c      	ldr	r5, [pc, #48]	; (8000c8c <__libc_init_array+0x38>)
 8000c5a:	4c0d      	ldr	r4, [pc, #52]	; (8000c90 <__libc_init_array+0x3c>)
 8000c5c:	1b64      	subs	r4, r4, r5
 8000c5e:	10a4      	asrs	r4, r4, #2
 8000c60:	42a6      	cmp	r6, r4
 8000c62:	d109      	bne.n	8000c78 <__libc_init_array+0x24>
 8000c64:	2600      	movs	r6, #0
 8000c66:	f000 f819 	bl	8000c9c <_init>
 8000c6a:	4d0a      	ldr	r5, [pc, #40]	; (8000c94 <__libc_init_array+0x40>)
 8000c6c:	4c0a      	ldr	r4, [pc, #40]	; (8000c98 <__libc_init_array+0x44>)
 8000c6e:	1b64      	subs	r4, r4, r5
 8000c70:	10a4      	asrs	r4, r4, #2
 8000c72:	42a6      	cmp	r6, r4
 8000c74:	d105      	bne.n	8000c82 <__libc_init_array+0x2e>
 8000c76:	bd70      	pop	{r4, r5, r6, pc}
 8000c78:	00b3      	lsls	r3, r6, #2
 8000c7a:	58eb      	ldr	r3, [r5, r3]
 8000c7c:	4798      	blx	r3
 8000c7e:	3601      	adds	r6, #1
 8000c80:	e7ee      	b.n	8000c60 <__libc_init_array+0xc>
 8000c82:	00b3      	lsls	r3, r6, #2
 8000c84:	58eb      	ldr	r3, [r5, r3]
 8000c86:	4798      	blx	r3
 8000c88:	3601      	adds	r6, #1
 8000c8a:	e7f2      	b.n	8000c72 <__libc_init_array+0x1e>
 8000c8c:	08000cb4 	.word	0x08000cb4
 8000c90:	08000cb4 	.word	0x08000cb4
 8000c94:	08000cb4 	.word	0x08000cb4
 8000c98:	08000cb8 	.word	0x08000cb8

08000c9c <_init>:
 8000c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c9e:	46c0      	nop			; (mov r8, r8)
 8000ca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ca2:	bc08      	pop	{r3}
 8000ca4:	469e      	mov	lr, r3
 8000ca6:	4770      	bx	lr

08000ca8 <_fini>:
 8000ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000caa:	46c0      	nop			; (mov r8, r8)
 8000cac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000cae:	bc08      	pop	{r3}
 8000cb0:	469e      	mov	lr, r3
 8000cb2:	4770      	bx	lr
