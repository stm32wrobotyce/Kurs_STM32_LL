
03_03_Kurs_STM32_LL_GPIO_Input.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000698  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000754  08000754  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000754  08000754  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000754  08000754  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000754  08000754  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000754  08000754  00010754  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000758  08000758  00010758  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  0800075c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000004  08000760  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000760  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001431  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000004d0  00000000  00000000  0002145d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001f0  00000000  00000000  00021930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001b8  00000000  00000000  00021b20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000f27b  00000000  00000000  00021cd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001781  00000000  00000000  00030f53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005a58c  00000000  00000000  000326d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0008cc60  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000630  00000000  00000000  0008ccb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000004 	.word	0x20000004
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800073c 	.word	0x0800073c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000008 	.word	0x20000008
 8000100:	0800073c 	.word	0x0800073c

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
 8000222:	6078      	str	r0, [r7, #4]
 8000224:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8000226:	6839      	ldr	r1, [r7, #0]
 8000228:	6878      	ldr	r0, [r7, #4]
 800022a:	f7ff ff6b 	bl	8000104 <__udivsi3>
 800022e:	0003      	movs	r3, r0
 8000230:	001a      	movs	r2, r3
 8000232:	4b06      	ldr	r3, [pc, #24]	; (800024c <LL_InitTick+0x30>)
 8000234:	3a01      	subs	r2, #1
 8000236:	605a      	str	r2, [r3, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8000238:	4b04      	ldr	r3, [pc, #16]	; (800024c <LL_InitTick+0x30>)
 800023a:	2200      	movs	r2, #0
 800023c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800023e:	4b03      	ldr	r3, [pc, #12]	; (800024c <LL_InitTick+0x30>)
 8000240:	2205      	movs	r2, #5
 8000242:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8000244:	46c0      	nop			; (mov r8, r8)
 8000246:	46bd      	mov	sp, r7
 8000248:	b002      	add	sp, #8
 800024a:	bd80      	pop	{r7, pc}
 800024c:	e000e010 	.word	0xe000e010

08000250 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b082      	sub	sp, #8
 8000254:	af00      	add	r7, sp, #0
 8000256:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8000258:	23fa      	movs	r3, #250	; 0xfa
 800025a:	009a      	lsls	r2, r3, #2
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	0011      	movs	r1, r2
 8000260:	0018      	movs	r0, r3
 8000262:	f7ff ffdb 	bl	800021c <LL_InitTick>
}
 8000266:	46c0      	nop			; (mov r8, r8)
 8000268:	46bd      	mov	sp, r7
 800026a:	b002      	add	sp, #8
 800026c:	bd80      	pop	{r7, pc}
	...

08000270 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8000278:	4b03      	ldr	r3, [pc, #12]	; (8000288 <LL_SetSystemCoreClock+0x18>)
 800027a:	687a      	ldr	r2, [r7, #4]
 800027c:	601a      	str	r2, [r3, #0]
}
 800027e:	46c0      	nop			; (mov r8, r8)
 8000280:	46bd      	mov	sp, r7
 8000282:	b002      	add	sp, #8
 8000284:	bd80      	pop	{r7, pc}
 8000286:	46c0      	nop			; (mov r8, r8)
 8000288:	20000000 	.word	0x20000000

0800028c <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000290:	4b04      	ldr	r3, [pc, #16]	; (80002a4 <LL_RCC_HSI_Enable+0x18>)
 8000292:	681a      	ldr	r2, [r3, #0]
 8000294:	4b03      	ldr	r3, [pc, #12]	; (80002a4 <LL_RCC_HSI_Enable+0x18>)
 8000296:	2180      	movs	r1, #128	; 0x80
 8000298:	0049      	lsls	r1, r1, #1
 800029a:	430a      	orrs	r2, r1
 800029c:	601a      	str	r2, [r3, #0]
}
 800029e:	46c0      	nop			; (mov r8, r8)
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd80      	pop	{r7, pc}
 80002a4:	40021000 	.word	0x40021000

080002a8 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80002ac:	4b07      	ldr	r3, [pc, #28]	; (80002cc <LL_RCC_HSI_IsReady+0x24>)
 80002ae:	681a      	ldr	r2, [r3, #0]
 80002b0:	2380      	movs	r3, #128	; 0x80
 80002b2:	00db      	lsls	r3, r3, #3
 80002b4:	401a      	ands	r2, r3
 80002b6:	2380      	movs	r3, #128	; 0x80
 80002b8:	00db      	lsls	r3, r3, #3
 80002ba:	429a      	cmp	r2, r3
 80002bc:	d101      	bne.n	80002c2 <LL_RCC_HSI_IsReady+0x1a>
 80002be:	2301      	movs	r3, #1
 80002c0:	e000      	b.n	80002c4 <LL_RCC_HSI_IsReady+0x1c>
 80002c2:	2300      	movs	r3, #0
}
 80002c4:	0018      	movs	r0, r3
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bd80      	pop	{r7, pc}
 80002ca:	46c0      	nop			; (mov r8, r8)
 80002cc:	40021000 	.word	0x40021000

080002d0 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_LSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_LSE
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b082      	sub	sp, #8
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80002d8:	4b06      	ldr	r3, [pc, #24]	; (80002f4 <LL_RCC_SetSysClkSource+0x24>)
 80002da:	689b      	ldr	r3, [r3, #8]
 80002dc:	2207      	movs	r2, #7
 80002de:	4393      	bics	r3, r2
 80002e0:	0019      	movs	r1, r3
 80002e2:	4b04      	ldr	r3, [pc, #16]	; (80002f4 <LL_RCC_SetSysClkSource+0x24>)
 80002e4:	687a      	ldr	r2, [r7, #4]
 80002e6:	430a      	orrs	r2, r1
 80002e8:	609a      	str	r2, [r3, #8]
}
 80002ea:	46c0      	nop			; (mov r8, r8)
 80002ec:	46bd      	mov	sp, r7
 80002ee:	b002      	add	sp, #8
 80002f0:	bd80      	pop	{r7, pc}
 80002f2:	46c0      	nop			; (mov r8, r8)
 80002f4:	40021000 	.word	0x40021000

080002f8 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_LSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80002fc:	4b03      	ldr	r3, [pc, #12]	; (800030c <LL_RCC_GetSysClkSource+0x14>)
 80002fe:	689b      	ldr	r3, [r3, #8]
 8000300:	2238      	movs	r2, #56	; 0x38
 8000302:	4013      	ands	r3, r2
}
 8000304:	0018      	movs	r0, r3
 8000306:	46bd      	mov	sp, r7
 8000308:	bd80      	pop	{r7, pc}
 800030a:	46c0      	nop			; (mov r8, r8)
 800030c:	40021000 	.word	0x40021000

08000310 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b082      	sub	sp, #8
 8000314:	af00      	add	r7, sp, #0
 8000316:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000318:	4b06      	ldr	r3, [pc, #24]	; (8000334 <LL_RCC_SetAHBPrescaler+0x24>)
 800031a:	689b      	ldr	r3, [r3, #8]
 800031c:	4a06      	ldr	r2, [pc, #24]	; (8000338 <LL_RCC_SetAHBPrescaler+0x28>)
 800031e:	4013      	ands	r3, r2
 8000320:	0019      	movs	r1, r3
 8000322:	4b04      	ldr	r3, [pc, #16]	; (8000334 <LL_RCC_SetAHBPrescaler+0x24>)
 8000324:	687a      	ldr	r2, [r7, #4]
 8000326:	430a      	orrs	r2, r1
 8000328:	609a      	str	r2, [r3, #8]
}
 800032a:	46c0      	nop			; (mov r8, r8)
 800032c:	46bd      	mov	sp, r7
 800032e:	b002      	add	sp, #8
 8000330:	bd80      	pop	{r7, pc}
 8000332:	46c0      	nop			; (mov r8, r8)
 8000334:	40021000 	.word	0x40021000
 8000338:	fffff0ff 	.word	0xfffff0ff

0800033c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b082      	sub	sp, #8
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, Prescaler);
 8000344:	4b06      	ldr	r3, [pc, #24]	; (8000360 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000346:	689b      	ldr	r3, [r3, #8]
 8000348:	4a06      	ldr	r2, [pc, #24]	; (8000364 <LL_RCC_SetAPB1Prescaler+0x28>)
 800034a:	4013      	ands	r3, r2
 800034c:	0019      	movs	r1, r3
 800034e:	4b04      	ldr	r3, [pc, #16]	; (8000360 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000350:	687a      	ldr	r2, [r7, #4]
 8000352:	430a      	orrs	r2, r1
 8000354:	609a      	str	r2, [r3, #8]
}
 8000356:	46c0      	nop			; (mov r8, r8)
 8000358:	46bd      	mov	sp, r7
 800035a:	b002      	add	sp, #8
 800035c:	bd80      	pop	{r7, pc}
 800035e:	46c0      	nop			; (mov r8, r8)
 8000360:	40021000 	.word	0x40021000
 8000364:	ffff8fff 	.word	0xffff8fff

08000368 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800036c:	4b04      	ldr	r3, [pc, #16]	; (8000380 <LL_RCC_PLL_Enable+0x18>)
 800036e:	681a      	ldr	r2, [r3, #0]
 8000370:	4b03      	ldr	r3, [pc, #12]	; (8000380 <LL_RCC_PLL_Enable+0x18>)
 8000372:	2180      	movs	r1, #128	; 0x80
 8000374:	0449      	lsls	r1, r1, #17
 8000376:	430a      	orrs	r2, r1
 8000378:	601a      	str	r2, [r3, #0]
}
 800037a:	46c0      	nop			; (mov r8, r8)
 800037c:	46bd      	mov	sp, r7
 800037e:	bd80      	pop	{r7, pc}
 8000380:	40021000 	.word	0x40021000

08000384 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8000388:	4b07      	ldr	r3, [pc, #28]	; (80003a8 <LL_RCC_PLL_IsReady+0x24>)
 800038a:	681a      	ldr	r2, [r3, #0]
 800038c:	2380      	movs	r3, #128	; 0x80
 800038e:	049b      	lsls	r3, r3, #18
 8000390:	401a      	ands	r2, r3
 8000392:	2380      	movs	r3, #128	; 0x80
 8000394:	049b      	lsls	r3, r3, #18
 8000396:	429a      	cmp	r2, r3
 8000398:	d101      	bne.n	800039e <LL_RCC_PLL_IsReady+0x1a>
 800039a:	2301      	movs	r3, #1
 800039c:	e000      	b.n	80003a0 <LL_RCC_PLL_IsReady+0x1c>
 800039e:	2300      	movs	r3, #0
}
 80003a0:	0018      	movs	r0, r3
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bd80      	pop	{r7, pc}
 80003a6:	46c0      	nop			; (mov r8, r8)
 80003a8:	40021000 	.word	0x40021000

080003ac <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b084      	sub	sp, #16
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	60f8      	str	r0, [r7, #12]
 80003b4:	60b9      	str	r1, [r7, #8]
 80003b6:	607a      	str	r2, [r7, #4]
 80003b8:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 80003ba:	4b0a      	ldr	r3, [pc, #40]	; (80003e4 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 80003bc:	68db      	ldr	r3, [r3, #12]
 80003be:	4a0a      	ldr	r2, [pc, #40]	; (80003e8 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 80003c0:	4013      	ands	r3, r2
 80003c2:	0019      	movs	r1, r3
 80003c4:	68fa      	ldr	r2, [r7, #12]
 80003c6:	68bb      	ldr	r3, [r7, #8]
 80003c8:	431a      	orrs	r2, r3
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	021b      	lsls	r3, r3, #8
 80003ce:	431a      	orrs	r2, r3
 80003d0:	683b      	ldr	r3, [r7, #0]
 80003d2:	431a      	orrs	r2, r3
 80003d4:	4b03      	ldr	r3, [pc, #12]	; (80003e4 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 80003d6:	430a      	orrs	r2, r1
 80003d8:	60da      	str	r2, [r3, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 80003da:	46c0      	nop			; (mov r8, r8)
 80003dc:	46bd      	mov	sp, r7
 80003de:	b004      	add	sp, #16
 80003e0:	bd80      	pop	{r7, pc}
 80003e2:	46c0      	nop			; (mov r8, r8)
 80003e4:	40021000 	.word	0x40021000
 80003e8:	1fff808c 	.word	0x1fff808c

080003ec <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 80003f0:	4b04      	ldr	r3, [pc, #16]	; (8000404 <LL_RCC_PLL_EnableDomain_SYS+0x18>)
 80003f2:	68da      	ldr	r2, [r3, #12]
 80003f4:	4b03      	ldr	r3, [pc, #12]	; (8000404 <LL_RCC_PLL_EnableDomain_SYS+0x18>)
 80003f6:	2180      	movs	r1, #128	; 0x80
 80003f8:	0549      	lsls	r1, r1, #21
 80003fa:	430a      	orrs	r2, r1
 80003fc:	60da      	str	r2, [r3, #12]
}
 80003fe:	46c0      	nop			; (mov r8, r8)
 8000400:	46bd      	mov	sp, r7
 8000402:	bd80      	pop	{r7, pc}
 8000404:	40021000 	.word	0x40021000

08000408 <LL_IOP_GRP1_EnableClock>:
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOE
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOF
  * @retval None
  */
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b084      	sub	sp, #16
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 8000410:	4b07      	ldr	r3, [pc, #28]	; (8000430 <LL_IOP_GRP1_EnableClock+0x28>)
 8000412:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000414:	4b06      	ldr	r3, [pc, #24]	; (8000430 <LL_IOP_GRP1_EnableClock+0x28>)
 8000416:	687a      	ldr	r2, [r7, #4]
 8000418:	430a      	orrs	r2, r1
 800041a:	635a      	str	r2, [r3, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 800041c:	4b04      	ldr	r3, [pc, #16]	; (8000430 <LL_IOP_GRP1_EnableClock+0x28>)
 800041e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000420:	687a      	ldr	r2, [r7, #4]
 8000422:	4013      	ands	r3, r2
 8000424:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000426:	68fb      	ldr	r3, [r7, #12]
}
 8000428:	46c0      	nop			; (mov r8, r8)
 800042a:	46bd      	mov	sp, r7
 800042c:	b004      	add	sp, #16
 800042e:	bd80      	pop	{r7, pc}
 8000430:	40021000 	.word	0x40021000

08000434 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b082      	sub	sp, #8
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 800043c:	4b06      	ldr	r3, [pc, #24]	; (8000458 <LL_FLASH_SetLatency+0x24>)
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	2207      	movs	r2, #7
 8000442:	4393      	bics	r3, r2
 8000444:	0019      	movs	r1, r3
 8000446:	4b04      	ldr	r3, [pc, #16]	; (8000458 <LL_FLASH_SetLatency+0x24>)
 8000448:	687a      	ldr	r2, [r7, #4]
 800044a:	430a      	orrs	r2, r1
 800044c:	601a      	str	r2, [r3, #0]
}
 800044e:	46c0      	nop			; (mov r8, r8)
 8000450:	46bd      	mov	sp, r7
 8000452:	b002      	add	sp, #8
 8000454:	bd80      	pop	{r7, pc}
 8000456:	46c0      	nop			; (mov r8, r8)
 8000458:	40022000 	.word	0x40022000

0800045c <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b084      	sub	sp, #16
 8000460:	af00      	add	r7, sp, #0
 8000462:	60f8      	str	r0, [r7, #12]
 8000464:	60b9      	str	r1, [r7, #8]
 8000466:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8000468:	68fb      	ldr	r3, [r7, #12]
 800046a:	6819      	ldr	r1, [r3, #0]
 800046c:	68bb      	ldr	r3, [r7, #8]
 800046e:	435b      	muls	r3, r3
 8000470:	001a      	movs	r2, r3
 8000472:	0013      	movs	r3, r2
 8000474:	005b      	lsls	r3, r3, #1
 8000476:	189b      	adds	r3, r3, r2
 8000478:	43db      	mvns	r3, r3
 800047a:	400b      	ands	r3, r1
 800047c:	001a      	movs	r2, r3
 800047e:	68bb      	ldr	r3, [r7, #8]
 8000480:	435b      	muls	r3, r3
 8000482:	6879      	ldr	r1, [r7, #4]
 8000484:	434b      	muls	r3, r1
 8000486:	431a      	orrs	r2, r3
 8000488:	68fb      	ldr	r3, [r7, #12]
 800048a:	601a      	str	r2, [r3, #0]
}
 800048c:	46c0      	nop			; (mov r8, r8)
 800048e:	46bd      	mov	sp, r7
 8000490:	b004      	add	sp, #16
 8000492:	bd80      	pop	{r7, pc}

08000494 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b084      	sub	sp, #16
 8000498:	af00      	add	r7, sp, #0
 800049a:	60f8      	str	r0, [r7, #12]
 800049c:	60b9      	str	r1, [r7, #8]
 800049e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80004a0:	68fb      	ldr	r3, [r7, #12]
 80004a2:	685b      	ldr	r3, [r3, #4]
 80004a4:	68ba      	ldr	r2, [r7, #8]
 80004a6:	43d2      	mvns	r2, r2
 80004a8:	401a      	ands	r2, r3
 80004aa:	68bb      	ldr	r3, [r7, #8]
 80004ac:	6879      	ldr	r1, [r7, #4]
 80004ae:	434b      	muls	r3, r1
 80004b0:	431a      	orrs	r2, r3
 80004b2:	68fb      	ldr	r3, [r7, #12]
 80004b4:	605a      	str	r2, [r3, #4]
}
 80004b6:	46c0      	nop			; (mov r8, r8)
 80004b8:	46bd      	mov	sp, r7
 80004ba:	b004      	add	sp, #16
 80004bc:	bd80      	pop	{r7, pc}

080004be <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80004be:	b580      	push	{r7, lr}
 80004c0:	b084      	sub	sp, #16
 80004c2:	af00      	add	r7, sp, #0
 80004c4:	60f8      	str	r0, [r7, #12]
 80004c6:	60b9      	str	r1, [r7, #8]
 80004c8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 80004ca:	68fb      	ldr	r3, [r7, #12]
 80004cc:	6899      	ldr	r1, [r3, #8]
 80004ce:	68bb      	ldr	r3, [r7, #8]
 80004d0:	435b      	muls	r3, r3
 80004d2:	001a      	movs	r2, r3
 80004d4:	0013      	movs	r3, r2
 80004d6:	005b      	lsls	r3, r3, #1
 80004d8:	189b      	adds	r3, r3, r2
 80004da:	43db      	mvns	r3, r3
 80004dc:	400b      	ands	r3, r1
 80004de:	001a      	movs	r2, r3
 80004e0:	68bb      	ldr	r3, [r7, #8]
 80004e2:	435b      	muls	r3, r3
 80004e4:	6879      	ldr	r1, [r7, #4]
 80004e6:	434b      	muls	r3, r1
 80004e8:	431a      	orrs	r2, r3
 80004ea:	68fb      	ldr	r3, [r7, #12]
 80004ec:	609a      	str	r2, [r3, #8]
}
 80004ee:	46c0      	nop			; (mov r8, r8)
 80004f0:	46bd      	mov	sp, r7
 80004f2:	b004      	add	sp, #16
 80004f4:	bd80      	pop	{r7, pc}

080004f6 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80004f6:	b580      	push	{r7, lr}
 80004f8:	b084      	sub	sp, #16
 80004fa:	af00      	add	r7, sp, #0
 80004fc:	60f8      	str	r0, [r7, #12]
 80004fe:	60b9      	str	r1, [r7, #8]
 8000500:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8000502:	68fb      	ldr	r3, [r7, #12]
 8000504:	68d9      	ldr	r1, [r3, #12]
 8000506:	68bb      	ldr	r3, [r7, #8]
 8000508:	435b      	muls	r3, r3
 800050a:	001a      	movs	r2, r3
 800050c:	0013      	movs	r3, r2
 800050e:	005b      	lsls	r3, r3, #1
 8000510:	189b      	adds	r3, r3, r2
 8000512:	43db      	mvns	r3, r3
 8000514:	400b      	ands	r3, r1
 8000516:	001a      	movs	r2, r3
 8000518:	68bb      	ldr	r3, [r7, #8]
 800051a:	435b      	muls	r3, r3
 800051c:	6879      	ldr	r1, [r7, #4]
 800051e:	434b      	muls	r3, r1
 8000520:	431a      	orrs	r2, r3
 8000522:	68fb      	ldr	r3, [r7, #12]
 8000524:	60da      	str	r2, [r3, #12]
}
 8000526:	46c0      	nop			; (mov r8, r8)
 8000528:	46bd      	mov	sp, r7
 800052a:	b004      	add	sp, #16
 800052c:	bd80      	pop	{r7, pc}

0800052e <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800052e:	b580      	push	{r7, lr}
 8000530:	b082      	sub	sp, #8
 8000532:	af00      	add	r7, sp, #0
 8000534:	6078      	str	r0, [r7, #4]
 8000536:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(GPIOx->IDR, PinMask) == (PinMask)) ? 1UL : 0UL);
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	691b      	ldr	r3, [r3, #16]
 800053c:	683a      	ldr	r2, [r7, #0]
 800053e:	4013      	ands	r3, r2
 8000540:	683a      	ldr	r2, [r7, #0]
 8000542:	429a      	cmp	r2, r3
 8000544:	d101      	bne.n	800054a <LL_GPIO_IsInputPinSet+0x1c>
 8000546:	2301      	movs	r3, #1
 8000548:	e000      	b.n	800054c <LL_GPIO_IsInputPinSet+0x1e>
 800054a:	2300      	movs	r3, #0
}
 800054c:	0018      	movs	r0, r3
 800054e:	46bd      	mov	sp, r7
 8000550:	b002      	add	sp, #8
 8000552:	bd80      	pop	{r7, pc}

08000554 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
 800055c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	683a      	ldr	r2, [r7, #0]
 8000562:	619a      	str	r2, [r3, #24]
}
 8000564:	46c0      	nop			; (mov r8, r8)
 8000566:	46bd      	mov	sp, r7
 8000568:	b002      	add	sp, #8
 800056a:	bd80      	pop	{r7, pc}

0800056c <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
 8000574:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	683a      	ldr	r2, [r7, #0]
 800057a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800057c:	46c0      	nop			; (mov r8, r8)
 800057e:	46bd      	mov	sp, r7
 8000580:	b002      	add	sp, #8
 8000582:	bd80      	pop	{r7, pc}

08000584 <main>:
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif


int main(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
	//RCC
	LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 8000588:	2002      	movs	r0, #2
 800058a:	f7ff ff53 	bl	8000434 <LL_FLASH_SetLatency>

	LL_RCC_HSI_Enable();
 800058e:	f7ff fe7d 	bl	800028c <LL_RCC_HSI_Enable>
	while(LL_RCC_HSI_IsReady() != 1)
 8000592:	46c0      	nop			; (mov r8, r8)
 8000594:	f7ff fe88 	bl	80002a8 <LL_RCC_HSI_IsReady>
 8000598:	0003      	movs	r3, r0
 800059a:	2b01      	cmp	r3, #1
 800059c:	d1fa      	bne.n	8000594 <main+0x10>
		;

	LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_1, 8, LL_RCC_PLLR_DIV_2);
 800059e:	2380      	movs	r3, #128	; 0x80
 80005a0:	059b      	lsls	r3, r3, #22
 80005a2:	2208      	movs	r2, #8
 80005a4:	2100      	movs	r1, #0
 80005a6:	2002      	movs	r0, #2
 80005a8:	f7ff ff00 	bl	80003ac <LL_RCC_PLL_ConfigDomain_SYS>

	LL_RCC_PLL_Enable();
 80005ac:	f7ff fedc 	bl	8000368 <LL_RCC_PLL_Enable>
	while(LL_RCC_PLL_IsReady() != 1)
 80005b0:	46c0      	nop			; (mov r8, r8)
 80005b2:	f7ff fee7 	bl	8000384 <LL_RCC_PLL_IsReady>
 80005b6:	0003      	movs	r3, r0
 80005b8:	2b01      	cmp	r3, #1
 80005ba:	d1fa      	bne.n	80005b2 <main+0x2e>
		;

	LL_RCC_PLL_EnableDomain_SYS();
 80005bc:	f7ff ff16 	bl	80003ec <LL_RCC_PLL_EnableDomain_SYS>

	LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80005c0:	2000      	movs	r0, #0
 80005c2:	f7ff fea5 	bl	8000310 <LL_RCC_SetAHBPrescaler>
	LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 80005c6:	2000      	movs	r0, #0
 80005c8:	f7ff feb8 	bl	800033c <LL_RCC_SetAPB1Prescaler>

	LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 80005cc:	2002      	movs	r0, #2
 80005ce:	f7ff fe7f 	bl	80002d0 <LL_RCC_SetSysClkSource>
	while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80005d2:	46c0      	nop			; (mov r8, r8)
 80005d4:	f7ff fe90 	bl	80002f8 <LL_RCC_GetSysClkSource>
 80005d8:	0003      	movs	r3, r0
 80005da:	2b10      	cmp	r3, #16
 80005dc:	d1fa      	bne.n	80005d4 <main+0x50>
		;

	LL_SetSystemCoreClock(64000000);
 80005de:	4b2b      	ldr	r3, [pc, #172]	; (800068c <main+0x108>)
 80005e0:	0018      	movs	r0, r3
 80005e2:	f7ff fe45 	bl	8000270 <LL_SetSystemCoreClock>
	LL_Init1msTick(64000000);
 80005e6:	4b29      	ldr	r3, [pc, #164]	; (800068c <main+0x108>)
 80005e8:	0018      	movs	r0, r3
 80005ea:	f7ff fe31 	bl	8000250 <LL_Init1msTick>

	//GPIO
	LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 80005ee:	2001      	movs	r0, #1
 80005f0:	f7ff ff0a 	bl	8000408 <LL_IOP_GRP1_EnableClock>
	LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOC);
 80005f4:	2004      	movs	r0, #4
 80005f6:	f7ff ff07 	bl	8000408 <LL_IOP_GRP1_EnableClock>

	LL_GPIO_SetPinOutputType(LED_GREEN_GPIO_Port, LED_GREEN_Pin, LL_GPIO_OUTPUT_PUSHPULL);
 80005fa:	23a0      	movs	r3, #160	; 0xa0
 80005fc:	05db      	lsls	r3, r3, #23
 80005fe:	2200      	movs	r2, #0
 8000600:	2120      	movs	r1, #32
 8000602:	0018      	movs	r0, r3
 8000604:	f7ff ff46 	bl	8000494 <LL_GPIO_SetPinOutputType>
	LL_GPIO_SetPinPull(LED_GREEN_GPIO_Port, LED_GREEN_Pin, LL_GPIO_PULL_NO);
 8000608:	23a0      	movs	r3, #160	; 0xa0
 800060a:	05db      	lsls	r3, r3, #23
 800060c:	2200      	movs	r2, #0
 800060e:	2120      	movs	r1, #32
 8000610:	0018      	movs	r0, r3
 8000612:	f7ff ff70 	bl	80004f6 <LL_GPIO_SetPinPull>
	LL_GPIO_SetPinSpeed(LED_GREEN_GPIO_Port, LED_GREEN_Pin, LL_GPIO_SPEED_FREQ_LOW);
 8000616:	23a0      	movs	r3, #160	; 0xa0
 8000618:	05db      	lsls	r3, r3, #23
 800061a:	2200      	movs	r2, #0
 800061c:	2120      	movs	r1, #32
 800061e:	0018      	movs	r0, r3
 8000620:	f7ff ff4d 	bl	80004be <LL_GPIO_SetPinSpeed>
	LL_GPIO_SetPinMode(LED_GREEN_GPIO_Port, LED_GREEN_Pin, LL_GPIO_MODE_OUTPUT);
 8000624:	23a0      	movs	r3, #160	; 0xa0
 8000626:	05db      	lsls	r3, r3, #23
 8000628:	2201      	movs	r2, #1
 800062a:	2120      	movs	r1, #32
 800062c:	0018      	movs	r0, r3
 800062e:	f7ff ff15 	bl	800045c <LL_GPIO_SetPinMode>

	LL_GPIO_SetPinPull(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin, LL_GPIO_PULL_NO);
 8000632:	2380      	movs	r3, #128	; 0x80
 8000634:	019b      	lsls	r3, r3, #6
 8000636:	4816      	ldr	r0, [pc, #88]	; (8000690 <main+0x10c>)
 8000638:	2200      	movs	r2, #0
 800063a:	0019      	movs	r1, r3
 800063c:	f7ff ff5b 	bl	80004f6 <LL_GPIO_SetPinPull>
	LL_GPIO_SetPinSpeed(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin, LL_GPIO_SPEED_FREQ_LOW);
 8000640:	2380      	movs	r3, #128	; 0x80
 8000642:	019b      	lsls	r3, r3, #6
 8000644:	4812      	ldr	r0, [pc, #72]	; (8000690 <main+0x10c>)
 8000646:	2200      	movs	r2, #0
 8000648:	0019      	movs	r1, r3
 800064a:	f7ff ff38 	bl	80004be <LL_GPIO_SetPinSpeed>
	LL_GPIO_SetPinMode(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin, LL_GPIO_MODE_INPUT);
 800064e:	2380      	movs	r3, #128	; 0x80
 8000650:	019b      	lsls	r3, r3, #6
 8000652:	480f      	ldr	r0, [pc, #60]	; (8000690 <main+0x10c>)
 8000654:	2200      	movs	r2, #0
 8000656:	0019      	movs	r1, r3
 8000658:	f7ff ff00 	bl	800045c <LL_GPIO_SetPinMode>

	while (1)
	{
		if(LL_GPIO_IsInputPinSet(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin))
 800065c:	2380      	movs	r3, #128	; 0x80
 800065e:	019b      	lsls	r3, r3, #6
 8000660:	4a0b      	ldr	r2, [pc, #44]	; (8000690 <main+0x10c>)
 8000662:	0019      	movs	r1, r3
 8000664:	0010      	movs	r0, r2
 8000666:	f7ff ff62 	bl	800052e <LL_GPIO_IsInputPinSet>
 800066a:	1e03      	subs	r3, r0, #0
 800066c:	d006      	beq.n	800067c <main+0xf8>
		{
			LL_GPIO_ResetOutputPin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 800066e:	23a0      	movs	r3, #160	; 0xa0
 8000670:	05db      	lsls	r3, r3, #23
 8000672:	2120      	movs	r1, #32
 8000674:	0018      	movs	r0, r3
 8000676:	f7ff ff79 	bl	800056c <LL_GPIO_ResetOutputPin>
 800067a:	e7ef      	b.n	800065c <main+0xd8>
		}
		else
		{
			LL_GPIO_SetOutputPin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 800067c:	23a0      	movs	r3, #160	; 0xa0
 800067e:	05db      	lsls	r3, r3, #23
 8000680:	2120      	movs	r1, #32
 8000682:	0018      	movs	r0, r3
 8000684:	f7ff ff66 	bl	8000554 <LL_GPIO_SetOutputPin>
		if(LL_GPIO_IsInputPinSet(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin))
 8000688:	e7e8      	b.n	800065c <main+0xd8>
 800068a:	46c0      	nop			; (mov r8, r8)
 800068c:	03d09000 	.word	0x03d09000
 8000690:	50000800 	.word	0x50000800

08000694 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000698:	46c0      	nop			; (mov r8, r8)
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
	...

080006a0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006a0:	480d      	ldr	r0, [pc, #52]	; (80006d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006a2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80006a4:	f7ff fff6 	bl	8000694 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006a8:	480c      	ldr	r0, [pc, #48]	; (80006dc <LoopForever+0x6>)
  ldr r1, =_edata
 80006aa:	490d      	ldr	r1, [pc, #52]	; (80006e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006ac:	4a0d      	ldr	r2, [pc, #52]	; (80006e4 <LoopForever+0xe>)
  movs r3, #0
 80006ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006b0:	e002      	b.n	80006b8 <LoopCopyDataInit>

080006b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006b6:	3304      	adds	r3, #4

080006b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006bc:	d3f9      	bcc.n	80006b2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006be:	4a0a      	ldr	r2, [pc, #40]	; (80006e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006c0:	4c0a      	ldr	r4, [pc, #40]	; (80006ec <LoopForever+0x16>)
  movs r3, #0
 80006c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006c4:	e001      	b.n	80006ca <LoopFillZerobss>

080006c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006c8:	3204      	adds	r2, #4

080006ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006cc:	d3fb      	bcc.n	80006c6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80006ce:	f000 f811 	bl	80006f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006d2:	f7ff ff57 	bl	8000584 <main>

080006d6 <LoopForever>:

LoopForever:
    b LoopForever
 80006d6:	e7fe      	b.n	80006d6 <LoopForever>
  ldr   r0, =_estack
 80006d8:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80006dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006e0:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80006e4:	0800075c 	.word	0x0800075c
  ldr r2, =_sbss
 80006e8:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80006ec:	20000020 	.word	0x20000020

080006f0 <ADC_COMP_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006f0:	e7fe      	b.n	80006f0 <ADC_COMP_IRQHandler>
	...

080006f4 <__libc_init_array>:
 80006f4:	b570      	push	{r4, r5, r6, lr}
 80006f6:	2600      	movs	r6, #0
 80006f8:	4d0c      	ldr	r5, [pc, #48]	; (800072c <__libc_init_array+0x38>)
 80006fa:	4c0d      	ldr	r4, [pc, #52]	; (8000730 <__libc_init_array+0x3c>)
 80006fc:	1b64      	subs	r4, r4, r5
 80006fe:	10a4      	asrs	r4, r4, #2
 8000700:	42a6      	cmp	r6, r4
 8000702:	d109      	bne.n	8000718 <__libc_init_array+0x24>
 8000704:	2600      	movs	r6, #0
 8000706:	f000 f819 	bl	800073c <_init>
 800070a:	4d0a      	ldr	r5, [pc, #40]	; (8000734 <__libc_init_array+0x40>)
 800070c:	4c0a      	ldr	r4, [pc, #40]	; (8000738 <__libc_init_array+0x44>)
 800070e:	1b64      	subs	r4, r4, r5
 8000710:	10a4      	asrs	r4, r4, #2
 8000712:	42a6      	cmp	r6, r4
 8000714:	d105      	bne.n	8000722 <__libc_init_array+0x2e>
 8000716:	bd70      	pop	{r4, r5, r6, pc}
 8000718:	00b3      	lsls	r3, r6, #2
 800071a:	58eb      	ldr	r3, [r5, r3]
 800071c:	4798      	blx	r3
 800071e:	3601      	adds	r6, #1
 8000720:	e7ee      	b.n	8000700 <__libc_init_array+0xc>
 8000722:	00b3      	lsls	r3, r6, #2
 8000724:	58eb      	ldr	r3, [r5, r3]
 8000726:	4798      	blx	r3
 8000728:	3601      	adds	r6, #1
 800072a:	e7f2      	b.n	8000712 <__libc_init_array+0x1e>
 800072c:	08000754 	.word	0x08000754
 8000730:	08000754 	.word	0x08000754
 8000734:	08000754 	.word	0x08000754
 8000738:	08000758 	.word	0x08000758

0800073c <_init>:
 800073c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800073e:	46c0      	nop			; (mov r8, r8)
 8000740:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000742:	bc08      	pop	{r3}
 8000744:	469e      	mov	lr, r3
 8000746:	4770      	bx	lr

08000748 <_fini>:
 8000748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800074a:	46c0      	nop			; (mov r8, r8)
 800074c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800074e:	bc08      	pop	{r3}
 8000750:	469e      	mov	lr, r3
 8000752:	4770      	bx	lr
