
06_06_Kurs_STM32_LL_ADC_Multi_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000114c  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001208  08001208  00011208  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001218  08001218  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08001218  08001218  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001218  08001218  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001218  08001218  00011218  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800121c  0800121c  0001121c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08001220  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000038  20000004  08001224  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000003c  08001224  0002003c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000029ad  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000959  00000000  00000000  000229d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000380  00000000  00000000  00023338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000318  00000000  00000000  000236b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000107e6  00000000  00000000  000239d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000301a  00000000  00000000  000341b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00063907  00000000  00000000  000371d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0009aad7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000b74  00000000  00000000  0009ab28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000004 	.word	0x20000004
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080011f0 	.word	0x080011f0

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000008 	.word	0x20000008
 8000100:	080011f0 	.word	0x080011f0

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
 8000222:	6078      	str	r0, [r7, #4]
 8000224:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8000226:	6839      	ldr	r1, [r7, #0]
 8000228:	6878      	ldr	r0, [r7, #4]
 800022a:	f7ff ff6b 	bl	8000104 <__udivsi3>
 800022e:	0003      	movs	r3, r0
 8000230:	001a      	movs	r2, r3
 8000232:	4b06      	ldr	r3, [pc, #24]	; (800024c <LL_InitTick+0x30>)
 8000234:	3a01      	subs	r2, #1
 8000236:	605a      	str	r2, [r3, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8000238:	4b04      	ldr	r3, [pc, #16]	; (800024c <LL_InitTick+0x30>)
 800023a:	2200      	movs	r2, #0
 800023c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800023e:	4b03      	ldr	r3, [pc, #12]	; (800024c <LL_InitTick+0x30>)
 8000240:	2205      	movs	r2, #5
 8000242:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8000244:	46c0      	nop			; (mov r8, r8)
 8000246:	46bd      	mov	sp, r7
 8000248:	b002      	add	sp, #8
 800024a:	bd80      	pop	{r7, pc}
 800024c:	e000e010 	.word	0xe000e010

08000250 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b082      	sub	sp, #8
 8000254:	af00      	add	r7, sp, #0
 8000256:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8000258:	23fa      	movs	r3, #250	; 0xfa
 800025a:	009a      	lsls	r2, r3, #2
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	0011      	movs	r1, r2
 8000260:	0018      	movs	r0, r3
 8000262:	f7ff ffdb 	bl	800021c <LL_InitTick>
}
 8000266:	46c0      	nop			; (mov r8, r8)
 8000268:	46bd      	mov	sp, r7
 800026a:	b002      	add	sp, #8
 800026c:	bd80      	pop	{r7, pc}
	...

08000270 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b084      	sub	sp, #16
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8000278:	4b0e      	ldr	r3, [pc, #56]	; (80002b4 <LL_mDelay+0x44>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	60bb      	str	r3, [r7, #8]
   uint32_t tmpDelay; /* MISRAC2012-Rule-17.8 */
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 800027e:	68bb      	ldr	r3, [r7, #8]
  tmpDelay  = Delay;
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	60fb      	str	r3, [r7, #12]
  /* Add a period to guaranty minimum wait */
  if (tmpDelay  < LL_MAX_DELAY)
 8000284:	68fb      	ldr	r3, [r7, #12]
 8000286:	3301      	adds	r3, #1
 8000288:	d00c      	beq.n	80002a4 <LL_mDelay+0x34>
  {
    tmpDelay ++;
 800028a:	68fb      	ldr	r3, [r7, #12]
 800028c:	3301      	adds	r3, #1
 800028e:	60fb      	str	r3, [r7, #12]
  }

  while (tmpDelay  != 0U)
 8000290:	e008      	b.n	80002a4 <LL_mDelay+0x34>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8000292:	4b08      	ldr	r3, [pc, #32]	; (80002b4 <LL_mDelay+0x44>)
 8000294:	681a      	ldr	r2, [r3, #0]
 8000296:	2380      	movs	r3, #128	; 0x80
 8000298:	025b      	lsls	r3, r3, #9
 800029a:	4013      	ands	r3, r2
 800029c:	d002      	beq.n	80002a4 <LL_mDelay+0x34>
    {
      tmpDelay --;
 800029e:	68fb      	ldr	r3, [r7, #12]
 80002a0:	3b01      	subs	r3, #1
 80002a2:	60fb      	str	r3, [r7, #12]
  while (tmpDelay  != 0U)
 80002a4:	68fb      	ldr	r3, [r7, #12]
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d1f3      	bne.n	8000292 <LL_mDelay+0x22>
    }
  }
}
 80002aa:	46c0      	nop			; (mov r8, r8)
 80002ac:	46c0      	nop			; (mov r8, r8)
 80002ae:	46bd      	mov	sp, r7
 80002b0:	b004      	add	sp, #16
 80002b2:	bd80      	pop	{r7, pc}
 80002b4:	e000e010 	.word	0xe000e010

080002b8 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b082      	sub	sp, #8
 80002bc:	af00      	add	r7, sp, #0
 80002be:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80002c0:	4b03      	ldr	r3, [pc, #12]	; (80002d0 <LL_SetSystemCoreClock+0x18>)
 80002c2:	687a      	ldr	r2, [r7, #4]
 80002c4:	601a      	str	r2, [r3, #0]
}
 80002c6:	46c0      	nop			; (mov r8, r8)
 80002c8:	46bd      	mov	sp, r7
 80002ca:	b002      	add	sp, #8
 80002cc:	bd80      	pop	{r7, pc}
 80002ce:	46c0      	nop			; (mov r8, r8)
 80002d0:	20000000 	.word	0x20000000

080002d4 <LL_ADC_DMA_GetRegAddr>:
  * @param  Register This parameter can be one of the following values:
  *         @arg @ref LL_ADC_DMA_REG_REGULAR_DATA
  * @retval ADC register address
  */
__STATIC_INLINE uint32_t LL_ADC_DMA_GetRegAddr(ADC_TypeDef *ADCx, uint32_t Register)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b082      	sub	sp, #8
 80002d8:	af00      	add	r7, sp, #0
 80002da:	6078      	str	r0, [r7, #4]
 80002dc:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(Register);

  /* Retrieve address of register DR */
  return (uint32_t) &(ADCx->DR);
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	3340      	adds	r3, #64	; 0x40
}
 80002e2:	0018      	movs	r0, r3
 80002e4:	46bd      	mov	sp, r7
 80002e6:	b002      	add	sp, #8
 80002e8:	bd80      	pop	{r7, pc}
	...

080002ec <LL_DMA_EnableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b084      	sub	sp, #16
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	6078      	str	r0, [r7, #4]
 80002f4:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 80002fa:	4a0b      	ldr	r2, [pc, #44]	; (8000328 <LL_DMA_EnableChannel+0x3c>)
 80002fc:	683b      	ldr	r3, [r7, #0]
 80002fe:	18d3      	adds	r3, r2, r3
 8000300:	781b      	ldrb	r3, [r3, #0]
 8000302:	001a      	movs	r2, r3
 8000304:	68fb      	ldr	r3, [r7, #12]
 8000306:	18d3      	adds	r3, r2, r3
 8000308:	681a      	ldr	r2, [r3, #0]
 800030a:	4907      	ldr	r1, [pc, #28]	; (8000328 <LL_DMA_EnableChannel+0x3c>)
 800030c:	683b      	ldr	r3, [r7, #0]
 800030e:	18cb      	adds	r3, r1, r3
 8000310:	781b      	ldrb	r3, [r3, #0]
 8000312:	0019      	movs	r1, r3
 8000314:	68fb      	ldr	r3, [r7, #12]
 8000316:	18cb      	adds	r3, r1, r3
 8000318:	2101      	movs	r1, #1
 800031a:	430a      	orrs	r2, r1
 800031c:	601a      	str	r2, [r3, #0]
}
 800031e:	46c0      	nop			; (mov r8, r8)
 8000320:	46bd      	mov	sp, r7
 8000322:	b004      	add	sp, #16
 8000324:	bd80      	pop	{r7, pc}
 8000326:	46c0      	nop			; (mov r8, r8)
 8000328:	08001208 	.word	0x08001208

0800032c <LL_DMA_GetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_PERIPH_TO_MEMORY
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  */
__STATIC_INLINE uint32_t LL_DMA_GetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b084      	sub	sp, #16
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
 8000334:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	60fb      	str	r3, [r7, #12]
  return (READ_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 800033a:	4a07      	ldr	r2, [pc, #28]	; (8000358 <LL_DMA_GetDataTransferDirection+0x2c>)
 800033c:	683b      	ldr	r3, [r7, #0]
 800033e:	18d3      	adds	r3, r2, r3
 8000340:	781b      	ldrb	r3, [r3, #0]
 8000342:	001a      	movs	r2, r3
 8000344:	68fb      	ldr	r3, [r7, #12]
 8000346:	18d3      	adds	r3, r2, r3
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	4a04      	ldr	r2, [pc, #16]	; (800035c <LL_DMA_GetDataTransferDirection+0x30>)
 800034c:	4013      	ands	r3, r2
                   DMA_CCR_DIR | DMA_CCR_MEM2MEM));
}
 800034e:	0018      	movs	r0, r3
 8000350:	46bd      	mov	sp, r7
 8000352:	b004      	add	sp, #16
 8000354:	bd80      	pop	{r7, pc}
 8000356:	46c0      	nop			; (mov r8, r8)
 8000358:	08001208 	.word	0x08001208
 800035c:	00004010 	.word	0x00004010

08000360 <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  NbData Between Min_Data = 0 and Max_Data = 0x0000FFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t NbData)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b086      	sub	sp, #24
 8000364:	af00      	add	r7, sp, #0
 8000366:	60f8      	str	r0, [r7, #12]
 8000368:	60b9      	str	r1, [r7, #8]
 800036a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800036c:	68fb      	ldr	r3, [r7, #12]
 800036e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 8000370:	4a0b      	ldr	r2, [pc, #44]	; (80003a0 <LL_DMA_SetDataLength+0x40>)
 8000372:	68bb      	ldr	r3, [r7, #8]
 8000374:	18d3      	adds	r3, r2, r3
 8000376:	781b      	ldrb	r3, [r3, #0]
 8000378:	001a      	movs	r2, r3
 800037a:	697b      	ldr	r3, [r7, #20]
 800037c:	18d3      	adds	r3, r2, r3
 800037e:	685b      	ldr	r3, [r3, #4]
 8000380:	0c1b      	lsrs	r3, r3, #16
 8000382:	0419      	lsls	r1, r3, #16
 8000384:	4a06      	ldr	r2, [pc, #24]	; (80003a0 <LL_DMA_SetDataLength+0x40>)
 8000386:	68bb      	ldr	r3, [r7, #8]
 8000388:	18d3      	adds	r3, r2, r3
 800038a:	781b      	ldrb	r3, [r3, #0]
 800038c:	001a      	movs	r2, r3
 800038e:	697b      	ldr	r3, [r7, #20]
 8000390:	18d3      	adds	r3, r2, r3
 8000392:	687a      	ldr	r2, [r7, #4]
 8000394:	430a      	orrs	r2, r1
 8000396:	605a      	str	r2, [r3, #4]
             DMA_CNDTR_NDT, NbData);
}
 8000398:	46c0      	nop			; (mov r8, r8)
 800039a:	46bd      	mov	sp, r7
 800039c:	b006      	add	sp, #24
 800039e:	bd80      	pop	{r7, pc}
 80003a0:	08001208 	.word	0x08001208

080003a4 <LL_DMA_ConfigAddresses>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ConfigAddresses(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t SrcAddress,
                                            uint32_t DstAddress, uint32_t Direction)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b086      	sub	sp, #24
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	60f8      	str	r0, [r7, #12]
 80003ac:	60b9      	str	r1, [r7, #8]
 80003ae:	607a      	str	r2, [r7, #4]
 80003b0:	603b      	str	r3, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80003b2:	68fb      	ldr	r3, [r7, #12]
 80003b4:	617b      	str	r3, [r7, #20]
  /* Direction Memory to Periph */
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 80003b6:	6a3b      	ldr	r3, [r7, #32]
 80003b8:	2b10      	cmp	r3, #16
 80003ba:	d112      	bne.n	80003e2 <LL_DMA_ConfigAddresses+0x3e>
  {
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, SrcAddress);
 80003bc:	4a14      	ldr	r2, [pc, #80]	; (8000410 <LL_DMA_ConfigAddresses+0x6c>)
 80003be:	68bb      	ldr	r3, [r7, #8]
 80003c0:	18d3      	adds	r3, r2, r3
 80003c2:	781b      	ldrb	r3, [r3, #0]
 80003c4:	001a      	movs	r2, r3
 80003c6:	697b      	ldr	r3, [r7, #20]
 80003c8:	18d3      	adds	r3, r2, r3
 80003ca:	687a      	ldr	r2, [r7, #4]
 80003cc:	60da      	str	r2, [r3, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, DstAddress);
 80003ce:	4a10      	ldr	r2, [pc, #64]	; (8000410 <LL_DMA_ConfigAddresses+0x6c>)
 80003d0:	68bb      	ldr	r3, [r7, #8]
 80003d2:	18d3      	adds	r3, r2, r3
 80003d4:	781b      	ldrb	r3, [r3, #0]
 80003d6:	001a      	movs	r2, r3
 80003d8:	697b      	ldr	r3, [r7, #20]
 80003da:	18d3      	adds	r3, r2, r3
 80003dc:	683a      	ldr	r2, [r7, #0]
 80003de:	609a      	str	r2, [r3, #8]
  else
  {
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, SrcAddress);
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, DstAddress);
  }
}
 80003e0:	e011      	b.n	8000406 <LL_DMA_ConfigAddresses+0x62>
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, SrcAddress);
 80003e2:	4a0b      	ldr	r2, [pc, #44]	; (8000410 <LL_DMA_ConfigAddresses+0x6c>)
 80003e4:	68bb      	ldr	r3, [r7, #8]
 80003e6:	18d3      	adds	r3, r2, r3
 80003e8:	781b      	ldrb	r3, [r3, #0]
 80003ea:	001a      	movs	r2, r3
 80003ec:	697b      	ldr	r3, [r7, #20]
 80003ee:	18d3      	adds	r3, r2, r3
 80003f0:	687a      	ldr	r2, [r7, #4]
 80003f2:	609a      	str	r2, [r3, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, DstAddress);
 80003f4:	4a06      	ldr	r2, [pc, #24]	; (8000410 <LL_DMA_ConfigAddresses+0x6c>)
 80003f6:	68bb      	ldr	r3, [r7, #8]
 80003f8:	18d3      	adds	r3, r2, r3
 80003fa:	781b      	ldrb	r3, [r3, #0]
 80003fc:	001a      	movs	r2, r3
 80003fe:	697b      	ldr	r3, [r7, #20]
 8000400:	18d3      	adds	r3, r2, r3
 8000402:	683a      	ldr	r2, [r7, #0]
 8000404:	60da      	str	r2, [r3, #12]
}
 8000406:	46c0      	nop			; (mov r8, r8)
 8000408:	46bd      	mov	sp, r7
 800040a:	b006      	add	sp, #24
 800040c:	bd80      	pop	{r7, pc}
 800040e:	46c0      	nop			; (mov r8, r8)
 8000410:	08001208 	.word	0x08001208

08000414 <adc_start_dma_conversion>:

uint32_t adc_data[NUMBER_OF_CONVERSION] = {0};
uint32_t voltage_mv[NUMBER_OF_CONVERSION] = {0};

void adc_start_dma_conversion(void)
{
 8000414:	b5b0      	push	{r4, r5, r7, lr}
 8000416:	b082      	sub	sp, #8
 8000418:	af02      	add	r7, sp, #8
	LL_DMA_ConfigAddresses(DMA1, LL_DMA_CHANNEL_1, LL_ADC_DMA_GetRegAddr(ADC1, LL_ADC_DMA_REG_REGULAR_DATA), (uint32_t)adc_data, LL_DMA_GetDataTransferDirection(DMA1, LL_DMA_CHANNEL_1));
 800041a:	4b11      	ldr	r3, [pc, #68]	; (8000460 <adc_start_dma_conversion+0x4c>)
 800041c:	2100      	movs	r1, #0
 800041e:	0018      	movs	r0, r3
 8000420:	f7ff ff58 	bl	80002d4 <LL_ADC_DMA_GetRegAddr>
 8000424:	0005      	movs	r5, r0
 8000426:	4c0f      	ldr	r4, [pc, #60]	; (8000464 <adc_start_dma_conversion+0x50>)
 8000428:	4b0f      	ldr	r3, [pc, #60]	; (8000468 <adc_start_dma_conversion+0x54>)
 800042a:	2100      	movs	r1, #0
 800042c:	0018      	movs	r0, r3
 800042e:	f7ff ff7d 	bl	800032c <LL_DMA_GetDataTransferDirection>
 8000432:	0003      	movs	r3, r0
 8000434:	480c      	ldr	r0, [pc, #48]	; (8000468 <adc_start_dma_conversion+0x54>)
 8000436:	9300      	str	r3, [sp, #0]
 8000438:	0023      	movs	r3, r4
 800043a:	002a      	movs	r2, r5
 800043c:	2100      	movs	r1, #0
 800043e:	f7ff ffb1 	bl	80003a4 <LL_DMA_ConfigAddresses>
	LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_1, NUMBER_OF_CONVERSION);
 8000442:	4b09      	ldr	r3, [pc, #36]	; (8000468 <adc_start_dma_conversion+0x54>)
 8000444:	2203      	movs	r2, #3
 8000446:	2100      	movs	r1, #0
 8000448:	0018      	movs	r0, r3
 800044a:	f7ff ff89 	bl	8000360 <LL_DMA_SetDataLength>

	LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_1);
 800044e:	4b06      	ldr	r3, [pc, #24]	; (8000468 <adc_start_dma_conversion+0x54>)
 8000450:	2100      	movs	r1, #0
 8000452:	0018      	movs	r0, r3
 8000454:	f7ff ff4a 	bl	80002ec <LL_DMA_EnableChannel>
}
 8000458:	46c0      	nop			; (mov r8, r8)
 800045a:	46bd      	mov	sp, r7
 800045c:	bdb0      	pop	{r4, r5, r7, pc}
 800045e:	46c0      	nop			; (mov r8, r8)
 8000460:	40012400 	.word	0x40012400
 8000464:	20000020 	.word	0x20000020
 8000468:	40020000 	.word	0x40020000

0800046c <dma_transfer_complete_callback>:

void dma_transfer_complete_callback(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b082      	sub	sp, #8
 8000470:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUMBER_OF_CONVERSION; ++i)
 8000472:	2300      	movs	r3, #0
 8000474:	607b      	str	r3, [r7, #4]
 8000476:	e012      	b.n	800049e <dma_transfer_complete_callback+0x32>
	{
		voltage_mv[i] = CONVERT_ADC_TO_MV(adc_data[i]);
 8000478:	4b0d      	ldr	r3, [pc, #52]	; (80004b0 <dma_transfer_complete_callback+0x44>)
 800047a:	687a      	ldr	r2, [r7, #4]
 800047c:	0092      	lsls	r2, r2, #2
 800047e:	58d3      	ldr	r3, [r2, r3]
 8000480:	4a0c      	ldr	r2, [pc, #48]	; (80004b4 <dma_transfer_complete_callback+0x48>)
 8000482:	4353      	muls	r3, r2
 8000484:	490c      	ldr	r1, [pc, #48]	; (80004b8 <dma_transfer_complete_callback+0x4c>)
 8000486:	0018      	movs	r0, r3
 8000488:	f7ff fe3c 	bl	8000104 <__udivsi3>
 800048c:	0003      	movs	r3, r0
 800048e:	0019      	movs	r1, r3
 8000490:	4b0a      	ldr	r3, [pc, #40]	; (80004bc <dma_transfer_complete_callback+0x50>)
 8000492:	687a      	ldr	r2, [r7, #4]
 8000494:	0092      	lsls	r2, r2, #2
 8000496:	50d1      	str	r1, [r2, r3]
	for (int i = 0; i < NUMBER_OF_CONVERSION; ++i)
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	3301      	adds	r3, #1
 800049c:	607b      	str	r3, [r7, #4]
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	2b02      	cmp	r3, #2
 80004a2:	dde9      	ble.n	8000478 <dma_transfer_complete_callback+0xc>
	}
}
 80004a4:	46c0      	nop			; (mov r8, r8)
 80004a6:	46c0      	nop			; (mov r8, r8)
 80004a8:	46bd      	mov	sp, r7
 80004aa:	b002      	add	sp, #8
 80004ac:	bd80      	pop	{r7, pc}
 80004ae:	46c0      	nop			; (mov r8, r8)
 80004b0:	20000020 	.word	0x20000020
 80004b4:	00000ce4 	.word	0x00000ce4
 80004b8:	00000fff 	.word	0x00000fff
 80004bc:	2000002c 	.word	0x2000002c

080004c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	0002      	movs	r2, r0
 80004c8:	1dfb      	adds	r3, r7, #7
 80004ca:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80004cc:	1dfb      	adds	r3, r7, #7
 80004ce:	781b      	ldrb	r3, [r3, #0]
 80004d0:	2b7f      	cmp	r3, #127	; 0x7f
 80004d2:	d809      	bhi.n	80004e8 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80004d4:	1dfb      	adds	r3, r7, #7
 80004d6:	781b      	ldrb	r3, [r3, #0]
 80004d8:	001a      	movs	r2, r3
 80004da:	231f      	movs	r3, #31
 80004dc:	401a      	ands	r2, r3
 80004de:	4b04      	ldr	r3, [pc, #16]	; (80004f0 <__NVIC_EnableIRQ+0x30>)
 80004e0:	2101      	movs	r1, #1
 80004e2:	4091      	lsls	r1, r2
 80004e4:	000a      	movs	r2, r1
 80004e6:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80004e8:	46c0      	nop			; (mov r8, r8)
 80004ea:	46bd      	mov	sp, r7
 80004ec:	b002      	add	sp, #8
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	e000e100 	.word	0xe000e100

080004f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80004f4:	b590      	push	{r4, r7, lr}
 80004f6:	b083      	sub	sp, #12
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	0002      	movs	r2, r0
 80004fc:	6039      	str	r1, [r7, #0]
 80004fe:	1dfb      	adds	r3, r7, #7
 8000500:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000502:	1dfb      	adds	r3, r7, #7
 8000504:	781b      	ldrb	r3, [r3, #0]
 8000506:	2b7f      	cmp	r3, #127	; 0x7f
 8000508:	d828      	bhi.n	800055c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800050a:	4a2f      	ldr	r2, [pc, #188]	; (80005c8 <__NVIC_SetPriority+0xd4>)
 800050c:	1dfb      	adds	r3, r7, #7
 800050e:	781b      	ldrb	r3, [r3, #0]
 8000510:	b25b      	sxtb	r3, r3
 8000512:	089b      	lsrs	r3, r3, #2
 8000514:	33c0      	adds	r3, #192	; 0xc0
 8000516:	009b      	lsls	r3, r3, #2
 8000518:	589b      	ldr	r3, [r3, r2]
 800051a:	1dfa      	adds	r2, r7, #7
 800051c:	7812      	ldrb	r2, [r2, #0]
 800051e:	0011      	movs	r1, r2
 8000520:	2203      	movs	r2, #3
 8000522:	400a      	ands	r2, r1
 8000524:	00d2      	lsls	r2, r2, #3
 8000526:	21ff      	movs	r1, #255	; 0xff
 8000528:	4091      	lsls	r1, r2
 800052a:	000a      	movs	r2, r1
 800052c:	43d2      	mvns	r2, r2
 800052e:	401a      	ands	r2, r3
 8000530:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000532:	683b      	ldr	r3, [r7, #0]
 8000534:	019b      	lsls	r3, r3, #6
 8000536:	22ff      	movs	r2, #255	; 0xff
 8000538:	401a      	ands	r2, r3
 800053a:	1dfb      	adds	r3, r7, #7
 800053c:	781b      	ldrb	r3, [r3, #0]
 800053e:	0018      	movs	r0, r3
 8000540:	2303      	movs	r3, #3
 8000542:	4003      	ands	r3, r0
 8000544:	00db      	lsls	r3, r3, #3
 8000546:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000548:	481f      	ldr	r0, [pc, #124]	; (80005c8 <__NVIC_SetPriority+0xd4>)
 800054a:	1dfb      	adds	r3, r7, #7
 800054c:	781b      	ldrb	r3, [r3, #0]
 800054e:	b25b      	sxtb	r3, r3
 8000550:	089b      	lsrs	r3, r3, #2
 8000552:	430a      	orrs	r2, r1
 8000554:	33c0      	adds	r3, #192	; 0xc0
 8000556:	009b      	lsls	r3, r3, #2
 8000558:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800055a:	e031      	b.n	80005c0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800055c:	4a1b      	ldr	r2, [pc, #108]	; (80005cc <__NVIC_SetPriority+0xd8>)
 800055e:	1dfb      	adds	r3, r7, #7
 8000560:	781b      	ldrb	r3, [r3, #0]
 8000562:	0019      	movs	r1, r3
 8000564:	230f      	movs	r3, #15
 8000566:	400b      	ands	r3, r1
 8000568:	3b08      	subs	r3, #8
 800056a:	089b      	lsrs	r3, r3, #2
 800056c:	3306      	adds	r3, #6
 800056e:	009b      	lsls	r3, r3, #2
 8000570:	18d3      	adds	r3, r2, r3
 8000572:	3304      	adds	r3, #4
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	1dfa      	adds	r2, r7, #7
 8000578:	7812      	ldrb	r2, [r2, #0]
 800057a:	0011      	movs	r1, r2
 800057c:	2203      	movs	r2, #3
 800057e:	400a      	ands	r2, r1
 8000580:	00d2      	lsls	r2, r2, #3
 8000582:	21ff      	movs	r1, #255	; 0xff
 8000584:	4091      	lsls	r1, r2
 8000586:	000a      	movs	r2, r1
 8000588:	43d2      	mvns	r2, r2
 800058a:	401a      	ands	r2, r3
 800058c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800058e:	683b      	ldr	r3, [r7, #0]
 8000590:	019b      	lsls	r3, r3, #6
 8000592:	22ff      	movs	r2, #255	; 0xff
 8000594:	401a      	ands	r2, r3
 8000596:	1dfb      	adds	r3, r7, #7
 8000598:	781b      	ldrb	r3, [r3, #0]
 800059a:	0018      	movs	r0, r3
 800059c:	2303      	movs	r3, #3
 800059e:	4003      	ands	r3, r0
 80005a0:	00db      	lsls	r3, r3, #3
 80005a2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80005a4:	4809      	ldr	r0, [pc, #36]	; (80005cc <__NVIC_SetPriority+0xd8>)
 80005a6:	1dfb      	adds	r3, r7, #7
 80005a8:	781b      	ldrb	r3, [r3, #0]
 80005aa:	001c      	movs	r4, r3
 80005ac:	230f      	movs	r3, #15
 80005ae:	4023      	ands	r3, r4
 80005b0:	3b08      	subs	r3, #8
 80005b2:	089b      	lsrs	r3, r3, #2
 80005b4:	430a      	orrs	r2, r1
 80005b6:	3306      	adds	r3, #6
 80005b8:	009b      	lsls	r3, r3, #2
 80005ba:	18c3      	adds	r3, r0, r3
 80005bc:	3304      	adds	r3, #4
 80005be:	601a      	str	r2, [r3, #0]
}
 80005c0:	46c0      	nop			; (mov r8, r8)
 80005c2:	46bd      	mov	sp, r7
 80005c4:	b003      	add	sp, #12
 80005c6:	bd90      	pop	{r4, r7, pc}
 80005c8:	e000e100 	.word	0xe000e100
 80005cc:	e000ed00 	.word	0xe000ed00

080005d0 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80005d4:	4b04      	ldr	r3, [pc, #16]	; (80005e8 <LL_RCC_HSI_Enable+0x18>)
 80005d6:	681a      	ldr	r2, [r3, #0]
 80005d8:	4b03      	ldr	r3, [pc, #12]	; (80005e8 <LL_RCC_HSI_Enable+0x18>)
 80005da:	2180      	movs	r1, #128	; 0x80
 80005dc:	0049      	lsls	r1, r1, #1
 80005de:	430a      	orrs	r2, r1
 80005e0:	601a      	str	r2, [r3, #0]
}
 80005e2:	46c0      	nop			; (mov r8, r8)
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	40021000 	.word	0x40021000

080005ec <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80005f0:	4b07      	ldr	r3, [pc, #28]	; (8000610 <LL_RCC_HSI_IsReady+0x24>)
 80005f2:	681a      	ldr	r2, [r3, #0]
 80005f4:	2380      	movs	r3, #128	; 0x80
 80005f6:	00db      	lsls	r3, r3, #3
 80005f8:	401a      	ands	r2, r3
 80005fa:	2380      	movs	r3, #128	; 0x80
 80005fc:	00db      	lsls	r3, r3, #3
 80005fe:	429a      	cmp	r2, r3
 8000600:	d101      	bne.n	8000606 <LL_RCC_HSI_IsReady+0x1a>
 8000602:	2301      	movs	r3, #1
 8000604:	e000      	b.n	8000608 <LL_RCC_HSI_IsReady+0x1c>
 8000606:	2300      	movs	r3, #0
}
 8000608:	0018      	movs	r0, r3
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	46c0      	nop			; (mov r8, r8)
 8000610:	40021000 	.word	0x40021000

08000614 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_LSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_LSE
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800061c:	4b06      	ldr	r3, [pc, #24]	; (8000638 <LL_RCC_SetSysClkSource+0x24>)
 800061e:	689b      	ldr	r3, [r3, #8]
 8000620:	2207      	movs	r2, #7
 8000622:	4393      	bics	r3, r2
 8000624:	0019      	movs	r1, r3
 8000626:	4b04      	ldr	r3, [pc, #16]	; (8000638 <LL_RCC_SetSysClkSource+0x24>)
 8000628:	687a      	ldr	r2, [r7, #4]
 800062a:	430a      	orrs	r2, r1
 800062c:	609a      	str	r2, [r3, #8]
}
 800062e:	46c0      	nop			; (mov r8, r8)
 8000630:	46bd      	mov	sp, r7
 8000632:	b002      	add	sp, #8
 8000634:	bd80      	pop	{r7, pc}
 8000636:	46c0      	nop			; (mov r8, r8)
 8000638:	40021000 	.word	0x40021000

0800063c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_LSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000640:	4b03      	ldr	r3, [pc, #12]	; (8000650 <LL_RCC_GetSysClkSource+0x14>)
 8000642:	689b      	ldr	r3, [r3, #8]
 8000644:	2238      	movs	r2, #56	; 0x38
 8000646:	4013      	ands	r3, r2
}
 8000648:	0018      	movs	r0, r3
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	46c0      	nop			; (mov r8, r8)
 8000650:	40021000 	.word	0x40021000

08000654 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800065c:	4b06      	ldr	r3, [pc, #24]	; (8000678 <LL_RCC_SetAHBPrescaler+0x24>)
 800065e:	689b      	ldr	r3, [r3, #8]
 8000660:	4a06      	ldr	r2, [pc, #24]	; (800067c <LL_RCC_SetAHBPrescaler+0x28>)
 8000662:	4013      	ands	r3, r2
 8000664:	0019      	movs	r1, r3
 8000666:	4b04      	ldr	r3, [pc, #16]	; (8000678 <LL_RCC_SetAHBPrescaler+0x24>)
 8000668:	687a      	ldr	r2, [r7, #4]
 800066a:	430a      	orrs	r2, r1
 800066c:	609a      	str	r2, [r3, #8]
}
 800066e:	46c0      	nop			; (mov r8, r8)
 8000670:	46bd      	mov	sp, r7
 8000672:	b002      	add	sp, #8
 8000674:	bd80      	pop	{r7, pc}
 8000676:	46c0      	nop			; (mov r8, r8)
 8000678:	40021000 	.word	0x40021000
 800067c:	fffff0ff 	.word	0xfffff0ff

08000680 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, Prescaler);
 8000688:	4b06      	ldr	r3, [pc, #24]	; (80006a4 <LL_RCC_SetAPB1Prescaler+0x24>)
 800068a:	689b      	ldr	r3, [r3, #8]
 800068c:	4a06      	ldr	r2, [pc, #24]	; (80006a8 <LL_RCC_SetAPB1Prescaler+0x28>)
 800068e:	4013      	ands	r3, r2
 8000690:	0019      	movs	r1, r3
 8000692:	4b04      	ldr	r3, [pc, #16]	; (80006a4 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000694:	687a      	ldr	r2, [r7, #4]
 8000696:	430a      	orrs	r2, r1
 8000698:	609a      	str	r2, [r3, #8]
}
 800069a:	46c0      	nop			; (mov r8, r8)
 800069c:	46bd      	mov	sp, r7
 800069e:	b002      	add	sp, #8
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	46c0      	nop			; (mov r8, r8)
 80006a4:	40021000 	.word	0x40021000
 80006a8:	ffff8fff 	.word	0xffff8fff

080006ac <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80006b0:	4b04      	ldr	r3, [pc, #16]	; (80006c4 <LL_RCC_PLL_Enable+0x18>)
 80006b2:	681a      	ldr	r2, [r3, #0]
 80006b4:	4b03      	ldr	r3, [pc, #12]	; (80006c4 <LL_RCC_PLL_Enable+0x18>)
 80006b6:	2180      	movs	r1, #128	; 0x80
 80006b8:	0449      	lsls	r1, r1, #17
 80006ba:	430a      	orrs	r2, r1
 80006bc:	601a      	str	r2, [r3, #0]
}
 80006be:	46c0      	nop			; (mov r8, r8)
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	40021000 	.word	0x40021000

080006c8 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80006cc:	4b07      	ldr	r3, [pc, #28]	; (80006ec <LL_RCC_PLL_IsReady+0x24>)
 80006ce:	681a      	ldr	r2, [r3, #0]
 80006d0:	2380      	movs	r3, #128	; 0x80
 80006d2:	049b      	lsls	r3, r3, #18
 80006d4:	401a      	ands	r2, r3
 80006d6:	2380      	movs	r3, #128	; 0x80
 80006d8:	049b      	lsls	r3, r3, #18
 80006da:	429a      	cmp	r2, r3
 80006dc:	d101      	bne.n	80006e2 <LL_RCC_PLL_IsReady+0x1a>
 80006de:	2301      	movs	r3, #1
 80006e0:	e000      	b.n	80006e4 <LL_RCC_PLL_IsReady+0x1c>
 80006e2:	2300      	movs	r3, #0
}
 80006e4:	0018      	movs	r0, r3
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	46c0      	nop			; (mov r8, r8)
 80006ec:	40021000 	.word	0x40021000

080006f0 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b084      	sub	sp, #16
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	60f8      	str	r0, [r7, #12]
 80006f8:	60b9      	str	r1, [r7, #8]
 80006fa:	607a      	str	r2, [r7, #4]
 80006fc:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 80006fe:	4b0a      	ldr	r3, [pc, #40]	; (8000728 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8000700:	68db      	ldr	r3, [r3, #12]
 8000702:	4a0a      	ldr	r2, [pc, #40]	; (800072c <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 8000704:	4013      	ands	r3, r2
 8000706:	0019      	movs	r1, r3
 8000708:	68fa      	ldr	r2, [r7, #12]
 800070a:	68bb      	ldr	r3, [r7, #8]
 800070c:	431a      	orrs	r2, r3
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	021b      	lsls	r3, r3, #8
 8000712:	431a      	orrs	r2, r3
 8000714:	683b      	ldr	r3, [r7, #0]
 8000716:	431a      	orrs	r2, r3
 8000718:	4b03      	ldr	r3, [pc, #12]	; (8000728 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 800071a:	430a      	orrs	r2, r1
 800071c:	60da      	str	r2, [r3, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 800071e:	46c0      	nop			; (mov r8, r8)
 8000720:	46bd      	mov	sp, r7
 8000722:	b004      	add	sp, #16
 8000724:	bd80      	pop	{r7, pc}
 8000726:	46c0      	nop			; (mov r8, r8)
 8000728:	40021000 	.word	0x40021000
 800072c:	1fff808c 	.word	0x1fff808c

08000730 <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 8000734:	4b04      	ldr	r3, [pc, #16]	; (8000748 <LL_RCC_PLL_EnableDomain_SYS+0x18>)
 8000736:	68da      	ldr	r2, [r3, #12]
 8000738:	4b03      	ldr	r3, [pc, #12]	; (8000748 <LL_RCC_PLL_EnableDomain_SYS+0x18>)
 800073a:	2180      	movs	r1, #128	; 0x80
 800073c:	0549      	lsls	r1, r1, #21
 800073e:	430a      	orrs	r2, r1
 8000740:	60da      	str	r2, [r3, #12]
}
 8000742:	46c0      	nop			; (mov r8, r8)
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	40021000 	.word	0x40021000

0800074c <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_RNG  (*)
  * @note   (*) RNG & CRYP Peripherals available only on STM32G081xx
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b084      	sub	sp, #16
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8000754:	4b07      	ldr	r3, [pc, #28]	; (8000774 <LL_AHB1_GRP1_EnableClock+0x28>)
 8000756:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8000758:	4b06      	ldr	r3, [pc, #24]	; (8000774 <LL_AHB1_GRP1_EnableClock+0x28>)
 800075a:	687a      	ldr	r2, [r7, #4]
 800075c:	430a      	orrs	r2, r1
 800075e:	639a      	str	r2, [r3, #56]	; 0x38
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000760:	4b04      	ldr	r3, [pc, #16]	; (8000774 <LL_AHB1_GRP1_EnableClock+0x28>)
 8000762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000764:	687a      	ldr	r2, [r7, #4]
 8000766:	4013      	ands	r3, r2
 8000768:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800076a:	68fb      	ldr	r3, [r7, #12]
}
 800076c:	46c0      	nop			; (mov r8, r8)
 800076e:	46bd      	mov	sp, r7
 8000770:	b004      	add	sp, #16
 8000772:	bd80      	pop	{r7, pc}
 8000774:	40021000 	.word	0x40021000

08000778 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_ADC
  * @note (*) peripheral not available on all devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b084      	sub	sp, #16
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APBENR2, Periphs);
 8000780:	4b07      	ldr	r3, [pc, #28]	; (80007a0 <LL_APB2_GRP1_EnableClock+0x28>)
 8000782:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8000784:	4b06      	ldr	r3, [pc, #24]	; (80007a0 <LL_APB2_GRP1_EnableClock+0x28>)
 8000786:	687a      	ldr	r2, [r7, #4]
 8000788:	430a      	orrs	r2, r1
 800078a:	641a      	str	r2, [r3, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APBENR2, Periphs);
 800078c:	4b04      	ldr	r3, [pc, #16]	; (80007a0 <LL_APB2_GRP1_EnableClock+0x28>)
 800078e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000790:	687a      	ldr	r2, [r7, #4]
 8000792:	4013      	ands	r3, r2
 8000794:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000796:	68fb      	ldr	r3, [r7, #12]
}
 8000798:	46c0      	nop			; (mov r8, r8)
 800079a:	46bd      	mov	sp, r7
 800079c:	b004      	add	sp, #16
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	40021000 	.word	0x40021000

080007a4 <LL_IOP_GRP1_EnableClock>:
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOE
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOF
  * @retval None
  */
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b084      	sub	sp, #16
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 80007ac:	4b07      	ldr	r3, [pc, #28]	; (80007cc <LL_IOP_GRP1_EnableClock+0x28>)
 80007ae:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80007b0:	4b06      	ldr	r3, [pc, #24]	; (80007cc <LL_IOP_GRP1_EnableClock+0x28>)
 80007b2:	687a      	ldr	r2, [r7, #4]
 80007b4:	430a      	orrs	r2, r1
 80007b6:	635a      	str	r2, [r3, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 80007b8:	4b04      	ldr	r3, [pc, #16]	; (80007cc <LL_IOP_GRP1_EnableClock+0x28>)
 80007ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007bc:	687a      	ldr	r2, [r7, #4]
 80007be:	4013      	ands	r3, r2
 80007c0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80007c2:	68fb      	ldr	r3, [r7, #12]
}
 80007c4:	46c0      	nop			; (mov r8, r8)
 80007c6:	46bd      	mov	sp, r7
 80007c8:	b004      	add	sp, #16
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	40021000 	.word	0x40021000

080007d0 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80007d8:	4b06      	ldr	r3, [pc, #24]	; (80007f4 <LL_FLASH_SetLatency+0x24>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	2207      	movs	r2, #7
 80007de:	4393      	bics	r3, r2
 80007e0:	0019      	movs	r1, r3
 80007e2:	4b04      	ldr	r3, [pc, #16]	; (80007f4 <LL_FLASH_SetLatency+0x24>)
 80007e4:	687a      	ldr	r2, [r7, #4]
 80007e6:	430a      	orrs	r2, r1
 80007e8:	601a      	str	r2, [r3, #0]
}
 80007ea:	46c0      	nop			; (mov r8, r8)
 80007ec:	46bd      	mov	sp, r7
 80007ee:	b002      	add	sp, #8
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	46c0      	nop			; (mov r8, r8)
 80007f4:	40022000 	.word	0x40022000

080007f8 <LL_SYSTICK_EnableIT>:
  * @brief  Enable SysTick exception request
  * @rmtoll STK_CTRL     TICKINT       LL_SYSTICK_EnableIT
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_EnableIT(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80007fc:	4b04      	ldr	r3, [pc, #16]	; (8000810 <LL_SYSTICK_EnableIT+0x18>)
 80007fe:	681a      	ldr	r2, [r3, #0]
 8000800:	4b03      	ldr	r3, [pc, #12]	; (8000810 <LL_SYSTICK_EnableIT+0x18>)
 8000802:	2102      	movs	r1, #2
 8000804:	430a      	orrs	r2, r1
 8000806:	601a      	str	r2, [r3, #0]
}
 8000808:	46c0      	nop			; (mov r8, r8)
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	46c0      	nop			; (mov r8, r8)
 8000810:	e000e010 	.word	0xe000e010

08000814 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b084      	sub	sp, #16
 8000818:	af00      	add	r7, sp, #0
 800081a:	60f8      	str	r0, [r7, #12]
 800081c:	60b9      	str	r1, [r7, #8]
 800081e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	6819      	ldr	r1, [r3, #0]
 8000824:	68bb      	ldr	r3, [r7, #8]
 8000826:	435b      	muls	r3, r3
 8000828:	001a      	movs	r2, r3
 800082a:	0013      	movs	r3, r2
 800082c:	005b      	lsls	r3, r3, #1
 800082e:	189b      	adds	r3, r3, r2
 8000830:	43db      	mvns	r3, r3
 8000832:	400b      	ands	r3, r1
 8000834:	001a      	movs	r2, r3
 8000836:	68bb      	ldr	r3, [r7, #8]
 8000838:	435b      	muls	r3, r3
 800083a:	6879      	ldr	r1, [r7, #4]
 800083c:	434b      	muls	r3, r1
 800083e:	431a      	orrs	r2, r3
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	601a      	str	r2, [r3, #0]
}
 8000844:	46c0      	nop			; (mov r8, r8)
 8000846:	46bd      	mov	sp, r7
 8000848:	b004      	add	sp, #16
 800084a:	bd80      	pop	{r7, pc}

0800084c <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b084      	sub	sp, #16
 8000850:	af00      	add	r7, sp, #0
 8000852:	60f8      	str	r0, [r7, #12]
 8000854:	60b9      	str	r1, [r7, #8]
 8000856:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	6899      	ldr	r1, [r3, #8]
 800085c:	68bb      	ldr	r3, [r7, #8]
 800085e:	435b      	muls	r3, r3
 8000860:	001a      	movs	r2, r3
 8000862:	0013      	movs	r3, r2
 8000864:	005b      	lsls	r3, r3, #1
 8000866:	189b      	adds	r3, r3, r2
 8000868:	43db      	mvns	r3, r3
 800086a:	400b      	ands	r3, r1
 800086c:	001a      	movs	r2, r3
 800086e:	68bb      	ldr	r3, [r7, #8]
 8000870:	435b      	muls	r3, r3
 8000872:	6879      	ldr	r1, [r7, #4]
 8000874:	434b      	muls	r3, r1
 8000876:	431a      	orrs	r2, r3
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	609a      	str	r2, [r3, #8]
}
 800087c:	46c0      	nop			; (mov r8, r8)
 800087e:	46bd      	mov	sp, r7
 8000880:	b004      	add	sp, #16
 8000882:	bd80      	pop	{r7, pc}

08000884 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b084      	sub	sp, #16
 8000888:	af00      	add	r7, sp, #0
 800088a:	60f8      	str	r0, [r7, #12]
 800088c:	60b9      	str	r1, [r7, #8]
 800088e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	68d9      	ldr	r1, [r3, #12]
 8000894:	68bb      	ldr	r3, [r7, #8]
 8000896:	435b      	muls	r3, r3
 8000898:	001a      	movs	r2, r3
 800089a:	0013      	movs	r3, r2
 800089c:	005b      	lsls	r3, r3, #1
 800089e:	189b      	adds	r3, r3, r2
 80008a0:	43db      	mvns	r3, r3
 80008a2:	400b      	ands	r3, r1
 80008a4:	001a      	movs	r2, r3
 80008a6:	68bb      	ldr	r3, [r7, #8]
 80008a8:	435b      	muls	r3, r3
 80008aa:	6879      	ldr	r1, [r7, #4]
 80008ac:	434b      	muls	r3, r1
 80008ae:	431a      	orrs	r2, r3
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	60da      	str	r2, [r3, #12]
}
 80008b4:	46c0      	nop			; (mov r8, r8)
 80008b6:	46bd      	mov	sp, r7
 80008b8:	b004      	add	sp, #16
 80008ba:	bd80      	pop	{r7, pc}

080008bc <LL_ADC_SetClock>:
  *             cycle).
  *             Refer to reference manual.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetClock(ADC_TypeDef *ADCx, uint32_t ClockSource)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
 80008c4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_CKMODE, ClockSource);
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	691b      	ldr	r3, [r3, #16]
 80008ca:	009b      	lsls	r3, r3, #2
 80008cc:	089a      	lsrs	r2, r3, #2
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	431a      	orrs	r2, r3
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	611a      	str	r2, [r3, #16]
}
 80008d6:	46c0      	nop			; (mov r8, r8)
 80008d8:	46bd      	mov	sp, r7
 80008da:	b002      	add	sp, #8
 80008dc:	bd80      	pop	{r7, pc}

080008de <LL_ADC_SetResolution>:
  *         @arg @ref LL_ADC_RESOLUTION_8B
  *         @arg @ref LL_ADC_RESOLUTION_6B
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetResolution(ADC_TypeDef *ADCx, uint32_t Resolution)
{
 80008de:	b580      	push	{r7, lr}
 80008e0:	b082      	sub	sp, #8
 80008e2:	af00      	add	r7, sp, #0
 80008e4:	6078      	str	r0, [r7, #4]
 80008e6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_RES, Resolution);
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	68db      	ldr	r3, [r3, #12]
 80008ec:	2218      	movs	r2, #24
 80008ee:	4393      	bics	r3, r2
 80008f0:	001a      	movs	r2, r3
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	431a      	orrs	r2, r3
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	60da      	str	r2, [r3, #12]
}
 80008fa:	46c0      	nop			; (mov r8, r8)
 80008fc:	46bd      	mov	sp, r7
 80008fe:	b002      	add	sp, #8
 8000900:	bd80      	pop	{r7, pc}

08000902 <LL_ADC_SetDataAlignment>:
  *         @arg @ref LL_ADC_DATA_ALIGN_RIGHT
  *         @arg @ref LL_ADC_DATA_ALIGN_LEFT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetDataAlignment(ADC_TypeDef *ADCx, uint32_t DataAlignment)
{
 8000902:	b580      	push	{r7, lr}
 8000904:	b082      	sub	sp, #8
 8000906:	af00      	add	r7, sp, #0
 8000908:	6078      	str	r0, [r7, #4]
 800090a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_ALIGN, DataAlignment);
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	68db      	ldr	r3, [r3, #12]
 8000910:	2220      	movs	r2, #32
 8000912:	4393      	bics	r3, r2
 8000914:	001a      	movs	r2, r3
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	431a      	orrs	r2, r3
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	60da      	str	r2, [r3, #12]
}
 800091e:	46c0      	nop			; (mov r8, r8)
 8000920:	46bd      	mov	sp, r7
 8000922:	b002      	add	sp, #8
 8000924:	bd80      	pop	{r7, pc}

08000926 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8000926:	b580      	push	{r7, lr}
 8000928:	b084      	sub	sp, #16
 800092a:	af00      	add	r7, sp, #0
 800092c:	60f8      	str	r0, [r7, #12]
 800092e:	60b9      	str	r1, [r7, #8]
 8000930:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	695b      	ldr	r3, [r3, #20]
 8000936:	68ba      	ldr	r2, [r7, #8]
 8000938:	2104      	movs	r1, #4
 800093a:	400a      	ands	r2, r1
 800093c:	2107      	movs	r1, #7
 800093e:	4091      	lsls	r1, r2
 8000940:	000a      	movs	r2, r1
 8000942:	43d2      	mvns	r2, r2
 8000944:	401a      	ands	r2, r3
 8000946:	68bb      	ldr	r3, [r7, #8]
 8000948:	2104      	movs	r1, #4
 800094a:	400b      	ands	r3, r1
 800094c:	6879      	ldr	r1, [r7, #4]
 800094e:	4099      	lsls	r1, r3
 8000950:	000b      	movs	r3, r1
 8000952:	431a      	orrs	r2, r3
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8000958:	46c0      	nop			; (mov r8, r8)
 800095a:	46bd      	mov	sp, r7
 800095c:	b004      	add	sp, #16
 800095e:	bd80      	pop	{r7, pc}

08000960 <LL_ADC_REG_SetSequencerConfigurable>:
  *         @arg @ref LL_ADC_REG_SEQ_FIXED
  *         @arg @ref LL_ADC_REG_SEQ_CONFIGURABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerConfigurable(ADC_TypeDef *ADCx, uint32_t Configurability)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
 8000968:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_CHSELRMOD, Configurability);
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	68db      	ldr	r3, [r3, #12]
 800096e:	4a05      	ldr	r2, [pc, #20]	; (8000984 <LL_ADC_REG_SetSequencerConfigurable+0x24>)
 8000970:	401a      	ands	r2, r3
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	431a      	orrs	r2, r3
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	60da      	str	r2, [r3, #12]
}
 800097a:	46c0      	nop			; (mov r8, r8)
 800097c:	46bd      	mov	sp, r7
 800097e:	b002      	add	sp, #8
 8000980:	bd80      	pop	{r7, pc}
 8000982:	46c0      	nop			; (mov r8, r8)
 8000984:	ffdfffff 	.word	0xffdfffff

08000988 <LL_ADC_REG_GetSequencerConfigurable>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_ADC_REG_SEQ_FIXED
  *         @arg @ref LL_ADC_REG_SEQ_CONFIGURABLE
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetSequencerConfigurable(ADC_TypeDef *ADCx)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_CHSELRMOD));
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	68da      	ldr	r2, [r3, #12]
 8000994:	2380      	movs	r3, #128	; 0x80
 8000996:	039b      	lsls	r3, r3, #14
 8000998:	4013      	ands	r3, r2
}
 800099a:	0018      	movs	r0, r3
 800099c:	46bd      	mov	sp, r7
 800099e:	b002      	add	sp, #8
 80009a0:	bd80      	pop	{r7, pc}

080009a2 <LL_ADC_REG_SetSequencerChannels>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChannels(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80009a2:	b580      	push	{r7, lr}
 80009a4:	b082      	sub	sp, #8
 80009a6:	af00      	add	r7, sp, #0
 80009a8:	6078      	str	r0, [r7, #4]
 80009aa:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  WRITE_REG(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80009ac:	683b      	ldr	r3, [r7, #0]
 80009ae:	035b      	lsls	r3, r3, #13
 80009b0:	0b5a      	lsrs	r2, r3, #13
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80009b6:	46c0      	nop			; (mov r8, r8)
 80009b8:	46bd      	mov	sp, r7
 80009ba:	b002      	add	sp, #8
 80009bc:	bd80      	pop	{r7, pc}
	...

080009c0 <LL_ADC_REG_SetContinuousMode>:
  *         @arg @ref LL_ADC_REG_CONV_SINGLE
  *         @arg @ref LL_ADC_REG_CONV_CONTINUOUS
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetContinuousMode(ADC_TypeDef *ADCx, uint32_t Continuous)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
 80009c8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_CONT, Continuous);
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	68db      	ldr	r3, [r3, #12]
 80009ce:	4a05      	ldr	r2, [pc, #20]	; (80009e4 <LL_ADC_REG_SetContinuousMode+0x24>)
 80009d0:	401a      	ands	r2, r3
 80009d2:	683b      	ldr	r3, [r7, #0]
 80009d4:	431a      	orrs	r2, r3
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	60da      	str	r2, [r3, #12]
}
 80009da:	46c0      	nop			; (mov r8, r8)
 80009dc:	46bd      	mov	sp, r7
 80009de:	b002      	add	sp, #8
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	46c0      	nop			; (mov r8, r8)
 80009e4:	ffffdfff 	.word	0xffffdfff

080009e8 <LL_ADC_REG_SetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransfer(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
 80009f0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	68db      	ldr	r3, [r3, #12]
 80009f6:	2203      	movs	r2, #3
 80009f8:	4393      	bics	r3, r2
 80009fa:	001a      	movs	r2, r3
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	431a      	orrs	r2, r3
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	60da      	str	r2, [r3, #12]
}
 8000a04:	46c0      	nop			; (mov r8, r8)
 8000a06:	46bd      	mov	sp, r7
 8000a08:	b002      	add	sp, #8
 8000a0a:	bd80      	pop	{r7, pc}

08000a0c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b084      	sub	sp, #16
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	60f8      	str	r0, [r7, #12]
 8000a14:	60b9      	str	r1, [r7, #8]
 8000a16:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	695b      	ldr	r3, [r3, #20]
 8000a1c:	68ba      	ldr	r2, [r7, #8]
 8000a1e:	0212      	lsls	r2, r2, #8
 8000a20:	43d2      	mvns	r2, r2
 8000a22:	401a      	ands	r2, r3
 8000a24:	68bb      	ldr	r3, [r7, #8]
 8000a26:	021b      	lsls	r3, r3, #8
 8000a28:	6879      	ldr	r1, [r7, #4]
 8000a2a:	400b      	ands	r3, r1
 8000a2c:	4904      	ldr	r1, [pc, #16]	; (8000a40 <LL_ADC_SetChannelSamplingTime+0x34>)
 8000a2e:	400b      	ands	r3, r1
 8000a30:	431a      	orrs	r2, r3
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8000a36:	46c0      	nop			; (mov r8, r8)
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	b004      	add	sp, #16
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	46c0      	nop			; (mov r8, r8)
 8000a40:	07ffff00 	.word	0x07ffff00

08000a44 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	689b      	ldr	r3, [r3, #8]
 8000a50:	4a05      	ldr	r2, [pc, #20]	; (8000a68 <LL_ADC_EnableInternalRegulator+0x24>)
 8000a52:	4013      	ands	r3, r2
 8000a54:	2280      	movs	r2, #128	; 0x80
 8000a56:	0552      	lsls	r2, r2, #21
 8000a58:	431a      	orrs	r2, r3
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000a5e:	46c0      	nop			; (mov r8, r8)
 8000a60:	46bd      	mov	sp, r7
 8000a62:	b002      	add	sp, #8
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	46c0      	nop			; (mov r8, r8)
 8000a68:	6fffffe8 	.word	0x6fffffe8

08000a6c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	689b      	ldr	r3, [r3, #8]
 8000a78:	4a04      	ldr	r2, [pc, #16]	; (8000a8c <LL_ADC_Enable+0x20>)
 8000a7a:	4013      	ands	r3, r2
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	431a      	orrs	r2, r3
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000a84:	46c0      	nop			; (mov r8, r8)
 8000a86:	46bd      	mov	sp, r7
 8000a88:	b002      	add	sp, #8
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	7fffffe8 	.word	0x7fffffe8

08000a90 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	689b      	ldr	r3, [r3, #8]
 8000a9c:	4a04      	ldr	r2, [pc, #16]	; (8000ab0 <LL_ADC_REG_StartConversion+0x20>)
 8000a9e:	4013      	ands	r3, r2
 8000aa0:	2204      	movs	r2, #4
 8000aa2:	431a      	orrs	r2, r3
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000aa8:	46c0      	nop			; (mov r8, r8)
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	b002      	add	sp, #8
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	7fffffe8 	.word	0x7fffffe8

08000ab4 <LL_ADC_IsActiveFlag_ADRDY>:
  * @rmtoll ISR      ADRDY          LL_ADC_IsActiveFlag_ADRDY
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_ADRDY(ADC_TypeDef *ADCx)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	4013      	ands	r3, r2
 8000ac4:	2b01      	cmp	r3, #1
 8000ac6:	d101      	bne.n	8000acc <LL_ADC_IsActiveFlag_ADRDY+0x18>
 8000ac8:	2301      	movs	r3, #1
 8000aca:	e000      	b.n	8000ace <LL_ADC_IsActiveFlag_ADRDY+0x1a>
 8000acc:	2300      	movs	r3, #0
}
 8000ace:	0018      	movs	r0, r3
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	b002      	add	sp, #8
 8000ad4:	bd80      	pop	{r7, pc}

08000ad6 <LL_ADC_IsActiveFlag_CCRDY>:
  * @rmtoll ISR      CCRDY          LL_ADC_IsActiveFlag_CCRDY
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_CCRDY(ADC_TypeDef *ADCx)
{
 8000ad6:	b580      	push	{r7, lr}
 8000ad8:	b082      	sub	sp, #8
 8000ada:	af00      	add	r7, sp, #0
 8000adc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_CCRDY) == (LL_ADC_FLAG_CCRDY)) ? 1UL : 0UL);
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	681a      	ldr	r2, [r3, #0]
 8000ae2:	2380      	movs	r3, #128	; 0x80
 8000ae4:	019b      	lsls	r3, r3, #6
 8000ae6:	401a      	ands	r2, r3
 8000ae8:	2380      	movs	r3, #128	; 0x80
 8000aea:	019b      	lsls	r3, r3, #6
 8000aec:	429a      	cmp	r2, r3
 8000aee:	d101      	bne.n	8000af4 <LL_ADC_IsActiveFlag_CCRDY+0x1e>
 8000af0:	2301      	movs	r3, #1
 8000af2:	e000      	b.n	8000af6 <LL_ADC_IsActiveFlag_CCRDY+0x20>
 8000af4:	2300      	movs	r3, #0
}
 8000af6:	0018      	movs	r0, r3
 8000af8:	46bd      	mov	sp, r7
 8000afa:	b002      	add	sp, #8
 8000afc:	bd80      	pop	{r7, pc}

08000afe <LL_ADC_ClearFlag_ADRDY>:
  * @rmtoll ISR      ADRDY          LL_ADC_ClearFlag_ADRDY
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_ADRDY(ADC_TypeDef *ADCx)
{
 8000afe:	b580      	push	{r7, lr}
 8000b00:	b082      	sub	sp, #8
 8000b02:	af00      	add	r7, sp, #0
 8000b04:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_ADRDY);
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	2201      	movs	r2, #1
 8000b0a:	601a      	str	r2, [r3, #0]
}
 8000b0c:	46c0      	nop			; (mov r8, r8)
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	b002      	add	sp, #8
 8000b12:	bd80      	pop	{r7, pc}

08000b14 <LL_ADC_ClearFlag_CCRDY>:
  * @rmtoll ISR      CCRDY          LL_ADC_ClearFlag_CCRDY
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE void LL_ADC_ClearFlag_CCRDY(ADC_TypeDef *ADCx)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_CCRDY);
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	2280      	movs	r2, #128	; 0x80
 8000b20:	0192      	lsls	r2, r2, #6
 8000b22:	601a      	str	r2, [r3, #0]
}
 8000b24:	46c0      	nop			; (mov r8, r8)
 8000b26:	46bd      	mov	sp, r7
 8000b28:	b002      	add	sp, #8
 8000b2a:	bd80      	pop	{r7, pc}

08000b2c <LL_DMA_SetDataTransferDirection>:
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b086      	sub	sp, #24
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	60f8      	str	r0, [r7, #12]
 8000b34:	60b9      	str	r1, [r7, #8]
 8000b36:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 8000b3c:	4a0c      	ldr	r2, [pc, #48]	; (8000b70 <LL_DMA_SetDataTransferDirection+0x44>)
 8000b3e:	68bb      	ldr	r3, [r7, #8]
 8000b40:	18d3      	adds	r3, r2, r3
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	001a      	movs	r2, r3
 8000b46:	697b      	ldr	r3, [r7, #20]
 8000b48:	18d3      	adds	r3, r2, r3
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a09      	ldr	r2, [pc, #36]	; (8000b74 <LL_DMA_SetDataTransferDirection+0x48>)
 8000b4e:	4013      	ands	r3, r2
 8000b50:	0019      	movs	r1, r3
 8000b52:	4a07      	ldr	r2, [pc, #28]	; (8000b70 <LL_DMA_SetDataTransferDirection+0x44>)
 8000b54:	68bb      	ldr	r3, [r7, #8]
 8000b56:	18d3      	adds	r3, r2, r3
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	001a      	movs	r2, r3
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	18d3      	adds	r3, r2, r3
 8000b60:	687a      	ldr	r2, [r7, #4]
 8000b62:	430a      	orrs	r2, r1
 8000b64:	601a      	str	r2, [r3, #0]
}
 8000b66:	46c0      	nop			; (mov r8, r8)
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	b006      	add	sp, #24
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	46c0      	nop			; (mov r8, r8)
 8000b70:	08001210 	.word	0x08001210
 8000b74:	ffffbfef 	.word	0xffffbfef

08000b78 <LL_DMA_SetMode>:
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b086      	sub	sp, #24
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	60f8      	str	r0, [r7, #12]
 8000b80:	60b9      	str	r1, [r7, #8]
 8000b82:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_CIRC,
 8000b88:	4a0c      	ldr	r2, [pc, #48]	; (8000bbc <LL_DMA_SetMode+0x44>)
 8000b8a:	68bb      	ldr	r3, [r7, #8]
 8000b8c:	18d3      	adds	r3, r2, r3
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	001a      	movs	r2, r3
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	18d3      	adds	r3, r2, r3
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	2220      	movs	r2, #32
 8000b9a:	4393      	bics	r3, r2
 8000b9c:	0019      	movs	r1, r3
 8000b9e:	4a07      	ldr	r2, [pc, #28]	; (8000bbc <LL_DMA_SetMode+0x44>)
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	18d3      	adds	r3, r2, r3
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	001a      	movs	r2, r3
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	18d3      	adds	r3, r2, r3
 8000bac:	687a      	ldr	r2, [r7, #4]
 8000bae:	430a      	orrs	r2, r1
 8000bb0:	601a      	str	r2, [r3, #0]
}
 8000bb2:	46c0      	nop			; (mov r8, r8)
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	b006      	add	sp, #24
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	46c0      	nop			; (mov r8, r8)
 8000bbc:	08001210 	.word	0x08001210

08000bc0 <LL_DMA_SetPeriphIncMode>:
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b086      	sub	sp, #24
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	60f8      	str	r0, [r7, #12]
 8000bc8:	60b9      	str	r1, [r7, #8]
 8000bca:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PINC,
 8000bd0:	4a0c      	ldr	r2, [pc, #48]	; (8000c04 <LL_DMA_SetPeriphIncMode+0x44>)
 8000bd2:	68bb      	ldr	r3, [r7, #8]
 8000bd4:	18d3      	adds	r3, r2, r3
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	001a      	movs	r2, r3
 8000bda:	697b      	ldr	r3, [r7, #20]
 8000bdc:	18d3      	adds	r3, r2, r3
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	2240      	movs	r2, #64	; 0x40
 8000be2:	4393      	bics	r3, r2
 8000be4:	0019      	movs	r1, r3
 8000be6:	4a07      	ldr	r2, [pc, #28]	; (8000c04 <LL_DMA_SetPeriphIncMode+0x44>)
 8000be8:	68bb      	ldr	r3, [r7, #8]
 8000bea:	18d3      	adds	r3, r2, r3
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	001a      	movs	r2, r3
 8000bf0:	697b      	ldr	r3, [r7, #20]
 8000bf2:	18d3      	adds	r3, r2, r3
 8000bf4:	687a      	ldr	r2, [r7, #4]
 8000bf6:	430a      	orrs	r2, r1
 8000bf8:	601a      	str	r2, [r3, #0]
}
 8000bfa:	46c0      	nop			; (mov r8, r8)
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	b006      	add	sp, #24
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	46c0      	nop			; (mov r8, r8)
 8000c04:	08001210 	.word	0x08001210

08000c08 <LL_DMA_SetMemoryIncMode>:
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b086      	sub	sp, #24
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	60f8      	str	r0, [r7, #12]
 8000c10:	60b9      	str	r1, [r7, #8]
 8000c12:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MINC,
 8000c18:	4a0c      	ldr	r2, [pc, #48]	; (8000c4c <LL_DMA_SetMemoryIncMode+0x44>)
 8000c1a:	68bb      	ldr	r3, [r7, #8]
 8000c1c:	18d3      	adds	r3, r2, r3
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	001a      	movs	r2, r3
 8000c22:	697b      	ldr	r3, [r7, #20]
 8000c24:	18d3      	adds	r3, r2, r3
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	2280      	movs	r2, #128	; 0x80
 8000c2a:	4393      	bics	r3, r2
 8000c2c:	0019      	movs	r1, r3
 8000c2e:	4a07      	ldr	r2, [pc, #28]	; (8000c4c <LL_DMA_SetMemoryIncMode+0x44>)
 8000c30:	68bb      	ldr	r3, [r7, #8]
 8000c32:	18d3      	adds	r3, r2, r3
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	001a      	movs	r2, r3
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	18d3      	adds	r3, r2, r3
 8000c3c:	687a      	ldr	r2, [r7, #4]
 8000c3e:	430a      	orrs	r2, r1
 8000c40:	601a      	str	r2, [r3, #0]
}
 8000c42:	46c0      	nop			; (mov r8, r8)
 8000c44:	46bd      	mov	sp, r7
 8000c46:	b006      	add	sp, #24
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	46c0      	nop			; (mov r8, r8)
 8000c4c:	08001210 	.word	0x08001210

08000c50 <LL_DMA_SetPeriphSize>:
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b086      	sub	sp, #24
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	60f8      	str	r0, [r7, #12]
 8000c58:	60b9      	str	r1, [r7, #8]
 8000c5a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PSIZE,
 8000c60:	4a0c      	ldr	r2, [pc, #48]	; (8000c94 <LL_DMA_SetPeriphSize+0x44>)
 8000c62:	68bb      	ldr	r3, [r7, #8]
 8000c64:	18d3      	adds	r3, r2, r3
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	001a      	movs	r2, r3
 8000c6a:	697b      	ldr	r3, [r7, #20]
 8000c6c:	18d3      	adds	r3, r2, r3
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a09      	ldr	r2, [pc, #36]	; (8000c98 <LL_DMA_SetPeriphSize+0x48>)
 8000c72:	4013      	ands	r3, r2
 8000c74:	0019      	movs	r1, r3
 8000c76:	4a07      	ldr	r2, [pc, #28]	; (8000c94 <LL_DMA_SetPeriphSize+0x44>)
 8000c78:	68bb      	ldr	r3, [r7, #8]
 8000c7a:	18d3      	adds	r3, r2, r3
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	001a      	movs	r2, r3
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	18d3      	adds	r3, r2, r3
 8000c84:	687a      	ldr	r2, [r7, #4]
 8000c86:	430a      	orrs	r2, r1
 8000c88:	601a      	str	r2, [r3, #0]
}
 8000c8a:	46c0      	nop			; (mov r8, r8)
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	b006      	add	sp, #24
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	46c0      	nop			; (mov r8, r8)
 8000c94:	08001210 	.word	0x08001210
 8000c98:	fffffcff 	.word	0xfffffcff

08000c9c <LL_DMA_SetMemorySize>:
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b086      	sub	sp, #24
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	60f8      	str	r0, [r7, #12]
 8000ca4:	60b9      	str	r1, [r7, #8]
 8000ca6:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MSIZE,
 8000cac:	4a0c      	ldr	r2, [pc, #48]	; (8000ce0 <LL_DMA_SetMemorySize+0x44>)
 8000cae:	68bb      	ldr	r3, [r7, #8]
 8000cb0:	18d3      	adds	r3, r2, r3
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	001a      	movs	r2, r3
 8000cb6:	697b      	ldr	r3, [r7, #20]
 8000cb8:	18d3      	adds	r3, r2, r3
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a09      	ldr	r2, [pc, #36]	; (8000ce4 <LL_DMA_SetMemorySize+0x48>)
 8000cbe:	4013      	ands	r3, r2
 8000cc0:	0019      	movs	r1, r3
 8000cc2:	4a07      	ldr	r2, [pc, #28]	; (8000ce0 <LL_DMA_SetMemorySize+0x44>)
 8000cc4:	68bb      	ldr	r3, [r7, #8]
 8000cc6:	18d3      	adds	r3, r2, r3
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	001a      	movs	r2, r3
 8000ccc:	697b      	ldr	r3, [r7, #20]
 8000cce:	18d3      	adds	r3, r2, r3
 8000cd0:	687a      	ldr	r2, [r7, #4]
 8000cd2:	430a      	orrs	r2, r1
 8000cd4:	601a      	str	r2, [r3, #0]
}
 8000cd6:	46c0      	nop			; (mov r8, r8)
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	b006      	add	sp, #24
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	46c0      	nop			; (mov r8, r8)
 8000ce0:	08001210 	.word	0x08001210
 8000ce4:	fffff3ff 	.word	0xfffff3ff

08000ce8 <LL_DMA_SetChannelPriorityLevel>:
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b086      	sub	sp, #24
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	60f8      	str	r0, [r7, #12]
 8000cf0:	60b9      	str	r1, [r7, #8]
 8000cf2:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PL,
 8000cf8:	4a0c      	ldr	r2, [pc, #48]	; (8000d2c <LL_DMA_SetChannelPriorityLevel+0x44>)
 8000cfa:	68bb      	ldr	r3, [r7, #8]
 8000cfc:	18d3      	adds	r3, r2, r3
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	001a      	movs	r2, r3
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	18d3      	adds	r3, r2, r3
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a09      	ldr	r2, [pc, #36]	; (8000d30 <LL_DMA_SetChannelPriorityLevel+0x48>)
 8000d0a:	4013      	ands	r3, r2
 8000d0c:	0019      	movs	r1, r3
 8000d0e:	4a07      	ldr	r2, [pc, #28]	; (8000d2c <LL_DMA_SetChannelPriorityLevel+0x44>)
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	18d3      	adds	r3, r2, r3
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	001a      	movs	r2, r3
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	18d3      	adds	r3, r2, r3
 8000d1c:	687a      	ldr	r2, [r7, #4]
 8000d1e:	430a      	orrs	r2, r1
 8000d20:	601a      	str	r2, [r3, #0]
}
 8000d22:	46c0      	nop			; (mov r8, r8)
 8000d24:	46bd      	mov	sp, r7
 8000d26:	b006      	add	sp, #24
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	46c0      	nop			; (mov r8, r8)
 8000d2c:	08001210 	.word	0x08001210
 8000d30:	ffffcfff 	.word	0xffffcfff

08000d34 <LL_DMA_SetPeriphRequest>:
  *         @arg @ref LL_DMAMUX_REQ_UCPD2_RX
  *         @arg @ref LL_DMAMUX_REQ_UCPD2_TX
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphRequest(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Request)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b086      	sub	sp, #24
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	60f8      	str	r0, [r7, #12]
 8000d3c:	60b9      	str	r1, [r7, #8]
 8000d3e:	607a      	str	r2, [r7, #4]
  uint32_t dmamux_ccr_offset = ((((uint32_t)DMAx ^ (uint32_t)DMA1) >> 10U) * 7U);
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	0a9b      	lsrs	r3, r3, #10
 8000d44:	4a0f      	ldr	r2, [pc, #60]	; (8000d84 <LL_DMA_SetPeriphRequest+0x50>)
 8000d46:	405a      	eors	r2, r3
 8000d48:	0013      	movs	r3, r2
 8000d4a:	00db      	lsls	r3, r3, #3
 8000d4c:	1a9b      	subs	r3, r3, r2
 8000d4e:	617b      	str	r3, [r7, #20]
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, Request);
 8000d50:	68ba      	ldr	r2, [r7, #8]
 8000d52:	697b      	ldr	r3, [r7, #20]
 8000d54:	18d3      	adds	r3, r2, r3
 8000d56:	009b      	lsls	r3, r3, #2
 8000d58:	4a0b      	ldr	r2, [pc, #44]	; (8000d88 <LL_DMA_SetPeriphRequest+0x54>)
 8000d5a:	4694      	mov	ip, r2
 8000d5c:	4463      	add	r3, ip
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	223f      	movs	r2, #63	; 0x3f
 8000d62:	4393      	bics	r3, r2
 8000d64:	0019      	movs	r1, r3
 8000d66:	68ba      	ldr	r2, [r7, #8]
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	18d3      	adds	r3, r2, r3
 8000d6c:	009b      	lsls	r3, r3, #2
 8000d6e:	4a06      	ldr	r2, [pc, #24]	; (8000d88 <LL_DMA_SetPeriphRequest+0x54>)
 8000d70:	4694      	mov	ip, r2
 8000d72:	4463      	add	r3, ip
 8000d74:	687a      	ldr	r2, [r7, #4]
 8000d76:	430a      	orrs	r2, r1
 8000d78:	601a      	str	r2, [r3, #0]
}
 8000d7a:	46c0      	nop			; (mov r8, r8)
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	b006      	add	sp, #24
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	46c0      	nop			; (mov r8, r8)
 8000d84:	00100080 	.word	0x00100080
 8000d88:	40020800 	.word	0x40020800

08000d8c <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b084      	sub	sp, #16
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
 8000d94:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_TCIE);
 8000d9a:	4a0b      	ldr	r2, [pc, #44]	; (8000dc8 <LL_DMA_EnableIT_TC+0x3c>)
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	18d3      	adds	r3, r2, r3
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	001a      	movs	r2, r3
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	18d3      	adds	r3, r2, r3
 8000da8:	681a      	ldr	r2, [r3, #0]
 8000daa:	4907      	ldr	r1, [pc, #28]	; (8000dc8 <LL_DMA_EnableIT_TC+0x3c>)
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	18cb      	adds	r3, r1, r3
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	0019      	movs	r1, r3
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	18cb      	adds	r3, r1, r3
 8000db8:	2102      	movs	r1, #2
 8000dba:	430a      	orrs	r2, r1
 8000dbc:	601a      	str	r2, [r3, #0]
}
 8000dbe:	46c0      	nop			; (mov r8, r8)
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	b004      	add	sp, #16
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	46c0      	nop			; (mov r8, r8)
 8000dc8:	08001210 	.word	0x08001210

08000dcc <main>:
#endif



int main(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
	//RCC
	LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 8000dd2:	2002      	movs	r0, #2
 8000dd4:	f7ff fcfc 	bl	80007d0 <LL_FLASH_SetLatency>

	LL_RCC_HSI_Enable();
 8000dd8:	f7ff fbfa 	bl	80005d0 <LL_RCC_HSI_Enable>
	while(LL_RCC_HSI_IsReady() != 1)
 8000ddc:	46c0      	nop			; (mov r8, r8)
 8000dde:	f7ff fc05 	bl	80005ec <LL_RCC_HSI_IsReady>
 8000de2:	0003      	movs	r3, r0
 8000de4:	2b01      	cmp	r3, #1
 8000de6:	d1fa      	bne.n	8000dde <main+0x12>
		;

	LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_1, 8, LL_RCC_PLLR_DIV_2);
 8000de8:	2380      	movs	r3, #128	; 0x80
 8000dea:	059b      	lsls	r3, r3, #22
 8000dec:	2208      	movs	r2, #8
 8000dee:	2100      	movs	r1, #0
 8000df0:	2002      	movs	r0, #2
 8000df2:	f7ff fc7d 	bl	80006f0 <LL_RCC_PLL_ConfigDomain_SYS>

	LL_RCC_PLL_Enable();
 8000df6:	f7ff fc59 	bl	80006ac <LL_RCC_PLL_Enable>
	while(LL_RCC_PLL_IsReady() != 1)
 8000dfa:	46c0      	nop			; (mov r8, r8)
 8000dfc:	f7ff fc64 	bl	80006c8 <LL_RCC_PLL_IsReady>
 8000e00:	0003      	movs	r3, r0
 8000e02:	2b01      	cmp	r3, #1
 8000e04:	d1fa      	bne.n	8000dfc <main+0x30>
		;

	LL_RCC_PLL_EnableDomain_SYS();
 8000e06:	f7ff fc93 	bl	8000730 <LL_RCC_PLL_EnableDomain_SYS>

	LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000e0a:	2000      	movs	r0, #0
 8000e0c:	f7ff fc22 	bl	8000654 <LL_RCC_SetAHBPrescaler>
	LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8000e10:	2000      	movs	r0, #0
 8000e12:	f7ff fc35 	bl	8000680 <LL_RCC_SetAPB1Prescaler>

	LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000e16:	2002      	movs	r0, #2
 8000e18:	f7ff fbfc 	bl	8000614 <LL_RCC_SetSysClkSource>
	while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000e1c:	46c0      	nop			; (mov r8, r8)
 8000e1e:	f7ff fc0d 	bl	800063c <LL_RCC_GetSysClkSource>
 8000e22:	0003      	movs	r3, r0
 8000e24:	2b10      	cmp	r3, #16
 8000e26:	d1fa      	bne.n	8000e1e <main+0x52>
		;

	LL_SetSystemCoreClock(64000000);
 8000e28:	4b8e      	ldr	r3, [pc, #568]	; (8001064 <main+0x298>)
 8000e2a:	0018      	movs	r0, r3
 8000e2c:	f7ff fa44 	bl	80002b8 <LL_SetSystemCoreClock>
	LL_Init1msTick(64000000);
 8000e30:	4b8c      	ldr	r3, [pc, #560]	; (8001064 <main+0x298>)
 8000e32:	0018      	movs	r0, r3
 8000e34:	f7ff fa0c 	bl	8000250 <LL_Init1msTick>
	LL_SYSTICK_EnableIT();
 8000e38:	f7ff fcde 	bl	80007f8 <LL_SYSTICK_EnableIT>

	//GPIO
	LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8000e3c:	2001      	movs	r0, #1
 8000e3e:	f7ff fcb1 	bl	80007a4 <LL_IOP_GRP1_EnableClock>

	LL_GPIO_SetPinPull(ADC_Pot1_GPIO_Port, ADC_Pot1_Pin, LL_GPIO_PULL_NO);
 8000e42:	23a0      	movs	r3, #160	; 0xa0
 8000e44:	05db      	lsls	r3, r3, #23
 8000e46:	2200      	movs	r2, #0
 8000e48:	2101      	movs	r1, #1
 8000e4a:	0018      	movs	r0, r3
 8000e4c:	f7ff fd1a 	bl	8000884 <LL_GPIO_SetPinPull>
	LL_GPIO_SetPinSpeed(ADC_Pot1_GPIO_Port, ADC_Pot1_Pin, LL_GPIO_SPEED_FREQ_LOW);
 8000e50:	23a0      	movs	r3, #160	; 0xa0
 8000e52:	05db      	lsls	r3, r3, #23
 8000e54:	2200      	movs	r2, #0
 8000e56:	2101      	movs	r1, #1
 8000e58:	0018      	movs	r0, r3
 8000e5a:	f7ff fcf7 	bl	800084c <LL_GPIO_SetPinSpeed>
	LL_GPIO_SetPinMode(ADC_Pot1_GPIO_Port, ADC_Pot1_Pin, LL_GPIO_MODE_ANALOG);
 8000e5e:	23a0      	movs	r3, #160	; 0xa0
 8000e60:	05db      	lsls	r3, r3, #23
 8000e62:	2203      	movs	r2, #3
 8000e64:	2101      	movs	r1, #1
 8000e66:	0018      	movs	r0, r3
 8000e68:	f7ff fcd4 	bl	8000814 <LL_GPIO_SetPinMode>

	LL_GPIO_SetPinPull(ADC_Pot2_GPIO_Port, ADC_Pot2_Pin, LL_GPIO_PULL_NO);
 8000e6c:	23a0      	movs	r3, #160	; 0xa0
 8000e6e:	05db      	lsls	r3, r3, #23
 8000e70:	2200      	movs	r2, #0
 8000e72:	2102      	movs	r1, #2
 8000e74:	0018      	movs	r0, r3
 8000e76:	f7ff fd05 	bl	8000884 <LL_GPIO_SetPinPull>
	LL_GPIO_SetPinSpeed(ADC_Pot2_GPIO_Port, ADC_Pot2_Pin, LL_GPIO_SPEED_FREQ_LOW);
 8000e7a:	23a0      	movs	r3, #160	; 0xa0
 8000e7c:	05db      	lsls	r3, r3, #23
 8000e7e:	2200      	movs	r2, #0
 8000e80:	2102      	movs	r1, #2
 8000e82:	0018      	movs	r0, r3
 8000e84:	f7ff fce2 	bl	800084c <LL_GPIO_SetPinSpeed>
	LL_GPIO_SetPinMode(ADC_Pot2_GPIO_Port, ADC_Pot2_Pin, LL_GPIO_MODE_ANALOG);
 8000e88:	23a0      	movs	r3, #160	; 0xa0
 8000e8a:	05db      	lsls	r3, r3, #23
 8000e8c:	2203      	movs	r2, #3
 8000e8e:	2102      	movs	r1, #2
 8000e90:	0018      	movs	r0, r3
 8000e92:	f7ff fcbf 	bl	8000814 <LL_GPIO_SetPinMode>

	LL_GPIO_SetPinPull(ADC_Pot3_GPIO_Port, ADC_Pot3_Pin, LL_GPIO_PULL_NO);
 8000e96:	23a0      	movs	r3, #160	; 0xa0
 8000e98:	05db      	lsls	r3, r3, #23
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	2110      	movs	r1, #16
 8000e9e:	0018      	movs	r0, r3
 8000ea0:	f7ff fcf0 	bl	8000884 <LL_GPIO_SetPinPull>
	LL_GPIO_SetPinSpeed(ADC_Pot3_GPIO_Port, ADC_Pot3_Pin, LL_GPIO_SPEED_FREQ_LOW);
 8000ea4:	23a0      	movs	r3, #160	; 0xa0
 8000ea6:	05db      	lsls	r3, r3, #23
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	2110      	movs	r1, #16
 8000eac:	0018      	movs	r0, r3
 8000eae:	f7ff fccd 	bl	800084c <LL_GPIO_SetPinSpeed>
	LL_GPIO_SetPinMode(ADC_Pot3_GPIO_Port, ADC_Pot3_Pin, LL_GPIO_MODE_ANALOG);
 8000eb2:	23a0      	movs	r3, #160	; 0xa0
 8000eb4:	05db      	lsls	r3, r3, #23
 8000eb6:	2203      	movs	r2, #3
 8000eb8:	2110      	movs	r1, #16
 8000eba:	0018      	movs	r0, r3
 8000ebc:	f7ff fcaa 	bl	8000814 <LL_GPIO_SetPinMode>

	//ADC
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC);
 8000ec0:	2380      	movs	r3, #128	; 0x80
 8000ec2:	035b      	lsls	r3, r3, #13
 8000ec4:	0018      	movs	r0, r3
 8000ec6:	f7ff fc57 	bl	8000778 <LL_APB2_GRP1_EnableClock>

	LL_ADC_SetResolution(ADC1, LL_ADC_RESOLUTION_12B);
 8000eca:	4b67      	ldr	r3, [pc, #412]	; (8001068 <main+0x29c>)
 8000ecc:	2100      	movs	r1, #0
 8000ece:	0018      	movs	r0, r3
 8000ed0:	f7ff fd05 	bl	80008de <LL_ADC_SetResolution>
	LL_ADC_SetDataAlignment(ADC1, LL_ADC_DATA_ALIGN_RIGHT);
 8000ed4:	4b64      	ldr	r3, [pc, #400]	; (8001068 <main+0x29c>)
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	0018      	movs	r0, r3
 8000eda:	f7ff fd12 	bl	8000902 <LL_ADC_SetDataAlignment>
	LL_ADC_SetClock(ADC1, LL_ADC_CLOCK_SYNC_PCLK_DIV4);
 8000ede:	2380      	movs	r3, #128	; 0x80
 8000ee0:	061b      	lsls	r3, r3, #24
 8000ee2:	4a61      	ldr	r2, [pc, #388]	; (8001068 <main+0x29c>)
 8000ee4:	0019      	movs	r1, r3
 8000ee6:	0010      	movs	r0, r2
 8000ee8:	f7ff fce8 	bl	80008bc <LL_ADC_SetClock>
	LL_ADC_REG_SetContinuousMode(ADC1, LL_ADC_REG_CONV_SINGLE);
 8000eec:	4b5e      	ldr	r3, [pc, #376]	; (8001068 <main+0x29c>)
 8000eee:	2100      	movs	r1, #0
 8000ef0:	0018      	movs	r0, r3
 8000ef2:	f7ff fd65 	bl	80009c0 <LL_ADC_REG_SetContinuousMode>

	if(LL_ADC_REG_GetSequencerConfigurable(ADC1) != LL_ADC_REG_SEQ_FIXED)
 8000ef6:	4b5c      	ldr	r3, [pc, #368]	; (8001068 <main+0x29c>)
 8000ef8:	0018      	movs	r0, r3
 8000efa:	f7ff fd45 	bl	8000988 <LL_ADC_REG_GetSequencerConfigurable>
 8000efe:	1e03      	subs	r3, r0, #0
 8000f00:	d00f      	beq.n	8000f22 <main+0x156>
	{
		LL_ADC_REG_SetSequencerConfigurable(ADC1, LL_ADC_REG_SEQ_FIXED);
 8000f02:	4b59      	ldr	r3, [pc, #356]	; (8001068 <main+0x29c>)
 8000f04:	2100      	movs	r1, #0
 8000f06:	0018      	movs	r0, r3
 8000f08:	f7ff fd2a 	bl	8000960 <LL_ADC_REG_SetSequencerConfigurable>

		while (LL_ADC_IsActiveFlag_CCRDY(ADC1) == 0)
 8000f0c:	46c0      	nop			; (mov r8, r8)
 8000f0e:	4b56      	ldr	r3, [pc, #344]	; (8001068 <main+0x29c>)
 8000f10:	0018      	movs	r0, r3
 8000f12:	f7ff fde0 	bl	8000ad6 <LL_ADC_IsActiveFlag_CCRDY>
 8000f16:	1e03      	subs	r3, r0, #0
 8000f18:	d0f9      	beq.n	8000f0e <main+0x142>
			;

		LL_ADC_ClearFlag_CCRDY(ADC1);
 8000f1a:	4b53      	ldr	r3, [pc, #332]	; (8001068 <main+0x29c>)
 8000f1c:	0018      	movs	r0, r3
 8000f1e:	f7ff fdf9 	bl	8000b14 <LL_ADC_ClearFlag_CCRDY>
	}

	LL_ADC_SetSamplingTimeCommonChannels(ADC1, LL_ADC_SAMPLINGTIME_COMMON_1, LL_ADC_SAMPLINGTIME_160CYCLES_5);
 8000f22:	4b51      	ldr	r3, [pc, #324]	; (8001068 <main+0x29c>)
 8000f24:	2207      	movs	r2, #7
 8000f26:	2100      	movs	r1, #0
 8000f28:	0018      	movs	r0, r3
 8000f2a:	f7ff fcfc 	bl	8000926 <LL_ADC_SetSamplingTimeCommonChannels>
	LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_0, LL_ADC_SAMPLINGTIME_COMMON_1);
 8000f2e:	4b4e      	ldr	r3, [pc, #312]	; (8001068 <main+0x29c>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	2101      	movs	r1, #1
 8000f34:	0018      	movs	r0, r3
 8000f36:	f7ff fd69 	bl	8000a0c <LL_ADC_SetChannelSamplingTime>
	LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SAMPLINGTIME_COMMON_1);
 8000f3a:	494c      	ldr	r1, [pc, #304]	; (800106c <main+0x2a0>)
 8000f3c:	4b4a      	ldr	r3, [pc, #296]	; (8001068 <main+0x29c>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	0018      	movs	r0, r3
 8000f42:	f7ff fd63 	bl	8000a0c <LL_ADC_SetChannelSamplingTime>
	LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_4, LL_ADC_SAMPLINGTIME_COMMON_1);
 8000f46:	494a      	ldr	r1, [pc, #296]	; (8001070 <main+0x2a4>)
 8000f48:	4b47      	ldr	r3, [pc, #284]	; (8001068 <main+0x29c>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	0018      	movs	r0, r3
 8000f4e:	f7ff fd5d 	bl	8000a0c <LL_ADC_SetChannelSamplingTime>

	LL_ADC_REG_SetSequencerChannels(ADC1, LL_ADC_CHANNEL_0 | LL_ADC_CHANNEL_1 | LL_ADC_CHANNEL_4);
 8000f52:	4a48      	ldr	r2, [pc, #288]	; (8001074 <main+0x2a8>)
 8000f54:	4b44      	ldr	r3, [pc, #272]	; (8001068 <main+0x29c>)
 8000f56:	0011      	movs	r1, r2
 8000f58:	0018      	movs	r0, r3
 8000f5a:	f7ff fd22 	bl	80009a2 <LL_ADC_REG_SetSequencerChannels>

	while (LL_ADC_IsActiveFlag_CCRDY(ADC1) == 0)
 8000f5e:	46c0      	nop			; (mov r8, r8)
 8000f60:	4b41      	ldr	r3, [pc, #260]	; (8001068 <main+0x29c>)
 8000f62:	0018      	movs	r0, r3
 8000f64:	f7ff fdb7 	bl	8000ad6 <LL_ADC_IsActiveFlag_CCRDY>
 8000f68:	1e03      	subs	r3, r0, #0
 8000f6a:	d0f9      	beq.n	8000f60 <main+0x194>
		;

	LL_ADC_ClearFlag_CCRDY(ADC1);
 8000f6c:	4b3e      	ldr	r3, [pc, #248]	; (8001068 <main+0x29c>)
 8000f6e:	0018      	movs	r0, r3
 8000f70:	f7ff fdd0 	bl	8000b14 <LL_ADC_ClearFlag_CCRDY>

	//DMA
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8000f74:	2001      	movs	r0, #1
 8000f76:	f7ff fbe9 	bl	800074c <LL_AHB1_GRP1_EnableClock>

	LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_1, LL_DMAMUX_REQ_ADC1);
 8000f7a:	4b3f      	ldr	r3, [pc, #252]	; (8001078 <main+0x2ac>)
 8000f7c:	2205      	movs	r2, #5
 8000f7e:	2100      	movs	r1, #0
 8000f80:	0018      	movs	r0, r3
 8000f82:	f7ff fed7 	bl	8000d34 <LL_DMA_SetPeriphRequest>
	LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_1, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8000f86:	4b3c      	ldr	r3, [pc, #240]	; (8001078 <main+0x2ac>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	2100      	movs	r1, #0
 8000f8c:	0018      	movs	r0, r3
 8000f8e:	f7ff fdcd 	bl	8000b2c <LL_DMA_SetDataTransferDirection>
	LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PRIORITY_HIGH);
 8000f92:	2380      	movs	r3, #128	; 0x80
 8000f94:	019b      	lsls	r3, r3, #6
 8000f96:	4838      	ldr	r0, [pc, #224]	; (8001078 <main+0x2ac>)
 8000f98:	001a      	movs	r2, r3
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	f7ff fea4 	bl	8000ce8 <LL_DMA_SetChannelPriorityLevel>
	LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MODE_CIRCULAR);
 8000fa0:	4b35      	ldr	r3, [pc, #212]	; (8001078 <main+0x2ac>)
 8000fa2:	2220      	movs	r2, #32
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	0018      	movs	r0, r3
 8000fa8:	f7ff fde6 	bl	8000b78 <LL_DMA_SetMode>
	LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PERIPH_NOINCREMENT);
 8000fac:	4b32      	ldr	r3, [pc, #200]	; (8001078 <main+0x2ac>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	0018      	movs	r0, r3
 8000fb4:	f7ff fe04 	bl	8000bc0 <LL_DMA_SetPeriphIncMode>
	LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MEMORY_INCREMENT);
 8000fb8:	4b2f      	ldr	r3, [pc, #188]	; (8001078 <main+0x2ac>)
 8000fba:	2280      	movs	r2, #128	; 0x80
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	0018      	movs	r0, r3
 8000fc0:	f7ff fe22 	bl	8000c08 <LL_DMA_SetMemoryIncMode>
	LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PDATAALIGN_HALFWORD);
 8000fc4:	2380      	movs	r3, #128	; 0x80
 8000fc6:	005b      	lsls	r3, r3, #1
 8000fc8:	482b      	ldr	r0, [pc, #172]	; (8001078 <main+0x2ac>)
 8000fca:	001a      	movs	r2, r3
 8000fcc:	2100      	movs	r1, #0
 8000fce:	f7ff fe3f 	bl	8000c50 <LL_DMA_SetPeriphSize>
	LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MDATAALIGN_WORD);
 8000fd2:	2380      	movs	r3, #128	; 0x80
 8000fd4:	011b      	lsls	r3, r3, #4
 8000fd6:	4828      	ldr	r0, [pc, #160]	; (8001078 <main+0x2ac>)
 8000fd8:	001a      	movs	r2, r3
 8000fda:	2100      	movs	r1, #0
 8000fdc:	f7ff fe5e 	bl	8000c9c <LL_DMA_SetMemorySize>

	NVIC_SetPriority(DMA1_Channel1_IRQn, 0);
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	2009      	movs	r0, #9
 8000fe4:	f7ff fa86 	bl	80004f4 <__NVIC_SetPriority>
	NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000fe8:	2009      	movs	r0, #9
 8000fea:	f7ff fa69 	bl	80004c0 <__NVIC_EnableIRQ>
	LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_1);
 8000fee:	4b22      	ldr	r3, [pc, #136]	; (8001078 <main+0x2ac>)
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	0018      	movs	r0, r3
 8000ff4:	f7ff feca 	bl	8000d8c <LL_DMA_EnableIT_TC>

	LL_ADC_REG_SetDMATransfer(ADC1, LL_ADC_REG_DMA_TRANSFER_UNLIMITED);
 8000ff8:	4b1b      	ldr	r3, [pc, #108]	; (8001068 <main+0x29c>)
 8000ffa:	2103      	movs	r1, #3
 8000ffc:	0018      	movs	r0, r3
 8000ffe:	f7ff fcf3 	bl	80009e8 <LL_ADC_REG_SetDMATransfer>

	//ADC ENABLE
	LL_ADC_EnableInternalRegulator(ADC1);
 8001002:	4b19      	ldr	r3, [pc, #100]	; (8001068 <main+0x29c>)
 8001004:	0018      	movs	r0, r3
 8001006:	f7ff fd1d 	bl	8000a44 <LL_ADC_EnableInternalRegulator>
	LL_mDelay(1);
 800100a:	2001      	movs	r0, #1
 800100c:	f7ff f930 	bl	8000270 <LL_mDelay>

	LL_ADC_ClearFlag_ADRDY(ADC1);
 8001010:	4b15      	ldr	r3, [pc, #84]	; (8001068 <main+0x29c>)
 8001012:	0018      	movs	r0, r3
 8001014:	f7ff fd73 	bl	8000afe <LL_ADC_ClearFlag_ADRDY>
	LL_ADC_Enable(ADC1);
 8001018:	4b13      	ldr	r3, [pc, #76]	; (8001068 <main+0x29c>)
 800101a:	0018      	movs	r0, r3
 800101c:	f7ff fd26 	bl	8000a6c <LL_ADC_Enable>
	while (LL_ADC_IsActiveFlag_ADRDY(ADC1) == 0)
 8001020:	46c0      	nop			; (mov r8, r8)
 8001022:	4b11      	ldr	r3, [pc, #68]	; (8001068 <main+0x29c>)
 8001024:	0018      	movs	r0, r3
 8001026:	f7ff fd45 	bl	8000ab4 <LL_ADC_IsActiveFlag_ADRDY>
 800102a:	1e03      	subs	r3, r0, #0
 800102c:	d0f9      	beq.n	8001022 <main+0x256>
		;

	software_timer_t timer;
	software_timer_task_init(&timer, ADC_TASK_TIME);
 800102e:	003b      	movs	r3, r7
 8001030:	2164      	movs	r1, #100	; 0x64
 8001032:	0018      	movs	r0, r3
 8001034:	f000 f822 	bl	800107c <software_timer_task_init>

	adc_start_dma_conversion();
 8001038:	f7ff f9ec 	bl	8000414 <adc_start_dma_conversion>

	while (1)
	{
		  if((software_timer_get_ms_tick() - timer.ms_tick) >= timer.task_time)
 800103c:	f000 f83c 	bl	80010b8 <software_timer_get_ms_tick>
 8001040:	0002      	movs	r2, r0
 8001042:	003b      	movs	r3, r7
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	1ad2      	subs	r2, r2, r3
 8001048:	003b      	movs	r3, r7
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	429a      	cmp	r2, r3
 800104e:	d3f5      	bcc.n	800103c <main+0x270>
		  {
			  timer.ms_tick = software_timer_get_ms_tick();
 8001050:	f000 f832 	bl	80010b8 <software_timer_get_ms_tick>
 8001054:	0002      	movs	r2, r0
 8001056:	003b      	movs	r3, r7
 8001058:	601a      	str	r2, [r3, #0]

			  LL_ADC_REG_StartConversion(ADC1);
 800105a:	4b03      	ldr	r3, [pc, #12]	; (8001068 <main+0x29c>)
 800105c:	0018      	movs	r0, r3
 800105e:	f7ff fd17 	bl	8000a90 <LL_ADC_REG_StartConversion>
		  if((software_timer_get_ms_tick() - timer.ms_tick) >= timer.task_time)
 8001062:	e7eb      	b.n	800103c <main+0x270>
 8001064:	03d09000 	.word	0x03d09000
 8001068:	40012400 	.word	0x40012400
 800106c:	04000002 	.word	0x04000002
 8001070:	10000010 	.word	0x10000010
 8001074:	14000013 	.word	0x14000013
 8001078:	40020000 	.word	0x40020000

0800107c <software_timer_task_init>:

static uint32_t ms_tick = 0;
software_timer_t timer = {0};

void software_timer_task_init(software_timer_t *timer, uint32_t time)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	6039      	str	r1, [r7, #0]
	timer->ms_tick = software_timer_get_ms_tick();
 8001086:	f000 f817 	bl	80010b8 <software_timer_get_ms_tick>
 800108a:	0002      	movs	r2, r0
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	601a      	str	r2, [r3, #0]
	timer->task_time = time;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	683a      	ldr	r2, [r7, #0]
 8001094:	605a      	str	r2, [r3, #4]
}
 8001096:	46c0      	nop			; (mov r8, r8)
 8001098:	46bd      	mov	sp, r7
 800109a:	b002      	add	sp, #8
 800109c:	bd80      	pop	{r7, pc}
	...

080010a0 <software_timer_inc_ms_tick>:

void software_timer_inc_ms_tick(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	ms_tick++;
 80010a4:	4b03      	ldr	r3, [pc, #12]	; (80010b4 <software_timer_inc_ms_tick+0x14>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	1c5a      	adds	r2, r3, #1
 80010aa:	4b02      	ldr	r3, [pc, #8]	; (80010b4 <software_timer_inc_ms_tick+0x14>)
 80010ac:	601a      	str	r2, [r3, #0]
}
 80010ae:	46c0      	nop			; (mov r8, r8)
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	20000038 	.word	0x20000038

080010b8 <software_timer_get_ms_tick>:

uint32_t software_timer_get_ms_tick(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
	return ms_tick;
 80010bc:	4b02      	ldr	r3, [pc, #8]	; (80010c8 <software_timer_get_ms_tick+0x10>)
 80010be:	681b      	ldr	r3, [r3, #0]
}
 80010c0:	0018      	movs	r0, r3
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	46c0      	nop			; (mov r8, r8)
 80010c8:	20000038 	.word	0x20000038

080010cc <LL_DMA_IsActiveFlag_TC1>:
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF1) == (DMA_ISR_TCIF1)) ? 1UL : 0UL);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	2202      	movs	r2, #2
 80010da:	4013      	ands	r3, r2
 80010dc:	2b02      	cmp	r3, #2
 80010de:	d101      	bne.n	80010e4 <LL_DMA_IsActiveFlag_TC1+0x18>
 80010e0:	2301      	movs	r3, #1
 80010e2:	e000      	b.n	80010e6 <LL_DMA_IsActiveFlag_TC1+0x1a>
 80010e4:	2300      	movs	r3, #0
}
 80010e6:	0018      	movs	r0, r3
 80010e8:	46bd      	mov	sp, r7
 80010ea:	b002      	add	sp, #8
 80010ec:	bd80      	pop	{r7, pc}

080010ee <LL_DMA_ClearFlag_TC1>:
{
 80010ee:	b580      	push	{r7, lr}
 80010f0:	b082      	sub	sp, #8
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF1);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2202      	movs	r2, #2
 80010fa:	605a      	str	r2, [r3, #4]
}
 80010fc:	46c0      	nop			; (mov r8, r8)
 80010fe:	46bd      	mov	sp, r7
 8001100:	b002      	add	sp, #8
 8001102:	bd80      	pop	{r7, pc}

08001104 <SysTick_Handler>:
 */

#include "main.h"

void SysTick_Handler(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
	software_timer_inc_ms_tick();
 8001108:	f7ff ffca 	bl	80010a0 <software_timer_inc_ms_tick>
}
 800110c:	46c0      	nop			; (mov r8, r8)
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
	...

08001114 <DMA_Channel1_IRQHandler>:

void DMA_Channel1_IRQHandler(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
  if (LL_DMA_IsActiveFlag_TC1(DMA1))
 8001118:	4b07      	ldr	r3, [pc, #28]	; (8001138 <DMA_Channel1_IRQHandler+0x24>)
 800111a:	0018      	movs	r0, r3
 800111c:	f7ff ffd6 	bl	80010cc <LL_DMA_IsActiveFlag_TC1>
 8001120:	1e03      	subs	r3, r0, #0
 8001122:	d005      	beq.n	8001130 <DMA_Channel1_IRQHandler+0x1c>
  {
    LL_DMA_ClearFlag_TC1(DMA1);
 8001124:	4b04      	ldr	r3, [pc, #16]	; (8001138 <DMA_Channel1_IRQHandler+0x24>)
 8001126:	0018      	movs	r0, r3
 8001128:	f7ff ffe1 	bl	80010ee <LL_DMA_ClearFlag_TC1>

    dma_transfer_complete_callback();
 800112c:	f7ff f99e 	bl	800046c <dma_transfer_complete_callback>
  }
}
 8001130:	46c0      	nop			; (mov r8, r8)
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	46c0      	nop			; (mov r8, r8)
 8001138:	40020000 	.word	0x40020000

0800113c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
 8001140:	4b03      	ldr	r3, [pc, #12]	; (8001150 <SystemInit+0x14>)
 8001142:	2280      	movs	r2, #128	; 0x80
 8001144:	0512      	lsls	r2, r2, #20
 8001146:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001148:	46c0      	nop			; (mov r8, r8)
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	46c0      	nop			; (mov r8, r8)
 8001150:	e000ed00 	.word	0xe000ed00

08001154 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001154:	480d      	ldr	r0, [pc, #52]	; (800118c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001156:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001158:	f7ff fff0 	bl	800113c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800115c:	480c      	ldr	r0, [pc, #48]	; (8001190 <LoopForever+0x6>)
  ldr r1, =_edata
 800115e:	490d      	ldr	r1, [pc, #52]	; (8001194 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001160:	4a0d      	ldr	r2, [pc, #52]	; (8001198 <LoopForever+0xe>)
  movs r3, #0
 8001162:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001164:	e002      	b.n	800116c <LoopCopyDataInit>

08001166 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001166:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001168:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800116a:	3304      	adds	r3, #4

0800116c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800116c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800116e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001170:	d3f9      	bcc.n	8001166 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001172:	4a0a      	ldr	r2, [pc, #40]	; (800119c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001174:	4c0a      	ldr	r4, [pc, #40]	; (80011a0 <LoopForever+0x16>)
  movs r3, #0
 8001176:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001178:	e001      	b.n	800117e <LoopFillZerobss>

0800117a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800117a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800117c:	3204      	adds	r2, #4

0800117e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800117e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001180:	d3fb      	bcc.n	800117a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001182:	f000 f811 	bl	80011a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001186:	f7ff fe21 	bl	8000dcc <main>

0800118a <LoopForever>:

LoopForever:
    b LoopForever
 800118a:	e7fe      	b.n	800118a <LoopForever>
  ldr   r0, =_estack
 800118c:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8001190:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001194:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8001198:	08001220 	.word	0x08001220
  ldr r2, =_sbss
 800119c:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80011a0:	2000003c 	.word	0x2000003c

080011a4 <ADC_COMP_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011a4:	e7fe      	b.n	80011a4 <ADC_COMP_IRQHandler>
	...

080011a8 <__libc_init_array>:
 80011a8:	b570      	push	{r4, r5, r6, lr}
 80011aa:	2600      	movs	r6, #0
 80011ac:	4d0c      	ldr	r5, [pc, #48]	; (80011e0 <__libc_init_array+0x38>)
 80011ae:	4c0d      	ldr	r4, [pc, #52]	; (80011e4 <__libc_init_array+0x3c>)
 80011b0:	1b64      	subs	r4, r4, r5
 80011b2:	10a4      	asrs	r4, r4, #2
 80011b4:	42a6      	cmp	r6, r4
 80011b6:	d109      	bne.n	80011cc <__libc_init_array+0x24>
 80011b8:	2600      	movs	r6, #0
 80011ba:	f000 f819 	bl	80011f0 <_init>
 80011be:	4d0a      	ldr	r5, [pc, #40]	; (80011e8 <__libc_init_array+0x40>)
 80011c0:	4c0a      	ldr	r4, [pc, #40]	; (80011ec <__libc_init_array+0x44>)
 80011c2:	1b64      	subs	r4, r4, r5
 80011c4:	10a4      	asrs	r4, r4, #2
 80011c6:	42a6      	cmp	r6, r4
 80011c8:	d105      	bne.n	80011d6 <__libc_init_array+0x2e>
 80011ca:	bd70      	pop	{r4, r5, r6, pc}
 80011cc:	00b3      	lsls	r3, r6, #2
 80011ce:	58eb      	ldr	r3, [r5, r3]
 80011d0:	4798      	blx	r3
 80011d2:	3601      	adds	r6, #1
 80011d4:	e7ee      	b.n	80011b4 <__libc_init_array+0xc>
 80011d6:	00b3      	lsls	r3, r6, #2
 80011d8:	58eb      	ldr	r3, [r5, r3]
 80011da:	4798      	blx	r3
 80011dc:	3601      	adds	r6, #1
 80011de:	e7f2      	b.n	80011c6 <__libc_init_array+0x1e>
 80011e0:	08001218 	.word	0x08001218
 80011e4:	08001218 	.word	0x08001218
 80011e8:	08001218 	.word	0x08001218
 80011ec:	0800121c 	.word	0x0800121c

080011f0 <_init>:
 80011f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011f2:	46c0      	nop			; (mov r8, r8)
 80011f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80011f6:	bc08      	pop	{r3}
 80011f8:	469e      	mov	lr, r3
 80011fa:	4770      	bx	lr

080011fc <_fini>:
 80011fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011fe:	46c0      	nop			; (mov r8, r8)
 8001200:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001202:	bc08      	pop	{r3}
 8001204:	469e      	mov	lr, r3
 8001206:	4770      	bx	lr
