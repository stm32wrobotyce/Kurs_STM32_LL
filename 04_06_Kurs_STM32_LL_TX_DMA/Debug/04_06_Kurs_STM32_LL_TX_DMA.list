
04_06_Kurs_STM32_LL_TX_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000fc0  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  0800107c  0800107c  0001107c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080010c4  080010c4  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080010c4  080010c4  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080010c4  080010c4  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080010c4  080010c4  000110c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080010c8  080010c8  000110c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080010cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000028  20000004  080010d0  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  080010d0  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000028e9  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000a67  00000000  00000000  00022915  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000340  00000000  00000000  00023380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000002d8  00000000  00000000  000236c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000102e0  00000000  00000000  00023998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002ef8  00000000  00000000  00033c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005f8b1  00000000  00000000  00036b70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00096421  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000a6c  00000000  00000000  00096474  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000004 	.word	0x20000004
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08001064 	.word	0x08001064

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000008 	.word	0x20000008
 8000100:	08001064 	.word	0x08001064

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
 8000222:	6078      	str	r0, [r7, #4]
 8000224:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8000226:	6839      	ldr	r1, [r7, #0]
 8000228:	6878      	ldr	r0, [r7, #4]
 800022a:	f7ff ff6b 	bl	8000104 <__udivsi3>
 800022e:	0003      	movs	r3, r0
 8000230:	001a      	movs	r2, r3
 8000232:	4b06      	ldr	r3, [pc, #24]	; (800024c <LL_InitTick+0x30>)
 8000234:	3a01      	subs	r2, #1
 8000236:	605a      	str	r2, [r3, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8000238:	4b04      	ldr	r3, [pc, #16]	; (800024c <LL_InitTick+0x30>)
 800023a:	2200      	movs	r2, #0
 800023c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800023e:	4b03      	ldr	r3, [pc, #12]	; (800024c <LL_InitTick+0x30>)
 8000240:	2205      	movs	r2, #5
 8000242:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8000244:	46c0      	nop			; (mov r8, r8)
 8000246:	46bd      	mov	sp, r7
 8000248:	b002      	add	sp, #8
 800024a:	bd80      	pop	{r7, pc}
 800024c:	e000e010 	.word	0xe000e010

08000250 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b082      	sub	sp, #8
 8000254:	af00      	add	r7, sp, #0
 8000256:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8000258:	23fa      	movs	r3, #250	; 0xfa
 800025a:	009a      	lsls	r2, r3, #2
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	0011      	movs	r1, r2
 8000260:	0018      	movs	r0, r3
 8000262:	f7ff ffdb 	bl	800021c <LL_InitTick>
}
 8000266:	46c0      	nop			; (mov r8, r8)
 8000268:	46bd      	mov	sp, r7
 800026a:	b002      	add	sp, #8
 800026c:	bd80      	pop	{r7, pc}
	...

08000270 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8000278:	4b03      	ldr	r3, [pc, #12]	; (8000288 <LL_SetSystemCoreClock+0x18>)
 800027a:	687a      	ldr	r2, [r7, #4]
 800027c:	601a      	str	r2, [r3, #0]
}
 800027e:	46c0      	nop			; (mov r8, r8)
 8000280:	46bd      	mov	sp, r7
 8000282:	b002      	add	sp, #8
 8000284:	bd80      	pop	{r7, pc}
 8000286:	46c0      	nop			; (mov r8, r8)
 8000288:	20000000 	.word	0x20000000

0800028c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	b082      	sub	sp, #8
 8000290:	af00      	add	r7, sp, #0
 8000292:	0002      	movs	r2, r0
 8000294:	1dfb      	adds	r3, r7, #7
 8000296:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000298:	1dfb      	adds	r3, r7, #7
 800029a:	781b      	ldrb	r3, [r3, #0]
 800029c:	2b7f      	cmp	r3, #127	; 0x7f
 800029e:	d809      	bhi.n	80002b4 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002a0:	1dfb      	adds	r3, r7, #7
 80002a2:	781b      	ldrb	r3, [r3, #0]
 80002a4:	001a      	movs	r2, r3
 80002a6:	231f      	movs	r3, #31
 80002a8:	401a      	ands	r2, r3
 80002aa:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__NVIC_EnableIRQ+0x30>)
 80002ac:	2101      	movs	r1, #1
 80002ae:	4091      	lsls	r1, r2
 80002b0:	000a      	movs	r2, r1
 80002b2:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80002b4:	46c0      	nop			; (mov r8, r8)
 80002b6:	46bd      	mov	sp, r7
 80002b8:	b002      	add	sp, #8
 80002ba:	bd80      	pop	{r7, pc}
 80002bc:	e000e100 	.word	0xe000e100

080002c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002c0:	b590      	push	{r4, r7, lr}
 80002c2:	b083      	sub	sp, #12
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	0002      	movs	r2, r0
 80002c8:	6039      	str	r1, [r7, #0]
 80002ca:	1dfb      	adds	r3, r7, #7
 80002cc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80002ce:	1dfb      	adds	r3, r7, #7
 80002d0:	781b      	ldrb	r3, [r3, #0]
 80002d2:	2b7f      	cmp	r3, #127	; 0x7f
 80002d4:	d828      	bhi.n	8000328 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002d6:	4a2f      	ldr	r2, [pc, #188]	; (8000394 <__NVIC_SetPriority+0xd4>)
 80002d8:	1dfb      	adds	r3, r7, #7
 80002da:	781b      	ldrb	r3, [r3, #0]
 80002dc:	b25b      	sxtb	r3, r3
 80002de:	089b      	lsrs	r3, r3, #2
 80002e0:	33c0      	adds	r3, #192	; 0xc0
 80002e2:	009b      	lsls	r3, r3, #2
 80002e4:	589b      	ldr	r3, [r3, r2]
 80002e6:	1dfa      	adds	r2, r7, #7
 80002e8:	7812      	ldrb	r2, [r2, #0]
 80002ea:	0011      	movs	r1, r2
 80002ec:	2203      	movs	r2, #3
 80002ee:	400a      	ands	r2, r1
 80002f0:	00d2      	lsls	r2, r2, #3
 80002f2:	21ff      	movs	r1, #255	; 0xff
 80002f4:	4091      	lsls	r1, r2
 80002f6:	000a      	movs	r2, r1
 80002f8:	43d2      	mvns	r2, r2
 80002fa:	401a      	ands	r2, r3
 80002fc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002fe:	683b      	ldr	r3, [r7, #0]
 8000300:	019b      	lsls	r3, r3, #6
 8000302:	22ff      	movs	r2, #255	; 0xff
 8000304:	401a      	ands	r2, r3
 8000306:	1dfb      	adds	r3, r7, #7
 8000308:	781b      	ldrb	r3, [r3, #0]
 800030a:	0018      	movs	r0, r3
 800030c:	2303      	movs	r3, #3
 800030e:	4003      	ands	r3, r0
 8000310:	00db      	lsls	r3, r3, #3
 8000312:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000314:	481f      	ldr	r0, [pc, #124]	; (8000394 <__NVIC_SetPriority+0xd4>)
 8000316:	1dfb      	adds	r3, r7, #7
 8000318:	781b      	ldrb	r3, [r3, #0]
 800031a:	b25b      	sxtb	r3, r3
 800031c:	089b      	lsrs	r3, r3, #2
 800031e:	430a      	orrs	r2, r1
 8000320:	33c0      	adds	r3, #192	; 0xc0
 8000322:	009b      	lsls	r3, r3, #2
 8000324:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000326:	e031      	b.n	800038c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000328:	4a1b      	ldr	r2, [pc, #108]	; (8000398 <__NVIC_SetPriority+0xd8>)
 800032a:	1dfb      	adds	r3, r7, #7
 800032c:	781b      	ldrb	r3, [r3, #0]
 800032e:	0019      	movs	r1, r3
 8000330:	230f      	movs	r3, #15
 8000332:	400b      	ands	r3, r1
 8000334:	3b08      	subs	r3, #8
 8000336:	089b      	lsrs	r3, r3, #2
 8000338:	3306      	adds	r3, #6
 800033a:	009b      	lsls	r3, r3, #2
 800033c:	18d3      	adds	r3, r2, r3
 800033e:	3304      	adds	r3, #4
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	1dfa      	adds	r2, r7, #7
 8000344:	7812      	ldrb	r2, [r2, #0]
 8000346:	0011      	movs	r1, r2
 8000348:	2203      	movs	r2, #3
 800034a:	400a      	ands	r2, r1
 800034c:	00d2      	lsls	r2, r2, #3
 800034e:	21ff      	movs	r1, #255	; 0xff
 8000350:	4091      	lsls	r1, r2
 8000352:	000a      	movs	r2, r1
 8000354:	43d2      	mvns	r2, r2
 8000356:	401a      	ands	r2, r3
 8000358:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800035a:	683b      	ldr	r3, [r7, #0]
 800035c:	019b      	lsls	r3, r3, #6
 800035e:	22ff      	movs	r2, #255	; 0xff
 8000360:	401a      	ands	r2, r3
 8000362:	1dfb      	adds	r3, r7, #7
 8000364:	781b      	ldrb	r3, [r3, #0]
 8000366:	0018      	movs	r0, r3
 8000368:	2303      	movs	r3, #3
 800036a:	4003      	ands	r3, r0
 800036c:	00db      	lsls	r3, r3, #3
 800036e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000370:	4809      	ldr	r0, [pc, #36]	; (8000398 <__NVIC_SetPriority+0xd8>)
 8000372:	1dfb      	adds	r3, r7, #7
 8000374:	781b      	ldrb	r3, [r3, #0]
 8000376:	001c      	movs	r4, r3
 8000378:	230f      	movs	r3, #15
 800037a:	4023      	ands	r3, r4
 800037c:	3b08      	subs	r3, #8
 800037e:	089b      	lsrs	r3, r3, #2
 8000380:	430a      	orrs	r2, r1
 8000382:	3306      	adds	r3, #6
 8000384:	009b      	lsls	r3, r3, #2
 8000386:	18c3      	adds	r3, r0, r3
 8000388:	3304      	adds	r3, #4
 800038a:	601a      	str	r2, [r3, #0]
}
 800038c:	46c0      	nop			; (mov r8, r8)
 800038e:	46bd      	mov	sp, r7
 8000390:	b003      	add	sp, #12
 8000392:	bd90      	pop	{r4, r7, pc}
 8000394:	e000e100 	.word	0xe000e100
 8000398:	e000ed00 	.word	0xe000ed00

0800039c <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80003a0:	4b04      	ldr	r3, [pc, #16]	; (80003b4 <LL_RCC_HSI_Enable+0x18>)
 80003a2:	681a      	ldr	r2, [r3, #0]
 80003a4:	4b03      	ldr	r3, [pc, #12]	; (80003b4 <LL_RCC_HSI_Enable+0x18>)
 80003a6:	2180      	movs	r1, #128	; 0x80
 80003a8:	0049      	lsls	r1, r1, #1
 80003aa:	430a      	orrs	r2, r1
 80003ac:	601a      	str	r2, [r3, #0]
}
 80003ae:	46c0      	nop			; (mov r8, r8)
 80003b0:	46bd      	mov	sp, r7
 80003b2:	bd80      	pop	{r7, pc}
 80003b4:	40021000 	.word	0x40021000

080003b8 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80003bc:	4b07      	ldr	r3, [pc, #28]	; (80003dc <LL_RCC_HSI_IsReady+0x24>)
 80003be:	681a      	ldr	r2, [r3, #0]
 80003c0:	2380      	movs	r3, #128	; 0x80
 80003c2:	00db      	lsls	r3, r3, #3
 80003c4:	401a      	ands	r2, r3
 80003c6:	2380      	movs	r3, #128	; 0x80
 80003c8:	00db      	lsls	r3, r3, #3
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d101      	bne.n	80003d2 <LL_RCC_HSI_IsReady+0x1a>
 80003ce:	2301      	movs	r3, #1
 80003d0:	e000      	b.n	80003d4 <LL_RCC_HSI_IsReady+0x1c>
 80003d2:	2300      	movs	r3, #0
}
 80003d4:	0018      	movs	r0, r3
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bd80      	pop	{r7, pc}
 80003da:	46c0      	nop			; (mov r8, r8)
 80003dc:	40021000 	.word	0x40021000

080003e0 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_LSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_LSE
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b082      	sub	sp, #8
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80003e8:	4b06      	ldr	r3, [pc, #24]	; (8000404 <LL_RCC_SetSysClkSource+0x24>)
 80003ea:	689b      	ldr	r3, [r3, #8]
 80003ec:	2207      	movs	r2, #7
 80003ee:	4393      	bics	r3, r2
 80003f0:	0019      	movs	r1, r3
 80003f2:	4b04      	ldr	r3, [pc, #16]	; (8000404 <LL_RCC_SetSysClkSource+0x24>)
 80003f4:	687a      	ldr	r2, [r7, #4]
 80003f6:	430a      	orrs	r2, r1
 80003f8:	609a      	str	r2, [r3, #8]
}
 80003fa:	46c0      	nop			; (mov r8, r8)
 80003fc:	46bd      	mov	sp, r7
 80003fe:	b002      	add	sp, #8
 8000400:	bd80      	pop	{r7, pc}
 8000402:	46c0      	nop			; (mov r8, r8)
 8000404:	40021000 	.word	0x40021000

08000408 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_LSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800040c:	4b03      	ldr	r3, [pc, #12]	; (800041c <LL_RCC_GetSysClkSource+0x14>)
 800040e:	689b      	ldr	r3, [r3, #8]
 8000410:	2238      	movs	r2, #56	; 0x38
 8000412:	4013      	ands	r3, r2
}
 8000414:	0018      	movs	r0, r3
 8000416:	46bd      	mov	sp, r7
 8000418:	bd80      	pop	{r7, pc}
 800041a:	46c0      	nop			; (mov r8, r8)
 800041c:	40021000 	.word	0x40021000

08000420 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b082      	sub	sp, #8
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000428:	4b06      	ldr	r3, [pc, #24]	; (8000444 <LL_RCC_SetAHBPrescaler+0x24>)
 800042a:	689b      	ldr	r3, [r3, #8]
 800042c:	4a06      	ldr	r2, [pc, #24]	; (8000448 <LL_RCC_SetAHBPrescaler+0x28>)
 800042e:	4013      	ands	r3, r2
 8000430:	0019      	movs	r1, r3
 8000432:	4b04      	ldr	r3, [pc, #16]	; (8000444 <LL_RCC_SetAHBPrescaler+0x24>)
 8000434:	687a      	ldr	r2, [r7, #4]
 8000436:	430a      	orrs	r2, r1
 8000438:	609a      	str	r2, [r3, #8]
}
 800043a:	46c0      	nop			; (mov r8, r8)
 800043c:	46bd      	mov	sp, r7
 800043e:	b002      	add	sp, #8
 8000440:	bd80      	pop	{r7, pc}
 8000442:	46c0      	nop			; (mov r8, r8)
 8000444:	40021000 	.word	0x40021000
 8000448:	fffff0ff 	.word	0xfffff0ff

0800044c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b082      	sub	sp, #8
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, Prescaler);
 8000454:	4b06      	ldr	r3, [pc, #24]	; (8000470 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000456:	689b      	ldr	r3, [r3, #8]
 8000458:	4a06      	ldr	r2, [pc, #24]	; (8000474 <LL_RCC_SetAPB1Prescaler+0x28>)
 800045a:	4013      	ands	r3, r2
 800045c:	0019      	movs	r1, r3
 800045e:	4b04      	ldr	r3, [pc, #16]	; (8000470 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000460:	687a      	ldr	r2, [r7, #4]
 8000462:	430a      	orrs	r2, r1
 8000464:	609a      	str	r2, [r3, #8]
}
 8000466:	46c0      	nop			; (mov r8, r8)
 8000468:	46bd      	mov	sp, r7
 800046a:	b002      	add	sp, #8
 800046c:	bd80      	pop	{r7, pc}
 800046e:	46c0      	nop			; (mov r8, r8)
 8000470:	40021000 	.word	0x40021000
 8000474:	ffff8fff 	.word	0xffff8fff

08000478 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800047c:	4b04      	ldr	r3, [pc, #16]	; (8000490 <LL_RCC_PLL_Enable+0x18>)
 800047e:	681a      	ldr	r2, [r3, #0]
 8000480:	4b03      	ldr	r3, [pc, #12]	; (8000490 <LL_RCC_PLL_Enable+0x18>)
 8000482:	2180      	movs	r1, #128	; 0x80
 8000484:	0449      	lsls	r1, r1, #17
 8000486:	430a      	orrs	r2, r1
 8000488:	601a      	str	r2, [r3, #0]
}
 800048a:	46c0      	nop			; (mov r8, r8)
 800048c:	46bd      	mov	sp, r7
 800048e:	bd80      	pop	{r7, pc}
 8000490:	40021000 	.word	0x40021000

08000494 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8000498:	4b07      	ldr	r3, [pc, #28]	; (80004b8 <LL_RCC_PLL_IsReady+0x24>)
 800049a:	681a      	ldr	r2, [r3, #0]
 800049c:	2380      	movs	r3, #128	; 0x80
 800049e:	049b      	lsls	r3, r3, #18
 80004a0:	401a      	ands	r2, r3
 80004a2:	2380      	movs	r3, #128	; 0x80
 80004a4:	049b      	lsls	r3, r3, #18
 80004a6:	429a      	cmp	r2, r3
 80004a8:	d101      	bne.n	80004ae <LL_RCC_PLL_IsReady+0x1a>
 80004aa:	2301      	movs	r3, #1
 80004ac:	e000      	b.n	80004b0 <LL_RCC_PLL_IsReady+0x1c>
 80004ae:	2300      	movs	r3, #0
}
 80004b0:	0018      	movs	r0, r3
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bd80      	pop	{r7, pc}
 80004b6:	46c0      	nop			; (mov r8, r8)
 80004b8:	40021000 	.word	0x40021000

080004bc <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b084      	sub	sp, #16
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	60f8      	str	r0, [r7, #12]
 80004c4:	60b9      	str	r1, [r7, #8]
 80004c6:	607a      	str	r2, [r7, #4]
 80004c8:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 80004ca:	4b0a      	ldr	r3, [pc, #40]	; (80004f4 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 80004cc:	68db      	ldr	r3, [r3, #12]
 80004ce:	4a0a      	ldr	r2, [pc, #40]	; (80004f8 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 80004d0:	4013      	ands	r3, r2
 80004d2:	0019      	movs	r1, r3
 80004d4:	68fa      	ldr	r2, [r7, #12]
 80004d6:	68bb      	ldr	r3, [r7, #8]
 80004d8:	431a      	orrs	r2, r3
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	021b      	lsls	r3, r3, #8
 80004de:	431a      	orrs	r2, r3
 80004e0:	683b      	ldr	r3, [r7, #0]
 80004e2:	431a      	orrs	r2, r3
 80004e4:	4b03      	ldr	r3, [pc, #12]	; (80004f4 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 80004e6:	430a      	orrs	r2, r1
 80004e8:	60da      	str	r2, [r3, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 80004ea:	46c0      	nop			; (mov r8, r8)
 80004ec:	46bd      	mov	sp, r7
 80004ee:	b004      	add	sp, #16
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	46c0      	nop			; (mov r8, r8)
 80004f4:	40021000 	.word	0x40021000
 80004f8:	1fff808c 	.word	0x1fff808c

080004fc <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 8000500:	4b04      	ldr	r3, [pc, #16]	; (8000514 <LL_RCC_PLL_EnableDomain_SYS+0x18>)
 8000502:	68da      	ldr	r2, [r3, #12]
 8000504:	4b03      	ldr	r3, [pc, #12]	; (8000514 <LL_RCC_PLL_EnableDomain_SYS+0x18>)
 8000506:	2180      	movs	r1, #128	; 0x80
 8000508:	0549      	lsls	r1, r1, #21
 800050a:	430a      	orrs	r2, r1
 800050c:	60da      	str	r2, [r3, #12]
}
 800050e:	46c0      	nop			; (mov r8, r8)
 8000510:	46bd      	mov	sp, r7
 8000512:	bd80      	pop	{r7, pc}
 8000514:	40021000 	.word	0x40021000

08000518 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_RNG  (*)
  * @note   (*) RNG & CRYP Peripherals available only on STM32G081xx
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b084      	sub	sp, #16
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8000520:	4b07      	ldr	r3, [pc, #28]	; (8000540 <LL_AHB1_GRP1_EnableClock+0x28>)
 8000522:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8000524:	4b06      	ldr	r3, [pc, #24]	; (8000540 <LL_AHB1_GRP1_EnableClock+0x28>)
 8000526:	687a      	ldr	r2, [r7, #4]
 8000528:	430a      	orrs	r2, r1
 800052a:	639a      	str	r2, [r3, #56]	; 0x38
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 800052c:	4b04      	ldr	r3, [pc, #16]	; (8000540 <LL_AHB1_GRP1_EnableClock+0x28>)
 800052e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000530:	687a      	ldr	r2, [r7, #4]
 8000532:	4013      	ands	r3, r2
 8000534:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000536:	68fb      	ldr	r3, [r7, #12]
}
 8000538:	46c0      	nop			; (mov r8, r8)
 800053a:	46bd      	mov	sp, r7
 800053c:	b004      	add	sp, #16
 800053e:	bd80      	pop	{r7, pc}
 8000540:	40021000 	.word	0x40021000

08000544 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1  (1)
  * @note Peripheral marked with (1) are not available all devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b084      	sub	sp, #16
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APBENR1, Periphs);
 800054c:	4b07      	ldr	r3, [pc, #28]	; (800056c <LL_APB1_GRP1_EnableClock+0x28>)
 800054e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8000550:	4b06      	ldr	r3, [pc, #24]	; (800056c <LL_APB1_GRP1_EnableClock+0x28>)
 8000552:	687a      	ldr	r2, [r7, #4]
 8000554:	430a      	orrs	r2, r1
 8000556:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 8000558:	4b04      	ldr	r3, [pc, #16]	; (800056c <LL_APB1_GRP1_EnableClock+0x28>)
 800055a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800055c:	687a      	ldr	r2, [r7, #4]
 800055e:	4013      	ands	r3, r2
 8000560:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000562:	68fb      	ldr	r3, [r7, #12]
}
 8000564:	46c0      	nop			; (mov r8, r8)
 8000566:	46bd      	mov	sp, r7
 8000568:	b004      	add	sp, #16
 800056a:	bd80      	pop	{r7, pc}
 800056c:	40021000 	.word	0x40021000

08000570 <LL_IOP_GRP1_EnableClock>:
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOE
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOF
  * @retval None
  */
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b084      	sub	sp, #16
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 8000578:	4b07      	ldr	r3, [pc, #28]	; (8000598 <LL_IOP_GRP1_EnableClock+0x28>)
 800057a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800057c:	4b06      	ldr	r3, [pc, #24]	; (8000598 <LL_IOP_GRP1_EnableClock+0x28>)
 800057e:	687a      	ldr	r2, [r7, #4]
 8000580:	430a      	orrs	r2, r1
 8000582:	635a      	str	r2, [r3, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8000584:	4b04      	ldr	r3, [pc, #16]	; (8000598 <LL_IOP_GRP1_EnableClock+0x28>)
 8000586:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000588:	687a      	ldr	r2, [r7, #4]
 800058a:	4013      	ands	r3, r2
 800058c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800058e:	68fb      	ldr	r3, [r7, #12]
}
 8000590:	46c0      	nop			; (mov r8, r8)
 8000592:	46bd      	mov	sp, r7
 8000594:	b004      	add	sp, #16
 8000596:	bd80      	pop	{r7, pc}
 8000598:	40021000 	.word	0x40021000

0800059c <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80005a4:	4b06      	ldr	r3, [pc, #24]	; (80005c0 <LL_FLASH_SetLatency+0x24>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	2207      	movs	r2, #7
 80005aa:	4393      	bics	r3, r2
 80005ac:	0019      	movs	r1, r3
 80005ae:	4b04      	ldr	r3, [pc, #16]	; (80005c0 <LL_FLASH_SetLatency+0x24>)
 80005b0:	687a      	ldr	r2, [r7, #4]
 80005b2:	430a      	orrs	r2, r1
 80005b4:	601a      	str	r2, [r3, #0]
}
 80005b6:	46c0      	nop			; (mov r8, r8)
 80005b8:	46bd      	mov	sp, r7
 80005ba:	b002      	add	sp, #8
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	46c0      	nop			; (mov r8, r8)
 80005c0:	40022000 	.word	0x40022000

080005c4 <LL_SYSTICK_EnableIT>:
  * @brief  Enable SysTick exception request
  * @rmtoll STK_CTRL     TICKINT       LL_SYSTICK_EnableIT
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_EnableIT(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80005c8:	4b04      	ldr	r3, [pc, #16]	; (80005dc <LL_SYSTICK_EnableIT+0x18>)
 80005ca:	681a      	ldr	r2, [r3, #0]
 80005cc:	4b03      	ldr	r3, [pc, #12]	; (80005dc <LL_SYSTICK_EnableIT+0x18>)
 80005ce:	2102      	movs	r1, #2
 80005d0:	430a      	orrs	r2, r1
 80005d2:	601a      	str	r2, [r3, #0]
}
 80005d4:	46c0      	nop			; (mov r8, r8)
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	46c0      	nop			; (mov r8, r8)
 80005dc:	e000e010 	.word	0xe000e010

080005e0 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	60f8      	str	r0, [r7, #12]
 80005e8:	60b9      	str	r1, [r7, #8]
 80005ea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	6819      	ldr	r1, [r3, #0]
 80005f0:	68bb      	ldr	r3, [r7, #8]
 80005f2:	435b      	muls	r3, r3
 80005f4:	001a      	movs	r2, r3
 80005f6:	0013      	movs	r3, r2
 80005f8:	005b      	lsls	r3, r3, #1
 80005fa:	189b      	adds	r3, r3, r2
 80005fc:	43db      	mvns	r3, r3
 80005fe:	400b      	ands	r3, r1
 8000600:	001a      	movs	r2, r3
 8000602:	68bb      	ldr	r3, [r7, #8]
 8000604:	435b      	muls	r3, r3
 8000606:	6879      	ldr	r1, [r7, #4]
 8000608:	434b      	muls	r3, r1
 800060a:	431a      	orrs	r2, r3
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	601a      	str	r2, [r3, #0]
}
 8000610:	46c0      	nop			; (mov r8, r8)
 8000612:	46bd      	mov	sp, r7
 8000614:	b004      	add	sp, #16
 8000616:	bd80      	pop	{r7, pc}

08000618 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b084      	sub	sp, #16
 800061c:	af00      	add	r7, sp, #0
 800061e:	60f8      	str	r0, [r7, #12]
 8000620:	60b9      	str	r1, [r7, #8]
 8000622:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	6899      	ldr	r1, [r3, #8]
 8000628:	68bb      	ldr	r3, [r7, #8]
 800062a:	435b      	muls	r3, r3
 800062c:	001a      	movs	r2, r3
 800062e:	0013      	movs	r3, r2
 8000630:	005b      	lsls	r3, r3, #1
 8000632:	189b      	adds	r3, r3, r2
 8000634:	43db      	mvns	r3, r3
 8000636:	400b      	ands	r3, r1
 8000638:	001a      	movs	r2, r3
 800063a:	68bb      	ldr	r3, [r7, #8]
 800063c:	435b      	muls	r3, r3
 800063e:	6879      	ldr	r1, [r7, #4]
 8000640:	434b      	muls	r3, r1
 8000642:	431a      	orrs	r2, r3
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	609a      	str	r2, [r3, #8]
}
 8000648:	46c0      	nop			; (mov r8, r8)
 800064a:	46bd      	mov	sp, r7
 800064c:	b004      	add	sp, #16
 800064e:	bd80      	pop	{r7, pc}

08000650 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b084      	sub	sp, #16
 8000654:	af00      	add	r7, sp, #0
 8000656:	60f8      	str	r0, [r7, #12]
 8000658:	60b9      	str	r1, [r7, #8]
 800065a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	68d9      	ldr	r1, [r3, #12]
 8000660:	68bb      	ldr	r3, [r7, #8]
 8000662:	435b      	muls	r3, r3
 8000664:	001a      	movs	r2, r3
 8000666:	0013      	movs	r3, r2
 8000668:	005b      	lsls	r3, r3, #1
 800066a:	189b      	adds	r3, r3, r2
 800066c:	43db      	mvns	r3, r3
 800066e:	400b      	ands	r3, r1
 8000670:	001a      	movs	r2, r3
 8000672:	68bb      	ldr	r3, [r7, #8]
 8000674:	435b      	muls	r3, r3
 8000676:	6879      	ldr	r1, [r7, #4]
 8000678:	434b      	muls	r3, r1
 800067a:	431a      	orrs	r2, r3
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	60da      	str	r2, [r3, #12]
}
 8000680:	46c0      	nop			; (mov r8, r8)
 8000682:	46bd      	mov	sp, r7
 8000684:	b004      	add	sp, #16
 8000686:	bd80      	pop	{r7, pc}

08000688 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_6
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b084      	sub	sp, #16
 800068c:	af00      	add	r7, sp, #0
 800068e:	60f8      	str	r0, [r7, #12]
 8000690:	60b9      	str	r1, [r7, #8]
 8000692:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	6a19      	ldr	r1, [r3, #32]
 8000698:	68bb      	ldr	r3, [r7, #8]
 800069a:	435b      	muls	r3, r3
 800069c:	68ba      	ldr	r2, [r7, #8]
 800069e:	4353      	muls	r3, r2
 80006a0:	68ba      	ldr	r2, [r7, #8]
 80006a2:	435a      	muls	r2, r3
 80006a4:	0013      	movs	r3, r2
 80006a6:	011b      	lsls	r3, r3, #4
 80006a8:	1a9b      	subs	r3, r3, r2
 80006aa:	43db      	mvns	r3, r3
 80006ac:	400b      	ands	r3, r1
 80006ae:	001a      	movs	r2, r3
 80006b0:	68bb      	ldr	r3, [r7, #8]
 80006b2:	435b      	muls	r3, r3
 80006b4:	68b9      	ldr	r1, [r7, #8]
 80006b6:	434b      	muls	r3, r1
 80006b8:	68b9      	ldr	r1, [r7, #8]
 80006ba:	434b      	muls	r3, r1
 80006bc:	6879      	ldr	r1, [r7, #4]
 80006be:	434b      	muls	r3, r1
 80006c0:	431a      	orrs	r2, r3
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	621a      	str	r2, [r3, #32]
             ((((Pin * Pin) * Pin) * Pin) * Alternate));
}
 80006c6:	46c0      	nop			; (mov r8, r8)
 80006c8:	46bd      	mov	sp, r7
 80006ca:	b004      	add	sp, #16
 80006cc:	bd80      	pop	{r7, pc}

080006ce <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 80006ce:	b580      	push	{r7, lr}
 80006d0:	b082      	sub	sp, #8
 80006d2:	af00      	add	r7, sp, #0
 80006d4:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	2201      	movs	r2, #1
 80006dc:	431a      	orrs	r2, r3
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	601a      	str	r2, [r3, #0]
}
 80006e2:	46c0      	nop			; (mov r8, r8)
 80006e4:	46bd      	mov	sp, r7
 80006e6:	b002      	add	sp, #8
 80006e8:	bd80      	pop	{r7, pc}

080006ea <LL_USART_EnableDirectionTx>:
  * @rmtoll CR1          TE            LL_USART_EnableDirectionTx
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDirectionTx(USART_TypeDef *USARTx)
{
 80006ea:	b580      	push	{r7, lr}
 80006ec:	b086      	sub	sp, #24
 80006ee:	af00      	add	r7, sp, #0
 80006f0:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80006f2:	f3ef 8310 	mrs	r3, PRIMASK
 80006f6:	60bb      	str	r3, [r7, #8]
  return(result);
 80006f8:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TE);
 80006fa:	617b      	str	r3, [r7, #20]
 80006fc:	2301      	movs	r3, #1
 80006fe:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	f383 8810 	msr	PRIMASK, r3
}
 8000706:	46c0      	nop			; (mov r8, r8)
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	2208      	movs	r2, #8
 800070e:	431a      	orrs	r2, r3
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	601a      	str	r2, [r3, #0]
 8000714:	697b      	ldr	r3, [r7, #20]
 8000716:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000718:	693b      	ldr	r3, [r7, #16]
 800071a:	f383 8810 	msr	PRIMASK, r3
}
 800071e:	46c0      	nop			; (mov r8, r8)
}
 8000720:	46c0      	nop			; (mov r8, r8)
 8000722:	46bd      	mov	sp, r7
 8000724:	b006      	add	sp, #24
 8000726:	bd80      	pop	{r7, pc}

08000728 <LL_USART_ConfigCharacter>:
  *         @arg @ref LL_USART_STOPBITS_2
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigCharacter(USART_TypeDef *USARTx, uint32_t DataWidth, uint32_t Parity,
                                              uint32_t StopBits)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b084      	sub	sp, #16
 800072c:	af00      	add	r7, sp, #0
 800072e:	60f8      	str	r0, [r7, #12]
 8000730:	60b9      	str	r1, [r7, #8]
 8000732:	607a      	str	r2, [r7, #4]
 8000734:	603b      	str	r3, [r7, #0]
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE | USART_CR1_M, Parity | DataWidth);
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	4a0a      	ldr	r2, [pc, #40]	; (8000764 <LL_USART_ConfigCharacter+0x3c>)
 800073c:	401a      	ands	r2, r3
 800073e:	6879      	ldr	r1, [r7, #4]
 8000740:	68bb      	ldr	r3, [r7, #8]
 8000742:	430b      	orrs	r3, r1
 8000744:	431a      	orrs	r2, r3
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	601a      	str	r2, [r3, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	685b      	ldr	r3, [r3, #4]
 800074e:	4a06      	ldr	r2, [pc, #24]	; (8000768 <LL_USART_ConfigCharacter+0x40>)
 8000750:	401a      	ands	r2, r3
 8000752:	683b      	ldr	r3, [r7, #0]
 8000754:	431a      	orrs	r2, r3
 8000756:	68fb      	ldr	r3, [r7, #12]
 8000758:	605a      	str	r2, [r3, #4]
}
 800075a:	46c0      	nop			; (mov r8, r8)
 800075c:	46bd      	mov	sp, r7
 800075e:	b004      	add	sp, #16
 8000760:	bd80      	pop	{r7, pc}
 8000762:	46c0      	nop			; (mov r8, r8)
 8000764:	efffe9ff 	.word	0xefffe9ff
 8000768:	ffffcfff 	.word	0xffffcfff

0800076c <LL_USART_SetBaudRate>:
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t PrescalerValue,
                                          uint32_t OverSampling,
                                          uint32_t BaudRate)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b086      	sub	sp, #24
 8000770:	af00      	add	r7, sp, #0
 8000772:	60f8      	str	r0, [r7, #12]
 8000774:	60b9      	str	r1, [r7, #8]
 8000776:	607a      	str	r2, [r7, #4]
 8000778:	603b      	str	r3, [r7, #0]
  uint32_t usartdiv;
  uint32_t brrtemp;

  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	2b0b      	cmp	r3, #11
 800077e:	d846      	bhi.n	800080e <LL_USART_SetBaudRate+0xa2>
  {
    /* Do not overstep the size of USART_PRESCALER_TAB */
  }
  else if (BaudRate == 0U)
 8000780:	6a3b      	ldr	r3, [r7, #32]
 8000782:	2b00      	cmp	r3, #0
 8000784:	d043      	beq.n	800080e <LL_USART_SetBaudRate+0xa2>
  {
    /* Can Not divide per 0 */
  }
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 8000786:	683a      	ldr	r2, [r7, #0]
 8000788:	2380      	movs	r3, #128	; 0x80
 800078a:	021b      	lsls	r3, r3, #8
 800078c:	429a      	cmp	r2, r3
 800078e:	d126      	bne.n	80007de <LL_USART_SetBaudRate+0x72>
  {
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	b2db      	uxtb	r3, r3
 8000794:	001a      	movs	r2, r3
 8000796:	4b20      	ldr	r3, [pc, #128]	; (8000818 <LL_USART_SetBaudRate+0xac>)
 8000798:	0092      	lsls	r2, r2, #2
 800079a:	58d3      	ldr	r3, [r2, r3]
 800079c:	0019      	movs	r1, r3
 800079e:	68b8      	ldr	r0, [r7, #8]
 80007a0:	f7ff fcb0 	bl	8000104 <__udivsi3>
 80007a4:	0003      	movs	r3, r0
 80007a6:	005a      	lsls	r2, r3, #1
 80007a8:	6a3b      	ldr	r3, [r7, #32]
 80007aa:	085b      	lsrs	r3, r3, #1
 80007ac:	18d3      	adds	r3, r2, r3
 80007ae:	6a39      	ldr	r1, [r7, #32]
 80007b0:	0018      	movs	r0, r3
 80007b2:	f7ff fca7 	bl	8000104 <__udivsi3>
 80007b6:	0003      	movs	r3, r0
 80007b8:	b29b      	uxth	r3, r3
 80007ba:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 80007bc:	697b      	ldr	r3, [r7, #20]
 80007be:	4a17      	ldr	r2, [pc, #92]	; (800081c <LL_USART_SetBaudRate+0xb0>)
 80007c0:	4013      	ands	r3, r2
 80007c2:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80007c4:	697b      	ldr	r3, [r7, #20]
 80007c6:	085b      	lsrs	r3, r3, #1
 80007c8:	b29b      	uxth	r3, r3
 80007ca:	001a      	movs	r2, r3
 80007cc:	2307      	movs	r3, #7
 80007ce:	4013      	ands	r3, r2
 80007d0:	693a      	ldr	r2, [r7, #16]
 80007d2:	4313      	orrs	r3, r2
 80007d4:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	693a      	ldr	r2, [r7, #16]
 80007da:	60da      	str	r2, [r3, #12]
  }
  else
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
  }
}
 80007dc:	e017      	b.n	800080e <LL_USART_SetBaudRate+0xa2>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	001a      	movs	r2, r3
 80007e4:	4b0c      	ldr	r3, [pc, #48]	; (8000818 <LL_USART_SetBaudRate+0xac>)
 80007e6:	0092      	lsls	r2, r2, #2
 80007e8:	58d3      	ldr	r3, [r2, r3]
 80007ea:	0019      	movs	r1, r3
 80007ec:	68b8      	ldr	r0, [r7, #8]
 80007ee:	f7ff fc89 	bl	8000104 <__udivsi3>
 80007f2:	0003      	movs	r3, r0
 80007f4:	001a      	movs	r2, r3
 80007f6:	6a3b      	ldr	r3, [r7, #32]
 80007f8:	085b      	lsrs	r3, r3, #1
 80007fa:	18d3      	adds	r3, r2, r3
 80007fc:	6a39      	ldr	r1, [r7, #32]
 80007fe:	0018      	movs	r0, r3
 8000800:	f7ff fc80 	bl	8000104 <__udivsi3>
 8000804:	0003      	movs	r3, r0
 8000806:	b29b      	uxth	r3, r3
 8000808:	001a      	movs	r2, r3
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	60da      	str	r2, [r3, #12]
}
 800080e:	46c0      	nop			; (mov r8, r8)
 8000810:	46bd      	mov	sp, r7
 8000812:	b006      	add	sp, #24
 8000814:	bd80      	pop	{r7, pc}
 8000816:	46c0      	nop			; (mov r8, r8)
 8000818:	0800107c 	.word	0x0800107c
 800081c:	0000fff0 	.word	0x0000fff0

08000820 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	685b      	ldr	r3, [r3, #4]
 800082c:	4a07      	ldr	r2, [pc, #28]	; (800084c <LL_USART_ConfigAsyncMode+0x2c>)
 800082e:	401a      	ands	r2, r3
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	689b      	ldr	r3, [r3, #8]
 8000838:	222a      	movs	r2, #42	; 0x2a
 800083a:	4393      	bics	r3, r2
 800083c:	001a      	movs	r2, r3
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	609a      	str	r2, [r3, #8]
}
 8000842:	46c0      	nop			; (mov r8, r8)
 8000844:	46bd      	mov	sp, r7
 8000846:	b002      	add	sp, #8
 8000848:	bd80      	pop	{r7, pc}
 800084a:	46c0      	nop			; (mov r8, r8)
 800084c:	ffffb7ff 	.word	0xffffb7ff

08000850 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b086      	sub	sp, #24
 8000854:	af00      	add	r7, sp, #0
 8000856:	60f8      	str	r0, [r7, #12]
 8000858:	60b9      	str	r1, [r7, #8]
 800085a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800085c:	68fb      	ldr	r3, [r7, #12]
 800085e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 8000860:	4a0c      	ldr	r2, [pc, #48]	; (8000894 <LL_DMA_SetDataTransferDirection+0x44>)
 8000862:	68bb      	ldr	r3, [r7, #8]
 8000864:	18d3      	adds	r3, r2, r3
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	001a      	movs	r2, r3
 800086a:	697b      	ldr	r3, [r7, #20]
 800086c:	18d3      	adds	r3, r2, r3
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a09      	ldr	r2, [pc, #36]	; (8000898 <LL_DMA_SetDataTransferDirection+0x48>)
 8000872:	4013      	ands	r3, r2
 8000874:	0019      	movs	r1, r3
 8000876:	4a07      	ldr	r2, [pc, #28]	; (8000894 <LL_DMA_SetDataTransferDirection+0x44>)
 8000878:	68bb      	ldr	r3, [r7, #8]
 800087a:	18d3      	adds	r3, r2, r3
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	001a      	movs	r2, r3
 8000880:	697b      	ldr	r3, [r7, #20]
 8000882:	18d3      	adds	r3, r2, r3
 8000884:	687a      	ldr	r2, [r7, #4]
 8000886:	430a      	orrs	r2, r1
 8000888:	601a      	str	r2, [r3, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 800088a:	46c0      	nop			; (mov r8, r8)
 800088c:	46bd      	mov	sp, r7
 800088e:	b006      	add	sp, #24
 8000890:	bd80      	pop	{r7, pc}
 8000892:	46c0      	nop			; (mov r8, r8)
 8000894:	080010ac 	.word	0x080010ac
 8000898:	ffffbfef 	.word	0xffffbfef

0800089c <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b086      	sub	sp, #24
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	60f8      	str	r0, [r7, #12]
 80008a4:	60b9      	str	r1, [r7, #8]
 80008a6:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_CIRC,
 80008ac:	4a0c      	ldr	r2, [pc, #48]	; (80008e0 <LL_DMA_SetMode+0x44>)
 80008ae:	68bb      	ldr	r3, [r7, #8]
 80008b0:	18d3      	adds	r3, r2, r3
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	001a      	movs	r2, r3
 80008b6:	697b      	ldr	r3, [r7, #20]
 80008b8:	18d3      	adds	r3, r2, r3
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	2220      	movs	r2, #32
 80008be:	4393      	bics	r3, r2
 80008c0:	0019      	movs	r1, r3
 80008c2:	4a07      	ldr	r2, [pc, #28]	; (80008e0 <LL_DMA_SetMode+0x44>)
 80008c4:	68bb      	ldr	r3, [r7, #8]
 80008c6:	18d3      	adds	r3, r2, r3
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	001a      	movs	r2, r3
 80008cc:	697b      	ldr	r3, [r7, #20]
 80008ce:	18d3      	adds	r3, r2, r3
 80008d0:	687a      	ldr	r2, [r7, #4]
 80008d2:	430a      	orrs	r2, r1
 80008d4:	601a      	str	r2, [r3, #0]
             Mode);
}
 80008d6:	46c0      	nop			; (mov r8, r8)
 80008d8:	46bd      	mov	sp, r7
 80008da:	b006      	add	sp, #24
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	46c0      	nop			; (mov r8, r8)
 80008e0:	080010ac 	.word	0x080010ac

080008e4 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b086      	sub	sp, #24
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	60f8      	str	r0, [r7, #12]
 80008ec:	60b9      	str	r1, [r7, #8]
 80008ee:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PINC,
 80008f4:	4a0c      	ldr	r2, [pc, #48]	; (8000928 <LL_DMA_SetPeriphIncMode+0x44>)
 80008f6:	68bb      	ldr	r3, [r7, #8]
 80008f8:	18d3      	adds	r3, r2, r3
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	001a      	movs	r2, r3
 80008fe:	697b      	ldr	r3, [r7, #20]
 8000900:	18d3      	adds	r3, r2, r3
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	2240      	movs	r2, #64	; 0x40
 8000906:	4393      	bics	r3, r2
 8000908:	0019      	movs	r1, r3
 800090a:	4a07      	ldr	r2, [pc, #28]	; (8000928 <LL_DMA_SetPeriphIncMode+0x44>)
 800090c:	68bb      	ldr	r3, [r7, #8]
 800090e:	18d3      	adds	r3, r2, r3
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	001a      	movs	r2, r3
 8000914:	697b      	ldr	r3, [r7, #20]
 8000916:	18d3      	adds	r3, r2, r3
 8000918:	687a      	ldr	r2, [r7, #4]
 800091a:	430a      	orrs	r2, r1
 800091c:	601a      	str	r2, [r3, #0]
             PeriphOrM2MSrcIncMode);
}
 800091e:	46c0      	nop			; (mov r8, r8)
 8000920:	46bd      	mov	sp, r7
 8000922:	b006      	add	sp, #24
 8000924:	bd80      	pop	{r7, pc}
 8000926:	46c0      	nop			; (mov r8, r8)
 8000928:	080010ac 	.word	0x080010ac

0800092c <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b086      	sub	sp, #24
 8000930:	af00      	add	r7, sp, #0
 8000932:	60f8      	str	r0, [r7, #12]
 8000934:	60b9      	str	r1, [r7, #8]
 8000936:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MINC,
 800093c:	4a0c      	ldr	r2, [pc, #48]	; (8000970 <LL_DMA_SetMemoryIncMode+0x44>)
 800093e:	68bb      	ldr	r3, [r7, #8]
 8000940:	18d3      	adds	r3, r2, r3
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	001a      	movs	r2, r3
 8000946:	697b      	ldr	r3, [r7, #20]
 8000948:	18d3      	adds	r3, r2, r3
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	2280      	movs	r2, #128	; 0x80
 800094e:	4393      	bics	r3, r2
 8000950:	0019      	movs	r1, r3
 8000952:	4a07      	ldr	r2, [pc, #28]	; (8000970 <LL_DMA_SetMemoryIncMode+0x44>)
 8000954:	68bb      	ldr	r3, [r7, #8]
 8000956:	18d3      	adds	r3, r2, r3
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	001a      	movs	r2, r3
 800095c:	697b      	ldr	r3, [r7, #20]
 800095e:	18d3      	adds	r3, r2, r3
 8000960:	687a      	ldr	r2, [r7, #4]
 8000962:	430a      	orrs	r2, r1
 8000964:	601a      	str	r2, [r3, #0]
             MemoryOrM2MDstIncMode);
}
 8000966:	46c0      	nop			; (mov r8, r8)
 8000968:	46bd      	mov	sp, r7
 800096a:	b006      	add	sp, #24
 800096c:	bd80      	pop	{r7, pc}
 800096e:	46c0      	nop			; (mov r8, r8)
 8000970:	080010ac 	.word	0x080010ac

08000974 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b086      	sub	sp, #24
 8000978:	af00      	add	r7, sp, #0
 800097a:	60f8      	str	r0, [r7, #12]
 800097c:	60b9      	str	r1, [r7, #8]
 800097e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PSIZE,
 8000984:	4a0c      	ldr	r2, [pc, #48]	; (80009b8 <LL_DMA_SetPeriphSize+0x44>)
 8000986:	68bb      	ldr	r3, [r7, #8]
 8000988:	18d3      	adds	r3, r2, r3
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	001a      	movs	r2, r3
 800098e:	697b      	ldr	r3, [r7, #20]
 8000990:	18d3      	adds	r3, r2, r3
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a09      	ldr	r2, [pc, #36]	; (80009bc <LL_DMA_SetPeriphSize+0x48>)
 8000996:	4013      	ands	r3, r2
 8000998:	0019      	movs	r1, r3
 800099a:	4a07      	ldr	r2, [pc, #28]	; (80009b8 <LL_DMA_SetPeriphSize+0x44>)
 800099c:	68bb      	ldr	r3, [r7, #8]
 800099e:	18d3      	adds	r3, r2, r3
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	001a      	movs	r2, r3
 80009a4:	697b      	ldr	r3, [r7, #20]
 80009a6:	18d3      	adds	r3, r2, r3
 80009a8:	687a      	ldr	r2, [r7, #4]
 80009aa:	430a      	orrs	r2, r1
 80009ac:	601a      	str	r2, [r3, #0]
             PeriphOrM2MSrcDataSize);
}
 80009ae:	46c0      	nop			; (mov r8, r8)
 80009b0:	46bd      	mov	sp, r7
 80009b2:	b006      	add	sp, #24
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	46c0      	nop			; (mov r8, r8)
 80009b8:	080010ac 	.word	0x080010ac
 80009bc:	fffffcff 	.word	0xfffffcff

080009c0 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b086      	sub	sp, #24
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	60f8      	str	r0, [r7, #12]
 80009c8:	60b9      	str	r1, [r7, #8]
 80009ca:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MSIZE,
 80009d0:	4a0c      	ldr	r2, [pc, #48]	; (8000a04 <LL_DMA_SetMemorySize+0x44>)
 80009d2:	68bb      	ldr	r3, [r7, #8]
 80009d4:	18d3      	adds	r3, r2, r3
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	001a      	movs	r2, r3
 80009da:	697b      	ldr	r3, [r7, #20]
 80009dc:	18d3      	adds	r3, r2, r3
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4a09      	ldr	r2, [pc, #36]	; (8000a08 <LL_DMA_SetMemorySize+0x48>)
 80009e2:	4013      	ands	r3, r2
 80009e4:	0019      	movs	r1, r3
 80009e6:	4a07      	ldr	r2, [pc, #28]	; (8000a04 <LL_DMA_SetMemorySize+0x44>)
 80009e8:	68bb      	ldr	r3, [r7, #8]
 80009ea:	18d3      	adds	r3, r2, r3
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	001a      	movs	r2, r3
 80009f0:	697b      	ldr	r3, [r7, #20]
 80009f2:	18d3      	adds	r3, r2, r3
 80009f4:	687a      	ldr	r2, [r7, #4]
 80009f6:	430a      	orrs	r2, r1
 80009f8:	601a      	str	r2, [r3, #0]
             MemoryOrM2MDstDataSize);
}
 80009fa:	46c0      	nop			; (mov r8, r8)
 80009fc:	46bd      	mov	sp, r7
 80009fe:	b006      	add	sp, #24
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	46c0      	nop			; (mov r8, r8)
 8000a04:	080010ac 	.word	0x080010ac
 8000a08:	fffff3ff 	.word	0xfffff3ff

08000a0c <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b086      	sub	sp, #24
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	60f8      	str	r0, [r7, #12]
 8000a14:	60b9      	str	r1, [r7, #8]
 8000a16:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PL,
 8000a1c:	4a0c      	ldr	r2, [pc, #48]	; (8000a50 <LL_DMA_SetChannelPriorityLevel+0x44>)
 8000a1e:	68bb      	ldr	r3, [r7, #8]
 8000a20:	18d3      	adds	r3, r2, r3
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	001a      	movs	r2, r3
 8000a26:	697b      	ldr	r3, [r7, #20]
 8000a28:	18d3      	adds	r3, r2, r3
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a09      	ldr	r2, [pc, #36]	; (8000a54 <LL_DMA_SetChannelPriorityLevel+0x48>)
 8000a2e:	4013      	ands	r3, r2
 8000a30:	0019      	movs	r1, r3
 8000a32:	4a07      	ldr	r2, [pc, #28]	; (8000a50 <LL_DMA_SetChannelPriorityLevel+0x44>)
 8000a34:	68bb      	ldr	r3, [r7, #8]
 8000a36:	18d3      	adds	r3, r2, r3
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	001a      	movs	r2, r3
 8000a3c:	697b      	ldr	r3, [r7, #20]
 8000a3e:	18d3      	adds	r3, r2, r3
 8000a40:	687a      	ldr	r2, [r7, #4]
 8000a42:	430a      	orrs	r2, r1
 8000a44:	601a      	str	r2, [r3, #0]
             Priority);
}
 8000a46:	46c0      	nop			; (mov r8, r8)
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	b006      	add	sp, #24
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	46c0      	nop			; (mov r8, r8)
 8000a50:	080010ac 	.word	0x080010ac
 8000a54:	ffffcfff 	.word	0xffffcfff

08000a58 <LL_DMA_SetPeriphRequest>:
  *         @arg @ref LL_DMAMUX_REQ_UCPD2_RX
  *         @arg @ref LL_DMAMUX_REQ_UCPD2_TX
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphRequest(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Request)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b086      	sub	sp, #24
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	60f8      	str	r0, [r7, #12]
 8000a60:	60b9      	str	r1, [r7, #8]
 8000a62:	607a      	str	r2, [r7, #4]
  uint32_t dmamux_ccr_offset = ((((uint32_t)DMAx ^ (uint32_t)DMA1) >> 10U) * 7U);
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	0a9b      	lsrs	r3, r3, #10
 8000a68:	4a0f      	ldr	r2, [pc, #60]	; (8000aa8 <LL_DMA_SetPeriphRequest+0x50>)
 8000a6a:	405a      	eors	r2, r3
 8000a6c:	0013      	movs	r3, r2
 8000a6e:	00db      	lsls	r3, r3, #3
 8000a70:	1a9b      	subs	r3, r3, r2
 8000a72:	617b      	str	r3, [r7, #20]
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, Request);
 8000a74:	68ba      	ldr	r2, [r7, #8]
 8000a76:	697b      	ldr	r3, [r7, #20]
 8000a78:	18d3      	adds	r3, r2, r3
 8000a7a:	009b      	lsls	r3, r3, #2
 8000a7c:	4a0b      	ldr	r2, [pc, #44]	; (8000aac <LL_DMA_SetPeriphRequest+0x54>)
 8000a7e:	4694      	mov	ip, r2
 8000a80:	4463      	add	r3, ip
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	223f      	movs	r2, #63	; 0x3f
 8000a86:	4393      	bics	r3, r2
 8000a88:	0019      	movs	r1, r3
 8000a8a:	68ba      	ldr	r2, [r7, #8]
 8000a8c:	697b      	ldr	r3, [r7, #20]
 8000a8e:	18d3      	adds	r3, r2, r3
 8000a90:	009b      	lsls	r3, r3, #2
 8000a92:	4a06      	ldr	r2, [pc, #24]	; (8000aac <LL_DMA_SetPeriphRequest+0x54>)
 8000a94:	4694      	mov	ip, r2
 8000a96:	4463      	add	r3, ip
 8000a98:	687a      	ldr	r2, [r7, #4]
 8000a9a:	430a      	orrs	r2, r1
 8000a9c:	601a      	str	r2, [r3, #0]
}
 8000a9e:	46c0      	nop			; (mov r8, r8)
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	b006      	add	sp, #24
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	46c0      	nop			; (mov r8, r8)
 8000aa8:	00100080 	.word	0x00100080
 8000aac:	40020800 	.word	0x40020800

08000ab0 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b084      	sub	sp, #16
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
 8000ab8:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_TCIE);
 8000abe:	4a0b      	ldr	r2, [pc, #44]	; (8000aec <LL_DMA_EnableIT_TC+0x3c>)
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	18d3      	adds	r3, r2, r3
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	001a      	movs	r2, r3
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	18d3      	adds	r3, r2, r3
 8000acc:	681a      	ldr	r2, [r3, #0]
 8000ace:	4907      	ldr	r1, [pc, #28]	; (8000aec <LL_DMA_EnableIT_TC+0x3c>)
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	18cb      	adds	r3, r1, r3
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	0019      	movs	r1, r3
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	18cb      	adds	r3, r1, r3
 8000adc:	2102      	movs	r1, #2
 8000ade:	430a      	orrs	r2, r1
 8000ae0:	601a      	str	r2, [r3, #0]
}
 8000ae2:	46c0      	nop			; (mov r8, r8)
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	b004      	add	sp, #16
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	46c0      	nop			; (mov r8, r8)
 8000aec:	080010ac 	.word	0x080010ac

08000af0 <main>:
#endif

#define LED_TASK_TIME	1000

int main(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af02      	add	r7, sp, #8
	//RCC
	LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 8000af6:	2002      	movs	r0, #2
 8000af8:	f7ff fd50 	bl	800059c <LL_FLASH_SetLatency>

	LL_RCC_HSI_Enable();
 8000afc:	f7ff fc4e 	bl	800039c <LL_RCC_HSI_Enable>
	while(LL_RCC_HSI_IsReady() != 1)
 8000b00:	46c0      	nop			; (mov r8, r8)
 8000b02:	f7ff fc59 	bl	80003b8 <LL_RCC_HSI_IsReady>
 8000b06:	0003      	movs	r3, r0
 8000b08:	2b01      	cmp	r3, #1
 8000b0a:	d1fa      	bne.n	8000b02 <main+0x12>
		;

	LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_1, 8, LL_RCC_PLLR_DIV_2);
 8000b0c:	2380      	movs	r3, #128	; 0x80
 8000b0e:	059b      	lsls	r3, r3, #22
 8000b10:	2208      	movs	r2, #8
 8000b12:	2100      	movs	r1, #0
 8000b14:	2002      	movs	r0, #2
 8000b16:	f7ff fcd1 	bl	80004bc <LL_RCC_PLL_ConfigDomain_SYS>

	LL_RCC_PLL_Enable();
 8000b1a:	f7ff fcad 	bl	8000478 <LL_RCC_PLL_Enable>
	while(LL_RCC_PLL_IsReady() != 1)
 8000b1e:	46c0      	nop			; (mov r8, r8)
 8000b20:	f7ff fcb8 	bl	8000494 <LL_RCC_PLL_IsReady>
 8000b24:	0003      	movs	r3, r0
 8000b26:	2b01      	cmp	r3, #1
 8000b28:	d1fa      	bne.n	8000b20 <main+0x30>
		;

	LL_RCC_PLL_EnableDomain_SYS();
 8000b2a:	f7ff fce7 	bl	80004fc <LL_RCC_PLL_EnableDomain_SYS>

	LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000b2e:	2000      	movs	r0, #0
 8000b30:	f7ff fc76 	bl	8000420 <LL_RCC_SetAHBPrescaler>
	LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8000b34:	2000      	movs	r0, #0
 8000b36:	f7ff fc89 	bl	800044c <LL_RCC_SetAPB1Prescaler>

	LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000b3a:	2002      	movs	r0, #2
 8000b3c:	f7ff fc50 	bl	80003e0 <LL_RCC_SetSysClkSource>
	while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000b40:	46c0      	nop			; (mov r8, r8)
 8000b42:	f7ff fc61 	bl	8000408 <LL_RCC_GetSysClkSource>
 8000b46:	0003      	movs	r3, r0
 8000b48:	2b10      	cmp	r3, #16
 8000b4a:	d1fa      	bne.n	8000b42 <main+0x52>
		;

	LL_SetSystemCoreClock(64000000);
 8000b4c:	4b47      	ldr	r3, [pc, #284]	; (8000c6c <main+0x17c>)
 8000b4e:	0018      	movs	r0, r3
 8000b50:	f7ff fb8e 	bl	8000270 <LL_SetSystemCoreClock>
	LL_Init1msTick(64000000);
 8000b54:	4b45      	ldr	r3, [pc, #276]	; (8000c6c <main+0x17c>)
 8000b56:	0018      	movs	r0, r3
 8000b58:	f7ff fb7a 	bl	8000250 <LL_Init1msTick>
	LL_SYSTICK_EnableIT();
 8000b5c:	f7ff fd32 	bl	80005c4 <LL_SYSTICK_EnableIT>

	//GPIO
	LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8000b60:	2001      	movs	r0, #1
 8000b62:	f7ff fd05 	bl	8000570 <LL_IOP_GRP1_EnableClock>

	LL_GPIO_SetPinPull(USART2_TX_GPIO_Port, USART2_TX_Pin, LL_GPIO_PULL_NO);
 8000b66:	23a0      	movs	r3, #160	; 0xa0
 8000b68:	05db      	lsls	r3, r3, #23
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2104      	movs	r1, #4
 8000b6e:	0018      	movs	r0, r3
 8000b70:	f7ff fd6e 	bl	8000650 <LL_GPIO_SetPinPull>
	LL_GPIO_SetPinSpeed(USART2_TX_GPIO_Port, USART2_TX_Pin, LL_GPIO_SPEED_FREQ_LOW);
 8000b74:	23a0      	movs	r3, #160	; 0xa0
 8000b76:	05db      	lsls	r3, r3, #23
 8000b78:	2200      	movs	r2, #0
 8000b7a:	2104      	movs	r1, #4
 8000b7c:	0018      	movs	r0, r3
 8000b7e:	f7ff fd4b 	bl	8000618 <LL_GPIO_SetPinSpeed>
	LL_GPIO_SetAFPin_0_7(USART2_TX_GPIO_Port, USART2_TX_Pin, LL_GPIO_AF_1);
 8000b82:	23a0      	movs	r3, #160	; 0xa0
 8000b84:	05db      	lsls	r3, r3, #23
 8000b86:	2201      	movs	r2, #1
 8000b88:	2104      	movs	r1, #4
 8000b8a:	0018      	movs	r0, r3
 8000b8c:	f7ff fd7c 	bl	8000688 <LL_GPIO_SetAFPin_0_7>
	LL_GPIO_SetPinMode(USART2_TX_GPIO_Port, USART2_TX_Pin, LL_GPIO_MODE_ALTERNATE);
 8000b90:	23a0      	movs	r3, #160	; 0xa0
 8000b92:	05db      	lsls	r3, r3, #23
 8000b94:	2202      	movs	r2, #2
 8000b96:	2104      	movs	r1, #4
 8000b98:	0018      	movs	r0, r3
 8000b9a:	f7ff fd21 	bl	80005e0 <LL_GPIO_SetPinMode>

	//DMA
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8000b9e:	2001      	movs	r0, #1
 8000ba0:	f7ff fcba 	bl	8000518 <LL_AHB1_GRP1_EnableClock>

	LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_1, LL_DMAMUX_REQ_USART2_TX);
 8000ba4:	4b32      	ldr	r3, [pc, #200]	; (8000c70 <main+0x180>)
 8000ba6:	2235      	movs	r2, #53	; 0x35
 8000ba8:	2100      	movs	r1, #0
 8000baa:	0018      	movs	r0, r3
 8000bac:	f7ff ff54 	bl	8000a58 <LL_DMA_SetPeriphRequest>
	LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_1, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8000bb0:	4b2f      	ldr	r3, [pc, #188]	; (8000c70 <main+0x180>)
 8000bb2:	2210      	movs	r2, #16
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	0018      	movs	r0, r3
 8000bb8:	f7ff fe4a 	bl	8000850 <LL_DMA_SetDataTransferDirection>
	LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PRIORITY_HIGH);
 8000bbc:	2380      	movs	r3, #128	; 0x80
 8000bbe:	019b      	lsls	r3, r3, #6
 8000bc0:	482b      	ldr	r0, [pc, #172]	; (8000c70 <main+0x180>)
 8000bc2:	001a      	movs	r2, r3
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	f7ff ff21 	bl	8000a0c <LL_DMA_SetChannelPriorityLevel>
	LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MODE_NORMAL);
 8000bca:	4b29      	ldr	r3, [pc, #164]	; (8000c70 <main+0x180>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	2100      	movs	r1, #0
 8000bd0:	0018      	movs	r0, r3
 8000bd2:	f7ff fe63 	bl	800089c <LL_DMA_SetMode>
	LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PERIPH_NOINCREMENT);
 8000bd6:	4b26      	ldr	r3, [pc, #152]	; (8000c70 <main+0x180>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	2100      	movs	r1, #0
 8000bdc:	0018      	movs	r0, r3
 8000bde:	f7ff fe81 	bl	80008e4 <LL_DMA_SetPeriphIncMode>
	LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MEMORY_INCREMENT);
 8000be2:	4b23      	ldr	r3, [pc, #140]	; (8000c70 <main+0x180>)
 8000be4:	2280      	movs	r2, #128	; 0x80
 8000be6:	2100      	movs	r1, #0
 8000be8:	0018      	movs	r0, r3
 8000bea:	f7ff fe9f 	bl	800092c <LL_DMA_SetMemoryIncMode>
	LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PDATAALIGN_BYTE);
 8000bee:	4b20      	ldr	r3, [pc, #128]	; (8000c70 <main+0x180>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	0018      	movs	r0, r3
 8000bf6:	f7ff febd 	bl	8000974 <LL_DMA_SetPeriphSize>
	LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MDATAALIGN_BYTE);
 8000bfa:	4b1d      	ldr	r3, [pc, #116]	; (8000c70 <main+0x180>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	2100      	movs	r1, #0
 8000c00:	0018      	movs	r0, r3
 8000c02:	f7ff fedd 	bl	80009c0 <LL_DMA_SetMemorySize>

	NVIC_SetPriority(DMA1_Channel1_IRQn, 0);
 8000c06:	2100      	movs	r1, #0
 8000c08:	2009      	movs	r0, #9
 8000c0a:	f7ff fb59 	bl	80002c0 <__NVIC_SetPriority>
	NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000c0e:	2009      	movs	r0, #9
 8000c10:	f7ff fb3c 	bl	800028c <__NVIC_EnableIRQ>
	LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_1);
 8000c14:	4b16      	ldr	r3, [pc, #88]	; (8000c70 <main+0x180>)
 8000c16:	2100      	movs	r1, #0
 8000c18:	0018      	movs	r0, r3
 8000c1a:	f7ff ff49 	bl	8000ab0 <LL_DMA_EnableIT_TC>

	//USART
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8000c1e:	2380      	movs	r3, #128	; 0x80
 8000c20:	029b      	lsls	r3, r3, #10
 8000c22:	0018      	movs	r0, r3
 8000c24:	f7ff fc8e 	bl	8000544 <LL_APB1_GRP1_EnableClock>

	LL_USART_ConfigCharacter(USART2, LL_USART_DATAWIDTH_8B, LL_USART_PARITY_NONE, LL_USART_STOPBITS_1);
 8000c28:	4812      	ldr	r0, [pc, #72]	; (8000c74 <main+0x184>)
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	2100      	movs	r1, #0
 8000c30:	f7ff fd7a 	bl	8000728 <LL_USART_ConfigCharacter>
	LL_USART_SetBaudRate(USART2, SystemCoreClock, LL_USART_PRESCALER_DIV1, LL_USART_OVERSAMPLING_16, 115200);
 8000c34:	4b10      	ldr	r3, [pc, #64]	; (8000c78 <main+0x188>)
 8000c36:	6819      	ldr	r1, [r3, #0]
 8000c38:	480e      	ldr	r0, [pc, #56]	; (8000c74 <main+0x184>)
 8000c3a:	23e1      	movs	r3, #225	; 0xe1
 8000c3c:	025b      	lsls	r3, r3, #9
 8000c3e:	9300      	str	r3, [sp, #0]
 8000c40:	2300      	movs	r3, #0
 8000c42:	2200      	movs	r2, #0
 8000c44:	f7ff fd92 	bl	800076c <LL_USART_SetBaudRate>
	LL_USART_ConfigAsyncMode(USART2);
 8000c48:	4b0a      	ldr	r3, [pc, #40]	; (8000c74 <main+0x184>)
 8000c4a:	0018      	movs	r0, r3
 8000c4c:	f7ff fde8 	bl	8000820 <LL_USART_ConfigAsyncMode>

	LL_USART_EnableDirectionTx(USART2);
 8000c50:	4b08      	ldr	r3, [pc, #32]	; (8000c74 <main+0x184>)
 8000c52:	0018      	movs	r0, r3
 8000c54:	f7ff fd49 	bl	80006ea <LL_USART_EnableDirectionTx>
	LL_USART_Enable(USART2);
 8000c58:	4b06      	ldr	r3, [pc, #24]	; (8000c74 <main+0x184>)
 8000c5a:	0018      	movs	r0, r3
 8000c5c:	f7ff fd37 	bl	80006ce <LL_USART_Enable>

	transmit_task_init();
 8000c60:	f000 f958 	bl	8000f14 <transmit_task_init>

	while (1)
	{
		transmit_task_process();
 8000c64:	f000 f964 	bl	8000f30 <transmit_task_process>
 8000c68:	e7fc      	b.n	8000c64 <main+0x174>
 8000c6a:	46c0      	nop			; (mov r8, r8)
 8000c6c:	03d09000 	.word	0x03d09000
 8000c70:	40020000 	.word	0x40020000
 8000c74:	40004400 	.word	0x40004400
 8000c78:	20000000 	.word	0x20000000

08000c7c <software_timer_task_init>:

static uint32_t ms_tick = 0;
software_timer_t timer = {0};

void software_timer_task_init(software_timer_t *timer, uint32_t time)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
 8000c84:	6039      	str	r1, [r7, #0]
	timer->ms_tick = software_timer_get_ms_tick();
 8000c86:	f000 f817 	bl	8000cb8 <software_timer_get_ms_tick>
 8000c8a:	0002      	movs	r2, r0
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	601a      	str	r2, [r3, #0]
	timer->task_time = time;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	683a      	ldr	r2, [r7, #0]
 8000c94:	605a      	str	r2, [r3, #4]
}
 8000c96:	46c0      	nop			; (mov r8, r8)
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	b002      	add	sp, #8
 8000c9c:	bd80      	pop	{r7, pc}
	...

08000ca0 <software_timer_inc_ms_tick>:

void software_timer_inc_ms_tick(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
	ms_tick++;
 8000ca4:	4b03      	ldr	r3, [pc, #12]	; (8000cb4 <software_timer_inc_ms_tick+0x14>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	1c5a      	adds	r2, r3, #1
 8000caa:	4b02      	ldr	r3, [pc, #8]	; (8000cb4 <software_timer_inc_ms_tick+0x14>)
 8000cac:	601a      	str	r2, [r3, #0]
}
 8000cae:	46c0      	nop			; (mov r8, r8)
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	20000020 	.word	0x20000020

08000cb8 <software_timer_get_ms_tick>:

uint32_t software_timer_get_ms_tick(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
	return ms_tick;
 8000cbc:	4b02      	ldr	r3, [pc, #8]	; (8000cc8 <software_timer_get_ms_tick+0x10>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
}
 8000cc0:	0018      	movs	r0, r3
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	46c0      	nop			; (mov r8, r8)
 8000cc8:	20000020 	.word	0x20000020

08000ccc <LL_DMA_IsActiveFlag_TC1>:
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF1) == (DMA_ISR_TCIF1)) ? 1UL : 0UL);
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	2202      	movs	r2, #2
 8000cda:	4013      	ands	r3, r2
 8000cdc:	2b02      	cmp	r3, #2
 8000cde:	d101      	bne.n	8000ce4 <LL_DMA_IsActiveFlag_TC1+0x18>
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	e000      	b.n	8000ce6 <LL_DMA_IsActiveFlag_TC1+0x1a>
 8000ce4:	2300      	movs	r3, #0
}
 8000ce6:	0018      	movs	r0, r3
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	b002      	add	sp, #8
 8000cec:	bd80      	pop	{r7, pc}

08000cee <LL_DMA_ClearFlag_TC1>:
{
 8000cee:	b580      	push	{r7, lr}
 8000cf0:	b082      	sub	sp, #8
 8000cf2:	af00      	add	r7, sp, #0
 8000cf4:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF1);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	2202      	movs	r2, #2
 8000cfa:	605a      	str	r2, [r3, #4]
}
 8000cfc:	46c0      	nop			; (mov r8, r8)
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	b002      	add	sp, #8
 8000d02:	bd80      	pop	{r7, pc}

08000d04 <SysTick_Handler>:
 */

#include "main.h"

void SysTick_Handler(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
	software_timer_inc_ms_tick();
 8000d08:	f7ff ffca 	bl	8000ca0 <software_timer_inc_ms_tick>
}
 8000d0c:	46c0      	nop			; (mov r8, r8)
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
	...

08000d14 <DMA_Channel1_IRQHandler>:

void DMA_Channel1_IRQHandler(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
	if (LL_DMA_IsActiveFlag_TC1(DMA1))
 8000d18:	4b07      	ldr	r3, [pc, #28]	; (8000d38 <DMA_Channel1_IRQHandler+0x24>)
 8000d1a:	0018      	movs	r0, r3
 8000d1c:	f7ff ffd6 	bl	8000ccc <LL_DMA_IsActiveFlag_TC1>
 8000d20:	1e03      	subs	r3, r0, #0
 8000d22:	d005      	beq.n	8000d30 <DMA_Channel1_IRQHandler+0x1c>
	{
		LL_DMA_ClearFlag_TC1(DMA1);
 8000d24:	4b04      	ldr	r3, [pc, #16]	; (8000d38 <DMA_Channel1_IRQHandler+0x24>)
 8000d26:	0018      	movs	r0, r3
 8000d28:	f7ff ffe1 	bl	8000cee <LL_DMA_ClearFlag_TC1>

		DMA1_transmit_complete_callback();
 8000d2c:	f000 f940 	bl	8000fb0 <DMA1_transmit_complete_callback>
	}
}
 8000d30:	46c0      	nop			; (mov r8, r8)
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	46c0      	nop			; (mov r8, r8)
 8000d38:	40020000 	.word	0x40020000

08000d3c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d40:	46c0      	nop			; (mov r8, r8)
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}

08000d46 <LL_USART_EnableDMAReq_TX>:
  * @rmtoll CR3          DMAT          LL_USART_EnableDMAReq_TX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_TX(USART_TypeDef *USARTx)
{
 8000d46:	b580      	push	{r7, lr}
 8000d48:	b086      	sub	sp, #24
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000d4e:	f3ef 8310 	mrs	r3, PRIMASK
 8000d52:	60bb      	str	r3, [r7, #8]
  return(result);
 8000d54:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 8000d56:	617b      	str	r3, [r7, #20]
 8000d58:	2301      	movs	r3, #1
 8000d5a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	f383 8810 	msr	PRIMASK, r3
}
 8000d62:	46c0      	nop			; (mov r8, r8)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	689b      	ldr	r3, [r3, #8]
 8000d68:	2280      	movs	r2, #128	; 0x80
 8000d6a:	431a      	orrs	r2, r3
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	609a      	str	r2, [r3, #8]
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000d74:	693b      	ldr	r3, [r7, #16]
 8000d76:	f383 8810 	msr	PRIMASK, r3
}
 8000d7a:	46c0      	nop			; (mov r8, r8)
}
 8000d7c:	46c0      	nop			; (mov r8, r8)
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	b006      	add	sp, #24
 8000d82:	bd80      	pop	{r7, pc}

08000d84 <LL_USART_DMA_GetRegAddr>:
  *         @arg @ref LL_USART_DMA_REG_DATA_TRANSMIT
  *         @arg @ref LL_USART_DMA_REG_DATA_RECEIVE
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_USART_DMA_GetRegAddr(USART_TypeDef *USARTx, uint32_t Direction)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b084      	sub	sp, #16
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
 8000d8c:	6039      	str	r1, [r7, #0]
  uint32_t data_reg_addr;

  if (Direction == LL_USART_DMA_REG_DATA_TRANSMIT)
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d103      	bne.n	8000d9c <LL_USART_DMA_GetRegAddr+0x18>
  {
    /* return address of TDR register */
    data_reg_addr = (uint32_t) &(USARTx->TDR);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	3328      	adds	r3, #40	; 0x28
 8000d98:	60fb      	str	r3, [r7, #12]
 8000d9a:	e002      	b.n	8000da2 <LL_USART_DMA_GetRegAddr+0x1e>
  }
  else
  {
    /* return address of RDR register */
    data_reg_addr = (uint32_t) &(USARTx->RDR);
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	3324      	adds	r3, #36	; 0x24
 8000da0:	60fb      	str	r3, [r7, #12]
  }

  return data_reg_addr;
 8000da2:	68fb      	ldr	r3, [r7, #12]
}
 8000da4:	0018      	movs	r0, r3
 8000da6:	46bd      	mov	sp, r7
 8000da8:	b004      	add	sp, #16
 8000daa:	bd80      	pop	{r7, pc}

08000dac <LL_DMA_EnableChannel>:
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b084      	sub	sp, #16
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
 8000db4:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 8000dba:	4a0b      	ldr	r2, [pc, #44]	; (8000de8 <LL_DMA_EnableChannel+0x3c>)
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	18d3      	adds	r3, r2, r3
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	001a      	movs	r2, r3
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	18d3      	adds	r3, r2, r3
 8000dc8:	681a      	ldr	r2, [r3, #0]
 8000dca:	4907      	ldr	r1, [pc, #28]	; (8000de8 <LL_DMA_EnableChannel+0x3c>)
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	18cb      	adds	r3, r1, r3
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	0019      	movs	r1, r3
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	18cb      	adds	r3, r1, r3
 8000dd8:	2101      	movs	r1, #1
 8000dda:	430a      	orrs	r2, r1
 8000ddc:	601a      	str	r2, [r3, #0]
}
 8000dde:	46c0      	nop			; (mov r8, r8)
 8000de0:	46bd      	mov	sp, r7
 8000de2:	b004      	add	sp, #16
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	46c0      	nop			; (mov r8, r8)
 8000de8:	080010b4 	.word	0x080010b4

08000dec <LL_DMA_DisableChannel>:
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b084      	sub	sp, #16
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
 8000df4:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	60fb      	str	r3, [r7, #12]
  CLEAR_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 8000dfa:	4a0b      	ldr	r2, [pc, #44]	; (8000e28 <LL_DMA_DisableChannel+0x3c>)
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	18d3      	adds	r3, r2, r3
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	001a      	movs	r2, r3
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	18d3      	adds	r3, r2, r3
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	4907      	ldr	r1, [pc, #28]	; (8000e28 <LL_DMA_DisableChannel+0x3c>)
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	18cb      	adds	r3, r1, r3
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	0019      	movs	r1, r3
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	18cb      	adds	r3, r1, r3
 8000e18:	2101      	movs	r1, #1
 8000e1a:	438a      	bics	r2, r1
 8000e1c:	601a      	str	r2, [r3, #0]
}
 8000e1e:	46c0      	nop			; (mov r8, r8)
 8000e20:	46bd      	mov	sp, r7
 8000e22:	b004      	add	sp, #16
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	46c0      	nop			; (mov r8, r8)
 8000e28:	080010b4 	.word	0x080010b4

08000e2c <LL_DMA_GetDataTransferDirection>:
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b084      	sub	sp, #16
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
 8000e34:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	60fb      	str	r3, [r7, #12]
  return (READ_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 8000e3a:	4a07      	ldr	r2, [pc, #28]	; (8000e58 <LL_DMA_GetDataTransferDirection+0x2c>)
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	18d3      	adds	r3, r2, r3
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	001a      	movs	r2, r3
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	18d3      	adds	r3, r2, r3
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4a04      	ldr	r2, [pc, #16]	; (8000e5c <LL_DMA_GetDataTransferDirection+0x30>)
 8000e4c:	4013      	ands	r3, r2
}
 8000e4e:	0018      	movs	r0, r3
 8000e50:	46bd      	mov	sp, r7
 8000e52:	b004      	add	sp, #16
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	46c0      	nop			; (mov r8, r8)
 8000e58:	080010b4 	.word	0x080010b4
 8000e5c:	00004010 	.word	0x00004010

08000e60 <LL_DMA_SetDataLength>:
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b086      	sub	sp, #24
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	60f8      	str	r0, [r7, #12]
 8000e68:	60b9      	str	r1, [r7, #8]
 8000e6a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 8000e70:	4a0b      	ldr	r2, [pc, #44]	; (8000ea0 <LL_DMA_SetDataLength+0x40>)
 8000e72:	68bb      	ldr	r3, [r7, #8]
 8000e74:	18d3      	adds	r3, r2, r3
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	001a      	movs	r2, r3
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	18d3      	adds	r3, r2, r3
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	0c1b      	lsrs	r3, r3, #16
 8000e82:	0419      	lsls	r1, r3, #16
 8000e84:	4a06      	ldr	r2, [pc, #24]	; (8000ea0 <LL_DMA_SetDataLength+0x40>)
 8000e86:	68bb      	ldr	r3, [r7, #8]
 8000e88:	18d3      	adds	r3, r2, r3
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	001a      	movs	r2, r3
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	18d3      	adds	r3, r2, r3
 8000e92:	687a      	ldr	r2, [r7, #4]
 8000e94:	430a      	orrs	r2, r1
 8000e96:	605a      	str	r2, [r3, #4]
}
 8000e98:	46c0      	nop			; (mov r8, r8)
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	b006      	add	sp, #24
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	080010b4 	.word	0x080010b4

08000ea4 <LL_DMA_ConfigAddresses>:
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b086      	sub	sp, #24
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	60f8      	str	r0, [r7, #12]
 8000eac:	60b9      	str	r1, [r7, #8]
 8000eae:	607a      	str	r2, [r7, #4]
 8000eb0:	603b      	str	r3, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	617b      	str	r3, [r7, #20]
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 8000eb6:	6a3b      	ldr	r3, [r7, #32]
 8000eb8:	2b10      	cmp	r3, #16
 8000eba:	d112      	bne.n	8000ee2 <LL_DMA_ConfigAddresses+0x3e>
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, SrcAddress);
 8000ebc:	4a14      	ldr	r2, [pc, #80]	; (8000f10 <LL_DMA_ConfigAddresses+0x6c>)
 8000ebe:	68bb      	ldr	r3, [r7, #8]
 8000ec0:	18d3      	adds	r3, r2, r3
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	001a      	movs	r2, r3
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	18d3      	adds	r3, r2, r3
 8000eca:	687a      	ldr	r2, [r7, #4]
 8000ecc:	60da      	str	r2, [r3, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, DstAddress);
 8000ece:	4a10      	ldr	r2, [pc, #64]	; (8000f10 <LL_DMA_ConfigAddresses+0x6c>)
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	18d3      	adds	r3, r2, r3
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	001a      	movs	r2, r3
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	18d3      	adds	r3, r2, r3
 8000edc:	683a      	ldr	r2, [r7, #0]
 8000ede:	609a      	str	r2, [r3, #8]
}
 8000ee0:	e011      	b.n	8000f06 <LL_DMA_ConfigAddresses+0x62>
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, SrcAddress);
 8000ee2:	4a0b      	ldr	r2, [pc, #44]	; (8000f10 <LL_DMA_ConfigAddresses+0x6c>)
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	18d3      	adds	r3, r2, r3
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	001a      	movs	r2, r3
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	18d3      	adds	r3, r2, r3
 8000ef0:	687a      	ldr	r2, [r7, #4]
 8000ef2:	609a      	str	r2, [r3, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, DstAddress);
 8000ef4:	4a06      	ldr	r2, [pc, #24]	; (8000f10 <LL_DMA_ConfigAddresses+0x6c>)
 8000ef6:	68bb      	ldr	r3, [r7, #8]
 8000ef8:	18d3      	adds	r3, r2, r3
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	001a      	movs	r2, r3
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	18d3      	adds	r3, r2, r3
 8000f02:	683a      	ldr	r2, [r7, #0]
 8000f04:	60da      	str	r2, [r3, #12]
}
 8000f06:	46c0      	nop			; (mov r8, r8)
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	b006      	add	sp, #24
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	46c0      	nop			; (mov r8, r8)
 8000f10:	080010b4 	.word	0x080010b4

08000f14 <transmit_task_init>:

const uint8_t tx_buffer[6] = {"TEST\n\r"};
volatile uint32_t tx_buffer_count = 0;

void transmit_task_init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
	software_timer_task_init(&tx_timer, TRANSMIT_TASK_TIME);
 8000f18:	23fa      	movs	r3, #250	; 0xfa
 8000f1a:	009a      	lsls	r2, r3, #2
 8000f1c:	4b03      	ldr	r3, [pc, #12]	; (8000f2c <transmit_task_init+0x18>)
 8000f1e:	0011      	movs	r1, r2
 8000f20:	0018      	movs	r0, r3
 8000f22:	f7ff feab 	bl	8000c7c <software_timer_task_init>
}
 8000f26:	46c0      	nop			; (mov r8, r8)
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	20000024 	.word	0x20000024

08000f30 <transmit_task_process>:

void transmit_task_process(void)
{
 8000f30:	b5b0      	push	{r4, r5, r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af02      	add	r7, sp, #8
	if((software_timer_get_ms_tick() - tx_timer.ms_tick) >= tx_timer.task_time)
 8000f36:	f7ff febf 	bl	8000cb8 <software_timer_get_ms_tick>
 8000f3a:	0002      	movs	r2, r0
 8000f3c:	4b18      	ldr	r3, [pc, #96]	; (8000fa0 <transmit_task_process+0x70>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	1ad2      	subs	r2, r2, r3
 8000f42:	4b17      	ldr	r3, [pc, #92]	; (8000fa0 <transmit_task_process+0x70>)
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	429a      	cmp	r2, r3
 8000f48:	d327      	bcc.n	8000f9a <transmit_task_process+0x6a>
	{
		tx_timer.ms_tick = software_timer_get_ms_tick();
 8000f4a:	f7ff feb5 	bl	8000cb8 <software_timer_get_ms_tick>
 8000f4e:	0002      	movs	r2, r0
 8000f50:	4b13      	ldr	r3, [pc, #76]	; (8000fa0 <transmit_task_process+0x70>)
 8000f52:	601a      	str	r2, [r3, #0]

		LL_DMA_ConfigAddresses(DMA1, LL_DMA_CHANNEL_1, (uint32_t)tx_buffer, LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_TRANSMIT), LL_DMA_GetDataTransferDirection(DMA1, LL_DMA_CHANNEL_1));
 8000f54:	4c13      	ldr	r4, [pc, #76]	; (8000fa4 <transmit_task_process+0x74>)
 8000f56:	4b14      	ldr	r3, [pc, #80]	; (8000fa8 <transmit_task_process+0x78>)
 8000f58:	2100      	movs	r1, #0
 8000f5a:	0018      	movs	r0, r3
 8000f5c:	f7ff ff12 	bl	8000d84 <LL_USART_DMA_GetRegAddr>
 8000f60:	0005      	movs	r5, r0
 8000f62:	4b12      	ldr	r3, [pc, #72]	; (8000fac <transmit_task_process+0x7c>)
 8000f64:	2100      	movs	r1, #0
 8000f66:	0018      	movs	r0, r3
 8000f68:	f7ff ff60 	bl	8000e2c <LL_DMA_GetDataTransferDirection>
 8000f6c:	0003      	movs	r3, r0
 8000f6e:	480f      	ldr	r0, [pc, #60]	; (8000fac <transmit_task_process+0x7c>)
 8000f70:	9300      	str	r3, [sp, #0]
 8000f72:	002b      	movs	r3, r5
 8000f74:	0022      	movs	r2, r4
 8000f76:	2100      	movs	r1, #0
 8000f78:	f7ff ff94 	bl	8000ea4 <LL_DMA_ConfigAddresses>
		LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_1, sizeof(tx_buffer));
 8000f7c:	4b0b      	ldr	r3, [pc, #44]	; (8000fac <transmit_task_process+0x7c>)
 8000f7e:	2206      	movs	r2, #6
 8000f80:	2100      	movs	r1, #0
 8000f82:	0018      	movs	r0, r3
 8000f84:	f7ff ff6c 	bl	8000e60 <LL_DMA_SetDataLength>

		LL_USART_EnableDMAReq_TX(USART2);
 8000f88:	4b07      	ldr	r3, [pc, #28]	; (8000fa8 <transmit_task_process+0x78>)
 8000f8a:	0018      	movs	r0, r3
 8000f8c:	f7ff fedb 	bl	8000d46 <LL_USART_EnableDMAReq_TX>
		LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_1);
 8000f90:	4b06      	ldr	r3, [pc, #24]	; (8000fac <transmit_task_process+0x7c>)
 8000f92:	2100      	movs	r1, #0
 8000f94:	0018      	movs	r0, r3
 8000f96:	f7ff ff09 	bl	8000dac <LL_DMA_EnableChannel>
	}
}
 8000f9a:	46c0      	nop			; (mov r8, r8)
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bdb0      	pop	{r4, r5, r7, pc}
 8000fa0:	20000024 	.word	0x20000024
 8000fa4:	080010bc 	.word	0x080010bc
 8000fa8:	40004400 	.word	0x40004400
 8000fac:	40020000 	.word	0x40020000

08000fb0 <DMA1_transmit_complete_callback>:

void DMA1_transmit_complete_callback()
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
	LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_1);
 8000fb4:	4b03      	ldr	r3, [pc, #12]	; (8000fc4 <DMA1_transmit_complete_callback+0x14>)
 8000fb6:	2100      	movs	r1, #0
 8000fb8:	0018      	movs	r0, r3
 8000fba:	f7ff ff17 	bl	8000dec <LL_DMA_DisableChannel>
}
 8000fbe:	46c0      	nop			; (mov r8, r8)
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	40020000 	.word	0x40020000

08000fc8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000fc8:	480d      	ldr	r0, [pc, #52]	; (8001000 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000fca:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000fcc:	f7ff feb6 	bl	8000d3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fd0:	480c      	ldr	r0, [pc, #48]	; (8001004 <LoopForever+0x6>)
  ldr r1, =_edata
 8000fd2:	490d      	ldr	r1, [pc, #52]	; (8001008 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fd4:	4a0d      	ldr	r2, [pc, #52]	; (800100c <LoopForever+0xe>)
  movs r3, #0
 8000fd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fd8:	e002      	b.n	8000fe0 <LoopCopyDataInit>

08000fda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fde:	3304      	adds	r3, #4

08000fe0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fe0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fe2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fe4:	d3f9      	bcc.n	8000fda <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fe6:	4a0a      	ldr	r2, [pc, #40]	; (8001010 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fe8:	4c0a      	ldr	r4, [pc, #40]	; (8001014 <LoopForever+0x16>)
  movs r3, #0
 8000fea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fec:	e001      	b.n	8000ff2 <LoopFillZerobss>

08000fee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ff0:	3204      	adds	r2, #4

08000ff2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ff2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ff4:	d3fb      	bcc.n	8000fee <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000ff6:	f000 f811 	bl	800101c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ffa:	f7ff fd79 	bl	8000af0 <main>

08000ffe <LoopForever>:

LoopForever:
    b LoopForever
 8000ffe:	e7fe      	b.n	8000ffe <LoopForever>
  ldr   r0, =_estack
 8001000:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8001004:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001008:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 800100c:	080010cc 	.word	0x080010cc
  ldr r2, =_sbss
 8001010:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8001014:	2000002c 	.word	0x2000002c

08001018 <ADC_COMP_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001018:	e7fe      	b.n	8001018 <ADC_COMP_IRQHandler>
	...

0800101c <__libc_init_array>:
 800101c:	b570      	push	{r4, r5, r6, lr}
 800101e:	2600      	movs	r6, #0
 8001020:	4d0c      	ldr	r5, [pc, #48]	; (8001054 <__libc_init_array+0x38>)
 8001022:	4c0d      	ldr	r4, [pc, #52]	; (8001058 <__libc_init_array+0x3c>)
 8001024:	1b64      	subs	r4, r4, r5
 8001026:	10a4      	asrs	r4, r4, #2
 8001028:	42a6      	cmp	r6, r4
 800102a:	d109      	bne.n	8001040 <__libc_init_array+0x24>
 800102c:	2600      	movs	r6, #0
 800102e:	f000 f819 	bl	8001064 <_init>
 8001032:	4d0a      	ldr	r5, [pc, #40]	; (800105c <__libc_init_array+0x40>)
 8001034:	4c0a      	ldr	r4, [pc, #40]	; (8001060 <__libc_init_array+0x44>)
 8001036:	1b64      	subs	r4, r4, r5
 8001038:	10a4      	asrs	r4, r4, #2
 800103a:	42a6      	cmp	r6, r4
 800103c:	d105      	bne.n	800104a <__libc_init_array+0x2e>
 800103e:	bd70      	pop	{r4, r5, r6, pc}
 8001040:	00b3      	lsls	r3, r6, #2
 8001042:	58eb      	ldr	r3, [r5, r3]
 8001044:	4798      	blx	r3
 8001046:	3601      	adds	r6, #1
 8001048:	e7ee      	b.n	8001028 <__libc_init_array+0xc>
 800104a:	00b3      	lsls	r3, r6, #2
 800104c:	58eb      	ldr	r3, [r5, r3]
 800104e:	4798      	blx	r3
 8001050:	3601      	adds	r6, #1
 8001052:	e7f2      	b.n	800103a <__libc_init_array+0x1e>
 8001054:	080010c4 	.word	0x080010c4
 8001058:	080010c4 	.word	0x080010c4
 800105c:	080010c4 	.word	0x080010c4
 8001060:	080010c8 	.word	0x080010c8

08001064 <_init>:
 8001064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001066:	46c0      	nop			; (mov r8, r8)
 8001068:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800106a:	bc08      	pop	{r3}
 800106c:	469e      	mov	lr, r3
 800106e:	4770      	bx	lr

08001070 <_fini>:
 8001070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001072:	46c0      	nop			; (mov r8, r8)
 8001074:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001076:	bc08      	pop	{r3}
 8001078:	469e      	mov	lr, r3
 800107a:	4770      	bx	lr
