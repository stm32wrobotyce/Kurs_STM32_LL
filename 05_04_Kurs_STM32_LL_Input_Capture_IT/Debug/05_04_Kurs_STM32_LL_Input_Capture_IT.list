
05_04_Kurs_STM32_LL_Input_Capture_IT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000cc8  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08000d84  08000d84  00010d84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000da8  08000da8  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000da8  08000da8  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000da8  08000da8  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000da8  08000da8  00010da8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000dac  08000dac  00010dac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000db0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  08000db4  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000db4  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001f63  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000664  00000000  00000000  00021f8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000002a0  00000000  00000000  000225f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000258  00000000  00000000  00022898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000f386  00000000  00000000  00022af0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000021e9  00000000  00000000  00031e76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005a99a  00000000  00000000  0003405f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0008e9f9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000089c  00000000  00000000  0008ea4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000004 	.word	0x20000004
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08000d6c 	.word	0x08000d6c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000008 	.word	0x20000008
 8000100:	08000d6c 	.word	0x08000d6c

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
 8000222:	6078      	str	r0, [r7, #4]
 8000224:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8000226:	6839      	ldr	r1, [r7, #0]
 8000228:	6878      	ldr	r0, [r7, #4]
 800022a:	f7ff ff6b 	bl	8000104 <__udivsi3>
 800022e:	0003      	movs	r3, r0
 8000230:	001a      	movs	r2, r3
 8000232:	4b06      	ldr	r3, [pc, #24]	; (800024c <LL_InitTick+0x30>)
 8000234:	3a01      	subs	r2, #1
 8000236:	605a      	str	r2, [r3, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8000238:	4b04      	ldr	r3, [pc, #16]	; (800024c <LL_InitTick+0x30>)
 800023a:	2200      	movs	r2, #0
 800023c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800023e:	4b03      	ldr	r3, [pc, #12]	; (800024c <LL_InitTick+0x30>)
 8000240:	2205      	movs	r2, #5
 8000242:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8000244:	46c0      	nop			; (mov r8, r8)
 8000246:	46bd      	mov	sp, r7
 8000248:	b002      	add	sp, #8
 800024a:	bd80      	pop	{r7, pc}
 800024c:	e000e010 	.word	0xe000e010

08000250 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b082      	sub	sp, #8
 8000254:	af00      	add	r7, sp, #0
 8000256:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8000258:	23fa      	movs	r3, #250	; 0xfa
 800025a:	009a      	lsls	r2, r3, #2
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	0011      	movs	r1, r2
 8000260:	0018      	movs	r0, r3
 8000262:	f7ff ffdb 	bl	800021c <LL_InitTick>
}
 8000266:	46c0      	nop			; (mov r8, r8)
 8000268:	46bd      	mov	sp, r7
 800026a:	b002      	add	sp, #8
 800026c:	bd80      	pop	{r7, pc}
	...

08000270 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8000278:	4b03      	ldr	r3, [pc, #12]	; (8000288 <LL_SetSystemCoreClock+0x18>)
 800027a:	687a      	ldr	r2, [r7, #4]
 800027c:	601a      	str	r2, [r3, #0]
}
 800027e:	46c0      	nop			; (mov r8, r8)
 8000280:	46bd      	mov	sp, r7
 8000282:	b002      	add	sp, #8
 8000284:	bd80      	pop	{r7, pc}
 8000286:	46c0      	nop			; (mov r8, r8)
 8000288:	20000000 	.word	0x20000000

0800028c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	b082      	sub	sp, #8
 8000290:	af00      	add	r7, sp, #0
 8000292:	0002      	movs	r2, r0
 8000294:	1dfb      	adds	r3, r7, #7
 8000296:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000298:	1dfb      	adds	r3, r7, #7
 800029a:	781b      	ldrb	r3, [r3, #0]
 800029c:	2b7f      	cmp	r3, #127	; 0x7f
 800029e:	d809      	bhi.n	80002b4 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002a0:	1dfb      	adds	r3, r7, #7
 80002a2:	781b      	ldrb	r3, [r3, #0]
 80002a4:	001a      	movs	r2, r3
 80002a6:	231f      	movs	r3, #31
 80002a8:	401a      	ands	r2, r3
 80002aa:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__NVIC_EnableIRQ+0x30>)
 80002ac:	2101      	movs	r1, #1
 80002ae:	4091      	lsls	r1, r2
 80002b0:	000a      	movs	r2, r1
 80002b2:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80002b4:	46c0      	nop			; (mov r8, r8)
 80002b6:	46bd      	mov	sp, r7
 80002b8:	b002      	add	sp, #8
 80002ba:	bd80      	pop	{r7, pc}
 80002bc:	e000e100 	.word	0xe000e100

080002c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002c0:	b590      	push	{r4, r7, lr}
 80002c2:	b083      	sub	sp, #12
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	0002      	movs	r2, r0
 80002c8:	6039      	str	r1, [r7, #0]
 80002ca:	1dfb      	adds	r3, r7, #7
 80002cc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80002ce:	1dfb      	adds	r3, r7, #7
 80002d0:	781b      	ldrb	r3, [r3, #0]
 80002d2:	2b7f      	cmp	r3, #127	; 0x7f
 80002d4:	d828      	bhi.n	8000328 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002d6:	4a2f      	ldr	r2, [pc, #188]	; (8000394 <__NVIC_SetPriority+0xd4>)
 80002d8:	1dfb      	adds	r3, r7, #7
 80002da:	781b      	ldrb	r3, [r3, #0]
 80002dc:	b25b      	sxtb	r3, r3
 80002de:	089b      	lsrs	r3, r3, #2
 80002e0:	33c0      	adds	r3, #192	; 0xc0
 80002e2:	009b      	lsls	r3, r3, #2
 80002e4:	589b      	ldr	r3, [r3, r2]
 80002e6:	1dfa      	adds	r2, r7, #7
 80002e8:	7812      	ldrb	r2, [r2, #0]
 80002ea:	0011      	movs	r1, r2
 80002ec:	2203      	movs	r2, #3
 80002ee:	400a      	ands	r2, r1
 80002f0:	00d2      	lsls	r2, r2, #3
 80002f2:	21ff      	movs	r1, #255	; 0xff
 80002f4:	4091      	lsls	r1, r2
 80002f6:	000a      	movs	r2, r1
 80002f8:	43d2      	mvns	r2, r2
 80002fa:	401a      	ands	r2, r3
 80002fc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002fe:	683b      	ldr	r3, [r7, #0]
 8000300:	019b      	lsls	r3, r3, #6
 8000302:	22ff      	movs	r2, #255	; 0xff
 8000304:	401a      	ands	r2, r3
 8000306:	1dfb      	adds	r3, r7, #7
 8000308:	781b      	ldrb	r3, [r3, #0]
 800030a:	0018      	movs	r0, r3
 800030c:	2303      	movs	r3, #3
 800030e:	4003      	ands	r3, r0
 8000310:	00db      	lsls	r3, r3, #3
 8000312:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000314:	481f      	ldr	r0, [pc, #124]	; (8000394 <__NVIC_SetPriority+0xd4>)
 8000316:	1dfb      	adds	r3, r7, #7
 8000318:	781b      	ldrb	r3, [r3, #0]
 800031a:	b25b      	sxtb	r3, r3
 800031c:	089b      	lsrs	r3, r3, #2
 800031e:	430a      	orrs	r2, r1
 8000320:	33c0      	adds	r3, #192	; 0xc0
 8000322:	009b      	lsls	r3, r3, #2
 8000324:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000326:	e031      	b.n	800038c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000328:	4a1b      	ldr	r2, [pc, #108]	; (8000398 <__NVIC_SetPriority+0xd8>)
 800032a:	1dfb      	adds	r3, r7, #7
 800032c:	781b      	ldrb	r3, [r3, #0]
 800032e:	0019      	movs	r1, r3
 8000330:	230f      	movs	r3, #15
 8000332:	400b      	ands	r3, r1
 8000334:	3b08      	subs	r3, #8
 8000336:	089b      	lsrs	r3, r3, #2
 8000338:	3306      	adds	r3, #6
 800033a:	009b      	lsls	r3, r3, #2
 800033c:	18d3      	adds	r3, r2, r3
 800033e:	3304      	adds	r3, #4
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	1dfa      	adds	r2, r7, #7
 8000344:	7812      	ldrb	r2, [r2, #0]
 8000346:	0011      	movs	r1, r2
 8000348:	2203      	movs	r2, #3
 800034a:	400a      	ands	r2, r1
 800034c:	00d2      	lsls	r2, r2, #3
 800034e:	21ff      	movs	r1, #255	; 0xff
 8000350:	4091      	lsls	r1, r2
 8000352:	000a      	movs	r2, r1
 8000354:	43d2      	mvns	r2, r2
 8000356:	401a      	ands	r2, r3
 8000358:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800035a:	683b      	ldr	r3, [r7, #0]
 800035c:	019b      	lsls	r3, r3, #6
 800035e:	22ff      	movs	r2, #255	; 0xff
 8000360:	401a      	ands	r2, r3
 8000362:	1dfb      	adds	r3, r7, #7
 8000364:	781b      	ldrb	r3, [r3, #0]
 8000366:	0018      	movs	r0, r3
 8000368:	2303      	movs	r3, #3
 800036a:	4003      	ands	r3, r0
 800036c:	00db      	lsls	r3, r3, #3
 800036e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000370:	4809      	ldr	r0, [pc, #36]	; (8000398 <__NVIC_SetPriority+0xd8>)
 8000372:	1dfb      	adds	r3, r7, #7
 8000374:	781b      	ldrb	r3, [r3, #0]
 8000376:	001c      	movs	r4, r3
 8000378:	230f      	movs	r3, #15
 800037a:	4023      	ands	r3, r4
 800037c:	3b08      	subs	r3, #8
 800037e:	089b      	lsrs	r3, r3, #2
 8000380:	430a      	orrs	r2, r1
 8000382:	3306      	adds	r3, #6
 8000384:	009b      	lsls	r3, r3, #2
 8000386:	18c3      	adds	r3, r0, r3
 8000388:	3304      	adds	r3, #4
 800038a:	601a      	str	r2, [r3, #0]
}
 800038c:	46c0      	nop			; (mov r8, r8)
 800038e:	46bd      	mov	sp, r7
 8000390:	b003      	add	sp, #12
 8000392:	bd90      	pop	{r4, r7, pc}
 8000394:	e000e100 	.word	0xe000e100
 8000398:	e000ed00 	.word	0xe000ed00

0800039c <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80003a0:	4b04      	ldr	r3, [pc, #16]	; (80003b4 <LL_RCC_HSI_Enable+0x18>)
 80003a2:	681a      	ldr	r2, [r3, #0]
 80003a4:	4b03      	ldr	r3, [pc, #12]	; (80003b4 <LL_RCC_HSI_Enable+0x18>)
 80003a6:	2180      	movs	r1, #128	; 0x80
 80003a8:	0049      	lsls	r1, r1, #1
 80003aa:	430a      	orrs	r2, r1
 80003ac:	601a      	str	r2, [r3, #0]
}
 80003ae:	46c0      	nop			; (mov r8, r8)
 80003b0:	46bd      	mov	sp, r7
 80003b2:	bd80      	pop	{r7, pc}
 80003b4:	40021000 	.word	0x40021000

080003b8 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80003bc:	4b07      	ldr	r3, [pc, #28]	; (80003dc <LL_RCC_HSI_IsReady+0x24>)
 80003be:	681a      	ldr	r2, [r3, #0]
 80003c0:	2380      	movs	r3, #128	; 0x80
 80003c2:	00db      	lsls	r3, r3, #3
 80003c4:	401a      	ands	r2, r3
 80003c6:	2380      	movs	r3, #128	; 0x80
 80003c8:	00db      	lsls	r3, r3, #3
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d101      	bne.n	80003d2 <LL_RCC_HSI_IsReady+0x1a>
 80003ce:	2301      	movs	r3, #1
 80003d0:	e000      	b.n	80003d4 <LL_RCC_HSI_IsReady+0x1c>
 80003d2:	2300      	movs	r3, #0
}
 80003d4:	0018      	movs	r0, r3
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bd80      	pop	{r7, pc}
 80003da:	46c0      	nop			; (mov r8, r8)
 80003dc:	40021000 	.word	0x40021000

080003e0 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_LSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_LSE
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b082      	sub	sp, #8
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80003e8:	4b06      	ldr	r3, [pc, #24]	; (8000404 <LL_RCC_SetSysClkSource+0x24>)
 80003ea:	689b      	ldr	r3, [r3, #8]
 80003ec:	2207      	movs	r2, #7
 80003ee:	4393      	bics	r3, r2
 80003f0:	0019      	movs	r1, r3
 80003f2:	4b04      	ldr	r3, [pc, #16]	; (8000404 <LL_RCC_SetSysClkSource+0x24>)
 80003f4:	687a      	ldr	r2, [r7, #4]
 80003f6:	430a      	orrs	r2, r1
 80003f8:	609a      	str	r2, [r3, #8]
}
 80003fa:	46c0      	nop			; (mov r8, r8)
 80003fc:	46bd      	mov	sp, r7
 80003fe:	b002      	add	sp, #8
 8000400:	bd80      	pop	{r7, pc}
 8000402:	46c0      	nop			; (mov r8, r8)
 8000404:	40021000 	.word	0x40021000

08000408 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_LSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800040c:	4b03      	ldr	r3, [pc, #12]	; (800041c <LL_RCC_GetSysClkSource+0x14>)
 800040e:	689b      	ldr	r3, [r3, #8]
 8000410:	2238      	movs	r2, #56	; 0x38
 8000412:	4013      	ands	r3, r2
}
 8000414:	0018      	movs	r0, r3
 8000416:	46bd      	mov	sp, r7
 8000418:	bd80      	pop	{r7, pc}
 800041a:	46c0      	nop			; (mov r8, r8)
 800041c:	40021000 	.word	0x40021000

08000420 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b082      	sub	sp, #8
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000428:	4b06      	ldr	r3, [pc, #24]	; (8000444 <LL_RCC_SetAHBPrescaler+0x24>)
 800042a:	689b      	ldr	r3, [r3, #8]
 800042c:	4a06      	ldr	r2, [pc, #24]	; (8000448 <LL_RCC_SetAHBPrescaler+0x28>)
 800042e:	4013      	ands	r3, r2
 8000430:	0019      	movs	r1, r3
 8000432:	4b04      	ldr	r3, [pc, #16]	; (8000444 <LL_RCC_SetAHBPrescaler+0x24>)
 8000434:	687a      	ldr	r2, [r7, #4]
 8000436:	430a      	orrs	r2, r1
 8000438:	609a      	str	r2, [r3, #8]
}
 800043a:	46c0      	nop			; (mov r8, r8)
 800043c:	46bd      	mov	sp, r7
 800043e:	b002      	add	sp, #8
 8000440:	bd80      	pop	{r7, pc}
 8000442:	46c0      	nop			; (mov r8, r8)
 8000444:	40021000 	.word	0x40021000
 8000448:	fffff0ff 	.word	0xfffff0ff

0800044c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b082      	sub	sp, #8
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, Prescaler);
 8000454:	4b06      	ldr	r3, [pc, #24]	; (8000470 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000456:	689b      	ldr	r3, [r3, #8]
 8000458:	4a06      	ldr	r2, [pc, #24]	; (8000474 <LL_RCC_SetAPB1Prescaler+0x28>)
 800045a:	4013      	ands	r3, r2
 800045c:	0019      	movs	r1, r3
 800045e:	4b04      	ldr	r3, [pc, #16]	; (8000470 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000460:	687a      	ldr	r2, [r7, #4]
 8000462:	430a      	orrs	r2, r1
 8000464:	609a      	str	r2, [r3, #8]
}
 8000466:	46c0      	nop			; (mov r8, r8)
 8000468:	46bd      	mov	sp, r7
 800046a:	b002      	add	sp, #8
 800046c:	bd80      	pop	{r7, pc}
 800046e:	46c0      	nop			; (mov r8, r8)
 8000470:	40021000 	.word	0x40021000
 8000474:	ffff8fff 	.word	0xffff8fff

08000478 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800047c:	4b04      	ldr	r3, [pc, #16]	; (8000490 <LL_RCC_PLL_Enable+0x18>)
 800047e:	681a      	ldr	r2, [r3, #0]
 8000480:	4b03      	ldr	r3, [pc, #12]	; (8000490 <LL_RCC_PLL_Enable+0x18>)
 8000482:	2180      	movs	r1, #128	; 0x80
 8000484:	0449      	lsls	r1, r1, #17
 8000486:	430a      	orrs	r2, r1
 8000488:	601a      	str	r2, [r3, #0]
}
 800048a:	46c0      	nop			; (mov r8, r8)
 800048c:	46bd      	mov	sp, r7
 800048e:	bd80      	pop	{r7, pc}
 8000490:	40021000 	.word	0x40021000

08000494 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8000498:	4b07      	ldr	r3, [pc, #28]	; (80004b8 <LL_RCC_PLL_IsReady+0x24>)
 800049a:	681a      	ldr	r2, [r3, #0]
 800049c:	2380      	movs	r3, #128	; 0x80
 800049e:	049b      	lsls	r3, r3, #18
 80004a0:	401a      	ands	r2, r3
 80004a2:	2380      	movs	r3, #128	; 0x80
 80004a4:	049b      	lsls	r3, r3, #18
 80004a6:	429a      	cmp	r2, r3
 80004a8:	d101      	bne.n	80004ae <LL_RCC_PLL_IsReady+0x1a>
 80004aa:	2301      	movs	r3, #1
 80004ac:	e000      	b.n	80004b0 <LL_RCC_PLL_IsReady+0x1c>
 80004ae:	2300      	movs	r3, #0
}
 80004b0:	0018      	movs	r0, r3
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bd80      	pop	{r7, pc}
 80004b6:	46c0      	nop			; (mov r8, r8)
 80004b8:	40021000 	.word	0x40021000

080004bc <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b084      	sub	sp, #16
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	60f8      	str	r0, [r7, #12]
 80004c4:	60b9      	str	r1, [r7, #8]
 80004c6:	607a      	str	r2, [r7, #4]
 80004c8:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 80004ca:	4b0a      	ldr	r3, [pc, #40]	; (80004f4 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 80004cc:	68db      	ldr	r3, [r3, #12]
 80004ce:	4a0a      	ldr	r2, [pc, #40]	; (80004f8 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 80004d0:	4013      	ands	r3, r2
 80004d2:	0019      	movs	r1, r3
 80004d4:	68fa      	ldr	r2, [r7, #12]
 80004d6:	68bb      	ldr	r3, [r7, #8]
 80004d8:	431a      	orrs	r2, r3
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	021b      	lsls	r3, r3, #8
 80004de:	431a      	orrs	r2, r3
 80004e0:	683b      	ldr	r3, [r7, #0]
 80004e2:	431a      	orrs	r2, r3
 80004e4:	4b03      	ldr	r3, [pc, #12]	; (80004f4 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 80004e6:	430a      	orrs	r2, r1
 80004e8:	60da      	str	r2, [r3, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 80004ea:	46c0      	nop			; (mov r8, r8)
 80004ec:	46bd      	mov	sp, r7
 80004ee:	b004      	add	sp, #16
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	46c0      	nop			; (mov r8, r8)
 80004f4:	40021000 	.word	0x40021000
 80004f8:	1fff808c 	.word	0x1fff808c

080004fc <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 8000500:	4b04      	ldr	r3, [pc, #16]	; (8000514 <LL_RCC_PLL_EnableDomain_SYS+0x18>)
 8000502:	68da      	ldr	r2, [r3, #12]
 8000504:	4b03      	ldr	r3, [pc, #12]	; (8000514 <LL_RCC_PLL_EnableDomain_SYS+0x18>)
 8000506:	2180      	movs	r1, #128	; 0x80
 8000508:	0549      	lsls	r1, r1, #21
 800050a:	430a      	orrs	r2, r1
 800050c:	60da      	str	r2, [r3, #12]
}
 800050e:	46c0      	nop			; (mov r8, r8)
 8000510:	46bd      	mov	sp, r7
 8000512:	bd80      	pop	{r7, pc}
 8000514:	40021000 	.word	0x40021000

08000518 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1  (1)
  * @note Peripheral marked with (1) are not available all devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b084      	sub	sp, #16
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APBENR1, Periphs);
 8000520:	4b07      	ldr	r3, [pc, #28]	; (8000540 <LL_APB1_GRP1_EnableClock+0x28>)
 8000522:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8000524:	4b06      	ldr	r3, [pc, #24]	; (8000540 <LL_APB1_GRP1_EnableClock+0x28>)
 8000526:	687a      	ldr	r2, [r7, #4]
 8000528:	430a      	orrs	r2, r1
 800052a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 800052c:	4b04      	ldr	r3, [pc, #16]	; (8000540 <LL_APB1_GRP1_EnableClock+0x28>)
 800052e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000530:	687a      	ldr	r2, [r7, #4]
 8000532:	4013      	ands	r3, r2
 8000534:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000536:	68fb      	ldr	r3, [r7, #12]
}
 8000538:	46c0      	nop			; (mov r8, r8)
 800053a:	46bd      	mov	sp, r7
 800053c:	b004      	add	sp, #16
 800053e:	bd80      	pop	{r7, pc}
 8000540:	40021000 	.word	0x40021000

08000544 <LL_IOP_GRP1_EnableClock>:
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOE
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOF
  * @retval None
  */
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b084      	sub	sp, #16
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 800054c:	4b07      	ldr	r3, [pc, #28]	; (800056c <LL_IOP_GRP1_EnableClock+0x28>)
 800054e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000550:	4b06      	ldr	r3, [pc, #24]	; (800056c <LL_IOP_GRP1_EnableClock+0x28>)
 8000552:	687a      	ldr	r2, [r7, #4]
 8000554:	430a      	orrs	r2, r1
 8000556:	635a      	str	r2, [r3, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8000558:	4b04      	ldr	r3, [pc, #16]	; (800056c <LL_IOP_GRP1_EnableClock+0x28>)
 800055a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800055c:	687a      	ldr	r2, [r7, #4]
 800055e:	4013      	ands	r3, r2
 8000560:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000562:	68fb      	ldr	r3, [r7, #12]
}
 8000564:	46c0      	nop			; (mov r8, r8)
 8000566:	46bd      	mov	sp, r7
 8000568:	b004      	add	sp, #16
 800056a:	bd80      	pop	{r7, pc}
 800056c:	40021000 	.word	0x40021000

08000570 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000578:	4b06      	ldr	r3, [pc, #24]	; (8000594 <LL_FLASH_SetLatency+0x24>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	2207      	movs	r2, #7
 800057e:	4393      	bics	r3, r2
 8000580:	0019      	movs	r1, r3
 8000582:	4b04      	ldr	r3, [pc, #16]	; (8000594 <LL_FLASH_SetLatency+0x24>)
 8000584:	687a      	ldr	r2, [r7, #4]
 8000586:	430a      	orrs	r2, r1
 8000588:	601a      	str	r2, [r3, #0]
}
 800058a:	46c0      	nop			; (mov r8, r8)
 800058c:	46bd      	mov	sp, r7
 800058e:	b002      	add	sp, #8
 8000590:	bd80      	pop	{r7, pc}
 8000592:	46c0      	nop			; (mov r8, r8)
 8000594:	40022000 	.word	0x40022000

08000598 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b084      	sub	sp, #16
 800059c:	af00      	add	r7, sp, #0
 800059e:	60f8      	str	r0, [r7, #12]
 80005a0:	60b9      	str	r1, [r7, #8]
 80005a2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	6819      	ldr	r1, [r3, #0]
 80005a8:	68bb      	ldr	r3, [r7, #8]
 80005aa:	435b      	muls	r3, r3
 80005ac:	001a      	movs	r2, r3
 80005ae:	0013      	movs	r3, r2
 80005b0:	005b      	lsls	r3, r3, #1
 80005b2:	189b      	adds	r3, r3, r2
 80005b4:	43db      	mvns	r3, r3
 80005b6:	400b      	ands	r3, r1
 80005b8:	001a      	movs	r2, r3
 80005ba:	68bb      	ldr	r3, [r7, #8]
 80005bc:	435b      	muls	r3, r3
 80005be:	6879      	ldr	r1, [r7, #4]
 80005c0:	434b      	muls	r3, r1
 80005c2:	431a      	orrs	r2, r3
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	601a      	str	r2, [r3, #0]
}
 80005c8:	46c0      	nop			; (mov r8, r8)
 80005ca:	46bd      	mov	sp, r7
 80005cc:	b004      	add	sp, #16
 80005ce:	bd80      	pop	{r7, pc}

080005d0 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b084      	sub	sp, #16
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	60f8      	str	r0, [r7, #12]
 80005d8:	60b9      	str	r1, [r7, #8]
 80005da:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	6899      	ldr	r1, [r3, #8]
 80005e0:	68bb      	ldr	r3, [r7, #8]
 80005e2:	435b      	muls	r3, r3
 80005e4:	001a      	movs	r2, r3
 80005e6:	0013      	movs	r3, r2
 80005e8:	005b      	lsls	r3, r3, #1
 80005ea:	189b      	adds	r3, r3, r2
 80005ec:	43db      	mvns	r3, r3
 80005ee:	400b      	ands	r3, r1
 80005f0:	001a      	movs	r2, r3
 80005f2:	68bb      	ldr	r3, [r7, #8]
 80005f4:	435b      	muls	r3, r3
 80005f6:	6879      	ldr	r1, [r7, #4]
 80005f8:	434b      	muls	r3, r1
 80005fa:	431a      	orrs	r2, r3
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	609a      	str	r2, [r3, #8]
}
 8000600:	46c0      	nop			; (mov r8, r8)
 8000602:	46bd      	mov	sp, r7
 8000604:	b004      	add	sp, #16
 8000606:	bd80      	pop	{r7, pc}

08000608 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b084      	sub	sp, #16
 800060c:	af00      	add	r7, sp, #0
 800060e:	60f8      	str	r0, [r7, #12]
 8000610:	60b9      	str	r1, [r7, #8]
 8000612:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	68d9      	ldr	r1, [r3, #12]
 8000618:	68bb      	ldr	r3, [r7, #8]
 800061a:	435b      	muls	r3, r3
 800061c:	001a      	movs	r2, r3
 800061e:	0013      	movs	r3, r2
 8000620:	005b      	lsls	r3, r3, #1
 8000622:	189b      	adds	r3, r3, r2
 8000624:	43db      	mvns	r3, r3
 8000626:	400b      	ands	r3, r1
 8000628:	001a      	movs	r2, r3
 800062a:	68bb      	ldr	r3, [r7, #8]
 800062c:	435b      	muls	r3, r3
 800062e:	6879      	ldr	r1, [r7, #4]
 8000630:	434b      	muls	r3, r1
 8000632:	431a      	orrs	r2, r3
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	60da      	str	r2, [r3, #12]
}
 8000638:	46c0      	nop			; (mov r8, r8)
 800063a:	46bd      	mov	sp, r7
 800063c:	b004      	add	sp, #16
 800063e:	bd80      	pop	{r7, pc}

08000640 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_6
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b084      	sub	sp, #16
 8000644:	af00      	add	r7, sp, #0
 8000646:	60f8      	str	r0, [r7, #12]
 8000648:	60b9      	str	r1, [r7, #8]
 800064a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	6a19      	ldr	r1, [r3, #32]
 8000650:	68bb      	ldr	r3, [r7, #8]
 8000652:	435b      	muls	r3, r3
 8000654:	68ba      	ldr	r2, [r7, #8]
 8000656:	4353      	muls	r3, r2
 8000658:	68ba      	ldr	r2, [r7, #8]
 800065a:	435a      	muls	r2, r3
 800065c:	0013      	movs	r3, r2
 800065e:	011b      	lsls	r3, r3, #4
 8000660:	1a9b      	subs	r3, r3, r2
 8000662:	43db      	mvns	r3, r3
 8000664:	400b      	ands	r3, r1
 8000666:	001a      	movs	r2, r3
 8000668:	68bb      	ldr	r3, [r7, #8]
 800066a:	435b      	muls	r3, r3
 800066c:	68b9      	ldr	r1, [r7, #8]
 800066e:	434b      	muls	r3, r1
 8000670:	68b9      	ldr	r1, [r7, #8]
 8000672:	434b      	muls	r3, r1
 8000674:	6879      	ldr	r1, [r7, #4]
 8000676:	434b      	muls	r3, r1
 8000678:	431a      	orrs	r2, r3
 800067a:	68fb      	ldr	r3, [r7, #12]
 800067c:	621a      	str	r2, [r3, #32]
             ((((Pin * Pin) * Pin) * Pin) * Alternate));
}
 800067e:	46c0      	nop			; (mov r8, r8)
 8000680:	46bd      	mov	sp, r7
 8000682:	b004      	add	sp, #16
 8000684:	bd80      	pop	{r7, pc}

08000686 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8000686:	b580      	push	{r7, lr}
 8000688:	b082      	sub	sp, #8
 800068a:	af00      	add	r7, sp, #0
 800068c:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	2201      	movs	r2, #1
 8000694:	431a      	orrs	r2, r3
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	601a      	str	r2, [r3, #0]
}
 800069a:	46c0      	nop			; (mov r8, r8)
 800069c:	46bd      	mov	sp, r7
 800069e:	b002      	add	sp, #8
 80006a0:	bd80      	pop	{r7, pc}

080006a2 <LL_TIM_SetCounterMode>:
  *         @arg @ref LL_TIM_COUNTERMODE_CENTER_DOWN
  *         @arg @ref LL_TIM_COUNTERMODE_CENTER_UP_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetCounterMode(TIM_TypeDef *TIMx, uint32_t CounterMode)
{
 80006a2:	b580      	push	{r7, lr}
 80006a4:	b082      	sub	sp, #8
 80006a6:	af00      	add	r7, sp, #0
 80006a8:	6078      	str	r0, [r7, #4]
 80006aa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR1, (TIM_CR1_DIR | TIM_CR1_CMS), CounterMode);
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	2270      	movs	r2, #112	; 0x70
 80006b2:	4393      	bics	r3, r2
 80006b4:	001a      	movs	r2, r3
 80006b6:	683b      	ldr	r3, [r7, #0]
 80006b8:	431a      	orrs	r2, r3
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	601a      	str	r2, [r3, #0]
}
 80006be:	46c0      	nop			; (mov r8, r8)
 80006c0:	46bd      	mov	sp, r7
 80006c2:	b002      	add	sp, #8
 80006c4:	bd80      	pop	{r7, pc}

080006c6 <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 80006c6:	b580      	push	{r7, lr}
 80006c8:	b082      	sub	sp, #8
 80006ca:	af00      	add	r7, sp, #0
 80006cc:	6078      	str	r0, [r7, #4]
 80006ce:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	683a      	ldr	r2, [r7, #0]
 80006d4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80006d6:	46c0      	nop			; (mov r8, r8)
 80006d8:	46bd      	mov	sp, r7
 80006da:	b002      	add	sp, #8
 80006dc:	bd80      	pop	{r7, pc}

080006de <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 80006de:	b580      	push	{r7, lr}
 80006e0:	b082      	sub	sp, #8
 80006e2:	af00      	add	r7, sp, #0
 80006e4:	6078      	str	r0, [r7, #4]
 80006e6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	683a      	ldr	r2, [r7, #0]
 80006ec:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80006ee:	46c0      	nop			; (mov r8, r8)
 80006f0:	46bd      	mov	sp, r7
 80006f2:	b002      	add	sp, #8
 80006f4:	bd80      	pop	{r7, pc}

080006f6 <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH5
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 80006f6:	b580      	push	{r7, lr}
 80006f8:	b082      	sub	sp, #8
 80006fa:	af00      	add	r7, sp, #0
 80006fc:	6078      	str	r0, [r7, #4]
 80006fe:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	6a1a      	ldr	r2, [r3, #32]
 8000704:	683b      	ldr	r3, [r7, #0]
 8000706:	431a      	orrs	r2, r3
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	621a      	str	r2, [r3, #32]
}
 800070c:	46c0      	nop			; (mov r8, r8)
 800070e:	46bd      	mov	sp, r7
 8000710:	b002      	add	sp, #8
 8000712:	bd80      	pop	{r7, pc}

08000714 <LL_TIM_IC_SetActiveInput>:
  *         @arg @ref LL_TIM_ACTIVEINPUT_INDIRECTTI
  *         @arg @ref LL_TIM_ACTIVEINPUT_TRC
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetActiveInput(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICActiveInput)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b086      	sub	sp, #24
 8000718:	af00      	add	r7, sp, #0
 800071a:	60f8      	str	r0, [r7, #12]
 800071c:	60b9      	str	r1, [r7, #8]
 800071e:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000720:	68bb      	ldr	r3, [r7, #8]
 8000722:	2b01      	cmp	r3, #1
 8000724:	d02c      	beq.n	8000780 <LL_TIM_IC_SetActiveInput+0x6c>
 8000726:	68bb      	ldr	r3, [r7, #8]
 8000728:	2b04      	cmp	r3, #4
 800072a:	d027      	beq.n	800077c <LL_TIM_IC_SetActiveInput+0x68>
 800072c:	68bb      	ldr	r3, [r7, #8]
 800072e:	2b10      	cmp	r3, #16
 8000730:	d022      	beq.n	8000778 <LL_TIM_IC_SetActiveInput+0x64>
 8000732:	68bb      	ldr	r3, [r7, #8]
 8000734:	2b40      	cmp	r3, #64	; 0x40
 8000736:	d01d      	beq.n	8000774 <LL_TIM_IC_SetActiveInput+0x60>
 8000738:	68ba      	ldr	r2, [r7, #8]
 800073a:	2380      	movs	r3, #128	; 0x80
 800073c:	005b      	lsls	r3, r3, #1
 800073e:	429a      	cmp	r2, r3
 8000740:	d016      	beq.n	8000770 <LL_TIM_IC_SetActiveInput+0x5c>
 8000742:	68ba      	ldr	r2, [r7, #8]
 8000744:	2380      	movs	r3, #128	; 0x80
 8000746:	00db      	lsls	r3, r3, #3
 8000748:	429a      	cmp	r2, r3
 800074a:	d00f      	beq.n	800076c <LL_TIM_IC_SetActiveInput+0x58>
 800074c:	68ba      	ldr	r2, [r7, #8]
 800074e:	2380      	movs	r3, #128	; 0x80
 8000750:	015b      	lsls	r3, r3, #5
 8000752:	429a      	cmp	r2, r3
 8000754:	d008      	beq.n	8000768 <LL_TIM_IC_SetActiveInput+0x54>
 8000756:	68ba      	ldr	r2, [r7, #8]
 8000758:	2380      	movs	r3, #128	; 0x80
 800075a:	025b      	lsls	r3, r3, #9
 800075c:	429a      	cmp	r2, r3
 800075e:	d101      	bne.n	8000764 <LL_TIM_IC_SetActiveInput+0x50>
 8000760:	2307      	movs	r3, #7
 8000762:	e00e      	b.n	8000782 <LL_TIM_IC_SetActiveInput+0x6e>
 8000764:	2308      	movs	r3, #8
 8000766:	e00c      	b.n	8000782 <LL_TIM_IC_SetActiveInput+0x6e>
 8000768:	2306      	movs	r3, #6
 800076a:	e00a      	b.n	8000782 <LL_TIM_IC_SetActiveInput+0x6e>
 800076c:	2305      	movs	r3, #5
 800076e:	e008      	b.n	8000782 <LL_TIM_IC_SetActiveInput+0x6e>
 8000770:	2304      	movs	r3, #4
 8000772:	e006      	b.n	8000782 <LL_TIM_IC_SetActiveInput+0x6e>
 8000774:	2303      	movs	r3, #3
 8000776:	e004      	b.n	8000782 <LL_TIM_IC_SetActiveInput+0x6e>
 8000778:	2302      	movs	r3, #2
 800077a:	e002      	b.n	8000782 <LL_TIM_IC_SetActiveInput+0x6e>
 800077c:	2301      	movs	r3, #1
 800077e:	e000      	b.n	8000782 <LL_TIM_IC_SetActiveInput+0x6e>
 8000780:	2300      	movs	r3, #0
 8000782:	2017      	movs	r0, #23
 8000784:	183a      	adds	r2, r7, r0
 8000786:	7013      	strb	r3, [r2, #0]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	3318      	adds	r3, #24
 800078c:	0019      	movs	r1, r3
 800078e:	183b      	adds	r3, r7, r0
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	4a0e      	ldr	r2, [pc, #56]	; (80007cc <LL_TIM_IC_SetActiveInput+0xb8>)
 8000794:	5cd3      	ldrb	r3, [r2, r3]
 8000796:	18cb      	adds	r3, r1, r3
 8000798:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_CC1S) << SHIFT_TAB_ICxx[iChannel]), (ICActiveInput >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 800079a:	693b      	ldr	r3, [r7, #16]
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	183a      	adds	r2, r7, r0
 80007a0:	7812      	ldrb	r2, [r2, #0]
 80007a2:	490b      	ldr	r1, [pc, #44]	; (80007d0 <LL_TIM_IC_SetActiveInput+0xbc>)
 80007a4:	5c8a      	ldrb	r2, [r1, r2]
 80007a6:	0011      	movs	r1, r2
 80007a8:	2203      	movs	r2, #3
 80007aa:	408a      	lsls	r2, r1
 80007ac:	43d2      	mvns	r2, r2
 80007ae:	401a      	ands	r2, r3
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	0c1b      	lsrs	r3, r3, #16
 80007b4:	1839      	adds	r1, r7, r0
 80007b6:	7809      	ldrb	r1, [r1, #0]
 80007b8:	4805      	ldr	r0, [pc, #20]	; (80007d0 <LL_TIM_IC_SetActiveInput+0xbc>)
 80007ba:	5c41      	ldrb	r1, [r0, r1]
 80007bc:	408b      	lsls	r3, r1
 80007be:	431a      	orrs	r2, r3
 80007c0:	693b      	ldr	r3, [r7, #16]
 80007c2:	601a      	str	r2, [r3, #0]
}
 80007c4:	46c0      	nop			; (mov r8, r8)
 80007c6:	46bd      	mov	sp, r7
 80007c8:	b006      	add	sp, #24
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	08000d84 	.word	0x08000d84
 80007d0:	08000d90 	.word	0x08000d90

080007d4 <LL_TIM_IC_SetPrescaler>:
  *         @arg @ref LL_TIM_ICPSC_DIV4
  *         @arg @ref LL_TIM_ICPSC_DIV8
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICPrescaler)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b086      	sub	sp, #24
 80007d8:	af00      	add	r7, sp, #0
 80007da:	60f8      	str	r0, [r7, #12]
 80007dc:	60b9      	str	r1, [r7, #8]
 80007de:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80007e0:	68bb      	ldr	r3, [r7, #8]
 80007e2:	2b01      	cmp	r3, #1
 80007e4:	d02c      	beq.n	8000840 <LL_TIM_IC_SetPrescaler+0x6c>
 80007e6:	68bb      	ldr	r3, [r7, #8]
 80007e8:	2b04      	cmp	r3, #4
 80007ea:	d027      	beq.n	800083c <LL_TIM_IC_SetPrescaler+0x68>
 80007ec:	68bb      	ldr	r3, [r7, #8]
 80007ee:	2b10      	cmp	r3, #16
 80007f0:	d022      	beq.n	8000838 <LL_TIM_IC_SetPrescaler+0x64>
 80007f2:	68bb      	ldr	r3, [r7, #8]
 80007f4:	2b40      	cmp	r3, #64	; 0x40
 80007f6:	d01d      	beq.n	8000834 <LL_TIM_IC_SetPrescaler+0x60>
 80007f8:	68ba      	ldr	r2, [r7, #8]
 80007fa:	2380      	movs	r3, #128	; 0x80
 80007fc:	005b      	lsls	r3, r3, #1
 80007fe:	429a      	cmp	r2, r3
 8000800:	d016      	beq.n	8000830 <LL_TIM_IC_SetPrescaler+0x5c>
 8000802:	68ba      	ldr	r2, [r7, #8]
 8000804:	2380      	movs	r3, #128	; 0x80
 8000806:	00db      	lsls	r3, r3, #3
 8000808:	429a      	cmp	r2, r3
 800080a:	d00f      	beq.n	800082c <LL_TIM_IC_SetPrescaler+0x58>
 800080c:	68ba      	ldr	r2, [r7, #8]
 800080e:	2380      	movs	r3, #128	; 0x80
 8000810:	015b      	lsls	r3, r3, #5
 8000812:	429a      	cmp	r2, r3
 8000814:	d008      	beq.n	8000828 <LL_TIM_IC_SetPrescaler+0x54>
 8000816:	68ba      	ldr	r2, [r7, #8]
 8000818:	2380      	movs	r3, #128	; 0x80
 800081a:	025b      	lsls	r3, r3, #9
 800081c:	429a      	cmp	r2, r3
 800081e:	d101      	bne.n	8000824 <LL_TIM_IC_SetPrescaler+0x50>
 8000820:	2307      	movs	r3, #7
 8000822:	e00e      	b.n	8000842 <LL_TIM_IC_SetPrescaler+0x6e>
 8000824:	2308      	movs	r3, #8
 8000826:	e00c      	b.n	8000842 <LL_TIM_IC_SetPrescaler+0x6e>
 8000828:	2306      	movs	r3, #6
 800082a:	e00a      	b.n	8000842 <LL_TIM_IC_SetPrescaler+0x6e>
 800082c:	2305      	movs	r3, #5
 800082e:	e008      	b.n	8000842 <LL_TIM_IC_SetPrescaler+0x6e>
 8000830:	2304      	movs	r3, #4
 8000832:	e006      	b.n	8000842 <LL_TIM_IC_SetPrescaler+0x6e>
 8000834:	2303      	movs	r3, #3
 8000836:	e004      	b.n	8000842 <LL_TIM_IC_SetPrescaler+0x6e>
 8000838:	2302      	movs	r3, #2
 800083a:	e002      	b.n	8000842 <LL_TIM_IC_SetPrescaler+0x6e>
 800083c:	2301      	movs	r3, #1
 800083e:	e000      	b.n	8000842 <LL_TIM_IC_SetPrescaler+0x6e>
 8000840:	2300      	movs	r3, #0
 8000842:	2017      	movs	r0, #23
 8000844:	183a      	adds	r2, r7, r0
 8000846:	7013      	strb	r3, [r2, #0]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	3318      	adds	r3, #24
 800084c:	0019      	movs	r1, r3
 800084e:	183b      	adds	r3, r7, r0
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	4a0e      	ldr	r2, [pc, #56]	; (800088c <LL_TIM_IC_SetPrescaler+0xb8>)
 8000854:	5cd3      	ldrb	r3, [r2, r3]
 8000856:	18cb      	adds	r3, r1, r3
 8000858:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1PSC) << SHIFT_TAB_ICxx[iChannel]), (ICPrescaler >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 800085a:	693b      	ldr	r3, [r7, #16]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	183a      	adds	r2, r7, r0
 8000860:	7812      	ldrb	r2, [r2, #0]
 8000862:	490b      	ldr	r1, [pc, #44]	; (8000890 <LL_TIM_IC_SetPrescaler+0xbc>)
 8000864:	5c8a      	ldrb	r2, [r1, r2]
 8000866:	0011      	movs	r1, r2
 8000868:	220c      	movs	r2, #12
 800086a:	408a      	lsls	r2, r1
 800086c:	43d2      	mvns	r2, r2
 800086e:	401a      	ands	r2, r3
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	0c1b      	lsrs	r3, r3, #16
 8000874:	1839      	adds	r1, r7, r0
 8000876:	7809      	ldrb	r1, [r1, #0]
 8000878:	4805      	ldr	r0, [pc, #20]	; (8000890 <LL_TIM_IC_SetPrescaler+0xbc>)
 800087a:	5c41      	ldrb	r1, [r0, r1]
 800087c:	408b      	lsls	r3, r1
 800087e:	431a      	orrs	r2, r3
 8000880:	693b      	ldr	r3, [r7, #16]
 8000882:	601a      	str	r2, [r3, #0]
}
 8000884:	46c0      	nop			; (mov r8, r8)
 8000886:	46bd      	mov	sp, r7
 8000888:	b006      	add	sp, #24
 800088a:	bd80      	pop	{r7, pc}
 800088c:	08000d84 	.word	0x08000d84
 8000890:	08000d90 	.word	0x08000d90

08000894 <LL_TIM_IC_SetFilter>:
  *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N6
  *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N8
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetFilter(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICFilter)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b086      	sub	sp, #24
 8000898:	af00      	add	r7, sp, #0
 800089a:	60f8      	str	r0, [r7, #12]
 800089c:	60b9      	str	r1, [r7, #8]
 800089e:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80008a0:	68bb      	ldr	r3, [r7, #8]
 80008a2:	2b01      	cmp	r3, #1
 80008a4:	d02c      	beq.n	8000900 <LL_TIM_IC_SetFilter+0x6c>
 80008a6:	68bb      	ldr	r3, [r7, #8]
 80008a8:	2b04      	cmp	r3, #4
 80008aa:	d027      	beq.n	80008fc <LL_TIM_IC_SetFilter+0x68>
 80008ac:	68bb      	ldr	r3, [r7, #8]
 80008ae:	2b10      	cmp	r3, #16
 80008b0:	d022      	beq.n	80008f8 <LL_TIM_IC_SetFilter+0x64>
 80008b2:	68bb      	ldr	r3, [r7, #8]
 80008b4:	2b40      	cmp	r3, #64	; 0x40
 80008b6:	d01d      	beq.n	80008f4 <LL_TIM_IC_SetFilter+0x60>
 80008b8:	68ba      	ldr	r2, [r7, #8]
 80008ba:	2380      	movs	r3, #128	; 0x80
 80008bc:	005b      	lsls	r3, r3, #1
 80008be:	429a      	cmp	r2, r3
 80008c0:	d016      	beq.n	80008f0 <LL_TIM_IC_SetFilter+0x5c>
 80008c2:	68ba      	ldr	r2, [r7, #8]
 80008c4:	2380      	movs	r3, #128	; 0x80
 80008c6:	00db      	lsls	r3, r3, #3
 80008c8:	429a      	cmp	r2, r3
 80008ca:	d00f      	beq.n	80008ec <LL_TIM_IC_SetFilter+0x58>
 80008cc:	68ba      	ldr	r2, [r7, #8]
 80008ce:	2380      	movs	r3, #128	; 0x80
 80008d0:	015b      	lsls	r3, r3, #5
 80008d2:	429a      	cmp	r2, r3
 80008d4:	d008      	beq.n	80008e8 <LL_TIM_IC_SetFilter+0x54>
 80008d6:	68ba      	ldr	r2, [r7, #8]
 80008d8:	2380      	movs	r3, #128	; 0x80
 80008da:	025b      	lsls	r3, r3, #9
 80008dc:	429a      	cmp	r2, r3
 80008de:	d101      	bne.n	80008e4 <LL_TIM_IC_SetFilter+0x50>
 80008e0:	2307      	movs	r3, #7
 80008e2:	e00e      	b.n	8000902 <LL_TIM_IC_SetFilter+0x6e>
 80008e4:	2308      	movs	r3, #8
 80008e6:	e00c      	b.n	8000902 <LL_TIM_IC_SetFilter+0x6e>
 80008e8:	2306      	movs	r3, #6
 80008ea:	e00a      	b.n	8000902 <LL_TIM_IC_SetFilter+0x6e>
 80008ec:	2305      	movs	r3, #5
 80008ee:	e008      	b.n	8000902 <LL_TIM_IC_SetFilter+0x6e>
 80008f0:	2304      	movs	r3, #4
 80008f2:	e006      	b.n	8000902 <LL_TIM_IC_SetFilter+0x6e>
 80008f4:	2303      	movs	r3, #3
 80008f6:	e004      	b.n	8000902 <LL_TIM_IC_SetFilter+0x6e>
 80008f8:	2302      	movs	r3, #2
 80008fa:	e002      	b.n	8000902 <LL_TIM_IC_SetFilter+0x6e>
 80008fc:	2301      	movs	r3, #1
 80008fe:	e000      	b.n	8000902 <LL_TIM_IC_SetFilter+0x6e>
 8000900:	2300      	movs	r3, #0
 8000902:	2017      	movs	r0, #23
 8000904:	183a      	adds	r2, r7, r0
 8000906:	7013      	strb	r3, [r2, #0]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	3318      	adds	r3, #24
 800090c:	0019      	movs	r1, r3
 800090e:	183b      	adds	r3, r7, r0
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	4a0e      	ldr	r2, [pc, #56]	; (800094c <LL_TIM_IC_SetFilter+0xb8>)
 8000914:	5cd3      	ldrb	r3, [r2, r3]
 8000916:	18cb      	adds	r3, r1, r3
 8000918:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 800091a:	693b      	ldr	r3, [r7, #16]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	183a      	adds	r2, r7, r0
 8000920:	7812      	ldrb	r2, [r2, #0]
 8000922:	490b      	ldr	r1, [pc, #44]	; (8000950 <LL_TIM_IC_SetFilter+0xbc>)
 8000924:	5c8a      	ldrb	r2, [r1, r2]
 8000926:	0011      	movs	r1, r2
 8000928:	22f0      	movs	r2, #240	; 0xf0
 800092a:	408a      	lsls	r2, r1
 800092c:	43d2      	mvns	r2, r2
 800092e:	401a      	ands	r2, r3
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	0c1b      	lsrs	r3, r3, #16
 8000934:	1839      	adds	r1, r7, r0
 8000936:	7809      	ldrb	r1, [r1, #0]
 8000938:	4805      	ldr	r0, [pc, #20]	; (8000950 <LL_TIM_IC_SetFilter+0xbc>)
 800093a:	5c41      	ldrb	r1, [r0, r1]
 800093c:	408b      	lsls	r3, r1
 800093e:	431a      	orrs	r2, r3
 8000940:	693b      	ldr	r3, [r7, #16]
 8000942:	601a      	str	r2, [r3, #0]
}
 8000944:	46c0      	nop			; (mov r8, r8)
 8000946:	46bd      	mov	sp, r7
 8000948:	b006      	add	sp, #24
 800094a:	bd80      	pop	{r7, pc}
 800094c:	08000d84 	.word	0x08000d84
 8000950:	08000d90 	.word	0x08000d90

08000954 <LL_TIM_IC_SetPolarity>:
  *         @arg @ref LL_TIM_IC_POLARITY_FALLING
  *         @arg @ref LL_TIM_IC_POLARITY_BOTHEDGE
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetPolarity(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICPolarity)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b086      	sub	sp, #24
 8000958:	af00      	add	r7, sp, #0
 800095a:	60f8      	str	r0, [r7, #12]
 800095c:	60b9      	str	r1, [r7, #8]
 800095e:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000960:	68bb      	ldr	r3, [r7, #8]
 8000962:	2b01      	cmp	r3, #1
 8000964:	d02c      	beq.n	80009c0 <LL_TIM_IC_SetPolarity+0x6c>
 8000966:	68bb      	ldr	r3, [r7, #8]
 8000968:	2b04      	cmp	r3, #4
 800096a:	d027      	beq.n	80009bc <LL_TIM_IC_SetPolarity+0x68>
 800096c:	68bb      	ldr	r3, [r7, #8]
 800096e:	2b10      	cmp	r3, #16
 8000970:	d022      	beq.n	80009b8 <LL_TIM_IC_SetPolarity+0x64>
 8000972:	68bb      	ldr	r3, [r7, #8]
 8000974:	2b40      	cmp	r3, #64	; 0x40
 8000976:	d01d      	beq.n	80009b4 <LL_TIM_IC_SetPolarity+0x60>
 8000978:	68ba      	ldr	r2, [r7, #8]
 800097a:	2380      	movs	r3, #128	; 0x80
 800097c:	005b      	lsls	r3, r3, #1
 800097e:	429a      	cmp	r2, r3
 8000980:	d016      	beq.n	80009b0 <LL_TIM_IC_SetPolarity+0x5c>
 8000982:	68ba      	ldr	r2, [r7, #8]
 8000984:	2380      	movs	r3, #128	; 0x80
 8000986:	00db      	lsls	r3, r3, #3
 8000988:	429a      	cmp	r2, r3
 800098a:	d00f      	beq.n	80009ac <LL_TIM_IC_SetPolarity+0x58>
 800098c:	68ba      	ldr	r2, [r7, #8]
 800098e:	2380      	movs	r3, #128	; 0x80
 8000990:	015b      	lsls	r3, r3, #5
 8000992:	429a      	cmp	r2, r3
 8000994:	d008      	beq.n	80009a8 <LL_TIM_IC_SetPolarity+0x54>
 8000996:	68ba      	ldr	r2, [r7, #8]
 8000998:	2380      	movs	r3, #128	; 0x80
 800099a:	025b      	lsls	r3, r3, #9
 800099c:	429a      	cmp	r2, r3
 800099e:	d101      	bne.n	80009a4 <LL_TIM_IC_SetPolarity+0x50>
 80009a0:	2307      	movs	r3, #7
 80009a2:	e00e      	b.n	80009c2 <LL_TIM_IC_SetPolarity+0x6e>
 80009a4:	2308      	movs	r3, #8
 80009a6:	e00c      	b.n	80009c2 <LL_TIM_IC_SetPolarity+0x6e>
 80009a8:	2306      	movs	r3, #6
 80009aa:	e00a      	b.n	80009c2 <LL_TIM_IC_SetPolarity+0x6e>
 80009ac:	2305      	movs	r3, #5
 80009ae:	e008      	b.n	80009c2 <LL_TIM_IC_SetPolarity+0x6e>
 80009b0:	2304      	movs	r3, #4
 80009b2:	e006      	b.n	80009c2 <LL_TIM_IC_SetPolarity+0x6e>
 80009b4:	2303      	movs	r3, #3
 80009b6:	e004      	b.n	80009c2 <LL_TIM_IC_SetPolarity+0x6e>
 80009b8:	2302      	movs	r3, #2
 80009ba:	e002      	b.n	80009c2 <LL_TIM_IC_SetPolarity+0x6e>
 80009bc:	2301      	movs	r3, #1
 80009be:	e000      	b.n	80009c2 <LL_TIM_IC_SetPolarity+0x6e>
 80009c0:	2300      	movs	r3, #0
 80009c2:	2017      	movs	r0, #23
 80009c4:	183a      	adds	r2, r7, r0
 80009c6:	7013      	strb	r3, [r2, #0]
  MODIFY_REG(TIMx->CCER, ((TIM_CCER_CC1NP | TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel]),
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	6a1b      	ldr	r3, [r3, #32]
 80009cc:	183a      	adds	r2, r7, r0
 80009ce:	7812      	ldrb	r2, [r2, #0]
 80009d0:	490a      	ldr	r1, [pc, #40]	; (80009fc <LL_TIM_IC_SetPolarity+0xa8>)
 80009d2:	5c8a      	ldrb	r2, [r1, r2]
 80009d4:	0011      	movs	r1, r2
 80009d6:	220a      	movs	r2, #10
 80009d8:	408a      	lsls	r2, r1
 80009da:	43d2      	mvns	r2, r2
 80009dc:	401a      	ands	r2, r3
 80009de:	183b      	adds	r3, r7, r0
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	4906      	ldr	r1, [pc, #24]	; (80009fc <LL_TIM_IC_SetPolarity+0xa8>)
 80009e4:	5ccb      	ldrb	r3, [r1, r3]
 80009e6:	0019      	movs	r1, r3
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	408b      	lsls	r3, r1
 80009ec:	431a      	orrs	r2, r3
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	621a      	str	r2, [r3, #32]
             ICPolarity << SHIFT_TAB_CCxP[iChannel]);
}
 80009f2:	46c0      	nop			; (mov r8, r8)
 80009f4:	46bd      	mov	sp, r7
 80009f6:	b006      	add	sp, #24
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	46c0      	nop			; (mov r8, r8)
 80009fc:	08000d9c 	.word	0x08000d9c

08000a00 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
 8000a08:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	689b      	ldr	r3, [r3, #8]
 8000a0e:	4a05      	ldr	r2, [pc, #20]	; (8000a24 <LL_TIM_SetClockSource+0x24>)
 8000a10:	401a      	ands	r2, r3
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	431a      	orrs	r2, r3
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	609a      	str	r2, [r3, #8]
}
 8000a1a:	46c0      	nop			; (mov r8, r8)
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	b002      	add	sp, #8
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	46c0      	nop			; (mov r8, r8)
 8000a24:	fffebff8 	.word	0xfffebff8

08000a28 <LL_TIM_SetRemap>:
  *  (**) Value not defined in all devices. \n
  *
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetRemap(TIM_TypeDef *TIMx, uint32_t Remap)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
 8000a30:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->TISEL, (TIM_TISEL_TI1SEL | TIM_TISEL_TI2SEL | TIM_TISEL_TI3SEL | TIM_TISEL_TI4SEL), Remap);
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000a36:	4a05      	ldr	r2, [pc, #20]	; (8000a4c <LL_TIM_SetRemap+0x24>)
 8000a38:	401a      	ands	r2, r3
 8000a3a:	683b      	ldr	r3, [r7, #0]
 8000a3c:	431a      	orrs	r2, r3
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	669a      	str	r2, [r3, #104]	; 0x68
}
 8000a42:	46c0      	nop			; (mov r8, r8)
 8000a44:	46bd      	mov	sp, r7
 8000a46:	b002      	add	sp, #8
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	46c0      	nop			; (mov r8, r8)
 8000a4c:	f0f0f0f0 	.word	0xf0f0f0f0

08000a50 <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	2202      	movs	r2, #2
 8000a5c:	4252      	negs	r2, r2
 8000a5e:	611a      	str	r2, [r3, #16]
}
 8000a60:	46c0      	nop			; (mov r8, r8)
 8000a62:	46bd      	mov	sp, r7
 8000a64:	b002      	add	sp, #8
 8000a66:	bd80      	pop	{r7, pc}

08000a68 <LL_TIM_EnableIT_CC1>:
  * @rmtoll DIER         CC1IE         LL_TIM_EnableIT_CC1
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_CC1(TIM_TypeDef *TIMx)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	68db      	ldr	r3, [r3, #12]
 8000a74:	2202      	movs	r2, #2
 8000a76:	431a      	orrs	r2, r3
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	60da      	str	r2, [r3, #12]
}
 8000a7c:	46c0      	nop			; (mov r8, r8)
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	b002      	add	sp, #8
 8000a82:	bd80      	pop	{r7, pc}

08000a84 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	695b      	ldr	r3, [r3, #20]
 8000a90:	2201      	movs	r2, #1
 8000a92:	431a      	orrs	r2, r3
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	615a      	str	r2, [r3, #20]
}
 8000a98:	46c0      	nop			; (mov r8, r8)
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	b002      	add	sp, #8
 8000a9e:	bd80      	pop	{r7, pc}

08000aa0 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
	//RCC
	LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 8000aa4:	2002      	movs	r0, #2
 8000aa6:	f7ff fd63 	bl	8000570 <LL_FLASH_SetLatency>

	LL_RCC_HSI_Enable();
 8000aaa:	f7ff fc77 	bl	800039c <LL_RCC_HSI_Enable>
	while(LL_RCC_HSI_IsReady() != 1)
 8000aae:	46c0      	nop			; (mov r8, r8)
 8000ab0:	f7ff fc82 	bl	80003b8 <LL_RCC_HSI_IsReady>
 8000ab4:	0003      	movs	r3, r0
 8000ab6:	2b01      	cmp	r3, #1
 8000ab8:	d1fa      	bne.n	8000ab0 <main+0x10>
		;

	LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_1, 8, LL_RCC_PLLR_DIV_2);
 8000aba:	2380      	movs	r3, #128	; 0x80
 8000abc:	059b      	lsls	r3, r3, #22
 8000abe:	2208      	movs	r2, #8
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	2002      	movs	r0, #2
 8000ac4:	f7ff fcfa 	bl	80004bc <LL_RCC_PLL_ConfigDomain_SYS>

	LL_RCC_PLL_Enable();
 8000ac8:	f7ff fcd6 	bl	8000478 <LL_RCC_PLL_Enable>
	while(LL_RCC_PLL_IsReady() != 1)
 8000acc:	46c0      	nop			; (mov r8, r8)
 8000ace:	f7ff fce1 	bl	8000494 <LL_RCC_PLL_IsReady>
 8000ad2:	0003      	movs	r3, r0
 8000ad4:	2b01      	cmp	r3, #1
 8000ad6:	d1fa      	bne.n	8000ace <main+0x2e>
		;

	LL_RCC_PLL_EnableDomain_SYS();
 8000ad8:	f7ff fd10 	bl	80004fc <LL_RCC_PLL_EnableDomain_SYS>

	LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000adc:	2000      	movs	r0, #0
 8000ade:	f7ff fc9f 	bl	8000420 <LL_RCC_SetAHBPrescaler>
	LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8000ae2:	2000      	movs	r0, #0
 8000ae4:	f7ff fcb2 	bl	800044c <LL_RCC_SetAPB1Prescaler>

	LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000ae8:	2002      	movs	r0, #2
 8000aea:	f7ff fc79 	bl	80003e0 <LL_RCC_SetSysClkSource>
	while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000aee:	46c0      	nop			; (mov r8, r8)
 8000af0:	f7ff fc8a 	bl	8000408 <LL_RCC_GetSysClkSource>
 8000af4:	0003      	movs	r3, r0
 8000af6:	2b10      	cmp	r3, #16
 8000af8:	d1fa      	bne.n	8000af0 <main+0x50>
		;

	LL_SetSystemCoreClock(64000000);
 8000afa:	4b45      	ldr	r3, [pc, #276]	; (8000c10 <main+0x170>)
 8000afc:	0018      	movs	r0, r3
 8000afe:	f7ff fbb7 	bl	8000270 <LL_SetSystemCoreClock>
	LL_Init1msTick(64000000);
 8000b02:	4b43      	ldr	r3, [pc, #268]	; (8000c10 <main+0x170>)
 8000b04:	0018      	movs	r0, r3
 8000b06:	f7ff fba3 	bl	8000250 <LL_Init1msTick>

	//GPIO TIM2_CH1_IC
	LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8000b0a:	2001      	movs	r0, #1
 8000b0c:	f7ff fd1a 	bl	8000544 <LL_IOP_GRP1_EnableClock>

	LL_GPIO_SetPinPull(TIM2_CH1_IC_Port, TIM2_CH1_IC_Pin, LL_GPIO_PULL_NO);
 8000b10:	23a0      	movs	r3, #160	; 0xa0
 8000b12:	05db      	lsls	r3, r3, #23
 8000b14:	2200      	movs	r2, #0
 8000b16:	2101      	movs	r1, #1
 8000b18:	0018      	movs	r0, r3
 8000b1a:	f7ff fd75 	bl	8000608 <LL_GPIO_SetPinPull>
	LL_GPIO_SetPinSpeed(TIM2_CH1_IC_Port, TIM2_CH1_IC_Pin, LL_GPIO_SPEED_FREQ_LOW);
 8000b1e:	23a0      	movs	r3, #160	; 0xa0
 8000b20:	05db      	lsls	r3, r3, #23
 8000b22:	2200      	movs	r2, #0
 8000b24:	2101      	movs	r1, #1
 8000b26:	0018      	movs	r0, r3
 8000b28:	f7ff fd52 	bl	80005d0 <LL_GPIO_SetPinSpeed>
	LL_GPIO_SetAFPin_0_7(TIM2_CH1_IC_Port, TIM2_CH1_IC_Pin, LL_GPIO_AF_2);
 8000b2c:	23a0      	movs	r3, #160	; 0xa0
 8000b2e:	05db      	lsls	r3, r3, #23
 8000b30:	2202      	movs	r2, #2
 8000b32:	2101      	movs	r1, #1
 8000b34:	0018      	movs	r0, r3
 8000b36:	f7ff fd83 	bl	8000640 <LL_GPIO_SetAFPin_0_7>
	LL_GPIO_SetPinMode(TIM2_CH1_IC_Port, TIM2_CH1_IC_Pin, LL_GPIO_MODE_ALTERNATE);
 8000b3a:	23a0      	movs	r3, #160	; 0xa0
 8000b3c:	05db      	lsls	r3, r3, #23
 8000b3e:	2202      	movs	r2, #2
 8000b40:	2101      	movs	r1, #1
 8000b42:	0018      	movs	r0, r3
 8000b44:	f7ff fd28 	bl	8000598 <LL_GPIO_SetPinMode>

	//TIMER BASE
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8000b48:	2001      	movs	r0, #1
 8000b4a:	f7ff fce5 	bl	8000518 <LL_APB1_GRP1_EnableClock>

	LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 8000b4e:	2380      	movs	r3, #128	; 0x80
 8000b50:	05db      	lsls	r3, r3, #23
 8000b52:	2100      	movs	r1, #0
 8000b54:	0018      	movs	r0, r3
 8000b56:	f7ff ff53 	bl	8000a00 <LL_TIM_SetClockSource>
	LL_TIM_SetCounterMode(TIM2, LL_TIM_COUNTERMODE_UP);
 8000b5a:	2380      	movs	r3, #128	; 0x80
 8000b5c:	05db      	lsls	r3, r3, #23
 8000b5e:	2100      	movs	r1, #0
 8000b60:	0018      	movs	r0, r3
 8000b62:	f7ff fd9e 	bl	80006a2 <LL_TIM_SetCounterMode>

	LL_TIM_SetPrescaler(TIM2, 64000-1);
 8000b66:	4a2b      	ldr	r2, [pc, #172]	; (8000c14 <main+0x174>)
 8000b68:	2380      	movs	r3, #128	; 0x80
 8000b6a:	05db      	lsls	r3, r3, #23
 8000b6c:	0011      	movs	r1, r2
 8000b6e:	0018      	movs	r0, r3
 8000b70:	f7ff fda9 	bl	80006c6 <LL_TIM_SetPrescaler>
	LL_TIM_SetAutoReload(TIM2, UINT32_MAX);
 8000b74:	2301      	movs	r3, #1
 8000b76:	425a      	negs	r2, r3
 8000b78:	2380      	movs	r3, #128	; 0x80
 8000b7a:	05db      	lsls	r3, r3, #23
 8000b7c:	0011      	movs	r1, r2
 8000b7e:	0018      	movs	r0, r3
 8000b80:	f7ff fdad 	bl	80006de <LL_TIM_SetAutoReload>
	LL_TIM_GenerateEvent_UPDATE(TIM2);
 8000b84:	2380      	movs	r3, #128	; 0x80
 8000b86:	05db      	lsls	r3, r3, #23
 8000b88:	0018      	movs	r0, r3
 8000b8a:	f7ff ff7b 	bl	8000a84 <LL_TIM_GenerateEvent_UPDATE>

	LL_TIM_ClearFlag_UPDATE(TIM2);
 8000b8e:	2380      	movs	r3, #128	; 0x80
 8000b90:	05db      	lsls	r3, r3, #23
 8000b92:	0018      	movs	r0, r3
 8000b94:	f7ff ff5c 	bl	8000a50 <LL_TIM_ClearFlag_UPDATE>

	//TIM2_CH1
	LL_TIM_SetRemap(TIM2, LL_TIM_TIM2_TI1_RMP_GPIO);
 8000b98:	2380      	movs	r3, #128	; 0x80
 8000b9a:	05db      	lsls	r3, r3, #23
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	0018      	movs	r0, r3
 8000ba0:	f7ff ff42 	bl	8000a28 <LL_TIM_SetRemap>
	LL_TIM_IC_SetActiveInput(TIM2, LL_TIM_CHANNEL_CH1, LL_TIM_ACTIVEINPUT_DIRECTTI);
 8000ba4:	2380      	movs	r3, #128	; 0x80
 8000ba6:	025a      	lsls	r2, r3, #9
 8000ba8:	2380      	movs	r3, #128	; 0x80
 8000baa:	05db      	lsls	r3, r3, #23
 8000bac:	2101      	movs	r1, #1
 8000bae:	0018      	movs	r0, r3
 8000bb0:	f7ff fdb0 	bl	8000714 <LL_TIM_IC_SetActiveInput>
	LL_TIM_IC_SetFilter(TIM2, LL_TIM_CHANNEL_CH1, LL_TIM_IC_FILTER_FDIV1);
 8000bb4:	2380      	movs	r3, #128	; 0x80
 8000bb6:	05db      	lsls	r3, r3, #23
 8000bb8:	2200      	movs	r2, #0
 8000bba:	2101      	movs	r1, #1
 8000bbc:	0018      	movs	r0, r3
 8000bbe:	f7ff fe69 	bl	8000894 <LL_TIM_IC_SetFilter>
	LL_TIM_IC_SetPolarity(TIM2, LL_TIM_CHANNEL_CH1, LL_TIM_IC_POLARITY_RISING);
 8000bc2:	2380      	movs	r3, #128	; 0x80
 8000bc4:	05db      	lsls	r3, r3, #23
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	2101      	movs	r1, #1
 8000bca:	0018      	movs	r0, r3
 8000bcc:	f7ff fec2 	bl	8000954 <LL_TIM_IC_SetPolarity>
	LL_TIM_IC_SetPrescaler(TIM2, LL_TIM_CHANNEL_CH1, LL_TIM_ICPSC_DIV1);
 8000bd0:	2380      	movs	r3, #128	; 0x80
 8000bd2:	05db      	lsls	r3, r3, #23
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	2101      	movs	r1, #1
 8000bd8:	0018      	movs	r0, r3
 8000bda:	f7ff fdfb 	bl	80007d4 <LL_TIM_IC_SetPrescaler>

	NVIC_SetPriority(TIM2_IRQn, 0);
 8000bde:	2100      	movs	r1, #0
 8000be0:	200f      	movs	r0, #15
 8000be2:	f7ff fb6d 	bl	80002c0 <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM2_IRQn);
 8000be6:	200f      	movs	r0, #15
 8000be8:	f7ff fb50 	bl	800028c <__NVIC_EnableIRQ>

	LL_TIM_EnableIT_CC1(TIM2);
 8000bec:	2380      	movs	r3, #128	; 0x80
 8000bee:	05db      	lsls	r3, r3, #23
 8000bf0:	0018      	movs	r0, r3
 8000bf2:	f7ff ff39 	bl	8000a68 <LL_TIM_EnableIT_CC1>

	LL_TIM_CC_EnableChannel(TIM2, LL_TIM_CHANNEL_CH1);
 8000bf6:	2380      	movs	r3, #128	; 0x80
 8000bf8:	05db      	lsls	r3, r3, #23
 8000bfa:	2101      	movs	r1, #1
 8000bfc:	0018      	movs	r0, r3
 8000bfe:	f7ff fd7a 	bl	80006f6 <LL_TIM_CC_EnableChannel>
	LL_TIM_EnableCounter(TIM2);
 8000c02:	2380      	movs	r3, #128	; 0x80
 8000c04:	05db      	lsls	r3, r3, #23
 8000c06:	0018      	movs	r0, r3
 8000c08:	f7ff fd3d 	bl	8000686 <LL_TIM_EnableCounter>

	while (1)
 8000c0c:	e7fe      	b.n	8000c0c <main+0x16c>
 8000c0e:	46c0      	nop			; (mov r8, r8)
 8000c10:	03d09000 	.word	0x03d09000
 8000c14:	0000f9ff 	.word	0x0000f9ff

08000c18 <LL_TIM_SetCounter>:
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
 8000c20:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CNT, Counter);
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	683a      	ldr	r2, [r7, #0]
 8000c26:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000c28:	46c0      	nop			; (mov r8, r8)
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	b002      	add	sp, #8
 8000c2e:	bd80      	pop	{r7, pc}

08000c30 <LL_TIM_IC_GetCaptureCH1>:
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(TIMx->CCR1));
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
}
 8000c3c:	0018      	movs	r0, r3
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	b002      	add	sp, #8
 8000c42:	bd80      	pop	{r7, pc}

08000c44 <LL_TIM_ClearFlag_CC1>:
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	2203      	movs	r2, #3
 8000c50:	4252      	negs	r2, r2
 8000c52:	611a      	str	r2, [r3, #16]
}
 8000c54:	46c0      	nop			; (mov r8, r8)
 8000c56:	46bd      	mov	sp, r7
 8000c58:	b002      	add	sp, #8
 8000c5a:	bd80      	pop	{r7, pc}

08000c5c <LL_TIM_IsActiveFlag_CC1>:
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	691b      	ldr	r3, [r3, #16]
 8000c68:	2202      	movs	r2, #2
 8000c6a:	4013      	ands	r3, r2
 8000c6c:	2b02      	cmp	r3, #2
 8000c6e:	d101      	bne.n	8000c74 <LL_TIM_IsActiveFlag_CC1+0x18>
 8000c70:	2301      	movs	r3, #1
 8000c72:	e000      	b.n	8000c76 <LL_TIM_IsActiveFlag_CC1+0x1a>
 8000c74:	2300      	movs	r3, #0
}
 8000c76:	0018      	movs	r0, r3
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	b002      	add	sp, #8
 8000c7c:	bd80      	pop	{r7, pc}
	...

08000c80 <TIM2_IRQHandler>:
#include "main.h"

uint32_t push_diff_time_ms = 0;

void TIM2_IRQHandler(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
	if(LL_TIM_IsActiveFlag_CC1(TIM2) == 1)
 8000c84:	2380      	movs	r3, #128	; 0x80
 8000c86:	05db      	lsls	r3, r3, #23
 8000c88:	0018      	movs	r0, r3
 8000c8a:	f7ff ffe7 	bl	8000c5c <LL_TIM_IsActiveFlag_CC1>
 8000c8e:	0003      	movs	r3, r0
 8000c90:	2b01      	cmp	r3, #1
 8000c92:	d112      	bne.n	8000cba <TIM2_IRQHandler+0x3a>
	{
		LL_TIM_ClearFlag_CC1(TIM2);
 8000c94:	2380      	movs	r3, #128	; 0x80
 8000c96:	05db      	lsls	r3, r3, #23
 8000c98:	0018      	movs	r0, r3
 8000c9a:	f7ff ffd3 	bl	8000c44 <LL_TIM_ClearFlag_CC1>
		push_diff_time_ms = LL_TIM_IC_GetCaptureCH1(TIM2);
 8000c9e:	2380      	movs	r3, #128	; 0x80
 8000ca0:	05db      	lsls	r3, r3, #23
 8000ca2:	0018      	movs	r0, r3
 8000ca4:	f7ff ffc4 	bl	8000c30 <LL_TIM_IC_GetCaptureCH1>
 8000ca8:	0002      	movs	r2, r0
 8000caa:	4b05      	ldr	r3, [pc, #20]	; (8000cc0 <TIM2_IRQHandler+0x40>)
 8000cac:	601a      	str	r2, [r3, #0]
		LL_TIM_SetCounter(TIM2, 0UL);
 8000cae:	2380      	movs	r3, #128	; 0x80
 8000cb0:	05db      	lsls	r3, r3, #23
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	0018      	movs	r0, r3
 8000cb6:	f7ff ffaf 	bl	8000c18 <LL_TIM_SetCounter>
	}
}
 8000cba:	46c0      	nop			; (mov r8, r8)
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	20000020 	.word	0x20000020

08000cc4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cc8:	46c0      	nop			; (mov r8, r8)
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
	...

08000cd0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000cd0:	480d      	ldr	r0, [pc, #52]	; (8000d08 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000cd2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000cd4:	f7ff fff6 	bl	8000cc4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cd8:	480c      	ldr	r0, [pc, #48]	; (8000d0c <LoopForever+0x6>)
  ldr r1, =_edata
 8000cda:	490d      	ldr	r1, [pc, #52]	; (8000d10 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cdc:	4a0d      	ldr	r2, [pc, #52]	; (8000d14 <LoopForever+0xe>)
  movs r3, #0
 8000cde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ce0:	e002      	b.n	8000ce8 <LoopCopyDataInit>

08000ce2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ce2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ce4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ce6:	3304      	adds	r3, #4

08000ce8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ce8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cec:	d3f9      	bcc.n	8000ce2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cee:	4a0a      	ldr	r2, [pc, #40]	; (8000d18 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cf0:	4c0a      	ldr	r4, [pc, #40]	; (8000d1c <LoopForever+0x16>)
  movs r3, #0
 8000cf2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cf4:	e001      	b.n	8000cfa <LoopFillZerobss>

08000cf6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cf6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cf8:	3204      	adds	r2, #4

08000cfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cfc:	d3fb      	bcc.n	8000cf6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000cfe:	f000 f811 	bl	8000d24 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d02:	f7ff fecd 	bl	8000aa0 <main>

08000d06 <LoopForever>:

LoopForever:
    b LoopForever
 8000d06:	e7fe      	b.n	8000d06 <LoopForever>
  ldr   r0, =_estack
 8000d08:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000d0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d10:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000d14:	08000db0 	.word	0x08000db0
  ldr r2, =_sbss
 8000d18:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000d1c:	20000024 	.word	0x20000024

08000d20 <ADC_COMP_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d20:	e7fe      	b.n	8000d20 <ADC_COMP_IRQHandler>
	...

08000d24 <__libc_init_array>:
 8000d24:	b570      	push	{r4, r5, r6, lr}
 8000d26:	2600      	movs	r6, #0
 8000d28:	4d0c      	ldr	r5, [pc, #48]	; (8000d5c <__libc_init_array+0x38>)
 8000d2a:	4c0d      	ldr	r4, [pc, #52]	; (8000d60 <__libc_init_array+0x3c>)
 8000d2c:	1b64      	subs	r4, r4, r5
 8000d2e:	10a4      	asrs	r4, r4, #2
 8000d30:	42a6      	cmp	r6, r4
 8000d32:	d109      	bne.n	8000d48 <__libc_init_array+0x24>
 8000d34:	2600      	movs	r6, #0
 8000d36:	f000 f819 	bl	8000d6c <_init>
 8000d3a:	4d0a      	ldr	r5, [pc, #40]	; (8000d64 <__libc_init_array+0x40>)
 8000d3c:	4c0a      	ldr	r4, [pc, #40]	; (8000d68 <__libc_init_array+0x44>)
 8000d3e:	1b64      	subs	r4, r4, r5
 8000d40:	10a4      	asrs	r4, r4, #2
 8000d42:	42a6      	cmp	r6, r4
 8000d44:	d105      	bne.n	8000d52 <__libc_init_array+0x2e>
 8000d46:	bd70      	pop	{r4, r5, r6, pc}
 8000d48:	00b3      	lsls	r3, r6, #2
 8000d4a:	58eb      	ldr	r3, [r5, r3]
 8000d4c:	4798      	blx	r3
 8000d4e:	3601      	adds	r6, #1
 8000d50:	e7ee      	b.n	8000d30 <__libc_init_array+0xc>
 8000d52:	00b3      	lsls	r3, r6, #2
 8000d54:	58eb      	ldr	r3, [r5, r3]
 8000d56:	4798      	blx	r3
 8000d58:	3601      	adds	r6, #1
 8000d5a:	e7f2      	b.n	8000d42 <__libc_init_array+0x1e>
 8000d5c:	08000da8 	.word	0x08000da8
 8000d60:	08000da8 	.word	0x08000da8
 8000d64:	08000da8 	.word	0x08000da8
 8000d68:	08000dac 	.word	0x08000dac

08000d6c <_init>:
 8000d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d6e:	46c0      	nop			; (mov r8, r8)
 8000d70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d72:	bc08      	pop	{r3}
 8000d74:	469e      	mov	lr, r3
 8000d76:	4770      	bx	lr

08000d78 <_fini>:
 8000d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d7a:	46c0      	nop			; (mov r8, r8)
 8000d7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d7e:	bc08      	pop	{r3}
 8000d80:	469e      	mov	lr, r3
 8000d82:	4770      	bx	lr
