
03_04_Kurs_STM32_LL_EXTI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000888  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000944  08000944  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000944  08000944  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000944  08000944  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000944  08000944  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000944  08000944  00010944  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000948  08000948  00010948  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  0800094c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000004  08000950  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000950  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001c42  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000066f  00000000  00000000  00021c6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000238  00000000  00000000  000222e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001f0  00000000  00000000  00022518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000f52d  00000000  00000000  00022708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001e48  00000000  00000000  00031c35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005b299  00000000  00000000  00033a7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0008ed16  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000006fc  00000000  00000000  0008ed68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000004 	.word	0x20000004
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800092c 	.word	0x0800092c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000008 	.word	0x20000008
 8000100:	0800092c 	.word	0x0800092c

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
 8000222:	6078      	str	r0, [r7, #4]
 8000224:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8000226:	6839      	ldr	r1, [r7, #0]
 8000228:	6878      	ldr	r0, [r7, #4]
 800022a:	f7ff ff6b 	bl	8000104 <__udivsi3>
 800022e:	0003      	movs	r3, r0
 8000230:	001a      	movs	r2, r3
 8000232:	4b06      	ldr	r3, [pc, #24]	; (800024c <LL_InitTick+0x30>)
 8000234:	3a01      	subs	r2, #1
 8000236:	605a      	str	r2, [r3, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8000238:	4b04      	ldr	r3, [pc, #16]	; (800024c <LL_InitTick+0x30>)
 800023a:	2200      	movs	r2, #0
 800023c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800023e:	4b03      	ldr	r3, [pc, #12]	; (800024c <LL_InitTick+0x30>)
 8000240:	2205      	movs	r2, #5
 8000242:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8000244:	46c0      	nop			; (mov r8, r8)
 8000246:	46bd      	mov	sp, r7
 8000248:	b002      	add	sp, #8
 800024a:	bd80      	pop	{r7, pc}
 800024c:	e000e010 	.word	0xe000e010

08000250 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b082      	sub	sp, #8
 8000254:	af00      	add	r7, sp, #0
 8000256:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8000258:	23fa      	movs	r3, #250	; 0xfa
 800025a:	009a      	lsls	r2, r3, #2
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	0011      	movs	r1, r2
 8000260:	0018      	movs	r0, r3
 8000262:	f7ff ffdb 	bl	800021c <LL_InitTick>
}
 8000266:	46c0      	nop			; (mov r8, r8)
 8000268:	46bd      	mov	sp, r7
 800026a:	b002      	add	sp, #8
 800026c:	bd80      	pop	{r7, pc}
	...

08000270 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8000278:	4b03      	ldr	r3, [pc, #12]	; (8000288 <LL_SetSystemCoreClock+0x18>)
 800027a:	687a      	ldr	r2, [r7, #4]
 800027c:	601a      	str	r2, [r3, #0]
}
 800027e:	46c0      	nop			; (mov r8, r8)
 8000280:	46bd      	mov	sp, r7
 8000282:	b002      	add	sp, #8
 8000284:	bd80      	pop	{r7, pc}
 8000286:	46c0      	nop			; (mov r8, r8)
 8000288:	20000000 	.word	0x20000000

0800028c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	b082      	sub	sp, #8
 8000290:	af00      	add	r7, sp, #0
 8000292:	0002      	movs	r2, r0
 8000294:	1dfb      	adds	r3, r7, #7
 8000296:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000298:	1dfb      	adds	r3, r7, #7
 800029a:	781b      	ldrb	r3, [r3, #0]
 800029c:	2b7f      	cmp	r3, #127	; 0x7f
 800029e:	d809      	bhi.n	80002b4 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002a0:	1dfb      	adds	r3, r7, #7
 80002a2:	781b      	ldrb	r3, [r3, #0]
 80002a4:	001a      	movs	r2, r3
 80002a6:	231f      	movs	r3, #31
 80002a8:	401a      	ands	r2, r3
 80002aa:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__NVIC_EnableIRQ+0x30>)
 80002ac:	2101      	movs	r1, #1
 80002ae:	4091      	lsls	r1, r2
 80002b0:	000a      	movs	r2, r1
 80002b2:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80002b4:	46c0      	nop			; (mov r8, r8)
 80002b6:	46bd      	mov	sp, r7
 80002b8:	b002      	add	sp, #8
 80002ba:	bd80      	pop	{r7, pc}
 80002bc:	e000e100 	.word	0xe000e100

080002c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002c0:	b590      	push	{r4, r7, lr}
 80002c2:	b083      	sub	sp, #12
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	0002      	movs	r2, r0
 80002c8:	6039      	str	r1, [r7, #0]
 80002ca:	1dfb      	adds	r3, r7, #7
 80002cc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80002ce:	1dfb      	adds	r3, r7, #7
 80002d0:	781b      	ldrb	r3, [r3, #0]
 80002d2:	2b7f      	cmp	r3, #127	; 0x7f
 80002d4:	d828      	bhi.n	8000328 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002d6:	4a2f      	ldr	r2, [pc, #188]	; (8000394 <__NVIC_SetPriority+0xd4>)
 80002d8:	1dfb      	adds	r3, r7, #7
 80002da:	781b      	ldrb	r3, [r3, #0]
 80002dc:	b25b      	sxtb	r3, r3
 80002de:	089b      	lsrs	r3, r3, #2
 80002e0:	33c0      	adds	r3, #192	; 0xc0
 80002e2:	009b      	lsls	r3, r3, #2
 80002e4:	589b      	ldr	r3, [r3, r2]
 80002e6:	1dfa      	adds	r2, r7, #7
 80002e8:	7812      	ldrb	r2, [r2, #0]
 80002ea:	0011      	movs	r1, r2
 80002ec:	2203      	movs	r2, #3
 80002ee:	400a      	ands	r2, r1
 80002f0:	00d2      	lsls	r2, r2, #3
 80002f2:	21ff      	movs	r1, #255	; 0xff
 80002f4:	4091      	lsls	r1, r2
 80002f6:	000a      	movs	r2, r1
 80002f8:	43d2      	mvns	r2, r2
 80002fa:	401a      	ands	r2, r3
 80002fc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002fe:	683b      	ldr	r3, [r7, #0]
 8000300:	019b      	lsls	r3, r3, #6
 8000302:	22ff      	movs	r2, #255	; 0xff
 8000304:	401a      	ands	r2, r3
 8000306:	1dfb      	adds	r3, r7, #7
 8000308:	781b      	ldrb	r3, [r3, #0]
 800030a:	0018      	movs	r0, r3
 800030c:	2303      	movs	r3, #3
 800030e:	4003      	ands	r3, r0
 8000310:	00db      	lsls	r3, r3, #3
 8000312:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000314:	481f      	ldr	r0, [pc, #124]	; (8000394 <__NVIC_SetPriority+0xd4>)
 8000316:	1dfb      	adds	r3, r7, #7
 8000318:	781b      	ldrb	r3, [r3, #0]
 800031a:	b25b      	sxtb	r3, r3
 800031c:	089b      	lsrs	r3, r3, #2
 800031e:	430a      	orrs	r2, r1
 8000320:	33c0      	adds	r3, #192	; 0xc0
 8000322:	009b      	lsls	r3, r3, #2
 8000324:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000326:	e031      	b.n	800038c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000328:	4a1b      	ldr	r2, [pc, #108]	; (8000398 <__NVIC_SetPriority+0xd8>)
 800032a:	1dfb      	adds	r3, r7, #7
 800032c:	781b      	ldrb	r3, [r3, #0]
 800032e:	0019      	movs	r1, r3
 8000330:	230f      	movs	r3, #15
 8000332:	400b      	ands	r3, r1
 8000334:	3b08      	subs	r3, #8
 8000336:	089b      	lsrs	r3, r3, #2
 8000338:	3306      	adds	r3, #6
 800033a:	009b      	lsls	r3, r3, #2
 800033c:	18d3      	adds	r3, r2, r3
 800033e:	3304      	adds	r3, #4
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	1dfa      	adds	r2, r7, #7
 8000344:	7812      	ldrb	r2, [r2, #0]
 8000346:	0011      	movs	r1, r2
 8000348:	2203      	movs	r2, #3
 800034a:	400a      	ands	r2, r1
 800034c:	00d2      	lsls	r2, r2, #3
 800034e:	21ff      	movs	r1, #255	; 0xff
 8000350:	4091      	lsls	r1, r2
 8000352:	000a      	movs	r2, r1
 8000354:	43d2      	mvns	r2, r2
 8000356:	401a      	ands	r2, r3
 8000358:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800035a:	683b      	ldr	r3, [r7, #0]
 800035c:	019b      	lsls	r3, r3, #6
 800035e:	22ff      	movs	r2, #255	; 0xff
 8000360:	401a      	ands	r2, r3
 8000362:	1dfb      	adds	r3, r7, #7
 8000364:	781b      	ldrb	r3, [r3, #0]
 8000366:	0018      	movs	r0, r3
 8000368:	2303      	movs	r3, #3
 800036a:	4003      	ands	r3, r0
 800036c:	00db      	lsls	r3, r3, #3
 800036e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000370:	4809      	ldr	r0, [pc, #36]	; (8000398 <__NVIC_SetPriority+0xd8>)
 8000372:	1dfb      	adds	r3, r7, #7
 8000374:	781b      	ldrb	r3, [r3, #0]
 8000376:	001c      	movs	r4, r3
 8000378:	230f      	movs	r3, #15
 800037a:	4023      	ands	r3, r4
 800037c:	3b08      	subs	r3, #8
 800037e:	089b      	lsrs	r3, r3, #2
 8000380:	430a      	orrs	r2, r1
 8000382:	3306      	adds	r3, #6
 8000384:	009b      	lsls	r3, r3, #2
 8000386:	18c3      	adds	r3, r0, r3
 8000388:	3304      	adds	r3, #4
 800038a:	601a      	str	r2, [r3, #0]
}
 800038c:	46c0      	nop			; (mov r8, r8)
 800038e:	46bd      	mov	sp, r7
 8000390:	b003      	add	sp, #12
 8000392:	bd90      	pop	{r4, r7, pc}
 8000394:	e000e100 	.word	0xe000e100
 8000398:	e000ed00 	.word	0xe000ed00

0800039c <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80003a0:	4b04      	ldr	r3, [pc, #16]	; (80003b4 <LL_RCC_HSI_Enable+0x18>)
 80003a2:	681a      	ldr	r2, [r3, #0]
 80003a4:	4b03      	ldr	r3, [pc, #12]	; (80003b4 <LL_RCC_HSI_Enable+0x18>)
 80003a6:	2180      	movs	r1, #128	; 0x80
 80003a8:	0049      	lsls	r1, r1, #1
 80003aa:	430a      	orrs	r2, r1
 80003ac:	601a      	str	r2, [r3, #0]
}
 80003ae:	46c0      	nop			; (mov r8, r8)
 80003b0:	46bd      	mov	sp, r7
 80003b2:	bd80      	pop	{r7, pc}
 80003b4:	40021000 	.word	0x40021000

080003b8 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80003bc:	4b07      	ldr	r3, [pc, #28]	; (80003dc <LL_RCC_HSI_IsReady+0x24>)
 80003be:	681a      	ldr	r2, [r3, #0]
 80003c0:	2380      	movs	r3, #128	; 0x80
 80003c2:	00db      	lsls	r3, r3, #3
 80003c4:	401a      	ands	r2, r3
 80003c6:	2380      	movs	r3, #128	; 0x80
 80003c8:	00db      	lsls	r3, r3, #3
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d101      	bne.n	80003d2 <LL_RCC_HSI_IsReady+0x1a>
 80003ce:	2301      	movs	r3, #1
 80003d0:	e000      	b.n	80003d4 <LL_RCC_HSI_IsReady+0x1c>
 80003d2:	2300      	movs	r3, #0
}
 80003d4:	0018      	movs	r0, r3
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bd80      	pop	{r7, pc}
 80003da:	46c0      	nop			; (mov r8, r8)
 80003dc:	40021000 	.word	0x40021000

080003e0 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_LSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_LSE
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b082      	sub	sp, #8
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80003e8:	4b06      	ldr	r3, [pc, #24]	; (8000404 <LL_RCC_SetSysClkSource+0x24>)
 80003ea:	689b      	ldr	r3, [r3, #8]
 80003ec:	2207      	movs	r2, #7
 80003ee:	4393      	bics	r3, r2
 80003f0:	0019      	movs	r1, r3
 80003f2:	4b04      	ldr	r3, [pc, #16]	; (8000404 <LL_RCC_SetSysClkSource+0x24>)
 80003f4:	687a      	ldr	r2, [r7, #4]
 80003f6:	430a      	orrs	r2, r1
 80003f8:	609a      	str	r2, [r3, #8]
}
 80003fa:	46c0      	nop			; (mov r8, r8)
 80003fc:	46bd      	mov	sp, r7
 80003fe:	b002      	add	sp, #8
 8000400:	bd80      	pop	{r7, pc}
 8000402:	46c0      	nop			; (mov r8, r8)
 8000404:	40021000 	.word	0x40021000

08000408 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_LSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800040c:	4b03      	ldr	r3, [pc, #12]	; (800041c <LL_RCC_GetSysClkSource+0x14>)
 800040e:	689b      	ldr	r3, [r3, #8]
 8000410:	2238      	movs	r2, #56	; 0x38
 8000412:	4013      	ands	r3, r2
}
 8000414:	0018      	movs	r0, r3
 8000416:	46bd      	mov	sp, r7
 8000418:	bd80      	pop	{r7, pc}
 800041a:	46c0      	nop			; (mov r8, r8)
 800041c:	40021000 	.word	0x40021000

08000420 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b082      	sub	sp, #8
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000428:	4b06      	ldr	r3, [pc, #24]	; (8000444 <LL_RCC_SetAHBPrescaler+0x24>)
 800042a:	689b      	ldr	r3, [r3, #8]
 800042c:	4a06      	ldr	r2, [pc, #24]	; (8000448 <LL_RCC_SetAHBPrescaler+0x28>)
 800042e:	4013      	ands	r3, r2
 8000430:	0019      	movs	r1, r3
 8000432:	4b04      	ldr	r3, [pc, #16]	; (8000444 <LL_RCC_SetAHBPrescaler+0x24>)
 8000434:	687a      	ldr	r2, [r7, #4]
 8000436:	430a      	orrs	r2, r1
 8000438:	609a      	str	r2, [r3, #8]
}
 800043a:	46c0      	nop			; (mov r8, r8)
 800043c:	46bd      	mov	sp, r7
 800043e:	b002      	add	sp, #8
 8000440:	bd80      	pop	{r7, pc}
 8000442:	46c0      	nop			; (mov r8, r8)
 8000444:	40021000 	.word	0x40021000
 8000448:	fffff0ff 	.word	0xfffff0ff

0800044c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b082      	sub	sp, #8
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, Prescaler);
 8000454:	4b06      	ldr	r3, [pc, #24]	; (8000470 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000456:	689b      	ldr	r3, [r3, #8]
 8000458:	4a06      	ldr	r2, [pc, #24]	; (8000474 <LL_RCC_SetAPB1Prescaler+0x28>)
 800045a:	4013      	ands	r3, r2
 800045c:	0019      	movs	r1, r3
 800045e:	4b04      	ldr	r3, [pc, #16]	; (8000470 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000460:	687a      	ldr	r2, [r7, #4]
 8000462:	430a      	orrs	r2, r1
 8000464:	609a      	str	r2, [r3, #8]
}
 8000466:	46c0      	nop			; (mov r8, r8)
 8000468:	46bd      	mov	sp, r7
 800046a:	b002      	add	sp, #8
 800046c:	bd80      	pop	{r7, pc}
 800046e:	46c0      	nop			; (mov r8, r8)
 8000470:	40021000 	.word	0x40021000
 8000474:	ffff8fff 	.word	0xffff8fff

08000478 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800047c:	4b04      	ldr	r3, [pc, #16]	; (8000490 <LL_RCC_PLL_Enable+0x18>)
 800047e:	681a      	ldr	r2, [r3, #0]
 8000480:	4b03      	ldr	r3, [pc, #12]	; (8000490 <LL_RCC_PLL_Enable+0x18>)
 8000482:	2180      	movs	r1, #128	; 0x80
 8000484:	0449      	lsls	r1, r1, #17
 8000486:	430a      	orrs	r2, r1
 8000488:	601a      	str	r2, [r3, #0]
}
 800048a:	46c0      	nop			; (mov r8, r8)
 800048c:	46bd      	mov	sp, r7
 800048e:	bd80      	pop	{r7, pc}
 8000490:	40021000 	.word	0x40021000

08000494 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8000498:	4b07      	ldr	r3, [pc, #28]	; (80004b8 <LL_RCC_PLL_IsReady+0x24>)
 800049a:	681a      	ldr	r2, [r3, #0]
 800049c:	2380      	movs	r3, #128	; 0x80
 800049e:	049b      	lsls	r3, r3, #18
 80004a0:	401a      	ands	r2, r3
 80004a2:	2380      	movs	r3, #128	; 0x80
 80004a4:	049b      	lsls	r3, r3, #18
 80004a6:	429a      	cmp	r2, r3
 80004a8:	d101      	bne.n	80004ae <LL_RCC_PLL_IsReady+0x1a>
 80004aa:	2301      	movs	r3, #1
 80004ac:	e000      	b.n	80004b0 <LL_RCC_PLL_IsReady+0x1c>
 80004ae:	2300      	movs	r3, #0
}
 80004b0:	0018      	movs	r0, r3
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bd80      	pop	{r7, pc}
 80004b6:	46c0      	nop			; (mov r8, r8)
 80004b8:	40021000 	.word	0x40021000

080004bc <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b084      	sub	sp, #16
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	60f8      	str	r0, [r7, #12]
 80004c4:	60b9      	str	r1, [r7, #8]
 80004c6:	607a      	str	r2, [r7, #4]
 80004c8:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 80004ca:	4b0a      	ldr	r3, [pc, #40]	; (80004f4 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 80004cc:	68db      	ldr	r3, [r3, #12]
 80004ce:	4a0a      	ldr	r2, [pc, #40]	; (80004f8 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 80004d0:	4013      	ands	r3, r2
 80004d2:	0019      	movs	r1, r3
 80004d4:	68fa      	ldr	r2, [r7, #12]
 80004d6:	68bb      	ldr	r3, [r7, #8]
 80004d8:	431a      	orrs	r2, r3
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	021b      	lsls	r3, r3, #8
 80004de:	431a      	orrs	r2, r3
 80004e0:	683b      	ldr	r3, [r7, #0]
 80004e2:	431a      	orrs	r2, r3
 80004e4:	4b03      	ldr	r3, [pc, #12]	; (80004f4 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 80004e6:	430a      	orrs	r2, r1
 80004e8:	60da      	str	r2, [r3, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 80004ea:	46c0      	nop			; (mov r8, r8)
 80004ec:	46bd      	mov	sp, r7
 80004ee:	b004      	add	sp, #16
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	46c0      	nop			; (mov r8, r8)
 80004f4:	40021000 	.word	0x40021000
 80004f8:	1fff808c 	.word	0x1fff808c

080004fc <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 8000500:	4b04      	ldr	r3, [pc, #16]	; (8000514 <LL_RCC_PLL_EnableDomain_SYS+0x18>)
 8000502:	68da      	ldr	r2, [r3, #12]
 8000504:	4b03      	ldr	r3, [pc, #12]	; (8000514 <LL_RCC_PLL_EnableDomain_SYS+0x18>)
 8000506:	2180      	movs	r1, #128	; 0x80
 8000508:	0549      	lsls	r1, r1, #21
 800050a:	430a      	orrs	r2, r1
 800050c:	60da      	str	r2, [r3, #12]
}
 800050e:	46c0      	nop			; (mov r8, r8)
 8000510:	46bd      	mov	sp, r7
 8000512:	bd80      	pop	{r7, pc}
 8000514:	40021000 	.word	0x40021000

08000518 <LL_IOP_GRP1_EnableClock>:
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOE
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOF
  * @retval None
  */
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b084      	sub	sp, #16
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 8000520:	4b07      	ldr	r3, [pc, #28]	; (8000540 <LL_IOP_GRP1_EnableClock+0x28>)
 8000522:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000524:	4b06      	ldr	r3, [pc, #24]	; (8000540 <LL_IOP_GRP1_EnableClock+0x28>)
 8000526:	687a      	ldr	r2, [r7, #4]
 8000528:	430a      	orrs	r2, r1
 800052a:	635a      	str	r2, [r3, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 800052c:	4b04      	ldr	r3, [pc, #16]	; (8000540 <LL_IOP_GRP1_EnableClock+0x28>)
 800052e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000530:	687a      	ldr	r2, [r7, #4]
 8000532:	4013      	ands	r3, r2
 8000534:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000536:	68fb      	ldr	r3, [r7, #12]
}
 8000538:	46c0      	nop			; (mov r8, r8)
 800053a:	46bd      	mov	sp, r7
 800053c:	b004      	add	sp, #16
 800053e:	bd80      	pop	{r7, pc}
 8000540:	40021000 	.word	0x40021000

08000544 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 800054c:	4b06      	ldr	r3, [pc, #24]	; (8000568 <LL_FLASH_SetLatency+0x24>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	2207      	movs	r2, #7
 8000552:	4393      	bics	r3, r2
 8000554:	0019      	movs	r1, r3
 8000556:	4b04      	ldr	r3, [pc, #16]	; (8000568 <LL_FLASH_SetLatency+0x24>)
 8000558:	687a      	ldr	r2, [r7, #4]
 800055a:	430a      	orrs	r2, r1
 800055c:	601a      	str	r2, [r3, #0]
}
 800055e:	46c0      	nop			; (mov r8, r8)
 8000560:	46bd      	mov	sp, r7
 8000562:	b002      	add	sp, #8
 8000564:	bd80      	pop	{r7, pc}
 8000566:	46c0      	nop			; (mov r8, r8)
 8000568:	40022000 	.word	0x40022000

0800056c <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b084      	sub	sp, #16
 8000570:	af00      	add	r7, sp, #0
 8000572:	60f8      	str	r0, [r7, #12]
 8000574:	60b9      	str	r1, [r7, #8]
 8000576:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	6819      	ldr	r1, [r3, #0]
 800057c:	68bb      	ldr	r3, [r7, #8]
 800057e:	435b      	muls	r3, r3
 8000580:	001a      	movs	r2, r3
 8000582:	0013      	movs	r3, r2
 8000584:	005b      	lsls	r3, r3, #1
 8000586:	189b      	adds	r3, r3, r2
 8000588:	43db      	mvns	r3, r3
 800058a:	400b      	ands	r3, r1
 800058c:	001a      	movs	r2, r3
 800058e:	68bb      	ldr	r3, [r7, #8]
 8000590:	435b      	muls	r3, r3
 8000592:	6879      	ldr	r1, [r7, #4]
 8000594:	434b      	muls	r3, r1
 8000596:	431a      	orrs	r2, r3
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	601a      	str	r2, [r3, #0]
}
 800059c:	46c0      	nop			; (mov r8, r8)
 800059e:	46bd      	mov	sp, r7
 80005a0:	b004      	add	sp, #16
 80005a2:	bd80      	pop	{r7, pc}

080005a4 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b084      	sub	sp, #16
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	60f8      	str	r0, [r7, #12]
 80005ac:	60b9      	str	r1, [r7, #8]
 80005ae:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	685b      	ldr	r3, [r3, #4]
 80005b4:	68ba      	ldr	r2, [r7, #8]
 80005b6:	43d2      	mvns	r2, r2
 80005b8:	401a      	ands	r2, r3
 80005ba:	68bb      	ldr	r3, [r7, #8]
 80005bc:	6879      	ldr	r1, [r7, #4]
 80005be:	434b      	muls	r3, r1
 80005c0:	431a      	orrs	r2, r3
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	605a      	str	r2, [r3, #4]
}
 80005c6:	46c0      	nop			; (mov r8, r8)
 80005c8:	46bd      	mov	sp, r7
 80005ca:	b004      	add	sp, #16
 80005cc:	bd80      	pop	{r7, pc}

080005ce <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80005ce:	b580      	push	{r7, lr}
 80005d0:	b084      	sub	sp, #16
 80005d2:	af00      	add	r7, sp, #0
 80005d4:	60f8      	str	r0, [r7, #12]
 80005d6:	60b9      	str	r1, [r7, #8]
 80005d8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 80005da:	68fb      	ldr	r3, [r7, #12]
 80005dc:	6899      	ldr	r1, [r3, #8]
 80005de:	68bb      	ldr	r3, [r7, #8]
 80005e0:	435b      	muls	r3, r3
 80005e2:	001a      	movs	r2, r3
 80005e4:	0013      	movs	r3, r2
 80005e6:	005b      	lsls	r3, r3, #1
 80005e8:	189b      	adds	r3, r3, r2
 80005ea:	43db      	mvns	r3, r3
 80005ec:	400b      	ands	r3, r1
 80005ee:	001a      	movs	r2, r3
 80005f0:	68bb      	ldr	r3, [r7, #8]
 80005f2:	435b      	muls	r3, r3
 80005f4:	6879      	ldr	r1, [r7, #4]
 80005f6:	434b      	muls	r3, r1
 80005f8:	431a      	orrs	r2, r3
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	609a      	str	r2, [r3, #8]
}
 80005fe:	46c0      	nop			; (mov r8, r8)
 8000600:	46bd      	mov	sp, r7
 8000602:	b004      	add	sp, #16
 8000604:	bd80      	pop	{r7, pc}

08000606 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8000606:	b580      	push	{r7, lr}
 8000608:	b084      	sub	sp, #16
 800060a:	af00      	add	r7, sp, #0
 800060c:	60f8      	str	r0, [r7, #12]
 800060e:	60b9      	str	r1, [r7, #8]
 8000610:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	68d9      	ldr	r1, [r3, #12]
 8000616:	68bb      	ldr	r3, [r7, #8]
 8000618:	435b      	muls	r3, r3
 800061a:	001a      	movs	r2, r3
 800061c:	0013      	movs	r3, r2
 800061e:	005b      	lsls	r3, r3, #1
 8000620:	189b      	adds	r3, r3, r2
 8000622:	43db      	mvns	r3, r3
 8000624:	400b      	ands	r3, r1
 8000626:	001a      	movs	r2, r3
 8000628:	68bb      	ldr	r3, [r7, #8]
 800062a:	435b      	muls	r3, r3
 800062c:	6879      	ldr	r1, [r7, #4]
 800062e:	434b      	muls	r3, r1
 8000630:	431a      	orrs	r2, r3
 8000632:	68fb      	ldr	r3, [r7, #12]
 8000634:	60da      	str	r2, [r3, #12]
}
 8000636:	46c0      	nop			; (mov r8, r8)
 8000638:	46bd      	mov	sp, r7
 800063a:	b004      	add	sp, #16
 800063c:	bd80      	pop	{r7, pc}
	...

08000640 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8000648:	4a05      	ldr	r2, [pc, #20]	; (8000660 <LL_EXTI_EnableIT_0_31+0x20>)
 800064a:	2380      	movs	r3, #128	; 0x80
 800064c:	58d2      	ldr	r2, [r2, r3]
 800064e:	4904      	ldr	r1, [pc, #16]	; (8000660 <LL_EXTI_EnableIT_0_31+0x20>)
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	4313      	orrs	r3, r2
 8000654:	2280      	movs	r2, #128	; 0x80
 8000656:	508b      	str	r3, [r1, r2]
}
 8000658:	46c0      	nop			; (mov r8, r8)
 800065a:	46bd      	mov	sp, r7
 800065c:	b002      	add	sp, #8
 800065e:	bd80      	pop	{r7, pc}
 8000660:	40021800 	.word	0x40021800

08000664 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 800066c:	4b04      	ldr	r3, [pc, #16]	; (8000680 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 800066e:	6859      	ldr	r1, [r3, #4]
 8000670:	4b03      	ldr	r3, [pc, #12]	; (8000680 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 8000672:	687a      	ldr	r2, [r7, #4]
 8000674:	430a      	orrs	r2, r1
 8000676:	605a      	str	r2, [r3, #4]
}
 8000678:	46c0      	nop			; (mov r8, r8)
 800067a:	46bd      	mov	sp, r7
 800067c:	b002      	add	sp, #8
 800067e:	bd80      	pop	{r7, pc}
 8000680:	40021800 	.word	0x40021800

08000684 <LL_EXTI_SetEXTISource>:
  *         @arg @ref LL_EXTI_CONFIG_LINE14
  *         @arg @ref LL_EXTI_CONFIG_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8000684:	b590      	push	{r4, r7, lr}
 8000686:	b083      	sub	sp, #12
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
 800068c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(EXTI->EXTICR[Line & 0x03u], EXTI_EXTICR1_EXTI0 << (Line >> LL_EXTI_REGISTER_PINPOS_SHFT), Port << (Line >> LL_EXTI_REGISTER_PINPOS_SHFT));
 800068e:	4a0f      	ldr	r2, [pc, #60]	; (80006cc <LL_EXTI_SetEXTISource+0x48>)
 8000690:	683b      	ldr	r3, [r7, #0]
 8000692:	2103      	movs	r1, #3
 8000694:	400b      	ands	r3, r1
 8000696:	3318      	adds	r3, #24
 8000698:	009b      	lsls	r3, r3, #2
 800069a:	589b      	ldr	r3, [r3, r2]
 800069c:	683a      	ldr	r2, [r7, #0]
 800069e:	0c12      	lsrs	r2, r2, #16
 80006a0:	2107      	movs	r1, #7
 80006a2:	4091      	lsls	r1, r2
 80006a4:	000a      	movs	r2, r1
 80006a6:	43d2      	mvns	r2, r2
 80006a8:	401a      	ands	r2, r3
 80006aa:	0011      	movs	r1, r2
 80006ac:	683b      	ldr	r3, [r7, #0]
 80006ae:	0c1b      	lsrs	r3, r3, #16
 80006b0:	687a      	ldr	r2, [r7, #4]
 80006b2:	409a      	lsls	r2, r3
 80006b4:	4805      	ldr	r0, [pc, #20]	; (80006cc <LL_EXTI_SetEXTISource+0x48>)
 80006b6:	683b      	ldr	r3, [r7, #0]
 80006b8:	2403      	movs	r4, #3
 80006ba:	4023      	ands	r3, r4
 80006bc:	430a      	orrs	r2, r1
 80006be:	3318      	adds	r3, #24
 80006c0:	009b      	lsls	r3, r3, #2
 80006c2:	501a      	str	r2, [r3, r0]
}
 80006c4:	46c0      	nop			; (mov r8, r8)
 80006c6:	46bd      	mov	sp, r7
 80006c8:	b003      	add	sp, #12
 80006ca:	bd90      	pop	{r4, r7, pc}
 80006cc:	40021800 	.word	0x40021800

080006d0 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
	//RCC
	LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 80006d4:	2002      	movs	r0, #2
 80006d6:	f7ff ff35 	bl	8000544 <LL_FLASH_SetLatency>

	LL_RCC_HSI_Enable();
 80006da:	f7ff fe5f 	bl	800039c <LL_RCC_HSI_Enable>
	while(LL_RCC_HSI_IsReady() != 1)
 80006de:	46c0      	nop			; (mov r8, r8)
 80006e0:	f7ff fe6a 	bl	80003b8 <LL_RCC_HSI_IsReady>
 80006e4:	0003      	movs	r3, r0
 80006e6:	2b01      	cmp	r3, #1
 80006e8:	d1fa      	bne.n	80006e0 <main+0x10>
		;

	LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_1, 8, LL_RCC_PLLR_DIV_2);
 80006ea:	2380      	movs	r3, #128	; 0x80
 80006ec:	059b      	lsls	r3, r3, #22
 80006ee:	2208      	movs	r2, #8
 80006f0:	2100      	movs	r1, #0
 80006f2:	2002      	movs	r0, #2
 80006f4:	f7ff fee2 	bl	80004bc <LL_RCC_PLL_ConfigDomain_SYS>

	LL_RCC_PLL_Enable();
 80006f8:	f7ff febe 	bl	8000478 <LL_RCC_PLL_Enable>
	while(LL_RCC_PLL_IsReady() != 1)
 80006fc:	46c0      	nop			; (mov r8, r8)
 80006fe:	f7ff fec9 	bl	8000494 <LL_RCC_PLL_IsReady>
 8000702:	0003      	movs	r3, r0
 8000704:	2b01      	cmp	r3, #1
 8000706:	d1fa      	bne.n	80006fe <main+0x2e>
		;

	LL_RCC_PLL_EnableDomain_SYS();
 8000708:	f7ff fef8 	bl	80004fc <LL_RCC_PLL_EnableDomain_SYS>

	LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 800070c:	2000      	movs	r0, #0
 800070e:	f7ff fe87 	bl	8000420 <LL_RCC_SetAHBPrescaler>
	LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8000712:	2000      	movs	r0, #0
 8000714:	f7ff fe9a 	bl	800044c <LL_RCC_SetAPB1Prescaler>

	LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000718:	2002      	movs	r0, #2
 800071a:	f7ff fe61 	bl	80003e0 <LL_RCC_SetSysClkSource>
	while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800071e:	46c0      	nop			; (mov r8, r8)
 8000720:	f7ff fe72 	bl	8000408 <LL_RCC_GetSysClkSource>
 8000724:	0003      	movs	r3, r0
 8000726:	2b10      	cmp	r3, #16
 8000728:	d1fa      	bne.n	8000720 <main+0x50>
		;

	LL_SetSystemCoreClock(64000000);
 800072a:	4b2b      	ldr	r3, [pc, #172]	; (80007d8 <main+0x108>)
 800072c:	0018      	movs	r0, r3
 800072e:	f7ff fd9f 	bl	8000270 <LL_SetSystemCoreClock>
	LL_Init1msTick(64000000);
 8000732:	4b29      	ldr	r3, [pc, #164]	; (80007d8 <main+0x108>)
 8000734:	0018      	movs	r0, r3
 8000736:	f7ff fd8b 	bl	8000250 <LL_Init1msTick>

	//GPIO
	LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOC);
 800073a:	2004      	movs	r0, #4
 800073c:	f7ff feec 	bl	8000518 <LL_IOP_GRP1_EnableClock>
	LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8000740:	2001      	movs	r0, #1
 8000742:	f7ff fee9 	bl	8000518 <LL_IOP_GRP1_EnableClock>

	LL_GPIO_SetPinOutputType(LED_GREEN_GPIO_Port, LED_GREEN_Pin, LL_GPIO_OUTPUT_PUSHPULL);
 8000746:	23a0      	movs	r3, #160	; 0xa0
 8000748:	05db      	lsls	r3, r3, #23
 800074a:	2200      	movs	r2, #0
 800074c:	2120      	movs	r1, #32
 800074e:	0018      	movs	r0, r3
 8000750:	f7ff ff28 	bl	80005a4 <LL_GPIO_SetPinOutputType>
	LL_GPIO_SetPinPull(LED_GREEN_GPIO_Port, LED_GREEN_Pin, LL_GPIO_PULL_NO);
 8000754:	23a0      	movs	r3, #160	; 0xa0
 8000756:	05db      	lsls	r3, r3, #23
 8000758:	2200      	movs	r2, #0
 800075a:	2120      	movs	r1, #32
 800075c:	0018      	movs	r0, r3
 800075e:	f7ff ff52 	bl	8000606 <LL_GPIO_SetPinPull>
	LL_GPIO_SetPinSpeed(LED_GREEN_GPIO_Port, LED_GREEN_Pin, LL_GPIO_SPEED_FREQ_LOW);
 8000762:	23a0      	movs	r3, #160	; 0xa0
 8000764:	05db      	lsls	r3, r3, #23
 8000766:	2200      	movs	r2, #0
 8000768:	2120      	movs	r1, #32
 800076a:	0018      	movs	r0, r3
 800076c:	f7ff ff2f 	bl	80005ce <LL_GPIO_SetPinSpeed>
	LL_GPIO_SetPinMode(LED_GREEN_GPIO_Port, LED_GREEN_Pin, LL_GPIO_MODE_OUTPUT);
 8000770:	23a0      	movs	r3, #160	; 0xa0
 8000772:	05db      	lsls	r3, r3, #23
 8000774:	2201      	movs	r2, #1
 8000776:	2120      	movs	r1, #32
 8000778:	0018      	movs	r0, r3
 800077a:	f7ff fef7 	bl	800056c <LL_GPIO_SetPinMode>

	LL_GPIO_SetPinPull(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin, LL_GPIO_PULL_NO);
 800077e:	2380      	movs	r3, #128	; 0x80
 8000780:	019b      	lsls	r3, r3, #6
 8000782:	4816      	ldr	r0, [pc, #88]	; (80007dc <main+0x10c>)
 8000784:	2200      	movs	r2, #0
 8000786:	0019      	movs	r1, r3
 8000788:	f7ff ff3d 	bl	8000606 <LL_GPIO_SetPinPull>
	LL_GPIO_SetPinSpeed(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin, LL_GPIO_SPEED_FREQ_LOW);
 800078c:	2380      	movs	r3, #128	; 0x80
 800078e:	019b      	lsls	r3, r3, #6
 8000790:	4812      	ldr	r0, [pc, #72]	; (80007dc <main+0x10c>)
 8000792:	2200      	movs	r2, #0
 8000794:	0019      	movs	r1, r3
 8000796:	f7ff ff1a 	bl	80005ce <LL_GPIO_SetPinSpeed>
	LL_GPIO_SetPinMode(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin, LL_GPIO_MODE_INPUT);
 800079a:	2380      	movs	r3, #128	; 0x80
 800079c:	019b      	lsls	r3, r3, #6
 800079e:	480f      	ldr	r0, [pc, #60]	; (80007dc <main+0x10c>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	0019      	movs	r1, r3
 80007a4:	f7ff fee2 	bl	800056c <LL_GPIO_SetPinMode>

	//EXTI
	LL_EXTI_SetEXTISource(LL_EXTI_CONFIG_PORTC, LL_EXTI_CONFIG_LINE13);
 80007a8:	4b0d      	ldr	r3, [pc, #52]	; (80007e0 <main+0x110>)
 80007aa:	0019      	movs	r1, r3
 80007ac:	2002      	movs	r0, #2
 80007ae:	f7ff ff69 	bl	8000684 <LL_EXTI_SetEXTISource>
	LL_EXTI_EnableFallingTrig_0_31(LL_EXTI_LINE_13);
 80007b2:	2380      	movs	r3, #128	; 0x80
 80007b4:	019b      	lsls	r3, r3, #6
 80007b6:	0018      	movs	r0, r3
 80007b8:	f7ff ff54 	bl	8000664 <LL_EXTI_EnableFallingTrig_0_31>
	LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_13);
 80007bc:	2380      	movs	r3, #128	; 0x80
 80007be:	019b      	lsls	r3, r3, #6
 80007c0:	0018      	movs	r0, r3
 80007c2:	f7ff ff3d 	bl	8000640 <LL_EXTI_EnableIT_0_31>

	NVIC_SetPriority(EXTI4_15_IRQn, 0);
 80007c6:	2100      	movs	r1, #0
 80007c8:	2007      	movs	r0, #7
 80007ca:	f7ff fd79 	bl	80002c0 <__NVIC_SetPriority>
	NVIC_EnableIRQ(EXTI4_15_IRQn);
 80007ce:	2007      	movs	r0, #7
 80007d0:	f7ff fd5c 	bl	800028c <__NVIC_EnableIRQ>

	while (1)
 80007d4:	e7fe      	b.n	80007d4 <main+0x104>
 80007d6:	46c0      	nop			; (mov r8, r8)
 80007d8:	03d09000 	.word	0x03d09000
 80007dc:	50000800 	.word	0x50000800
 80007e0:	00080003 	.word	0x00080003

080007e4 <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b084      	sub	sp, #16
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
 80007ec:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	695b      	ldr	r3, [r3, #20]
 80007f2:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	683a      	ldr	r2, [r7, #0]
 80007f8:	4013      	ands	r3, r2
 80007fa:	041a      	lsls	r2, r3, #16
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	43db      	mvns	r3, r3
 8000800:	6839      	ldr	r1, [r7, #0]
 8000802:	400b      	ands	r3, r1
 8000804:	431a      	orrs	r2, r3
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	619a      	str	r2, [r3, #24]
}
 800080a:	46c0      	nop			; (mov r8, r8)
 800080c:	46bd      	mov	sp, r7
 800080e:	b004      	add	sp, #16
 8000810:	bd80      	pop	{r7, pc}
	...

08000814 <LL_EXTI_IsActiveFallingFlag_0_31>:
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->FPR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 800081c:	4b06      	ldr	r3, [pc, #24]	; (8000838 <LL_EXTI_IsActiveFallingFlag_0_31+0x24>)
 800081e:	691b      	ldr	r3, [r3, #16]
 8000820:	687a      	ldr	r2, [r7, #4]
 8000822:	4013      	ands	r3, r2
 8000824:	687a      	ldr	r2, [r7, #4]
 8000826:	429a      	cmp	r2, r3
 8000828:	d101      	bne.n	800082e <LL_EXTI_IsActiveFallingFlag_0_31+0x1a>
 800082a:	2301      	movs	r3, #1
 800082c:	e000      	b.n	8000830 <LL_EXTI_IsActiveFallingFlag_0_31+0x1c>
 800082e:	2300      	movs	r3, #0
}
 8000830:	0018      	movs	r0, r3
 8000832:	46bd      	mov	sp, r7
 8000834:	b002      	add	sp, #8
 8000836:	bd80      	pop	{r7, pc}
 8000838:	40021800 	.word	0x40021800

0800083c <LL_EXTI_ClearFallingFlag_0_31>:
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->FPR1, ExtiLine);
 8000844:	4b03      	ldr	r3, [pc, #12]	; (8000854 <LL_EXTI_ClearFallingFlag_0_31+0x18>)
 8000846:	687a      	ldr	r2, [r7, #4]
 8000848:	611a      	str	r2, [r3, #16]
}
 800084a:	46c0      	nop			; (mov r8, r8)
 800084c:	46bd      	mov	sp, r7
 800084e:	b002      	add	sp, #8
 8000850:	bd80      	pop	{r7, pc}
 8000852:	46c0      	nop			; (mov r8, r8)
 8000854:	40021800 	.word	0x40021800

08000858 <EXTI4_15_IRQHandler>:
 */

#include "main.h"

void EXTI4_15_IRQHandler(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
	if(LL_EXTI_IsActiveFallingFlag_0_31(LL_EXTI_LINE_13) != RESET)
 800085c:	2380      	movs	r3, #128	; 0x80
 800085e:	019b      	lsls	r3, r3, #6
 8000860:	0018      	movs	r0, r3
 8000862:	f7ff ffd7 	bl	8000814 <LL_EXTI_IsActiveFallingFlag_0_31>
 8000866:	1e03      	subs	r3, r0, #0
 8000868:	d00a      	beq.n	8000880 <EXTI4_15_IRQHandler+0x28>
	{
		LL_EXTI_ClearFallingFlag_0_31(LL_EXTI_LINE_13);
 800086a:	2380      	movs	r3, #128	; 0x80
 800086c:	019b      	lsls	r3, r3, #6
 800086e:	0018      	movs	r0, r3
 8000870:	f7ff ffe4 	bl	800083c <LL_EXTI_ClearFallingFlag_0_31>

		LL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8000874:	23a0      	movs	r3, #160	; 0xa0
 8000876:	05db      	lsls	r3, r3, #23
 8000878:	2120      	movs	r1, #32
 800087a:	0018      	movs	r0, r3
 800087c:	f7ff ffb2 	bl	80007e4 <LL_GPIO_TogglePin>
	}
}
 8000880:	46c0      	nop			; (mov r8, r8)
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}

08000886 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000886:	b580      	push	{r7, lr}
 8000888:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800088a:	46c0      	nop			; (mov r8, r8)
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}

08000890 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000890:	480d      	ldr	r0, [pc, #52]	; (80008c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000892:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000894:	f7ff fff7 	bl	8000886 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000898:	480c      	ldr	r0, [pc, #48]	; (80008cc <LoopForever+0x6>)
  ldr r1, =_edata
 800089a:	490d      	ldr	r1, [pc, #52]	; (80008d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800089c:	4a0d      	ldr	r2, [pc, #52]	; (80008d4 <LoopForever+0xe>)
  movs r3, #0
 800089e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008a0:	e002      	b.n	80008a8 <LoopCopyDataInit>

080008a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008a6:	3304      	adds	r3, #4

080008a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008ac:	d3f9      	bcc.n	80008a2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008ae:	4a0a      	ldr	r2, [pc, #40]	; (80008d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008b0:	4c0a      	ldr	r4, [pc, #40]	; (80008dc <LoopForever+0x16>)
  movs r3, #0
 80008b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008b4:	e001      	b.n	80008ba <LoopFillZerobss>

080008b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008b8:	3204      	adds	r2, #4

080008ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008bc:	d3fb      	bcc.n	80008b6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80008be:	f000 f811 	bl	80008e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008c2:	f7ff ff05 	bl	80006d0 <main>

080008c6 <LoopForever>:

LoopForever:
    b LoopForever
 80008c6:	e7fe      	b.n	80008c6 <LoopForever>
  ldr   r0, =_estack
 80008c8:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80008cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008d0:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80008d4:	0800094c 	.word	0x0800094c
  ldr r2, =_sbss
 80008d8:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80008dc:	20000020 	.word	0x20000020

080008e0 <ADC_COMP_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008e0:	e7fe      	b.n	80008e0 <ADC_COMP_IRQHandler>
	...

080008e4 <__libc_init_array>:
 80008e4:	b570      	push	{r4, r5, r6, lr}
 80008e6:	2600      	movs	r6, #0
 80008e8:	4d0c      	ldr	r5, [pc, #48]	; (800091c <__libc_init_array+0x38>)
 80008ea:	4c0d      	ldr	r4, [pc, #52]	; (8000920 <__libc_init_array+0x3c>)
 80008ec:	1b64      	subs	r4, r4, r5
 80008ee:	10a4      	asrs	r4, r4, #2
 80008f0:	42a6      	cmp	r6, r4
 80008f2:	d109      	bne.n	8000908 <__libc_init_array+0x24>
 80008f4:	2600      	movs	r6, #0
 80008f6:	f000 f819 	bl	800092c <_init>
 80008fa:	4d0a      	ldr	r5, [pc, #40]	; (8000924 <__libc_init_array+0x40>)
 80008fc:	4c0a      	ldr	r4, [pc, #40]	; (8000928 <__libc_init_array+0x44>)
 80008fe:	1b64      	subs	r4, r4, r5
 8000900:	10a4      	asrs	r4, r4, #2
 8000902:	42a6      	cmp	r6, r4
 8000904:	d105      	bne.n	8000912 <__libc_init_array+0x2e>
 8000906:	bd70      	pop	{r4, r5, r6, pc}
 8000908:	00b3      	lsls	r3, r6, #2
 800090a:	58eb      	ldr	r3, [r5, r3]
 800090c:	4798      	blx	r3
 800090e:	3601      	adds	r6, #1
 8000910:	e7ee      	b.n	80008f0 <__libc_init_array+0xc>
 8000912:	00b3      	lsls	r3, r6, #2
 8000914:	58eb      	ldr	r3, [r5, r3]
 8000916:	4798      	blx	r3
 8000918:	3601      	adds	r6, #1
 800091a:	e7f2      	b.n	8000902 <__libc_init_array+0x1e>
 800091c:	08000944 	.word	0x08000944
 8000920:	08000944 	.word	0x08000944
 8000924:	08000944 	.word	0x08000944
 8000928:	08000948 	.word	0x08000948

0800092c <_init>:
 800092c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800092e:	46c0      	nop			; (mov r8, r8)
 8000930:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000932:	bc08      	pop	{r3}
 8000934:	469e      	mov	lr, r3
 8000936:	4770      	bx	lr

08000938 <_fini>:
 8000938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800093a:	46c0      	nop			; (mov r8, r8)
 800093c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800093e:	bc08      	pop	{r3}
 8000940:	469e      	mov	lr, r3
 8000942:	4770      	bx	lr
