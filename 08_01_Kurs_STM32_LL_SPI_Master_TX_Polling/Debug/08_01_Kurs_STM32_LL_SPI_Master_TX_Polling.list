
08_01_Kurs_STM32_LL_SPI_Master_TX_Polling.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a60  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000023f0  08002b1c  08002b1c  00012b1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f0c  08004f0c  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08004f0c  08004f0c  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004f0c  08004f0c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f0c  08004f0c  00014f0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f10  08004f10  00014f10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004f14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002764  20000074  08004f88  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200027d8  08004f88  000227d8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000047ac  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000011b6  00000000  00000000  00024848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005b8  00000000  00000000  00025a00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000004d0  00000000  00000000  00025fb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004461  00000000  00000000  00026488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007192  00000000  00000000  0002a8e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000637e6  00000000  00000000  00031a7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00095261  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000018f8  00000000  00000000  000952b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000074 	.word	0x20000074
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08002b04 	.word	0x08002b04

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000078 	.word	0x20000078
 8000100:	08002b04 	.word	0x08002b04

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
 8000222:	6078      	str	r0, [r7, #4]
 8000224:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8000226:	6839      	ldr	r1, [r7, #0]
 8000228:	6878      	ldr	r0, [r7, #4]
 800022a:	f7ff ff6b 	bl	8000104 <__udivsi3>
 800022e:	0003      	movs	r3, r0
 8000230:	001a      	movs	r2, r3
 8000232:	4b06      	ldr	r3, [pc, #24]	; (800024c <LL_InitTick+0x30>)
 8000234:	3a01      	subs	r2, #1
 8000236:	605a      	str	r2, [r3, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8000238:	4b04      	ldr	r3, [pc, #16]	; (800024c <LL_InitTick+0x30>)
 800023a:	2200      	movs	r2, #0
 800023c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800023e:	4b03      	ldr	r3, [pc, #12]	; (800024c <LL_InitTick+0x30>)
 8000240:	2205      	movs	r2, #5
 8000242:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8000244:	46c0      	nop			; (mov r8, r8)
 8000246:	46bd      	mov	sp, r7
 8000248:	b002      	add	sp, #8
 800024a:	bd80      	pop	{r7, pc}
 800024c:	e000e010 	.word	0xe000e010

08000250 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b082      	sub	sp, #8
 8000254:	af00      	add	r7, sp, #0
 8000256:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8000258:	23fa      	movs	r3, #250	; 0xfa
 800025a:	009a      	lsls	r2, r3, #2
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	0011      	movs	r1, r2
 8000260:	0018      	movs	r0, r3
 8000262:	f7ff ffdb 	bl	800021c <LL_InitTick>
}
 8000266:	46c0      	nop			; (mov r8, r8)
 8000268:	46bd      	mov	sp, r7
 800026a:	b002      	add	sp, #8
 800026c:	bd80      	pop	{r7, pc}
	...

08000270 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b084      	sub	sp, #16
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8000278:	4b0e      	ldr	r3, [pc, #56]	; (80002b4 <LL_mDelay+0x44>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	60bb      	str	r3, [r7, #8]
   uint32_t tmpDelay; /* MISRAC2012-Rule-17.8 */
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 800027e:	68bb      	ldr	r3, [r7, #8]
  tmpDelay  = Delay;
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	60fb      	str	r3, [r7, #12]
  /* Add a period to guaranty minimum wait */
  if (tmpDelay  < LL_MAX_DELAY)
 8000284:	68fb      	ldr	r3, [r7, #12]
 8000286:	3301      	adds	r3, #1
 8000288:	d00c      	beq.n	80002a4 <LL_mDelay+0x34>
  {
    tmpDelay ++;
 800028a:	68fb      	ldr	r3, [r7, #12]
 800028c:	3301      	adds	r3, #1
 800028e:	60fb      	str	r3, [r7, #12]
  }

  while (tmpDelay  != 0U)
 8000290:	e008      	b.n	80002a4 <LL_mDelay+0x34>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8000292:	4b08      	ldr	r3, [pc, #32]	; (80002b4 <LL_mDelay+0x44>)
 8000294:	681a      	ldr	r2, [r3, #0]
 8000296:	2380      	movs	r3, #128	; 0x80
 8000298:	025b      	lsls	r3, r3, #9
 800029a:	4013      	ands	r3, r2
 800029c:	d002      	beq.n	80002a4 <LL_mDelay+0x34>
    {
      tmpDelay --;
 800029e:	68fb      	ldr	r3, [r7, #12]
 80002a0:	3b01      	subs	r3, #1
 80002a2:	60fb      	str	r3, [r7, #12]
  while (tmpDelay  != 0U)
 80002a4:	68fb      	ldr	r3, [r7, #12]
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d1f3      	bne.n	8000292 <LL_mDelay+0x22>
    }
  }
}
 80002aa:	46c0      	nop			; (mov r8, r8)
 80002ac:	46c0      	nop			; (mov r8, r8)
 80002ae:	46bd      	mov	sp, r7
 80002b0:	b004      	add	sp, #16
 80002b2:	bd80      	pop	{r7, pc}
 80002b4:	e000e010 	.word	0xe000e010

080002b8 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b082      	sub	sp, #8
 80002bc:	af00      	add	r7, sp, #0
 80002be:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80002c0:	4b03      	ldr	r3, [pc, #12]	; (80002d0 <LL_SetSystemCoreClock+0x18>)
 80002c2:	687a      	ldr	r2, [r7, #4]
 80002c4:	601a      	str	r2, [r3, #0]
}
 80002c6:	46c0      	nop			; (mov r8, r8)
 80002c8:	46bd      	mov	sp, r7
 80002ca:	b002      	add	sp, #8
 80002cc:	bd80      	pop	{r7, pc}
 80002ce:	46c0      	nop			; (mov r8, r8)
 80002d0:	20000004 	.word	0x20000004

080002d4 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <LL_RCC_HSI_Enable+0x18>)
 80002da:	681a      	ldr	r2, [r3, #0]
 80002dc:	4b03      	ldr	r3, [pc, #12]	; (80002ec <LL_RCC_HSI_Enable+0x18>)
 80002de:	2180      	movs	r1, #128	; 0x80
 80002e0:	0049      	lsls	r1, r1, #1
 80002e2:	430a      	orrs	r2, r1
 80002e4:	601a      	str	r2, [r3, #0]
}
 80002e6:	46c0      	nop			; (mov r8, r8)
 80002e8:	46bd      	mov	sp, r7
 80002ea:	bd80      	pop	{r7, pc}
 80002ec:	40021000 	.word	0x40021000

080002f0 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80002f4:	4b07      	ldr	r3, [pc, #28]	; (8000314 <LL_RCC_HSI_IsReady+0x24>)
 80002f6:	681a      	ldr	r2, [r3, #0]
 80002f8:	2380      	movs	r3, #128	; 0x80
 80002fa:	00db      	lsls	r3, r3, #3
 80002fc:	401a      	ands	r2, r3
 80002fe:	2380      	movs	r3, #128	; 0x80
 8000300:	00db      	lsls	r3, r3, #3
 8000302:	429a      	cmp	r2, r3
 8000304:	d101      	bne.n	800030a <LL_RCC_HSI_IsReady+0x1a>
 8000306:	2301      	movs	r3, #1
 8000308:	e000      	b.n	800030c <LL_RCC_HSI_IsReady+0x1c>
 800030a:	2300      	movs	r3, #0
}
 800030c:	0018      	movs	r0, r3
 800030e:	46bd      	mov	sp, r7
 8000310:	bd80      	pop	{r7, pc}
 8000312:	46c0      	nop			; (mov r8, r8)
 8000314:	40021000 	.word	0x40021000

08000318 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_LSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_LSE
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b082      	sub	sp, #8
 800031c:	af00      	add	r7, sp, #0
 800031e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000320:	4b06      	ldr	r3, [pc, #24]	; (800033c <LL_RCC_SetSysClkSource+0x24>)
 8000322:	689b      	ldr	r3, [r3, #8]
 8000324:	2207      	movs	r2, #7
 8000326:	4393      	bics	r3, r2
 8000328:	0019      	movs	r1, r3
 800032a:	4b04      	ldr	r3, [pc, #16]	; (800033c <LL_RCC_SetSysClkSource+0x24>)
 800032c:	687a      	ldr	r2, [r7, #4]
 800032e:	430a      	orrs	r2, r1
 8000330:	609a      	str	r2, [r3, #8]
}
 8000332:	46c0      	nop			; (mov r8, r8)
 8000334:	46bd      	mov	sp, r7
 8000336:	b002      	add	sp, #8
 8000338:	bd80      	pop	{r7, pc}
 800033a:	46c0      	nop			; (mov r8, r8)
 800033c:	40021000 	.word	0x40021000

08000340 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_LSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000344:	4b03      	ldr	r3, [pc, #12]	; (8000354 <LL_RCC_GetSysClkSource+0x14>)
 8000346:	689b      	ldr	r3, [r3, #8]
 8000348:	2238      	movs	r2, #56	; 0x38
 800034a:	4013      	ands	r3, r2
}
 800034c:	0018      	movs	r0, r3
 800034e:	46bd      	mov	sp, r7
 8000350:	bd80      	pop	{r7, pc}
 8000352:	46c0      	nop			; (mov r8, r8)
 8000354:	40021000 	.word	0x40021000

08000358 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b082      	sub	sp, #8
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000360:	4b06      	ldr	r3, [pc, #24]	; (800037c <LL_RCC_SetAHBPrescaler+0x24>)
 8000362:	689b      	ldr	r3, [r3, #8]
 8000364:	4a06      	ldr	r2, [pc, #24]	; (8000380 <LL_RCC_SetAHBPrescaler+0x28>)
 8000366:	4013      	ands	r3, r2
 8000368:	0019      	movs	r1, r3
 800036a:	4b04      	ldr	r3, [pc, #16]	; (800037c <LL_RCC_SetAHBPrescaler+0x24>)
 800036c:	687a      	ldr	r2, [r7, #4]
 800036e:	430a      	orrs	r2, r1
 8000370:	609a      	str	r2, [r3, #8]
}
 8000372:	46c0      	nop			; (mov r8, r8)
 8000374:	46bd      	mov	sp, r7
 8000376:	b002      	add	sp, #8
 8000378:	bd80      	pop	{r7, pc}
 800037a:	46c0      	nop			; (mov r8, r8)
 800037c:	40021000 	.word	0x40021000
 8000380:	fffff0ff 	.word	0xfffff0ff

08000384 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	b082      	sub	sp, #8
 8000388:	af00      	add	r7, sp, #0
 800038a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, Prescaler);
 800038c:	4b06      	ldr	r3, [pc, #24]	; (80003a8 <LL_RCC_SetAPB1Prescaler+0x24>)
 800038e:	689b      	ldr	r3, [r3, #8]
 8000390:	4a06      	ldr	r2, [pc, #24]	; (80003ac <LL_RCC_SetAPB1Prescaler+0x28>)
 8000392:	4013      	ands	r3, r2
 8000394:	0019      	movs	r1, r3
 8000396:	4b04      	ldr	r3, [pc, #16]	; (80003a8 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000398:	687a      	ldr	r2, [r7, #4]
 800039a:	430a      	orrs	r2, r1
 800039c:	609a      	str	r2, [r3, #8]
}
 800039e:	46c0      	nop			; (mov r8, r8)
 80003a0:	46bd      	mov	sp, r7
 80003a2:	b002      	add	sp, #8
 80003a4:	bd80      	pop	{r7, pc}
 80003a6:	46c0      	nop			; (mov r8, r8)
 80003a8:	40021000 	.word	0x40021000
 80003ac:	ffff8fff 	.word	0xffff8fff

080003b0 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80003b4:	4b04      	ldr	r3, [pc, #16]	; (80003c8 <LL_RCC_PLL_Enable+0x18>)
 80003b6:	681a      	ldr	r2, [r3, #0]
 80003b8:	4b03      	ldr	r3, [pc, #12]	; (80003c8 <LL_RCC_PLL_Enable+0x18>)
 80003ba:	2180      	movs	r1, #128	; 0x80
 80003bc:	0449      	lsls	r1, r1, #17
 80003be:	430a      	orrs	r2, r1
 80003c0:	601a      	str	r2, [r3, #0]
}
 80003c2:	46c0      	nop			; (mov r8, r8)
 80003c4:	46bd      	mov	sp, r7
 80003c6:	bd80      	pop	{r7, pc}
 80003c8:	40021000 	.word	0x40021000

080003cc <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80003d0:	4b07      	ldr	r3, [pc, #28]	; (80003f0 <LL_RCC_PLL_IsReady+0x24>)
 80003d2:	681a      	ldr	r2, [r3, #0]
 80003d4:	2380      	movs	r3, #128	; 0x80
 80003d6:	049b      	lsls	r3, r3, #18
 80003d8:	401a      	ands	r2, r3
 80003da:	2380      	movs	r3, #128	; 0x80
 80003dc:	049b      	lsls	r3, r3, #18
 80003de:	429a      	cmp	r2, r3
 80003e0:	d101      	bne.n	80003e6 <LL_RCC_PLL_IsReady+0x1a>
 80003e2:	2301      	movs	r3, #1
 80003e4:	e000      	b.n	80003e8 <LL_RCC_PLL_IsReady+0x1c>
 80003e6:	2300      	movs	r3, #0
}
 80003e8:	0018      	movs	r0, r3
 80003ea:	46bd      	mov	sp, r7
 80003ec:	bd80      	pop	{r7, pc}
 80003ee:	46c0      	nop			; (mov r8, r8)
 80003f0:	40021000 	.word	0x40021000

080003f4 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b084      	sub	sp, #16
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	60f8      	str	r0, [r7, #12]
 80003fc:	60b9      	str	r1, [r7, #8]
 80003fe:	607a      	str	r2, [r7, #4]
 8000400:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 8000402:	4b0a      	ldr	r3, [pc, #40]	; (800042c <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8000404:	68db      	ldr	r3, [r3, #12]
 8000406:	4a0a      	ldr	r2, [pc, #40]	; (8000430 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 8000408:	4013      	ands	r3, r2
 800040a:	0019      	movs	r1, r3
 800040c:	68fa      	ldr	r2, [r7, #12]
 800040e:	68bb      	ldr	r3, [r7, #8]
 8000410:	431a      	orrs	r2, r3
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	021b      	lsls	r3, r3, #8
 8000416:	431a      	orrs	r2, r3
 8000418:	683b      	ldr	r3, [r7, #0]
 800041a:	431a      	orrs	r2, r3
 800041c:	4b03      	ldr	r3, [pc, #12]	; (800042c <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 800041e:	430a      	orrs	r2, r1
 8000420:	60da      	str	r2, [r3, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 8000422:	46c0      	nop			; (mov r8, r8)
 8000424:	46bd      	mov	sp, r7
 8000426:	b004      	add	sp, #16
 8000428:	bd80      	pop	{r7, pc}
 800042a:	46c0      	nop			; (mov r8, r8)
 800042c:	40021000 	.word	0x40021000
 8000430:	1fff808c 	.word	0x1fff808c

08000434 <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 8000438:	4b04      	ldr	r3, [pc, #16]	; (800044c <LL_RCC_PLL_EnableDomain_SYS+0x18>)
 800043a:	68da      	ldr	r2, [r3, #12]
 800043c:	4b03      	ldr	r3, [pc, #12]	; (800044c <LL_RCC_PLL_EnableDomain_SYS+0x18>)
 800043e:	2180      	movs	r1, #128	; 0x80
 8000440:	0549      	lsls	r1, r1, #21
 8000442:	430a      	orrs	r2, r1
 8000444:	60da      	str	r2, [r3, #12]
}
 8000446:	46c0      	nop			; (mov r8, r8)
 8000448:	46bd      	mov	sp, r7
 800044a:	bd80      	pop	{r7, pc}
 800044c:	40021000 	.word	0x40021000

08000450 <LL_IOP_GRP1_EnableClock>:
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOE
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOF
  * @retval None
  */
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b084      	sub	sp, #16
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 8000458:	4b07      	ldr	r3, [pc, #28]	; (8000478 <LL_IOP_GRP1_EnableClock+0x28>)
 800045a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800045c:	4b06      	ldr	r3, [pc, #24]	; (8000478 <LL_IOP_GRP1_EnableClock+0x28>)
 800045e:	687a      	ldr	r2, [r7, #4]
 8000460:	430a      	orrs	r2, r1
 8000462:	635a      	str	r2, [r3, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8000464:	4b04      	ldr	r3, [pc, #16]	; (8000478 <LL_IOP_GRP1_EnableClock+0x28>)
 8000466:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000468:	687a      	ldr	r2, [r7, #4]
 800046a:	4013      	ands	r3, r2
 800046c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800046e:	68fb      	ldr	r3, [r7, #12]
}
 8000470:	46c0      	nop			; (mov r8, r8)
 8000472:	46bd      	mov	sp, r7
 8000474:	b004      	add	sp, #16
 8000476:	bd80      	pop	{r7, pc}
 8000478:	40021000 	.word	0x40021000

0800047c <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b082      	sub	sp, #8
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000484:	4b06      	ldr	r3, [pc, #24]	; (80004a0 <LL_FLASH_SetLatency+0x24>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	2207      	movs	r2, #7
 800048a:	4393      	bics	r3, r2
 800048c:	0019      	movs	r1, r3
 800048e:	4b04      	ldr	r3, [pc, #16]	; (80004a0 <LL_FLASH_SetLatency+0x24>)
 8000490:	687a      	ldr	r2, [r7, #4]
 8000492:	430a      	orrs	r2, r1
 8000494:	601a      	str	r2, [r3, #0]
}
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	46bd      	mov	sp, r7
 800049a:	b002      	add	sp, #8
 800049c:	bd80      	pop	{r7, pc}
 800049e:	46c0      	nop			; (mov r8, r8)
 80004a0:	40022000 	.word	0x40022000

080004a4 <LL_SYSTICK_EnableIT>:
  * @brief  Enable SysTick exception request
  * @rmtoll STK_CTRL     TICKINT       LL_SYSTICK_EnableIT
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_EnableIT(void)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	af00      	add	r7, sp, #0
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80004a8:	4b04      	ldr	r3, [pc, #16]	; (80004bc <LL_SYSTICK_EnableIT+0x18>)
 80004aa:	681a      	ldr	r2, [r3, #0]
 80004ac:	4b03      	ldr	r3, [pc, #12]	; (80004bc <LL_SYSTICK_EnableIT+0x18>)
 80004ae:	2102      	movs	r1, #2
 80004b0:	430a      	orrs	r2, r1
 80004b2:	601a      	str	r2, [r3, #0]
}
 80004b4:	46c0      	nop			; (mov r8, r8)
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bd80      	pop	{r7, pc}
 80004ba:	46c0      	nop			; (mov r8, r8)
 80004bc:	e000e010 	.word	0xe000e010

080004c0 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b084      	sub	sp, #16
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	60f8      	str	r0, [r7, #12]
 80004c8:	60b9      	str	r1, [r7, #8]
 80004ca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 80004cc:	68fb      	ldr	r3, [r7, #12]
 80004ce:	6819      	ldr	r1, [r3, #0]
 80004d0:	68bb      	ldr	r3, [r7, #8]
 80004d2:	435b      	muls	r3, r3
 80004d4:	001a      	movs	r2, r3
 80004d6:	0013      	movs	r3, r2
 80004d8:	005b      	lsls	r3, r3, #1
 80004da:	189b      	adds	r3, r3, r2
 80004dc:	43db      	mvns	r3, r3
 80004de:	400b      	ands	r3, r1
 80004e0:	001a      	movs	r2, r3
 80004e2:	68bb      	ldr	r3, [r7, #8]
 80004e4:	435b      	muls	r3, r3
 80004e6:	6879      	ldr	r1, [r7, #4]
 80004e8:	434b      	muls	r3, r1
 80004ea:	431a      	orrs	r2, r3
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	601a      	str	r2, [r3, #0]
}
 80004f0:	46c0      	nop			; (mov r8, r8)
 80004f2:	46bd      	mov	sp, r7
 80004f4:	b004      	add	sp, #16
 80004f6:	bd80      	pop	{r7, pc}

080004f8 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b084      	sub	sp, #16
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	60f8      	str	r0, [r7, #12]
 8000500:	60b9      	str	r1, [r7, #8]
 8000502:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8000504:	68fb      	ldr	r3, [r7, #12]
 8000506:	685b      	ldr	r3, [r3, #4]
 8000508:	68ba      	ldr	r2, [r7, #8]
 800050a:	43d2      	mvns	r2, r2
 800050c:	401a      	ands	r2, r3
 800050e:	68bb      	ldr	r3, [r7, #8]
 8000510:	6879      	ldr	r1, [r7, #4]
 8000512:	434b      	muls	r3, r1
 8000514:	431a      	orrs	r2, r3
 8000516:	68fb      	ldr	r3, [r7, #12]
 8000518:	605a      	str	r2, [r3, #4]
}
 800051a:	46c0      	nop			; (mov r8, r8)
 800051c:	46bd      	mov	sp, r7
 800051e:	b004      	add	sp, #16
 8000520:	bd80      	pop	{r7, pc}

08000522 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8000522:	b580      	push	{r7, lr}
 8000524:	b084      	sub	sp, #16
 8000526:	af00      	add	r7, sp, #0
 8000528:	60f8      	str	r0, [r7, #12]
 800052a:	60b9      	str	r1, [r7, #8]
 800052c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 800052e:	68fb      	ldr	r3, [r7, #12]
 8000530:	6899      	ldr	r1, [r3, #8]
 8000532:	68bb      	ldr	r3, [r7, #8]
 8000534:	435b      	muls	r3, r3
 8000536:	001a      	movs	r2, r3
 8000538:	0013      	movs	r3, r2
 800053a:	005b      	lsls	r3, r3, #1
 800053c:	189b      	adds	r3, r3, r2
 800053e:	43db      	mvns	r3, r3
 8000540:	400b      	ands	r3, r1
 8000542:	001a      	movs	r2, r3
 8000544:	68bb      	ldr	r3, [r7, #8]
 8000546:	435b      	muls	r3, r3
 8000548:	6879      	ldr	r1, [r7, #4]
 800054a:	434b      	muls	r3, r1
 800054c:	431a      	orrs	r2, r3
 800054e:	68fb      	ldr	r3, [r7, #12]
 8000550:	609a      	str	r2, [r3, #8]
}
 8000552:	46c0      	nop			; (mov r8, r8)
 8000554:	46bd      	mov	sp, r7
 8000556:	b004      	add	sp, #16
 8000558:	bd80      	pop	{r7, pc}

0800055a <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800055a:	b580      	push	{r7, lr}
 800055c:	b084      	sub	sp, #16
 800055e:	af00      	add	r7, sp, #0
 8000560:	60f8      	str	r0, [r7, #12]
 8000562:	60b9      	str	r1, [r7, #8]
 8000564:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8000566:	68fb      	ldr	r3, [r7, #12]
 8000568:	68d9      	ldr	r1, [r3, #12]
 800056a:	68bb      	ldr	r3, [r7, #8]
 800056c:	435b      	muls	r3, r3
 800056e:	001a      	movs	r2, r3
 8000570:	0013      	movs	r3, r2
 8000572:	005b      	lsls	r3, r3, #1
 8000574:	189b      	adds	r3, r3, r2
 8000576:	43db      	mvns	r3, r3
 8000578:	400b      	ands	r3, r1
 800057a:	001a      	movs	r2, r3
 800057c:	68bb      	ldr	r3, [r7, #8]
 800057e:	435b      	muls	r3, r3
 8000580:	6879      	ldr	r1, [r7, #4]
 8000582:	434b      	muls	r3, r1
 8000584:	431a      	orrs	r2, r3
 8000586:	68fb      	ldr	r3, [r7, #12]
 8000588:	60da      	str	r2, [r3, #12]
}
 800058a:	46c0      	nop			; (mov r8, r8)
 800058c:	46bd      	mov	sp, r7
 800058e:	b004      	add	sp, #16
 8000590:	bd80      	pop	{r7, pc}
	...

08000594 <main>:
extern const unsigned char logo[];
uint8_t black_image[IMAGE_SIZE_EPD_200_200_PX];
uint8_t red_image[IMAGE_SIZE_EPD_200_200_PX];

int main(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b084      	sub	sp, #16
 8000598:	af02      	add	r7, sp, #8
	rcc_init();
 800059a:	f000 f8ad 	bl	80006f8 <rcc_init>

	LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 800059e:	2001      	movs	r0, #1
 80005a0:	f7ff ff56 	bl	8000450 <LL_IOP_GRP1_EnableClock>
	LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOC);
 80005a4:	2004      	movs	r0, #4
 80005a6:	f7ff ff53 	bl	8000450 <LL_IOP_GRP1_EnableClock>

	LL_GPIO_SetPinOutputType(RST_GPIO_Port, RST_Pin, LL_GPIO_OUTPUT_PUSHPULL);
 80005aa:	4b4c      	ldr	r3, [pc, #304]	; (80006dc <main+0x148>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	2101      	movs	r1, #1
 80005b0:	0018      	movs	r0, r3
 80005b2:	f7ff ffa1 	bl	80004f8 <LL_GPIO_SetPinOutputType>
	LL_GPIO_SetPinPull(RST_GPIO_Port, RST_Pin, LL_GPIO_PULL_NO);
 80005b6:	4b49      	ldr	r3, [pc, #292]	; (80006dc <main+0x148>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	2101      	movs	r1, #1
 80005bc:	0018      	movs	r0, r3
 80005be:	f7ff ffcc 	bl	800055a <LL_GPIO_SetPinPull>
	LL_GPIO_SetPinSpeed(RST_GPIO_Port, RST_Pin, LL_GPIO_SPEED_FREQ_LOW);
 80005c2:	4b46      	ldr	r3, [pc, #280]	; (80006dc <main+0x148>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	2101      	movs	r1, #1
 80005c8:	0018      	movs	r0, r3
 80005ca:	f7ff ffaa 	bl	8000522 <LL_GPIO_SetPinSpeed>
	LL_GPIO_SetPinMode(RST_GPIO_Port, RST_Pin, LL_GPIO_MODE_OUTPUT);
 80005ce:	4b43      	ldr	r3, [pc, #268]	; (80006dc <main+0x148>)
 80005d0:	2201      	movs	r2, #1
 80005d2:	2101      	movs	r1, #1
 80005d4:	0018      	movs	r0, r3
 80005d6:	f7ff ff73 	bl	80004c0 <LL_GPIO_SetPinMode>

	LL_GPIO_SetPinOutputType(DC_GPIO_Port, DC_Pin, LL_GPIO_OUTPUT_PUSHPULL);
 80005da:	4b40      	ldr	r3, [pc, #256]	; (80006dc <main+0x148>)
 80005dc:	2200      	movs	r2, #0
 80005de:	2102      	movs	r1, #2
 80005e0:	0018      	movs	r0, r3
 80005e2:	f7ff ff89 	bl	80004f8 <LL_GPIO_SetPinOutputType>
	LL_GPIO_SetPinPull(DC_GPIO_Port, DC_Pin, LL_GPIO_PULL_NO);
 80005e6:	4b3d      	ldr	r3, [pc, #244]	; (80006dc <main+0x148>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	2102      	movs	r1, #2
 80005ec:	0018      	movs	r0, r3
 80005ee:	f7ff ffb4 	bl	800055a <LL_GPIO_SetPinPull>
	LL_GPIO_SetPinSpeed(DC_GPIO_Port, DC_Pin, LL_GPIO_SPEED_FREQ_LOW);
 80005f2:	4b3a      	ldr	r3, [pc, #232]	; (80006dc <main+0x148>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	2102      	movs	r1, #2
 80005f8:	0018      	movs	r0, r3
 80005fa:	f7ff ff92 	bl	8000522 <LL_GPIO_SetPinSpeed>
	LL_GPIO_SetPinMode(DC_GPIO_Port, DC_Pin, LL_GPIO_MODE_OUTPUT);
 80005fe:	4b37      	ldr	r3, [pc, #220]	; (80006dc <main+0x148>)
 8000600:	2201      	movs	r2, #1
 8000602:	2102      	movs	r1, #2
 8000604:	0018      	movs	r0, r3
 8000606:	f7ff ff5b 	bl	80004c0 <LL_GPIO_SetPinMode>

	LL_GPIO_SetPinPull(BUSY_GPIO_Port, BUSY_Pin, LL_GPIO_PULL_NO);
 800060a:	4b34      	ldr	r3, [pc, #208]	; (80006dc <main+0x148>)
 800060c:	2200      	movs	r2, #0
 800060e:	2104      	movs	r1, #4
 8000610:	0018      	movs	r0, r3
 8000612:	f7ff ffa2 	bl	800055a <LL_GPIO_SetPinPull>
	LL_GPIO_SetPinSpeed(BUSY_GPIO_Port, BUSY_Pin, LL_GPIO_SPEED_FREQ_LOW);
 8000616:	4b31      	ldr	r3, [pc, #196]	; (80006dc <main+0x148>)
 8000618:	2200      	movs	r2, #0
 800061a:	2104      	movs	r1, #4
 800061c:	0018      	movs	r0, r3
 800061e:	f7ff ff80 	bl	8000522 <LL_GPIO_SetPinSpeed>
	LL_GPIO_SetPinMode(BUSY_GPIO_Port, BUSY_Pin, LL_GPIO_MODE_INPUT);
 8000622:	4b2e      	ldr	r3, [pc, #184]	; (80006dc <main+0x148>)
 8000624:	2200      	movs	r2, #0
 8000626:	2104      	movs	r1, #4
 8000628:	0018      	movs	r0, r3
 800062a:	f7ff ff49 	bl	80004c0 <LL_GPIO_SetPinMode>

	spi_init();
 800062e:	f000 facf 	bl	8000bd0 <spi_init>

	DEV_Module_Init();
 8000632:	f000 fcf5 	bl	8001020 <DEV_Module_Init>

	EPD_1IN54B_Init();
 8000636:	f001 fb31 	bl	8001c9c <EPD_1IN54B_Init>
	EPD_1IN54B_Clear();
 800063a:	f001 fb7e 	bl	8001d3a <EPD_1IN54B_Clear>

	uint8_t *BlackImage, *RedImage;

	BlackImage = black_image;
 800063e:	4b28      	ldr	r3, [pc, #160]	; (80006e0 <main+0x14c>)
 8000640:	607b      	str	r3, [r7, #4]
	RedImage = red_image;
 8000642:	4b28      	ldr	r3, [pc, #160]	; (80006e4 <main+0x150>)
 8000644:	603b      	str	r3, [r7, #0]

    Paint_NewImage(BlackImage, EPD_1IN54B_WIDTH, EPD_1IN54B_HEIGHT, ROTATE_270, WHITE);
 8000646:	2387      	movs	r3, #135	; 0x87
 8000648:	005b      	lsls	r3, r3, #1
 800064a:	6878      	ldr	r0, [r7, #4]
 800064c:	22ff      	movs	r2, #255	; 0xff
 800064e:	9200      	str	r2, [sp, #0]
 8000650:	22c8      	movs	r2, #200	; 0xc8
 8000652:	21c8      	movs	r1, #200	; 0xc8
 8000654:	f000 fcfc 	bl	8001050 <Paint_NewImage>
    Paint_NewImage(RedImage, EPD_1IN54B_WIDTH, EPD_1IN54B_HEIGHT, ROTATE_270, WHITE);
 8000658:	2387      	movs	r3, #135	; 0x87
 800065a:	005b      	lsls	r3, r3, #1
 800065c:	6838      	ldr	r0, [r7, #0]
 800065e:	22ff      	movs	r2, #255	; 0xff
 8000660:	9200      	str	r2, [sp, #0]
 8000662:	22c8      	movs	r2, #200	; 0xc8
 8000664:	21c8      	movs	r1, #200	; 0xc8
 8000666:	f000 fcf3 	bl	8001050 <Paint_NewImage>

    Paint_SelectImage(BlackImage);
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	0018      	movs	r0, r3
 800066e:	f000 fd5d 	bl	800112c <Paint_SelectImage>
    Paint_Clear(WHITE);
 8000672:	20ff      	movs	r0, #255	; 0xff
 8000674:	f000 ff0c 	bl	8001490 <Paint_Clear>
    Paint_DrawBitMap(logo);
 8000678:	4b1b      	ldr	r3, [pc, #108]	; (80006e8 <main+0x154>)
 800067a:	0018      	movs	r0, r3
 800067c:	f001 f940 	bl	8001900 <Paint_DrawBitMap>

    Paint_SelectImage(RedImage);
 8000680:	683b      	ldr	r3, [r7, #0]
 8000682:	0018      	movs	r0, r3
 8000684:	f000 fd52 	bl	800112c <Paint_SelectImage>
    Paint_Clear(WHITE);
 8000688:	20ff      	movs	r0, #255	; 0xff
 800068a:	f000 ff01 	bl	8001490 <Paint_Clear>
    Paint_DrawString_EN(5, 175, "stm32wrobotyce.pl", &Font16, WHITE, BLACK);
 800068e:	4b17      	ldr	r3, [pc, #92]	; (80006ec <main+0x158>)
 8000690:	4a17      	ldr	r2, [pc, #92]	; (80006f0 <main+0x15c>)
 8000692:	2100      	movs	r1, #0
 8000694:	9101      	str	r1, [sp, #4]
 8000696:	21ff      	movs	r1, #255	; 0xff
 8000698:	9100      	str	r1, [sp, #0]
 800069a:	21af      	movs	r1, #175	; 0xaf
 800069c:	2005      	movs	r0, #5
 800069e:	f001 f8b1 	bl	8001804 <Paint_DrawString_EN>

    EPD_1IN54B_Display(BlackImage, RedImage);
 80006a2:	683a      	ldr	r2, [r7, #0]
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	0011      	movs	r1, r2
 80006a8:	0018      	movs	r0, r3
 80006aa:	f001 fbbb 	bl	8001e24 <EPD_1IN54B_Display>

	software_timer_task_init(&spi_timer, SPI_TASK_TIME);
 80006ae:	23fa      	movs	r3, #250	; 0xfa
 80006b0:	009a      	lsls	r2, r3, #2
 80006b2:	4b10      	ldr	r3, [pc, #64]	; (80006f4 <main+0x160>)
 80006b4:	0011      	movs	r1, r2
 80006b6:	0018      	movs	r0, r3
 80006b8:	f000 f85a 	bl	8000770 <software_timer_task_init>

	while (1)
	{
		  if((software_timer_get_ms_tick() - spi_timer.ms_tick) >= spi_timer.task_time)
 80006bc:	f000 f876 	bl	80007ac <software_timer_get_ms_tick>
 80006c0:	0002      	movs	r2, r0
 80006c2:	4b0c      	ldr	r3, [pc, #48]	; (80006f4 <main+0x160>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	1ad2      	subs	r2, r2, r3
 80006c8:	4b0a      	ldr	r3, [pc, #40]	; (80006f4 <main+0x160>)
 80006ca:	685b      	ldr	r3, [r3, #4]
 80006cc:	429a      	cmp	r2, r3
 80006ce:	d3f5      	bcc.n	80006bc <main+0x128>
		  {
			  	spi_timer.ms_tick = software_timer_get_ms_tick();
 80006d0:	f000 f86c 	bl	80007ac <software_timer_get_ms_tick>
 80006d4:	0002      	movs	r2, r0
 80006d6:	4b07      	ldr	r3, [pc, #28]	; (80006f4 <main+0x160>)
 80006d8:	601a      	str	r2, [r3, #0]
		  if((software_timer_get_ms_tick() - spi_timer.ms_tick) >= spi_timer.task_time)
 80006da:	e7ef      	b.n	80006bc <main+0x128>
 80006dc:	50000800 	.word	0x50000800
 80006e0:	20000098 	.word	0x20000098
 80006e4:	20001420 	.word	0x20001420
 80006e8:	08002ec0 	.word	0x08002ec0
 80006ec:	20000008 	.word	0x20000008
 80006f0:	08002b1c 	.word	0x08002b1c
 80006f4:	20000090 	.word	0x20000090

080006f8 <rcc_init>:
		  }
	}
}

void rcc_init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
	LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 80006fc:	2002      	movs	r0, #2
 80006fe:	f7ff febd 	bl	800047c <LL_FLASH_SetLatency>

	LL_RCC_HSI_Enable();
 8000702:	f7ff fde7 	bl	80002d4 <LL_RCC_HSI_Enable>
	while(LL_RCC_HSI_IsReady() != 1)
 8000706:	46c0      	nop			; (mov r8, r8)
 8000708:	f7ff fdf2 	bl	80002f0 <LL_RCC_HSI_IsReady>
 800070c:	0003      	movs	r3, r0
 800070e:	2b01      	cmp	r3, #1
 8000710:	d1fa      	bne.n	8000708 <rcc_init+0x10>
		;

	LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_1, 8, LL_RCC_PLLR_DIV_2);
 8000712:	2380      	movs	r3, #128	; 0x80
 8000714:	059b      	lsls	r3, r3, #22
 8000716:	2208      	movs	r2, #8
 8000718:	2100      	movs	r1, #0
 800071a:	2002      	movs	r0, #2
 800071c:	f7ff fe6a 	bl	80003f4 <LL_RCC_PLL_ConfigDomain_SYS>

	LL_RCC_PLL_Enable();
 8000720:	f7ff fe46 	bl	80003b0 <LL_RCC_PLL_Enable>
	while(LL_RCC_PLL_IsReady() != 1)
 8000724:	46c0      	nop			; (mov r8, r8)
 8000726:	f7ff fe51 	bl	80003cc <LL_RCC_PLL_IsReady>
 800072a:	0003      	movs	r3, r0
 800072c:	2b01      	cmp	r3, #1
 800072e:	d1fa      	bne.n	8000726 <rcc_init+0x2e>
		;

	LL_RCC_PLL_EnableDomain_SYS();
 8000730:	f7ff fe80 	bl	8000434 <LL_RCC_PLL_EnableDomain_SYS>

	LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000734:	2000      	movs	r0, #0
 8000736:	f7ff fe0f 	bl	8000358 <LL_RCC_SetAHBPrescaler>
	LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 800073a:	2000      	movs	r0, #0
 800073c:	f7ff fe22 	bl	8000384 <LL_RCC_SetAPB1Prescaler>

	LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000740:	2002      	movs	r0, #2
 8000742:	f7ff fde9 	bl	8000318 <LL_RCC_SetSysClkSource>
	while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000746:	46c0      	nop			; (mov r8, r8)
 8000748:	f7ff fdfa 	bl	8000340 <LL_RCC_GetSysClkSource>
 800074c:	0003      	movs	r3, r0
 800074e:	2b10      	cmp	r3, #16
 8000750:	d1fa      	bne.n	8000748 <rcc_init+0x50>
		;

	LL_SetSystemCoreClock(64000000);
 8000752:	4b06      	ldr	r3, [pc, #24]	; (800076c <rcc_init+0x74>)
 8000754:	0018      	movs	r0, r3
 8000756:	f7ff fdaf 	bl	80002b8 <LL_SetSystemCoreClock>
	LL_Init1msTick(64000000);
 800075a:	4b04      	ldr	r3, [pc, #16]	; (800076c <rcc_init+0x74>)
 800075c:	0018      	movs	r0, r3
 800075e:	f7ff fd77 	bl	8000250 <LL_Init1msTick>
	LL_SYSTICK_EnableIT();
 8000762:	f7ff fe9f 	bl	80004a4 <LL_SYSTICK_EnableIT>
}
 8000766:	46c0      	nop			; (mov r8, r8)
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	03d09000 	.word	0x03d09000

08000770 <software_timer_task_init>:

static uint32_t ms_tick = 0;
software_timer_t timer = {0};

void software_timer_task_init(software_timer_t *timer, uint32_t time)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
 8000778:	6039      	str	r1, [r7, #0]
	timer->ms_tick = software_timer_get_ms_tick();
 800077a:	f000 f817 	bl	80007ac <software_timer_get_ms_tick>
 800077e:	0002      	movs	r2, r0
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	601a      	str	r2, [r3, #0]
	timer->task_time = time;
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	683a      	ldr	r2, [r7, #0]
 8000788:	605a      	str	r2, [r3, #4]
}
 800078a:	46c0      	nop			; (mov r8, r8)
 800078c:	46bd      	mov	sp, r7
 800078e:	b002      	add	sp, #8
 8000790:	bd80      	pop	{r7, pc}
	...

08000794 <software_timer_inc_ms_tick>:

void software_timer_inc_ms_tick(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
	ms_tick++;
 8000798:	4b03      	ldr	r3, [pc, #12]	; (80007a8 <software_timer_inc_ms_tick+0x14>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	1c5a      	adds	r2, r3, #1
 800079e:	4b02      	ldr	r3, [pc, #8]	; (80007a8 <software_timer_inc_ms_tick+0x14>)
 80007a0:	601a      	str	r2, [r3, #0]
}
 80007a2:	46c0      	nop			; (mov r8, r8)
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	200027a8 	.word	0x200027a8

080007ac <software_timer_get_ms_tick>:

uint32_t software_timer_get_ms_tick(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
	return ms_tick;
 80007b0:	4b02      	ldr	r3, [pc, #8]	; (80007bc <software_timer_get_ms_tick+0x10>)
 80007b2:	681b      	ldr	r3, [r3, #0]
}
 80007b4:	0018      	movs	r0, r3
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	46c0      	nop			; (mov r8, r8)
 80007bc:	200027a8 	.word	0x200027a8

080007c0 <LL_APB2_GRP1_EnableClock>:
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b084      	sub	sp, #16
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APBENR2, Periphs);
 80007c8:	4b07      	ldr	r3, [pc, #28]	; (80007e8 <LL_APB2_GRP1_EnableClock+0x28>)
 80007ca:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80007cc:	4b06      	ldr	r3, [pc, #24]	; (80007e8 <LL_APB2_GRP1_EnableClock+0x28>)
 80007ce:	687a      	ldr	r2, [r7, #4]
 80007d0:	430a      	orrs	r2, r1
 80007d2:	641a      	str	r2, [r3, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APBENR2, Periphs);
 80007d4:	4b04      	ldr	r3, [pc, #16]	; (80007e8 <LL_APB2_GRP1_EnableClock+0x28>)
 80007d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d8:	687a      	ldr	r2, [r7, #4]
 80007da:	4013      	ands	r3, r2
 80007dc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80007de:	68fb      	ldr	r3, [r7, #12]
}
 80007e0:	46c0      	nop			; (mov r8, r8)
 80007e2:	46bd      	mov	sp, r7
 80007e4:	b004      	add	sp, #16
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	40021000 	.word	0x40021000

080007ec <LL_IOP_GRP1_EnableClock>:
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b084      	sub	sp, #16
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->IOPENR, Periphs);
 80007f4:	4b07      	ldr	r3, [pc, #28]	; (8000814 <LL_IOP_GRP1_EnableClock+0x28>)
 80007f6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80007f8:	4b06      	ldr	r3, [pc, #24]	; (8000814 <LL_IOP_GRP1_EnableClock+0x28>)
 80007fa:	687a      	ldr	r2, [r7, #4]
 80007fc:	430a      	orrs	r2, r1
 80007fe:	635a      	str	r2, [r3, #52]	; 0x34
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8000800:	4b04      	ldr	r3, [pc, #16]	; (8000814 <LL_IOP_GRP1_EnableClock+0x28>)
 8000802:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000804:	687a      	ldr	r2, [r7, #4]
 8000806:	4013      	ands	r3, r2
 8000808:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800080a:	68fb      	ldr	r3, [r7, #12]
}
 800080c:	46c0      	nop			; (mov r8, r8)
 800080e:	46bd      	mov	sp, r7
 8000810:	b004      	add	sp, #16
 8000812:	bd80      	pop	{r7, pc}
 8000814:	40021000 	.word	0x40021000

08000818 <LL_GPIO_SetPinMode>:
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b084      	sub	sp, #16
 800081c:	af00      	add	r7, sp, #0
 800081e:	60f8      	str	r0, [r7, #12]
 8000820:	60b9      	str	r1, [r7, #8]
 8000822:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	6819      	ldr	r1, [r3, #0]
 8000828:	68bb      	ldr	r3, [r7, #8]
 800082a:	435b      	muls	r3, r3
 800082c:	001a      	movs	r2, r3
 800082e:	0013      	movs	r3, r2
 8000830:	005b      	lsls	r3, r3, #1
 8000832:	189b      	adds	r3, r3, r2
 8000834:	43db      	mvns	r3, r3
 8000836:	400b      	ands	r3, r1
 8000838:	001a      	movs	r2, r3
 800083a:	68bb      	ldr	r3, [r7, #8]
 800083c:	435b      	muls	r3, r3
 800083e:	6879      	ldr	r1, [r7, #4]
 8000840:	434b      	muls	r3, r1
 8000842:	431a      	orrs	r2, r3
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	601a      	str	r2, [r3, #0]
}
 8000848:	46c0      	nop			; (mov r8, r8)
 800084a:	46bd      	mov	sp, r7
 800084c:	b004      	add	sp, #16
 800084e:	bd80      	pop	{r7, pc}

08000850 <LL_GPIO_SetPinOutputType>:
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b084      	sub	sp, #16
 8000854:	af00      	add	r7, sp, #0
 8000856:	60f8      	str	r0, [r7, #12]
 8000858:	60b9      	str	r1, [r7, #8]
 800085a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800085c:	68fb      	ldr	r3, [r7, #12]
 800085e:	685b      	ldr	r3, [r3, #4]
 8000860:	68ba      	ldr	r2, [r7, #8]
 8000862:	43d2      	mvns	r2, r2
 8000864:	401a      	ands	r2, r3
 8000866:	68bb      	ldr	r3, [r7, #8]
 8000868:	6879      	ldr	r1, [r7, #4]
 800086a:	434b      	muls	r3, r1
 800086c:	431a      	orrs	r2, r3
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	605a      	str	r2, [r3, #4]
}
 8000872:	46c0      	nop			; (mov r8, r8)
 8000874:	46bd      	mov	sp, r7
 8000876:	b004      	add	sp, #16
 8000878:	bd80      	pop	{r7, pc}

0800087a <LL_GPIO_SetPinSpeed>:
{
 800087a:	b580      	push	{r7, lr}
 800087c:	b084      	sub	sp, #16
 800087e:	af00      	add	r7, sp, #0
 8000880:	60f8      	str	r0, [r7, #12]
 8000882:	60b9      	str	r1, [r7, #8]
 8000884:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	6899      	ldr	r1, [r3, #8]
 800088a:	68bb      	ldr	r3, [r7, #8]
 800088c:	435b      	muls	r3, r3
 800088e:	001a      	movs	r2, r3
 8000890:	0013      	movs	r3, r2
 8000892:	005b      	lsls	r3, r3, #1
 8000894:	189b      	adds	r3, r3, r2
 8000896:	43db      	mvns	r3, r3
 8000898:	400b      	ands	r3, r1
 800089a:	001a      	movs	r2, r3
 800089c:	68bb      	ldr	r3, [r7, #8]
 800089e:	435b      	muls	r3, r3
 80008a0:	6879      	ldr	r1, [r7, #4]
 80008a2:	434b      	muls	r3, r1
 80008a4:	431a      	orrs	r2, r3
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	609a      	str	r2, [r3, #8]
}
 80008aa:	46c0      	nop			; (mov r8, r8)
 80008ac:	46bd      	mov	sp, r7
 80008ae:	b004      	add	sp, #16
 80008b0:	bd80      	pop	{r7, pc}

080008b2 <LL_GPIO_SetPinPull>:
{
 80008b2:	b580      	push	{r7, lr}
 80008b4:	b084      	sub	sp, #16
 80008b6:	af00      	add	r7, sp, #0
 80008b8:	60f8      	str	r0, [r7, #12]
 80008ba:	60b9      	str	r1, [r7, #8]
 80008bc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	68d9      	ldr	r1, [r3, #12]
 80008c2:	68bb      	ldr	r3, [r7, #8]
 80008c4:	435b      	muls	r3, r3
 80008c6:	001a      	movs	r2, r3
 80008c8:	0013      	movs	r3, r2
 80008ca:	005b      	lsls	r3, r3, #1
 80008cc:	189b      	adds	r3, r3, r2
 80008ce:	43db      	mvns	r3, r3
 80008d0:	400b      	ands	r3, r1
 80008d2:	001a      	movs	r2, r3
 80008d4:	68bb      	ldr	r3, [r7, #8]
 80008d6:	435b      	muls	r3, r3
 80008d8:	6879      	ldr	r1, [r7, #4]
 80008da:	434b      	muls	r3, r1
 80008dc:	431a      	orrs	r2, r3
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	60da      	str	r2, [r3, #12]
}
 80008e2:	46c0      	nop			; (mov r8, r8)
 80008e4:	46bd      	mov	sp, r7
 80008e6:	b004      	add	sp, #16
 80008e8:	bd80      	pop	{r7, pc}

080008ea <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_6
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80008ea:	b580      	push	{r7, lr}
 80008ec:	b084      	sub	sp, #16
 80008ee:	af00      	add	r7, sp, #0
 80008f0:	60f8      	str	r0, [r7, #12]
 80008f2:	60b9      	str	r1, [r7, #8]
 80008f4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	6a19      	ldr	r1, [r3, #32]
 80008fa:	68bb      	ldr	r3, [r7, #8]
 80008fc:	435b      	muls	r3, r3
 80008fe:	68ba      	ldr	r2, [r7, #8]
 8000900:	4353      	muls	r3, r2
 8000902:	68ba      	ldr	r2, [r7, #8]
 8000904:	435a      	muls	r2, r3
 8000906:	0013      	movs	r3, r2
 8000908:	011b      	lsls	r3, r3, #4
 800090a:	1a9b      	subs	r3, r3, r2
 800090c:	43db      	mvns	r3, r3
 800090e:	400b      	ands	r3, r1
 8000910:	001a      	movs	r2, r3
 8000912:	68bb      	ldr	r3, [r7, #8]
 8000914:	435b      	muls	r3, r3
 8000916:	68b9      	ldr	r1, [r7, #8]
 8000918:	434b      	muls	r3, r1
 800091a:	68b9      	ldr	r1, [r7, #8]
 800091c:	434b      	muls	r3, r1
 800091e:	6879      	ldr	r1, [r7, #4]
 8000920:	434b      	muls	r3, r1
 8000922:	431a      	orrs	r2, r3
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	621a      	str	r2, [r3, #32]
             ((((Pin * Pin) * Pin) * Pin) * Alternate));
}
 8000928:	46c0      	nop			; (mov r8, r8)
 800092a:	46bd      	mov	sp, r7
 800092c:	b004      	add	sp, #16
 800092e:	bd80      	pop	{r7, pc}

08000930 <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	2240      	movs	r2, #64	; 0x40
 800093e:	431a      	orrs	r2, r3
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	601a      	str	r2, [r3, #0]
}
 8000944:	46c0      	nop			; (mov r8, r8)
 8000946:	46bd      	mov	sp, r7
 8000948:	b002      	add	sp, #8
 800094a:	bd80      	pop	{r7, pc}

0800094c <LL_SPI_Disable>:
  * @rmtoll CR1          SPE           LL_SPI_Disable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Disable(SPI_TypeDef *SPIx)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	2240      	movs	r2, #64	; 0x40
 800095a:	4393      	bics	r3, r2
 800095c:	001a      	movs	r2, r3
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	601a      	str	r2, [r3, #0]
}
 8000962:	46c0      	nop			; (mov r8, r8)
 8000964:	46bd      	mov	sp, r7
 8000966:	b002      	add	sp, #8
 8000968:	bd80      	pop	{r7, pc}
	...

0800096c <LL_SPI_SetMode>:
  *         @arg @ref LL_SPI_MODE_MASTER
  *         @arg @ref LL_SPI_MODE_SLAVE
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetMode(SPI_TypeDef *SPIx, uint32_t Mode)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
 8000974:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_MSTR | SPI_CR1_SSI, Mode);
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	4a05      	ldr	r2, [pc, #20]	; (8000990 <LL_SPI_SetMode+0x24>)
 800097c:	401a      	ands	r2, r3
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	431a      	orrs	r2, r3
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	601a      	str	r2, [r3, #0]
}
 8000986:	46c0      	nop			; (mov r8, r8)
 8000988:	46bd      	mov	sp, r7
 800098a:	b002      	add	sp, #8
 800098c:	bd80      	pop	{r7, pc}
 800098e:	46c0      	nop			; (mov r8, r8)
 8000990:	fffffefb 	.word	0xfffffefb

08000994 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
 800099c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	685b      	ldr	r3, [r3, #4]
 80009a2:	2210      	movs	r2, #16
 80009a4:	4393      	bics	r3, r2
 80009a6:	001a      	movs	r2, r3
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	431a      	orrs	r2, r3
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	605a      	str	r2, [r3, #4]
}
 80009b0:	46c0      	nop			; (mov r8, r8)
 80009b2:	46bd      	mov	sp, r7
 80009b4:	b002      	add	sp, #8
 80009b6:	bd80      	pop	{r7, pc}

080009b8 <LL_SPI_SetClockPhase>:
  *         @arg @ref LL_SPI_PHASE_1EDGE
  *         @arg @ref LL_SPI_PHASE_2EDGE
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetClockPhase(SPI_TypeDef *SPIx, uint32_t ClockPhase)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
 80009c0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPHA, ClockPhase);
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	2201      	movs	r2, #1
 80009c8:	4393      	bics	r3, r2
 80009ca:	001a      	movs	r2, r3
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	431a      	orrs	r2, r3
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	601a      	str	r2, [r3, #0]
}
 80009d4:	46c0      	nop			; (mov r8, r8)
 80009d6:	46bd      	mov	sp, r7
 80009d8:	b002      	add	sp, #8
 80009da:	bd80      	pop	{r7, pc}

080009dc <LL_SPI_SetClockPolarity>:
  *         @arg @ref LL_SPI_POLARITY_LOW
  *         @arg @ref LL_SPI_POLARITY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetClockPolarity(SPI_TypeDef *SPIx, uint32_t ClockPolarity)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
 80009e4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPOL, ClockPolarity);
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	2202      	movs	r2, #2
 80009ec:	4393      	bics	r3, r2
 80009ee:	001a      	movs	r2, r3
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	431a      	orrs	r2, r3
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	601a      	str	r2, [r3, #0]
}
 80009f8:	46c0      	nop			; (mov r8, r8)
 80009fa:	46bd      	mov	sp, r7
 80009fc:	b002      	add	sp, #8
 80009fe:	bd80      	pop	{r7, pc}

08000a00 <LL_SPI_SetBaudRatePrescaler>:
  *         @arg @ref LL_SPI_BAUDRATEPRESCALER_DIV128
  *         @arg @ref LL_SPI_BAUDRATEPRESCALER_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetBaudRatePrescaler(SPI_TypeDef *SPIx, uint32_t BaudRate)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
 8000a08:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_BR, BaudRate);
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	2238      	movs	r2, #56	; 0x38
 8000a10:	4393      	bics	r3, r2
 8000a12:	001a      	movs	r2, r3
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	431a      	orrs	r2, r3
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	601a      	str	r2, [r3, #0]
}
 8000a1c:	46c0      	nop			; (mov r8, r8)
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	b002      	add	sp, #8
 8000a22:	bd80      	pop	{r7, pc}

08000a24 <LL_SPI_SetTransferBitOrder>:
  *         @arg @ref LL_SPI_LSB_FIRST
  *         @arg @ref LL_SPI_MSB_FIRST
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetTransferBitOrder(SPI_TypeDef *SPIx, uint32_t BitOrder)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
 8000a2c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_LSBFIRST, BitOrder);
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	2280      	movs	r2, #128	; 0x80
 8000a34:	4393      	bics	r3, r2
 8000a36:	001a      	movs	r2, r3
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	431a      	orrs	r2, r3
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	601a      	str	r2, [r3, #0]
}
 8000a40:	46c0      	nop			; (mov r8, r8)
 8000a42:	46bd      	mov	sp, r7
 8000a44:	b002      	add	sp, #8
 8000a46:	bd80      	pop	{r7, pc}

08000a48 <LL_SPI_SetTransferDirection>:
  *         @arg @ref LL_SPI_HALF_DUPLEX_RX
  *         @arg @ref LL_SPI_HALF_DUPLEX_TX
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetTransferDirection(SPI_TypeDef *SPIx, uint32_t TransferDirection)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
 8000a50:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_RXONLY | SPI_CR1_BIDIMODE | SPI_CR1_BIDIOE, TransferDirection);
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	4a05      	ldr	r2, [pc, #20]	; (8000a6c <LL_SPI_SetTransferDirection+0x24>)
 8000a58:	401a      	ands	r2, r3
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	431a      	orrs	r2, r3
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	601a      	str	r2, [r3, #0]
}
 8000a62:	46c0      	nop			; (mov r8, r8)
 8000a64:	46bd      	mov	sp, r7
 8000a66:	b002      	add	sp, #8
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	46c0      	nop			; (mov r8, r8)
 8000a6c:	ffff3bff 	.word	0xffff3bff

08000a70 <LL_SPI_SetDataWidth>:
  *         @arg @ref LL_SPI_DATAWIDTH_15BIT
  *         @arg @ref LL_SPI_DATAWIDTH_16BIT
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetDataWidth(SPI_TypeDef *SPIx, uint32_t DataWidth)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
 8000a78:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_DS, DataWidth);
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	685b      	ldr	r3, [r3, #4]
 8000a7e:	4a05      	ldr	r2, [pc, #20]	; (8000a94 <LL_SPI_SetDataWidth+0x24>)
 8000a80:	401a      	ands	r2, r3
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	431a      	orrs	r2, r3
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	605a      	str	r2, [r3, #4]
}
 8000a8a:	46c0      	nop			; (mov r8, r8)
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	b002      	add	sp, #8
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	46c0      	nop			; (mov r8, r8)
 8000a94:	fffff0ff 	.word	0xfffff0ff

08000a98 <LL_SPI_SetRxFIFOThreshold>:
  *         @arg @ref LL_SPI_RX_FIFO_TH_HALF
  *         @arg @ref LL_SPI_RX_FIFO_TH_QUARTER
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetRxFIFOThreshold(SPI_TypeDef *SPIx, uint32_t Threshold)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
 8000aa0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRXTH, Threshold);
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	685b      	ldr	r3, [r3, #4]
 8000aa6:	4a05      	ldr	r2, [pc, #20]	; (8000abc <LL_SPI_SetRxFIFOThreshold+0x24>)
 8000aa8:	401a      	ands	r2, r3
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	431a      	orrs	r2, r3
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	605a      	str	r2, [r3, #4]
}
 8000ab2:	46c0      	nop			; (mov r8, r8)
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	b002      	add	sp, #8
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	46c0      	nop			; (mov r8, r8)
 8000abc:	ffffefff 	.word	0xffffefff

08000ac0 <LL_SPI_SetNSSMode>:
  *         @arg @ref LL_SPI_NSS_HARD_INPUT
  *         @arg @ref LL_SPI_NSS_HARD_OUTPUT
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetNSSMode(SPI_TypeDef *SPIx, uint32_t NSS)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
 8000ac8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_SSM,  NSS);
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	4a0a      	ldr	r2, [pc, #40]	; (8000af8 <LL_SPI_SetNSSMode+0x38>)
 8000ad0:	401a      	ands	r2, r3
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	431a      	orrs	r2, r3
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	601a      	str	r2, [r3, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, ((uint32_t)(NSS >> 16U)));
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	685b      	ldr	r3, [r3, #4]
 8000ade:	2204      	movs	r2, #4
 8000ae0:	4393      	bics	r3, r2
 8000ae2:	001a      	movs	r2, r3
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	0c1b      	lsrs	r3, r3, #16
 8000ae8:	431a      	orrs	r2, r3
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	605a      	str	r2, [r3, #4]
}
 8000aee:	46c0      	nop			; (mov r8, r8)
 8000af0:	46bd      	mov	sp, r7
 8000af2:	b002      	add	sp, #8
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	46c0      	nop			; (mov r8, r8)
 8000af8:	fffffdff 	.word	0xfffffdff

08000afc <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	689b      	ldr	r3, [r3, #8]
 8000b08:	2202      	movs	r2, #2
 8000b0a:	4013      	ands	r3, r2
 8000b0c:	2b02      	cmp	r3, #2
 8000b0e:	d101      	bne.n	8000b14 <LL_SPI_IsActiveFlag_TXE+0x18>
 8000b10:	2301      	movs	r3, #1
 8000b12:	e000      	b.n	8000b16 <LL_SPI_IsActiveFlag_TXE+0x1a>
 8000b14:	2300      	movs	r3, #0
}
 8000b16:	0018      	movs	r0, r3
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	b002      	add	sp, #8
 8000b1c:	bd80      	pop	{r7, pc}

08000b1e <LL_SPI_IsActiveFlag_BSY>:
  * @rmtoll SR           BSY           LL_SPI_IsActiveFlag_BSY
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_BSY(SPI_TypeDef *SPIx)
{
 8000b1e:	b580      	push	{r7, lr}
 8000b20:	b082      	sub	sp, #8
 8000b22:	af00      	add	r7, sp, #0
 8000b24:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	689b      	ldr	r3, [r3, #8]
 8000b2a:	2280      	movs	r2, #128	; 0x80
 8000b2c:	4013      	ands	r3, r2
 8000b2e:	2b80      	cmp	r3, #128	; 0x80
 8000b30:	d101      	bne.n	8000b36 <LL_SPI_IsActiveFlag_BSY+0x18>
 8000b32:	2301      	movs	r3, #1
 8000b34:	e000      	b.n	8000b38 <LL_SPI_IsActiveFlag_BSY+0x1a>
 8000b36:	2300      	movs	r3, #0
}
 8000b38:	0018      	movs	r0, r3
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	b002      	add	sp, #8
 8000b3e:	bd80      	pop	{r7, pc}

08000b40 <LL_SPI_GetRxFIFOLevel>:
  *         @arg @ref LL_SPI_RX_FIFO_QUARTER_FULL
  *         @arg @ref LL_SPI_RX_FIFO_HALF_FULL
  *         @arg @ref LL_SPI_RX_FIFO_FULL
  */
__STATIC_INLINE uint32_t LL_SPI_GetRxFIFOLevel(SPI_TypeDef *SPIx)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(SPIx->SR, SPI_SR_FRLVL));
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	689a      	ldr	r2, [r3, #8]
 8000b4c:	23c0      	movs	r3, #192	; 0xc0
 8000b4e:	00db      	lsls	r3, r3, #3
 8000b50:	4013      	ands	r3, r2
}
 8000b52:	0018      	movs	r0, r3
 8000b54:	46bd      	mov	sp, r7
 8000b56:	b002      	add	sp, #8
 8000b58:	bd80      	pop	{r7, pc}

08000b5a <LL_SPI_GetTxFIFOLevel>:
  *         @arg @ref LL_SPI_TX_FIFO_QUARTER_FULL
  *         @arg @ref LL_SPI_TX_FIFO_HALF_FULL
  *         @arg @ref LL_SPI_TX_FIFO_FULL
  */
__STATIC_INLINE uint32_t LL_SPI_GetTxFIFOLevel(SPI_TypeDef *SPIx)
{
 8000b5a:	b580      	push	{r7, lr}
 8000b5c:	b082      	sub	sp, #8
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(SPIx->SR, SPI_SR_FTLVL));
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	689a      	ldr	r2, [r3, #8]
 8000b66:	23c0      	movs	r3, #192	; 0xc0
 8000b68:	015b      	lsls	r3, r3, #5
 8000b6a:	4013      	ands	r3, r2
}
 8000b6c:	0018      	movs	r0, r3
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	b002      	add	sp, #8
 8000b72:	bd80      	pop	{r7, pc}

08000b74 <LL_SPI_ClearFlag_OVR>:
  * @rmtoll SR           OVR           LL_SPI_ClearFlag_OVR
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_ClearFlag_OVR(SPI_TypeDef *SPIx)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b084      	sub	sp, #16
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = SPIx->DR;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	68db      	ldr	r3, [r3, #12]
 8000b80:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8000b82:	68fb      	ldr	r3, [r7, #12]
  tmpreg = SPIx->SR;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	689b      	ldr	r3, [r3, #8]
 8000b88:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8000b8a:	68fb      	ldr	r3, [r7, #12]
}
 8000b8c:	46c0      	nop			; (mov r8, r8)
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	b004      	add	sp, #16
 8000b92:	bd80      	pop	{r7, pc}

08000b94 <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	330c      	adds	r3, #12
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	b2db      	uxtb	r3, r3
}
 8000ba4:	0018      	movs	r0, r3
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	b002      	add	sp, #8
 8000baa:	bd80      	pop	{r7, pc}

08000bac <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b084      	sub	sp, #16
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
 8000bb4:	000a      	movs	r2, r1
 8000bb6:	1cfb      	adds	r3, r7, #3
 8000bb8:	701a      	strb	r2, [r3, #0]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	330c      	adds	r3, #12
 8000bbe:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	1cfa      	adds	r2, r7, #3
 8000bc4:	7812      	ldrb	r2, [r2, #0]
 8000bc6:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 8000bc8:	46c0      	nop			; (mov r8, r8)
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	b004      	add	sp, #16
 8000bce:	bd80      	pop	{r7, pc}

08000bd0 <spi_init>:
#define DUMMY_BYTE 0xFF

SPI_TypeDef * spi = SPI1;

void spi_init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
	LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8000bd4:	2001      	movs	r0, #1
 8000bd6:	f7ff fe09 	bl	80007ec <LL_IOP_GRP1_EnableClock>

	LL_GPIO_SetPinOutputType(SPI_MOSI_GPIO_Port, SPI_MOSI_Pin, LL_GPIO_OUTPUT_PUSHPULL);
 8000bda:	23a0      	movs	r3, #160	; 0xa0
 8000bdc:	05db      	lsls	r3, r3, #23
 8000bde:	2200      	movs	r2, #0
 8000be0:	2180      	movs	r1, #128	; 0x80
 8000be2:	0018      	movs	r0, r3
 8000be4:	f7ff fe34 	bl	8000850 <LL_GPIO_SetPinOutputType>
	LL_GPIO_SetPinPull(SPI_MOSI_GPIO_Port, SPI_MOSI_Pin, LL_GPIO_PULL_NO);
 8000be8:	23a0      	movs	r3, #160	; 0xa0
 8000bea:	05db      	lsls	r3, r3, #23
 8000bec:	2200      	movs	r2, #0
 8000bee:	2180      	movs	r1, #128	; 0x80
 8000bf0:	0018      	movs	r0, r3
 8000bf2:	f7ff fe5e 	bl	80008b2 <LL_GPIO_SetPinPull>
	LL_GPIO_SetPinSpeed(SPI_MOSI_GPIO_Port, SPI_MOSI_Pin, LL_GPIO_SPEED_FREQ_LOW);
 8000bf6:	23a0      	movs	r3, #160	; 0xa0
 8000bf8:	05db      	lsls	r3, r3, #23
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	2180      	movs	r1, #128	; 0x80
 8000bfe:	0018      	movs	r0, r3
 8000c00:	f7ff fe3b 	bl	800087a <LL_GPIO_SetPinSpeed>
	LL_GPIO_SetAFPin_0_7(SPI_MOSI_GPIO_Port, SPI_MOSI_Pin, LL_GPIO_AF_0);
 8000c04:	23a0      	movs	r3, #160	; 0xa0
 8000c06:	05db      	lsls	r3, r3, #23
 8000c08:	2200      	movs	r2, #0
 8000c0a:	2180      	movs	r1, #128	; 0x80
 8000c0c:	0018      	movs	r0, r3
 8000c0e:	f7ff fe6c 	bl	80008ea <LL_GPIO_SetAFPin_0_7>
	LL_GPIO_SetPinMode(SPI_MOSI_GPIO_Port, SPI_MOSI_Pin, LL_GPIO_MODE_ALTERNATE);
 8000c12:	23a0      	movs	r3, #160	; 0xa0
 8000c14:	05db      	lsls	r3, r3, #23
 8000c16:	2202      	movs	r2, #2
 8000c18:	2180      	movs	r1, #128	; 0x80
 8000c1a:	0018      	movs	r0, r3
 8000c1c:	f7ff fdfc 	bl	8000818 <LL_GPIO_SetPinMode>

	LL_GPIO_SetPinOutputType(SPI_MISO_GPIO_Port, SPI_MISO_Pin, LL_GPIO_OUTPUT_PUSHPULL);
 8000c20:	23a0      	movs	r3, #160	; 0xa0
 8000c22:	05db      	lsls	r3, r3, #23
 8000c24:	2200      	movs	r2, #0
 8000c26:	2140      	movs	r1, #64	; 0x40
 8000c28:	0018      	movs	r0, r3
 8000c2a:	f7ff fe11 	bl	8000850 <LL_GPIO_SetPinOutputType>
	LL_GPIO_SetPinPull(SPI_MISO_GPIO_Port, SPI_MISO_Pin, LL_GPIO_PULL_NO);
 8000c2e:	23a0      	movs	r3, #160	; 0xa0
 8000c30:	05db      	lsls	r3, r3, #23
 8000c32:	2200      	movs	r2, #0
 8000c34:	2140      	movs	r1, #64	; 0x40
 8000c36:	0018      	movs	r0, r3
 8000c38:	f7ff fe3b 	bl	80008b2 <LL_GPIO_SetPinPull>
	LL_GPIO_SetPinSpeed(SPI_MISO_GPIO_Port, SPI_MISO_Pin, LL_GPIO_SPEED_FREQ_LOW);
 8000c3c:	23a0      	movs	r3, #160	; 0xa0
 8000c3e:	05db      	lsls	r3, r3, #23
 8000c40:	2200      	movs	r2, #0
 8000c42:	2140      	movs	r1, #64	; 0x40
 8000c44:	0018      	movs	r0, r3
 8000c46:	f7ff fe18 	bl	800087a <LL_GPIO_SetPinSpeed>
	LL_GPIO_SetAFPin_0_7(SPI_MISO_GPIO_Port, SPI_MISO_Pin, LL_GPIO_AF_0);
 8000c4a:	23a0      	movs	r3, #160	; 0xa0
 8000c4c:	05db      	lsls	r3, r3, #23
 8000c4e:	2200      	movs	r2, #0
 8000c50:	2140      	movs	r1, #64	; 0x40
 8000c52:	0018      	movs	r0, r3
 8000c54:	f7ff fe49 	bl	80008ea <LL_GPIO_SetAFPin_0_7>
	LL_GPIO_SetPinMode(SPI_MISO_GPIO_Port, SPI_MISO_Pin, LL_GPIO_MODE_ALTERNATE);
 8000c58:	23a0      	movs	r3, #160	; 0xa0
 8000c5a:	05db      	lsls	r3, r3, #23
 8000c5c:	2202      	movs	r2, #2
 8000c5e:	2140      	movs	r1, #64	; 0x40
 8000c60:	0018      	movs	r0, r3
 8000c62:	f7ff fdd9 	bl	8000818 <LL_GPIO_SetPinMode>

	LL_GPIO_SetPinOutputType(SPI_SCK_GPIO_Port, SPI_SCK_Pin, LL_GPIO_OUTPUT_PUSHPULL);
 8000c66:	23a0      	movs	r3, #160	; 0xa0
 8000c68:	05db      	lsls	r3, r3, #23
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2102      	movs	r1, #2
 8000c6e:	0018      	movs	r0, r3
 8000c70:	f7ff fdee 	bl	8000850 <LL_GPIO_SetPinOutputType>
	LL_GPIO_SetPinPull(SPI_SCK_GPIO_Port, SPI_SCK_Pin, LL_GPIO_PULL_NO);
 8000c74:	23a0      	movs	r3, #160	; 0xa0
 8000c76:	05db      	lsls	r3, r3, #23
 8000c78:	2200      	movs	r2, #0
 8000c7a:	2102      	movs	r1, #2
 8000c7c:	0018      	movs	r0, r3
 8000c7e:	f7ff fe18 	bl	80008b2 <LL_GPIO_SetPinPull>
	LL_GPIO_SetPinSpeed(SPI_SCK_GPIO_Port, SPI_SCK_Pin, LL_GPIO_SPEED_FREQ_LOW);
 8000c82:	23a0      	movs	r3, #160	; 0xa0
 8000c84:	05db      	lsls	r3, r3, #23
 8000c86:	2200      	movs	r2, #0
 8000c88:	2102      	movs	r1, #2
 8000c8a:	0018      	movs	r0, r3
 8000c8c:	f7ff fdf5 	bl	800087a <LL_GPIO_SetPinSpeed>
	LL_GPIO_SetAFPin_0_7(SPI_SCK_GPIO_Port, SPI_SCK_Pin, LL_GPIO_AF_0);
 8000c90:	23a0      	movs	r3, #160	; 0xa0
 8000c92:	05db      	lsls	r3, r3, #23
 8000c94:	2200      	movs	r2, #0
 8000c96:	2102      	movs	r1, #2
 8000c98:	0018      	movs	r0, r3
 8000c9a:	f7ff fe26 	bl	80008ea <LL_GPIO_SetAFPin_0_7>
	LL_GPIO_SetPinMode(SPI_SCK_GPIO_Port, SPI_SCK_Pin, LL_GPIO_MODE_ALTERNATE);
 8000c9e:	23a0      	movs	r3, #160	; 0xa0
 8000ca0:	05db      	lsls	r3, r3, #23
 8000ca2:	2202      	movs	r2, #2
 8000ca4:	2102      	movs	r1, #2
 8000ca6:	0018      	movs	r0, r3
 8000ca8:	f7ff fdb6 	bl	8000818 <LL_GPIO_SetPinMode>

	LL_GPIO_SetPinOutputType(SPI_CS_GPIO_Port, SPI_CS_Pin, LL_GPIO_OUTPUT_PUSHPULL);
 8000cac:	23a0      	movs	r3, #160	; 0xa0
 8000cae:	05db      	lsls	r3, r3, #23
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	2110      	movs	r1, #16
 8000cb4:	0018      	movs	r0, r3
 8000cb6:	f7ff fdcb 	bl	8000850 <LL_GPIO_SetPinOutputType>
	LL_GPIO_SetPinPull(SPI_CS_GPIO_Port, SPI_CS_Pin, LL_GPIO_PULL_NO);
 8000cba:	23a0      	movs	r3, #160	; 0xa0
 8000cbc:	05db      	lsls	r3, r3, #23
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	2110      	movs	r1, #16
 8000cc2:	0018      	movs	r0, r3
 8000cc4:	f7ff fdf5 	bl	80008b2 <LL_GPIO_SetPinPull>
	LL_GPIO_SetPinSpeed(SPI_CS_GPIO_Port, SPI_CS_Pin, LL_GPIO_SPEED_FREQ_LOW);
 8000cc8:	23a0      	movs	r3, #160	; 0xa0
 8000cca:	05db      	lsls	r3, r3, #23
 8000ccc:	2200      	movs	r2, #0
 8000cce:	2110      	movs	r1, #16
 8000cd0:	0018      	movs	r0, r3
 8000cd2:	f7ff fdd2 	bl	800087a <LL_GPIO_SetPinSpeed>
	LL_GPIO_SetPinMode(SPI_CS_GPIO_Port, SPI_CS_Pin, LL_GPIO_MODE_OUTPUT);
 8000cd6:	23a0      	movs	r3, #160	; 0xa0
 8000cd8:	05db      	lsls	r3, r3, #23
 8000cda:	2201      	movs	r2, #1
 8000cdc:	2110      	movs	r1, #16
 8000cde:	0018      	movs	r0, r3
 8000ce0:	f7ff fd9a 	bl	8000818 <LL_GPIO_SetPinMode>

	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8000ce4:	2380      	movs	r3, #128	; 0x80
 8000ce6:	015b      	lsls	r3, r3, #5
 8000ce8:	0018      	movs	r0, r3
 8000cea:	f7ff fd69 	bl	80007c0 <LL_APB2_GRP1_EnableClock>

	LL_SPI_Disable(spi);
 8000cee:	4b26      	ldr	r3, [pc, #152]	; (8000d88 <spi_init+0x1b8>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	0018      	movs	r0, r3
 8000cf4:	f7ff fe2a 	bl	800094c <LL_SPI_Disable>

	LL_SPI_SetMode(spi, LL_SPI_MODE_MASTER);
 8000cf8:	4b23      	ldr	r3, [pc, #140]	; (8000d88 <spi_init+0x1b8>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	2282      	movs	r2, #130	; 0x82
 8000cfe:	0052      	lsls	r2, r2, #1
 8000d00:	0011      	movs	r1, r2
 8000d02:	0018      	movs	r0, r3
 8000d04:	f7ff fe32 	bl	800096c <LL_SPI_SetMode>
	LL_SPI_SetTransferDirection(spi, LL_SPI_FULL_DUPLEX);
 8000d08:	4b1f      	ldr	r3, [pc, #124]	; (8000d88 <spi_init+0x1b8>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	0018      	movs	r0, r3
 8000d10:	f7ff fe9a 	bl	8000a48 <LL_SPI_SetTransferDirection>
	LL_SPI_SetClockPolarity(spi, LL_SPI_POLARITY_LOW);
 8000d14:	4b1c      	ldr	r3, [pc, #112]	; (8000d88 <spi_init+0x1b8>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	2100      	movs	r1, #0
 8000d1a:	0018      	movs	r0, r3
 8000d1c:	f7ff fe5e 	bl	80009dc <LL_SPI_SetClockPolarity>
	LL_SPI_SetClockPhase(spi, LL_SPI_PHASE_1EDGE);
 8000d20:	4b19      	ldr	r3, [pc, #100]	; (8000d88 <spi_init+0x1b8>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	2100      	movs	r1, #0
 8000d26:	0018      	movs	r0, r3
 8000d28:	f7ff fe46 	bl	80009b8 <LL_SPI_SetClockPhase>
	LL_SPI_SetNSSMode(spi, LL_SPI_NSS_SOFT);
 8000d2c:	4b16      	ldr	r3, [pc, #88]	; (8000d88 <spi_init+0x1b8>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	2280      	movs	r2, #128	; 0x80
 8000d32:	0092      	lsls	r2, r2, #2
 8000d34:	0011      	movs	r1, r2
 8000d36:	0018      	movs	r0, r3
 8000d38:	f7ff fec2 	bl	8000ac0 <LL_SPI_SetNSSMode>
	LL_SPI_SetBaudRatePrescaler(spi, LL_SPI_BAUDRATEPRESCALER_DIV8);
 8000d3c:	4b12      	ldr	r3, [pc, #72]	; (8000d88 <spi_init+0x1b8>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	2110      	movs	r1, #16
 8000d42:	0018      	movs	r0, r3
 8000d44:	f7ff fe5c 	bl	8000a00 <LL_SPI_SetBaudRatePrescaler>
	LL_SPI_SetTransferBitOrder(spi, LL_SPI_MSB_FIRST);
 8000d48:	4b0f      	ldr	r3, [pc, #60]	; (8000d88 <spi_init+0x1b8>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	0018      	movs	r0, r3
 8000d50:	f7ff fe68 	bl	8000a24 <LL_SPI_SetTransferBitOrder>
	LL_SPI_SetDataWidth(spi, LL_SPI_DATAWIDTH_8BIT);
 8000d54:	4b0c      	ldr	r3, [pc, #48]	; (8000d88 <spi_init+0x1b8>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	22e0      	movs	r2, #224	; 0xe0
 8000d5a:	00d2      	lsls	r2, r2, #3
 8000d5c:	0011      	movs	r1, r2
 8000d5e:	0018      	movs	r0, r3
 8000d60:	f7ff fe86 	bl	8000a70 <LL_SPI_SetDataWidth>
	LL_SPI_SetStandard(spi, LL_SPI_PROTOCOL_MOTOROLA);
 8000d64:	4b08      	ldr	r3, [pc, #32]	; (8000d88 <spi_init+0x1b8>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	2100      	movs	r1, #0
 8000d6a:	0018      	movs	r0, r3
 8000d6c:	f7ff fe12 	bl	8000994 <LL_SPI_SetStandard>
	LL_SPI_SetRxFIFOThreshold(spi, LL_SPI_RX_FIFO_TH_QUARTER);
 8000d70:	4b05      	ldr	r3, [pc, #20]	; (8000d88 <spi_init+0x1b8>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	2280      	movs	r2, #128	; 0x80
 8000d76:	0152      	lsls	r2, r2, #5
 8000d78:	0011      	movs	r1, r2
 8000d7a:	0018      	movs	r0, r3
 8000d7c:	f7ff fe8c 	bl	8000a98 <LL_SPI_SetRxFIFOThreshold>
}
 8000d80:	46c0      	nop			; (mov r8, r8)
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	46c0      	nop			; (mov r8, r8)
 8000d88:	20000000 	.word	0x20000000

08000d8c <spi_write_data>:

void spi_write_data(uint8_t *data, uint32_t size)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b084      	sub	sp, #16
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
 8000d94:	6039      	str	r1, [r7, #0]
	uint32_t count = 0;
 8000d96:	2300      	movs	r3, #0
 8000d98:	60fb      	str	r3, [r7, #12]

	LL_SPI_Enable(spi);
 8000d9a:	4b24      	ldr	r3, [pc, #144]	; (8000e2c <spi_write_data+0xa0>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	0018      	movs	r0, r3
 8000da0:	f7ff fdc6 	bl	8000930 <LL_SPI_Enable>

	while(count < size)
 8000da4:	e013      	b.n	8000dce <spi_write_data+0x42>
	{
		while (!LL_SPI_IsActiveFlag_TXE(spi))
 8000da6:	46c0      	nop			; (mov r8, r8)
 8000da8:	4b20      	ldr	r3, [pc, #128]	; (8000e2c <spi_write_data+0xa0>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	0018      	movs	r0, r3
 8000dae:	f7ff fea5 	bl	8000afc <LL_SPI_IsActiveFlag_TXE>
 8000db2:	1e03      	subs	r3, r0, #0
 8000db4:	d0f8      	beq.n	8000da8 <spi_write_data+0x1c>
			;

		LL_SPI_TransmitData8(spi, *(data+count));
 8000db6:	4b1d      	ldr	r3, [pc, #116]	; (8000e2c <spi_write_data+0xa0>)
 8000db8:	6818      	ldr	r0, [r3, #0]
 8000dba:	687a      	ldr	r2, [r7, #4]
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	18d3      	adds	r3, r2, r3
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	0019      	movs	r1, r3
 8000dc4:	f7ff fef2 	bl	8000bac <LL_SPI_TransmitData8>

		count++;
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	3301      	adds	r3, #1
 8000dcc:	60fb      	str	r3, [r7, #12]
	while(count < size)
 8000dce:	68fa      	ldr	r2, [r7, #12]
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	429a      	cmp	r2, r3
 8000dd4:	d3e7      	bcc.n	8000da6 <spi_write_data+0x1a>
	}

	while (LL_SPI_GetTxFIFOLevel(spi) != LL_SPI_TX_FIFO_EMPTY)
 8000dd6:	46c0      	nop			; (mov r8, r8)
 8000dd8:	4b14      	ldr	r3, [pc, #80]	; (8000e2c <spi_write_data+0xa0>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	0018      	movs	r0, r3
 8000dde:	f7ff febc 	bl	8000b5a <LL_SPI_GetTxFIFOLevel>
 8000de2:	1e03      	subs	r3, r0, #0
 8000de4:	d1f8      	bne.n	8000dd8 <spi_write_data+0x4c>
		;

	while (LL_SPI_IsActiveFlag_BSY(spi) != 0)
 8000de6:	46c0      	nop			; (mov r8, r8)
 8000de8:	4b10      	ldr	r3, [pc, #64]	; (8000e2c <spi_write_data+0xa0>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	0018      	movs	r0, r3
 8000dee:	f7ff fe96 	bl	8000b1e <LL_SPI_IsActiveFlag_BSY>
 8000df2:	1e03      	subs	r3, r0, #0
 8000df4:	d1f8      	bne.n	8000de8 <spi_write_data+0x5c>
		;

	LL_SPI_Disable(spi);
 8000df6:	4b0d      	ldr	r3, [pc, #52]	; (8000e2c <spi_write_data+0xa0>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	0018      	movs	r0, r3
 8000dfc:	f7ff fda6 	bl	800094c <LL_SPI_Disable>

	while (LL_SPI_GetRxFIFOLevel(spi) != LL_SPI_RX_FIFO_EMPTY)
 8000e00:	e004      	b.n	8000e0c <spi_write_data+0x80>
	{
		LL_SPI_ReceiveData8(spi);
 8000e02:	4b0a      	ldr	r3, [pc, #40]	; (8000e2c <spi_write_data+0xa0>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	0018      	movs	r0, r3
 8000e08:	f7ff fec4 	bl	8000b94 <LL_SPI_ReceiveData8>
	while (LL_SPI_GetRxFIFOLevel(spi) != LL_SPI_RX_FIFO_EMPTY)
 8000e0c:	4b07      	ldr	r3, [pc, #28]	; (8000e2c <spi_write_data+0xa0>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	0018      	movs	r0, r3
 8000e12:	f7ff fe95 	bl	8000b40 <LL_SPI_GetRxFIFOLevel>
 8000e16:	1e03      	subs	r3, r0, #0
 8000e18:	d1f3      	bne.n	8000e02 <spi_write_data+0x76>
	}

	LL_SPI_ClearFlag_OVR(spi);
 8000e1a:	4b04      	ldr	r3, [pc, #16]	; (8000e2c <spi_write_data+0xa0>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	0018      	movs	r0, r3
 8000e20:	f7ff fea8 	bl	8000b74 <LL_SPI_ClearFlag_OVR>
}
 8000e24:	46c0      	nop			; (mov r8, r8)
 8000e26:	46bd      	mov	sp, r7
 8000e28:	b004      	add	sp, #16
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	20000000 	.word	0x20000000

08000e30 <SysTick_Handler>:
 */

#include "main.h"

void SysTick_Handler(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
	software_timer_inc_ms_tick();
 8000e34:	f7ff fcae 	bl	8000794 <software_timer_inc_ms_tick>
}
 8000e38:	46c0      	nop			; (mov r8, r8)
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}

08000e3e <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e3e:	b580      	push	{r7, lr}
 8000e40:	b086      	sub	sp, #24
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	60f8      	str	r0, [r7, #12]
 8000e46:	60b9      	str	r1, [r7, #8]
 8000e48:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	617b      	str	r3, [r7, #20]
 8000e4e:	e00a      	b.n	8000e66 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000e50:	e000      	b.n	8000e54 <_read+0x16>
 8000e52:	bf00      	nop
 8000e54:	0001      	movs	r1, r0
 8000e56:	68bb      	ldr	r3, [r7, #8]
 8000e58:	1c5a      	adds	r2, r3, #1
 8000e5a:	60ba      	str	r2, [r7, #8]
 8000e5c:	b2ca      	uxtb	r2, r1
 8000e5e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	3301      	adds	r3, #1
 8000e64:	617b      	str	r3, [r7, #20]
 8000e66:	697a      	ldr	r2, [r7, #20]
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	429a      	cmp	r2, r3
 8000e6c:	dbf0      	blt.n	8000e50 <_read+0x12>
	}

return len;
 8000e6e:	687b      	ldr	r3, [r7, #4]
}
 8000e70:	0018      	movs	r0, r3
 8000e72:	46bd      	mov	sp, r7
 8000e74:	b006      	add	sp, #24
 8000e76:	bd80      	pop	{r7, pc}

08000e78 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b086      	sub	sp, #24
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	60f8      	str	r0, [r7, #12]
 8000e80:	60b9      	str	r1, [r7, #8]
 8000e82:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e84:	2300      	movs	r3, #0
 8000e86:	617b      	str	r3, [r7, #20]
 8000e88:	e009      	b.n	8000e9e <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000e8a:	68bb      	ldr	r3, [r7, #8]
 8000e8c:	1c5a      	adds	r2, r3, #1
 8000e8e:	60ba      	str	r2, [r7, #8]
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	0018      	movs	r0, r3
 8000e94:	e000      	b.n	8000e98 <_write+0x20>
 8000e96:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	3301      	adds	r3, #1
 8000e9c:	617b      	str	r3, [r7, #20]
 8000e9e:	697a      	ldr	r2, [r7, #20]
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	429a      	cmp	r2, r3
 8000ea4:	dbf1      	blt.n	8000e8a <_write+0x12>
	}
	return len;
 8000ea6:	687b      	ldr	r3, [r7, #4]
}
 8000ea8:	0018      	movs	r0, r3
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	b006      	add	sp, #24
 8000eae:	bd80      	pop	{r7, pc}

08000eb0 <_close>:

int _close(int file)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
	return -1;
 8000eb8:	2301      	movs	r3, #1
 8000eba:	425b      	negs	r3, r3
}
 8000ebc:	0018      	movs	r0, r3
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	b002      	add	sp, #8
 8000ec2:	bd80      	pop	{r7, pc}

08000ec4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
 8000ecc:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	2280      	movs	r2, #128	; 0x80
 8000ed2:	0192      	lsls	r2, r2, #6
 8000ed4:	605a      	str	r2, [r3, #4]
	return 0;
 8000ed6:	2300      	movs	r3, #0
}
 8000ed8:	0018      	movs	r0, r3
 8000eda:	46bd      	mov	sp, r7
 8000edc:	b002      	add	sp, #8
 8000ede:	bd80      	pop	{r7, pc}

08000ee0 <_isatty>:

int _isatty(int file)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
	return 1;
 8000ee8:	2301      	movs	r3, #1
}
 8000eea:	0018      	movs	r0, r3
 8000eec:	46bd      	mov	sp, r7
 8000eee:	b002      	add	sp, #8
 8000ef0:	bd80      	pop	{r7, pc}

08000ef2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ef2:	b580      	push	{r7, lr}
 8000ef4:	b084      	sub	sp, #16
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	60f8      	str	r0, [r7, #12]
 8000efa:	60b9      	str	r1, [r7, #8]
 8000efc:	607a      	str	r2, [r7, #4]
	return 0;
 8000efe:	2300      	movs	r3, #0
}
 8000f00:	0018      	movs	r0, r3
 8000f02:	46bd      	mov	sp, r7
 8000f04:	b004      	add	sp, #16
 8000f06:	bd80      	pop	{r7, pc}

08000f08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b086      	sub	sp, #24
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f10:	4a14      	ldr	r2, [pc, #80]	; (8000f64 <_sbrk+0x5c>)
 8000f12:	4b15      	ldr	r3, [pc, #84]	; (8000f68 <_sbrk+0x60>)
 8000f14:	1ad3      	subs	r3, r2, r3
 8000f16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f1c:	4b13      	ldr	r3, [pc, #76]	; (8000f6c <_sbrk+0x64>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d102      	bne.n	8000f2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f24:	4b11      	ldr	r3, [pc, #68]	; (8000f6c <_sbrk+0x64>)
 8000f26:	4a12      	ldr	r2, [pc, #72]	; (8000f70 <_sbrk+0x68>)
 8000f28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f2a:	4b10      	ldr	r3, [pc, #64]	; (8000f6c <_sbrk+0x64>)
 8000f2c:	681a      	ldr	r2, [r3, #0]
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	18d3      	adds	r3, r2, r3
 8000f32:	693a      	ldr	r2, [r7, #16]
 8000f34:	429a      	cmp	r2, r3
 8000f36:	d207      	bcs.n	8000f48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f38:	f001 f868 	bl	800200c <__errno>
 8000f3c:	0003      	movs	r3, r0
 8000f3e:	220c      	movs	r2, #12
 8000f40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f42:	2301      	movs	r3, #1
 8000f44:	425b      	negs	r3, r3
 8000f46:	e009      	b.n	8000f5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f48:	4b08      	ldr	r3, [pc, #32]	; (8000f6c <_sbrk+0x64>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f4e:	4b07      	ldr	r3, [pc, #28]	; (8000f6c <_sbrk+0x64>)
 8000f50:	681a      	ldr	r2, [r3, #0]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	18d2      	adds	r2, r2, r3
 8000f56:	4b05      	ldr	r3, [pc, #20]	; (8000f6c <_sbrk+0x64>)
 8000f58:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000f5a:	68fb      	ldr	r3, [r7, #12]
}
 8000f5c:	0018      	movs	r0, r3
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	b006      	add	sp, #24
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	20009000 	.word	0x20009000
 8000f68:	00000400 	.word	0x00000400
 8000f6c:	200027ac 	.word	0x200027ac
 8000f70:	200027d8 	.word	0x200027d8

08000f74 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f78:	46c0      	nop			; (mov r8, r8)
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
	...

08000f80 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
 ldr   r0, =_estack
 8000f80:	480d      	ldr	r0, [pc, #52]	; (8000fb8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f82:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f84:	f7ff fff6 	bl	8000f74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f88:	480c      	ldr	r0, [pc, #48]	; (8000fbc <LoopForever+0x6>)
  ldr r1, =_edata
 8000f8a:	490d      	ldr	r1, [pc, #52]	; (8000fc0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f8c:	4a0d      	ldr	r2, [pc, #52]	; (8000fc4 <LoopForever+0xe>)
  movs r3, #0
 8000f8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f90:	e002      	b.n	8000f98 <LoopCopyDataInit>

08000f92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f96:	3304      	adds	r3, #4

08000f98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f9c:	d3f9      	bcc.n	8000f92 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f9e:	4a0a      	ldr	r2, [pc, #40]	; (8000fc8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fa0:	4c0a      	ldr	r4, [pc, #40]	; (8000fcc <LoopForever+0x16>)
  movs r3, #0
 8000fa2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fa4:	e001      	b.n	8000faa <LoopFillZerobss>

08000fa6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fa6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fa8:	3204      	adds	r2, #4

08000faa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000faa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fac:	d3fb      	bcc.n	8000fa6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000fae:	f001 f833 	bl	8002018 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000fb2:	f7ff faef 	bl	8000594 <main>

08000fb6 <LoopForever>:

LoopForever:
    b LoopForever
 8000fb6:	e7fe      	b.n	8000fb6 <LoopForever>
 ldr   r0, =_estack
 8000fb8:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000fbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fc0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000fc4:	08004f14 	.word	0x08004f14
  ldr r2, =_sbss
 8000fc8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000fcc:	200027d8 	.word	0x200027d8

08000fd0 <ADC_COMP_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fd0:	e7fe      	b.n	8000fd0 <ADC_COMP_IRQHandler>

08000fd2 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	b082      	sub	sp, #8
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	6078      	str	r0, [r7, #4]
 8000fda:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	683a      	ldr	r2, [r7, #0]
 8000fe0:	619a      	str	r2, [r3, #24]
}
 8000fe2:	46c0      	nop			; (mov r8, r8)
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	b002      	add	sp, #8
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000fea:	b580      	push	{r7, lr}
 8000fec:	b082      	sub	sp, #8
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	6078      	str	r0, [r7, #4]
 8000ff2:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	683a      	ldr	r2, [r7, #0]
 8000ff8:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ffa:	46c0      	nop			; (mov r8, r8)
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	b002      	add	sp, #8
 8001000:	bd80      	pop	{r7, pc}

08001002 <DEV_SPI_WriteByte>:
#
******************************************************************************/
#include "DEV_Config.h"

void DEV_SPI_WriteByte(UBYTE value)
{
 8001002:	b580      	push	{r7, lr}
 8001004:	b082      	sub	sp, #8
 8001006:	af00      	add	r7, sp, #0
 8001008:	0002      	movs	r2, r0
 800100a:	1dfb      	adds	r3, r7, #7
 800100c:	701a      	strb	r2, [r3, #0]
	spi_write_data(&value, 1);
 800100e:	1dfb      	adds	r3, r7, #7
 8001010:	2101      	movs	r1, #1
 8001012:	0018      	movs	r0, r3
 8001014:	f7ff feba 	bl	8000d8c <spi_write_data>
}
 8001018:	46c0      	nop			; (mov r8, r8)
 800101a:	46bd      	mov	sp, r7
 800101c:	b002      	add	sp, #8
 800101e:	bd80      	pop	{r7, pc}

08001020 <DEV_Module_Init>:

int DEV_Module_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
    DEV_Digital_Write(EPD_DC_PIN, 0);
 8001024:	4b09      	ldr	r3, [pc, #36]	; (800104c <DEV_Module_Init+0x2c>)
 8001026:	2102      	movs	r1, #2
 8001028:	0018      	movs	r0, r3
 800102a:	f7ff ffde 	bl	8000fea <LL_GPIO_ResetOutputPin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 800102e:	23a0      	movs	r3, #160	; 0xa0
 8001030:	05db      	lsls	r3, r3, #23
 8001032:	2110      	movs	r1, #16
 8001034:	0018      	movs	r0, r3
 8001036:	f7ff ffd8 	bl	8000fea <LL_GPIO_ResetOutputPin>
    DEV_Digital_Write(EPD_RST_PIN, 1);
 800103a:	4b04      	ldr	r3, [pc, #16]	; (800104c <DEV_Module_Init+0x2c>)
 800103c:	2101      	movs	r1, #1
 800103e:	0018      	movs	r0, r3
 8001040:	f7ff ffc7 	bl	8000fd2 <LL_GPIO_SetOutputPin>
		return 0;
 8001044:	2300      	movs	r3, #0
}
 8001046:	0018      	movs	r0, r3
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	50000800 	.word	0x50000800

08001050 <Paint_NewImage>:
    width   :   The width of the picture
    Height  :   The height of the picture
    Color   :   Whether the picture is inverted
******************************************************************************/
void Paint_NewImage(UBYTE *image, UWORD Width, UWORD Height, UWORD Rotate, UWORD Color)
{
 8001050:	b5b0      	push	{r4, r5, r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
 8001056:	60f8      	str	r0, [r7, #12]
 8001058:	000c      	movs	r4, r1
 800105a:	0010      	movs	r0, r2
 800105c:	0019      	movs	r1, r3
 800105e:	250a      	movs	r5, #10
 8001060:	197b      	adds	r3, r7, r5
 8001062:	1c22      	adds	r2, r4, #0
 8001064:	801a      	strh	r2, [r3, #0]
 8001066:	2408      	movs	r4, #8
 8001068:	193b      	adds	r3, r7, r4
 800106a:	1c02      	adds	r2, r0, #0
 800106c:	801a      	strh	r2, [r3, #0]
 800106e:	1dbb      	adds	r3, r7, #6
 8001070:	1c0a      	adds	r2, r1, #0
 8001072:	801a      	strh	r2, [r3, #0]
    Paint.Image = NULL;
 8001074:	4b2c      	ldr	r3, [pc, #176]	; (8001128 <Paint_NewImage+0xd8>)
 8001076:	2200      	movs	r2, #0
 8001078:	601a      	str	r2, [r3, #0]
    Paint.Image = image;
 800107a:	4b2b      	ldr	r3, [pc, #172]	; (8001128 <Paint_NewImage+0xd8>)
 800107c:	68fa      	ldr	r2, [r7, #12]
 800107e:	601a      	str	r2, [r3, #0]

    Paint.WidthMemory = Width;
 8001080:	4b29      	ldr	r3, [pc, #164]	; (8001128 <Paint_NewImage+0xd8>)
 8001082:	0029      	movs	r1, r5
 8001084:	187a      	adds	r2, r7, r1
 8001086:	8812      	ldrh	r2, [r2, #0]
 8001088:	811a      	strh	r2, [r3, #8]
    Paint.HeightMemory = Height;
 800108a:	4b27      	ldr	r3, [pc, #156]	; (8001128 <Paint_NewImage+0xd8>)
 800108c:	193a      	adds	r2, r7, r4
 800108e:	8812      	ldrh	r2, [r2, #0]
 8001090:	815a      	strh	r2, [r3, #10]
    Paint.Color = Color;    
 8001092:	4a25      	ldr	r2, [pc, #148]	; (8001128 <Paint_NewImage+0xd8>)
 8001094:	2320      	movs	r3, #32
 8001096:	18fb      	adds	r3, r7, r3
 8001098:	881b      	ldrh	r3, [r3, #0]
 800109a:	8193      	strh	r3, [r2, #12]
	Paint.Scale = 2;
 800109c:	4b22      	ldr	r3, [pc, #136]	; (8001128 <Paint_NewImage+0xd8>)
 800109e:	2202      	movs	r2, #2
 80010a0:	82da      	strh	r2, [r3, #22]
		
    Paint.WidthByte = (Width % 8 == 0)? (Width / 8 ): (Width / 8 + 1);
 80010a2:	187b      	adds	r3, r7, r1
 80010a4:	881b      	ldrh	r3, [r3, #0]
 80010a6:	2207      	movs	r2, #7
 80010a8:	4013      	ands	r3, r2
 80010aa:	b29b      	uxth	r3, r3
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d104      	bne.n	80010ba <Paint_NewImage+0x6a>
 80010b0:	187b      	adds	r3, r7, r1
 80010b2:	881b      	ldrh	r3, [r3, #0]
 80010b4:	08db      	lsrs	r3, r3, #3
 80010b6:	b29b      	uxth	r3, r3
 80010b8:	e006      	b.n	80010c8 <Paint_NewImage+0x78>
 80010ba:	230a      	movs	r3, #10
 80010bc:	18fb      	adds	r3, r7, r3
 80010be:	881b      	ldrh	r3, [r3, #0]
 80010c0:	08db      	lsrs	r3, r3, #3
 80010c2:	b29b      	uxth	r3, r3
 80010c4:	3301      	adds	r3, #1
 80010c6:	b29b      	uxth	r3, r3
 80010c8:	4a17      	ldr	r2, [pc, #92]	; (8001128 <Paint_NewImage+0xd8>)
 80010ca:	8253      	strh	r3, [r2, #18]
    Paint.HeightByte = Height;    
 80010cc:	4b16      	ldr	r3, [pc, #88]	; (8001128 <Paint_NewImage+0xd8>)
 80010ce:	2208      	movs	r2, #8
 80010d0:	18ba      	adds	r2, r7, r2
 80010d2:	8812      	ldrh	r2, [r2, #0]
 80010d4:	829a      	strh	r2, [r3, #20]
//    printf("WidthByte = %d, HeightByte = %d\r\n", Paint.WidthByte, Paint.HeightByte);
//    printf(" EPD_WIDTH / 8 = %d\r\n",  122 / 8);
   
    Paint.Rotate = Rotate;
 80010d6:	4b14      	ldr	r3, [pc, #80]	; (8001128 <Paint_NewImage+0xd8>)
 80010d8:	1dba      	adds	r2, r7, #6
 80010da:	8812      	ldrh	r2, [r2, #0]
 80010dc:	81da      	strh	r2, [r3, #14]
    Paint.Mirror = MIRROR_NONE;
 80010de:	4b12      	ldr	r3, [pc, #72]	; (8001128 <Paint_NewImage+0xd8>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	821a      	strh	r2, [r3, #16]
    
    if(Rotate == ROTATE_0 || Rotate == ROTATE_180) {
 80010e4:	1dbb      	adds	r3, r7, #6
 80010e6:	881b      	ldrh	r3, [r3, #0]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d003      	beq.n	80010f4 <Paint_NewImage+0xa4>
 80010ec:	1dbb      	adds	r3, r7, #6
 80010ee:	881b      	ldrh	r3, [r3, #0]
 80010f0:	2bb4      	cmp	r3, #180	; 0xb4
 80010f2:	d10a      	bne.n	800110a <Paint_NewImage+0xba>
        Paint.Width = Width;
 80010f4:	4b0c      	ldr	r3, [pc, #48]	; (8001128 <Paint_NewImage+0xd8>)
 80010f6:	220a      	movs	r2, #10
 80010f8:	18ba      	adds	r2, r7, r2
 80010fa:	8812      	ldrh	r2, [r2, #0]
 80010fc:	809a      	strh	r2, [r3, #4]
        Paint.Height = Height;
 80010fe:	4b0a      	ldr	r3, [pc, #40]	; (8001128 <Paint_NewImage+0xd8>)
 8001100:	2208      	movs	r2, #8
 8001102:	18ba      	adds	r2, r7, r2
 8001104:	8812      	ldrh	r2, [r2, #0]
 8001106:	80da      	strh	r2, [r3, #6]
 8001108:	e00a      	b.n	8001120 <Paint_NewImage+0xd0>
    } else {
        Paint.Width = Height;
 800110a:	4b07      	ldr	r3, [pc, #28]	; (8001128 <Paint_NewImage+0xd8>)
 800110c:	2208      	movs	r2, #8
 800110e:	18ba      	adds	r2, r7, r2
 8001110:	8812      	ldrh	r2, [r2, #0]
 8001112:	809a      	strh	r2, [r3, #4]
        Paint.Height = Width;
 8001114:	4b04      	ldr	r3, [pc, #16]	; (8001128 <Paint_NewImage+0xd8>)
 8001116:	220a      	movs	r2, #10
 8001118:	18ba      	adds	r2, r7, r2
 800111a:	8812      	ldrh	r2, [r2, #0]
 800111c:	80da      	strh	r2, [r3, #6]
    }
}
 800111e:	46c0      	nop			; (mov r8, r8)
 8001120:	46c0      	nop			; (mov r8, r8)
 8001122:	46bd      	mov	sp, r7
 8001124:	b004      	add	sp, #16
 8001126:	bdb0      	pop	{r4, r5, r7, pc}
 8001128:	200027b0 	.word	0x200027b0

0800112c <Paint_SelectImage>:
function: Select Image
parameter:
    image : Pointer to the image cache
******************************************************************************/
void Paint_SelectImage(UBYTE *image)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
    Paint.Image = image;
 8001134:	4b03      	ldr	r3, [pc, #12]	; (8001144 <Paint_SelectImage+0x18>)
 8001136:	687a      	ldr	r2, [r7, #4]
 8001138:	601a      	str	r2, [r3, #0]
}
 800113a:	46c0      	nop			; (mov r8, r8)
 800113c:	46bd      	mov	sp, r7
 800113e:	b002      	add	sp, #8
 8001140:	bd80      	pop	{r7, pc}
 8001142:	46c0      	nop			; (mov r8, r8)
 8001144:	200027b0 	.word	0x200027b0

08001148 <Paint_SetPixel>:
    Xpoint : At point X
    Ypoint : At point Y
    Color  : Painted colors
******************************************************************************/
void Paint_SetPixel(UWORD Xpoint, UWORD Ypoint, UWORD Color)
{
 8001148:	b590      	push	{r4, r7, lr}
 800114a:	b08b      	sub	sp, #44	; 0x2c
 800114c:	af00      	add	r7, sp, #0
 800114e:	0004      	movs	r4, r0
 8001150:	0008      	movs	r0, r1
 8001152:	0011      	movs	r1, r2
 8001154:	1dbb      	adds	r3, r7, #6
 8001156:	1c22      	adds	r2, r4, #0
 8001158:	801a      	strh	r2, [r3, #0]
 800115a:	1d3b      	adds	r3, r7, #4
 800115c:	1c02      	adds	r2, r0, #0
 800115e:	801a      	strh	r2, [r3, #0]
 8001160:	1cbb      	adds	r3, r7, #2
 8001162:	1c0a      	adds	r2, r1, #0
 8001164:	801a      	strh	r2, [r3, #0]
    if(Xpoint > Paint.Width || Ypoint > Paint.Height){
 8001166:	4bc6      	ldr	r3, [pc, #792]	; (8001480 <Paint_SetPixel+0x338>)
 8001168:	889b      	ldrh	r3, [r3, #4]
 800116a:	1dba      	adds	r2, r7, #6
 800116c:	8812      	ldrh	r2, [r2, #0]
 800116e:	429a      	cmp	r2, r3
 8001170:	d805      	bhi.n	800117e <Paint_SetPixel+0x36>
 8001172:	4bc3      	ldr	r3, [pc, #780]	; (8001480 <Paint_SetPixel+0x338>)
 8001174:	88db      	ldrh	r3, [r3, #6]
 8001176:	1d3a      	adds	r2, r7, #4
 8001178:	8812      	ldrh	r2, [r2, #0]
 800117a:	429a      	cmp	r2, r3
 800117c:	d904      	bls.n	8001188 <Paint_SetPixel+0x40>
        Debug("Exceeding display boundaries\r\n");
 800117e:	4bc1      	ldr	r3, [pc, #772]	; (8001484 <Paint_SetPixel+0x33c>)
 8001180:	0018      	movs	r0, r3
 8001182:	f000 ffe7 	bl	8002154 <puts>
        return;
 8001186:	e180      	b.n	800148a <Paint_SetPixel+0x342>
    }      
    UWORD X, Y;

    switch(Paint.Rotate) {
 8001188:	4bbd      	ldr	r3, [pc, #756]	; (8001480 <Paint_SetPixel+0x338>)
 800118a:	89db      	ldrh	r3, [r3, #14]
 800118c:	2287      	movs	r2, #135	; 0x87
 800118e:	0052      	lsls	r2, r2, #1
 8001190:	4293      	cmp	r3, r2
 8001192:	d03d      	beq.n	8001210 <Paint_SetPixel+0xc8>
 8001194:	2287      	movs	r2, #135	; 0x87
 8001196:	0052      	lsls	r2, r2, #1
 8001198:	4293      	cmp	r3, r2
 800119a:	dd00      	ble.n	800119e <Paint_SetPixel+0x56>
 800119c:	e16e      	b.n	800147c <Paint_SetPixel+0x334>
 800119e:	2bb4      	cmp	r3, #180	; 0xb4
 80011a0:	d021      	beq.n	80011e6 <Paint_SetPixel+0x9e>
 80011a2:	dd00      	ble.n	80011a6 <Paint_SetPixel+0x5e>
 80011a4:	e16a      	b.n	800147c <Paint_SetPixel+0x334>
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d002      	beq.n	80011b0 <Paint_SetPixel+0x68>
 80011aa:	2b5a      	cmp	r3, #90	; 0x5a
 80011ac:	d00b      	beq.n	80011c6 <Paint_SetPixel+0x7e>
    case 270:
        X = Ypoint;
        Y = Paint.HeightMemory - Xpoint - 1;
        break;
    default:
        return;
 80011ae:	e165      	b.n	800147c <Paint_SetPixel+0x334>
        X = Xpoint;
 80011b0:	2326      	movs	r3, #38	; 0x26
 80011b2:	18fb      	adds	r3, r7, r3
 80011b4:	1dba      	adds	r2, r7, #6
 80011b6:	8812      	ldrh	r2, [r2, #0]
 80011b8:	801a      	strh	r2, [r3, #0]
        Y = Ypoint;  
 80011ba:	2324      	movs	r3, #36	; 0x24
 80011bc:	18fb      	adds	r3, r7, r3
 80011be:	1d3a      	adds	r2, r7, #4
 80011c0:	8812      	ldrh	r2, [r2, #0]
 80011c2:	801a      	strh	r2, [r3, #0]
        break;
 80011c4:	e034      	b.n	8001230 <Paint_SetPixel+0xe8>
        X = Paint.WidthMemory - Ypoint - 1;
 80011c6:	4bae      	ldr	r3, [pc, #696]	; (8001480 <Paint_SetPixel+0x338>)
 80011c8:	891a      	ldrh	r2, [r3, #8]
 80011ca:	1d3b      	adds	r3, r7, #4
 80011cc:	881b      	ldrh	r3, [r3, #0]
 80011ce:	1ad3      	subs	r3, r2, r3
 80011d0:	b29a      	uxth	r2, r3
 80011d2:	2326      	movs	r3, #38	; 0x26
 80011d4:	18fb      	adds	r3, r7, r3
 80011d6:	3a01      	subs	r2, #1
 80011d8:	801a      	strh	r2, [r3, #0]
        Y = Xpoint;
 80011da:	2324      	movs	r3, #36	; 0x24
 80011dc:	18fb      	adds	r3, r7, r3
 80011de:	1dba      	adds	r2, r7, #6
 80011e0:	8812      	ldrh	r2, [r2, #0]
 80011e2:	801a      	strh	r2, [r3, #0]
        break;
 80011e4:	e024      	b.n	8001230 <Paint_SetPixel+0xe8>
        X = Paint.WidthMemory - Xpoint - 1;
 80011e6:	4ba6      	ldr	r3, [pc, #664]	; (8001480 <Paint_SetPixel+0x338>)
 80011e8:	891a      	ldrh	r2, [r3, #8]
 80011ea:	1dbb      	adds	r3, r7, #6
 80011ec:	881b      	ldrh	r3, [r3, #0]
 80011ee:	1ad3      	subs	r3, r2, r3
 80011f0:	b29a      	uxth	r2, r3
 80011f2:	2326      	movs	r3, #38	; 0x26
 80011f4:	18fb      	adds	r3, r7, r3
 80011f6:	3a01      	subs	r2, #1
 80011f8:	801a      	strh	r2, [r3, #0]
        Y = Paint.HeightMemory - Ypoint - 1;
 80011fa:	4ba1      	ldr	r3, [pc, #644]	; (8001480 <Paint_SetPixel+0x338>)
 80011fc:	895a      	ldrh	r2, [r3, #10]
 80011fe:	1d3b      	adds	r3, r7, #4
 8001200:	881b      	ldrh	r3, [r3, #0]
 8001202:	1ad3      	subs	r3, r2, r3
 8001204:	b29a      	uxth	r2, r3
 8001206:	2324      	movs	r3, #36	; 0x24
 8001208:	18fb      	adds	r3, r7, r3
 800120a:	3a01      	subs	r2, #1
 800120c:	801a      	strh	r2, [r3, #0]
        break;
 800120e:	e00f      	b.n	8001230 <Paint_SetPixel+0xe8>
        X = Ypoint;
 8001210:	2326      	movs	r3, #38	; 0x26
 8001212:	18fb      	adds	r3, r7, r3
 8001214:	1d3a      	adds	r2, r7, #4
 8001216:	8812      	ldrh	r2, [r2, #0]
 8001218:	801a      	strh	r2, [r3, #0]
        Y = Paint.HeightMemory - Xpoint - 1;
 800121a:	4b99      	ldr	r3, [pc, #612]	; (8001480 <Paint_SetPixel+0x338>)
 800121c:	895a      	ldrh	r2, [r3, #10]
 800121e:	1dbb      	adds	r3, r7, #6
 8001220:	881b      	ldrh	r3, [r3, #0]
 8001222:	1ad3      	subs	r3, r2, r3
 8001224:	b29a      	uxth	r2, r3
 8001226:	2324      	movs	r3, #36	; 0x24
 8001228:	18fb      	adds	r3, r7, r3
 800122a:	3a01      	subs	r2, #1
 800122c:	801a      	strh	r2, [r3, #0]
        break;
 800122e:	46c0      	nop			; (mov r8, r8)
    }
    
    switch(Paint.Mirror) {
 8001230:	4b93      	ldr	r3, [pc, #588]	; (8001480 <Paint_SetPixel+0x338>)
 8001232:	8a1b      	ldrh	r3, [r3, #16]
 8001234:	2b03      	cmp	r3, #3
 8001236:	d020      	beq.n	800127a <Paint_SetPixel+0x132>
 8001238:	dd00      	ble.n	800123c <Paint_SetPixel+0xf4>
 800123a:	e125      	b.n	8001488 <Paint_SetPixel+0x340>
 800123c:	2b02      	cmp	r3, #2
 800123e:	d011      	beq.n	8001264 <Paint_SetPixel+0x11c>
 8001240:	dd00      	ble.n	8001244 <Paint_SetPixel+0xfc>
 8001242:	e121      	b.n	8001488 <Paint_SetPixel+0x340>
 8001244:	2b00      	cmp	r3, #0
 8001246:	d02d      	beq.n	80012a4 <Paint_SetPixel+0x15c>
 8001248:	2b01      	cmp	r3, #1
 800124a:	d000      	beq.n	800124e <Paint_SetPixel+0x106>
    case MIRROR_ORIGIN:
        X = Paint.WidthMemory - X - 1;
        Y = Paint.HeightMemory - Y - 1;
        break;
    default:
        return;
 800124c:	e11c      	b.n	8001488 <Paint_SetPixel+0x340>
        X = Paint.WidthMemory - X - 1;
 800124e:	4b8c      	ldr	r3, [pc, #560]	; (8001480 <Paint_SetPixel+0x338>)
 8001250:	891a      	ldrh	r2, [r3, #8]
 8001252:	2126      	movs	r1, #38	; 0x26
 8001254:	187b      	adds	r3, r7, r1
 8001256:	881b      	ldrh	r3, [r3, #0]
 8001258:	1ad3      	subs	r3, r2, r3
 800125a:	b29a      	uxth	r2, r3
 800125c:	187b      	adds	r3, r7, r1
 800125e:	3a01      	subs	r2, #1
 8001260:	801a      	strh	r2, [r3, #0]
        break;
 8001262:	e020      	b.n	80012a6 <Paint_SetPixel+0x15e>
        Y = Paint.HeightMemory - Y - 1;
 8001264:	4b86      	ldr	r3, [pc, #536]	; (8001480 <Paint_SetPixel+0x338>)
 8001266:	895a      	ldrh	r2, [r3, #10]
 8001268:	2124      	movs	r1, #36	; 0x24
 800126a:	187b      	adds	r3, r7, r1
 800126c:	881b      	ldrh	r3, [r3, #0]
 800126e:	1ad3      	subs	r3, r2, r3
 8001270:	b29a      	uxth	r2, r3
 8001272:	187b      	adds	r3, r7, r1
 8001274:	3a01      	subs	r2, #1
 8001276:	801a      	strh	r2, [r3, #0]
        break;
 8001278:	e015      	b.n	80012a6 <Paint_SetPixel+0x15e>
        X = Paint.WidthMemory - X - 1;
 800127a:	4b81      	ldr	r3, [pc, #516]	; (8001480 <Paint_SetPixel+0x338>)
 800127c:	891a      	ldrh	r2, [r3, #8]
 800127e:	2126      	movs	r1, #38	; 0x26
 8001280:	187b      	adds	r3, r7, r1
 8001282:	881b      	ldrh	r3, [r3, #0]
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	b29a      	uxth	r2, r3
 8001288:	187b      	adds	r3, r7, r1
 800128a:	3a01      	subs	r2, #1
 800128c:	801a      	strh	r2, [r3, #0]
        Y = Paint.HeightMemory - Y - 1;
 800128e:	4b7c      	ldr	r3, [pc, #496]	; (8001480 <Paint_SetPixel+0x338>)
 8001290:	895a      	ldrh	r2, [r3, #10]
 8001292:	2124      	movs	r1, #36	; 0x24
 8001294:	187b      	adds	r3, r7, r1
 8001296:	881b      	ldrh	r3, [r3, #0]
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	b29a      	uxth	r2, r3
 800129c:	187b      	adds	r3, r7, r1
 800129e:	3a01      	subs	r2, #1
 80012a0:	801a      	strh	r2, [r3, #0]
        break;
 80012a2:	e000      	b.n	80012a6 <Paint_SetPixel+0x15e>
        break;
 80012a4:	46c0      	nop			; (mov r8, r8)
    }

    if(X > Paint.WidthMemory || Y > Paint.HeightMemory){
 80012a6:	4b76      	ldr	r3, [pc, #472]	; (8001480 <Paint_SetPixel+0x338>)
 80012a8:	891b      	ldrh	r3, [r3, #8]
 80012aa:	2226      	movs	r2, #38	; 0x26
 80012ac:	18ba      	adds	r2, r7, r2
 80012ae:	8812      	ldrh	r2, [r2, #0]
 80012b0:	429a      	cmp	r2, r3
 80012b2:	d806      	bhi.n	80012c2 <Paint_SetPixel+0x17a>
 80012b4:	4b72      	ldr	r3, [pc, #456]	; (8001480 <Paint_SetPixel+0x338>)
 80012b6:	895b      	ldrh	r3, [r3, #10]
 80012b8:	2224      	movs	r2, #36	; 0x24
 80012ba:	18ba      	adds	r2, r7, r2
 80012bc:	8812      	ldrh	r2, [r2, #0]
 80012be:	429a      	cmp	r2, r3
 80012c0:	d904      	bls.n	80012cc <Paint_SetPixel+0x184>
        Debug("Exceeding display boundaries\r\n");
 80012c2:	4b70      	ldr	r3, [pc, #448]	; (8001484 <Paint_SetPixel+0x33c>)
 80012c4:	0018      	movs	r0, r3
 80012c6:	f000 ff45 	bl	8002154 <puts>
        return;
 80012ca:	e0de      	b.n	800148a <Paint_SetPixel+0x342>
    }
    
    if(Paint.Scale == 2){
 80012cc:	4b6c      	ldr	r3, [pc, #432]	; (8001480 <Paint_SetPixel+0x338>)
 80012ce:	8adb      	ldrh	r3, [r3, #22]
 80012d0:	2b02      	cmp	r3, #2
 80012d2:	d145      	bne.n	8001360 <Paint_SetPixel+0x218>
        UDOUBLE Addr = X / 8 + Y * Paint.WidthByte;
 80012d4:	2026      	movs	r0, #38	; 0x26
 80012d6:	183b      	adds	r3, r7, r0
 80012d8:	881b      	ldrh	r3, [r3, #0]
 80012da:	08db      	lsrs	r3, r3, #3
 80012dc:	b29b      	uxth	r3, r3
 80012de:	0019      	movs	r1, r3
 80012e0:	2324      	movs	r3, #36	; 0x24
 80012e2:	18fb      	adds	r3, r7, r3
 80012e4:	881b      	ldrh	r3, [r3, #0]
 80012e6:	4a66      	ldr	r2, [pc, #408]	; (8001480 <Paint_SetPixel+0x338>)
 80012e8:	8a52      	ldrh	r2, [r2, #18]
 80012ea:	4353      	muls	r3, r2
 80012ec:	18cb      	adds	r3, r1, r3
 80012ee:	613b      	str	r3, [r7, #16]
        UBYTE Rdata = Paint.Image[Addr];
 80012f0:	4b63      	ldr	r3, [pc, #396]	; (8001480 <Paint_SetPixel+0x338>)
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	18d2      	adds	r2, r2, r3
 80012f8:	210f      	movs	r1, #15
 80012fa:	187b      	adds	r3, r7, r1
 80012fc:	7812      	ldrb	r2, [r2, #0]
 80012fe:	701a      	strb	r2, [r3, #0]
        if(Color == BLACK)
 8001300:	1cbb      	adds	r3, r7, #2
 8001302:	881b      	ldrh	r3, [r3, #0]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d115      	bne.n	8001334 <Paint_SetPixel+0x1ec>
            Paint.Image[Addr] = Rdata & ~(0x80 >> (X % 8));
 8001308:	183b      	adds	r3, r7, r0
 800130a:	881b      	ldrh	r3, [r3, #0]
 800130c:	2207      	movs	r2, #7
 800130e:	4013      	ands	r3, r2
 8001310:	2280      	movs	r2, #128	; 0x80
 8001312:	411a      	asrs	r2, r3
 8001314:	0013      	movs	r3, r2
 8001316:	b25b      	sxtb	r3, r3
 8001318:	43db      	mvns	r3, r3
 800131a:	b25b      	sxtb	r3, r3
 800131c:	187a      	adds	r2, r7, r1
 800131e:	7812      	ldrb	r2, [r2, #0]
 8001320:	b252      	sxtb	r2, r2
 8001322:	4013      	ands	r3, r2
 8001324:	b259      	sxtb	r1, r3
 8001326:	4b56      	ldr	r3, [pc, #344]	; (8001480 <Paint_SetPixel+0x338>)
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	18d3      	adds	r3, r2, r3
 800132e:	b2ca      	uxtb	r2, r1
 8001330:	701a      	strb	r2, [r3, #0]
 8001332:	e0aa      	b.n	800148a <Paint_SetPixel+0x342>
        else
            Paint.Image[Addr] = Rdata | (0x80 >> (X % 8));
 8001334:	2326      	movs	r3, #38	; 0x26
 8001336:	18fb      	adds	r3, r7, r3
 8001338:	881b      	ldrh	r3, [r3, #0]
 800133a:	2207      	movs	r2, #7
 800133c:	4013      	ands	r3, r2
 800133e:	2280      	movs	r2, #128	; 0x80
 8001340:	411a      	asrs	r2, r3
 8001342:	0013      	movs	r3, r2
 8001344:	b25a      	sxtb	r2, r3
 8001346:	230f      	movs	r3, #15
 8001348:	18fb      	adds	r3, r7, r3
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	b25b      	sxtb	r3, r3
 800134e:	4313      	orrs	r3, r2
 8001350:	b259      	sxtb	r1, r3
 8001352:	4b4b      	ldr	r3, [pc, #300]	; (8001480 <Paint_SetPixel+0x338>)
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	18d3      	adds	r3, r2, r3
 800135a:	b2ca      	uxtb	r2, r1
 800135c:	701a      	strb	r2, [r3, #0]
 800135e:	e094      	b.n	800148a <Paint_SetPixel+0x342>
    }else if(Paint.Scale == 4){
 8001360:	4b47      	ldr	r3, [pc, #284]	; (8001480 <Paint_SetPixel+0x338>)
 8001362:	8adb      	ldrh	r3, [r3, #22]
 8001364:	2b04      	cmp	r3, #4
 8001366:	d145      	bne.n	80013f4 <Paint_SetPixel+0x2ac>
        UDOUBLE Addr = X / 4 + Y * Paint.WidthByte;
 8001368:	2426      	movs	r4, #38	; 0x26
 800136a:	193b      	adds	r3, r7, r4
 800136c:	881b      	ldrh	r3, [r3, #0]
 800136e:	089b      	lsrs	r3, r3, #2
 8001370:	b29b      	uxth	r3, r3
 8001372:	0019      	movs	r1, r3
 8001374:	2324      	movs	r3, #36	; 0x24
 8001376:	18fb      	adds	r3, r7, r3
 8001378:	881b      	ldrh	r3, [r3, #0]
 800137a:	4a41      	ldr	r2, [pc, #260]	; (8001480 <Paint_SetPixel+0x338>)
 800137c:	8a52      	ldrh	r2, [r2, #18]
 800137e:	4353      	muls	r3, r2
 8001380:	18cb      	adds	r3, r1, r3
 8001382:	61bb      	str	r3, [r7, #24]
        Color = Color % 4;//Guaranteed color scale is 4  --- 0~3
 8001384:	1cbb      	adds	r3, r7, #2
 8001386:	1cba      	adds	r2, r7, #2
 8001388:	8812      	ldrh	r2, [r2, #0]
 800138a:	2103      	movs	r1, #3
 800138c:	400a      	ands	r2, r1
 800138e:	801a      	strh	r2, [r3, #0]
        UBYTE Rdata = Paint.Image[Addr];
 8001390:	4b3b      	ldr	r3, [pc, #236]	; (8001480 <Paint_SetPixel+0x338>)
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	69bb      	ldr	r3, [r7, #24]
 8001396:	18d2      	adds	r2, r2, r3
 8001398:	2017      	movs	r0, #23
 800139a:	183b      	adds	r3, r7, r0
 800139c:	7812      	ldrb	r2, [r2, #0]
 800139e:	701a      	strb	r2, [r3, #0]
        
        Rdata = Rdata & (~(0xC0 >> ((X % 4)*2)));
 80013a0:	0021      	movs	r1, r4
 80013a2:	187b      	adds	r3, r7, r1
 80013a4:	881b      	ldrh	r3, [r3, #0]
 80013a6:	2203      	movs	r2, #3
 80013a8:	4013      	ands	r3, r2
 80013aa:	005b      	lsls	r3, r3, #1
 80013ac:	22c0      	movs	r2, #192	; 0xc0
 80013ae:	411a      	asrs	r2, r3
 80013b0:	0013      	movs	r3, r2
 80013b2:	b25b      	sxtb	r3, r3
 80013b4:	43db      	mvns	r3, r3
 80013b6:	b25b      	sxtb	r3, r3
 80013b8:	183a      	adds	r2, r7, r0
 80013ba:	7812      	ldrb	r2, [r2, #0]
 80013bc:	b252      	sxtb	r2, r2
 80013be:	4013      	ands	r3, r2
 80013c0:	b25a      	sxtb	r2, r3
 80013c2:	183b      	adds	r3, r7, r0
 80013c4:	701a      	strb	r2, [r3, #0]
        Paint.Image[Addr] = Rdata | ((Color << 6) >> ((X % 4)*2));
 80013c6:	1cbb      	adds	r3, r7, #2
 80013c8:	881b      	ldrh	r3, [r3, #0]
 80013ca:	019a      	lsls	r2, r3, #6
 80013cc:	187b      	adds	r3, r7, r1
 80013ce:	881b      	ldrh	r3, [r3, #0]
 80013d0:	2103      	movs	r1, #3
 80013d2:	400b      	ands	r3, r1
 80013d4:	005b      	lsls	r3, r3, #1
 80013d6:	411a      	asrs	r2, r3
 80013d8:	0013      	movs	r3, r2
 80013da:	b25a      	sxtb	r2, r3
 80013dc:	183b      	adds	r3, r7, r0
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	b25b      	sxtb	r3, r3
 80013e2:	4313      	orrs	r3, r2
 80013e4:	b259      	sxtb	r1, r3
 80013e6:	4b26      	ldr	r3, [pc, #152]	; (8001480 <Paint_SetPixel+0x338>)
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	69bb      	ldr	r3, [r7, #24]
 80013ec:	18d3      	adds	r3, r2, r3
 80013ee:	b2ca      	uxtb	r2, r1
 80013f0:	701a      	strb	r2, [r3, #0]
 80013f2:	e04a      	b.n	800148a <Paint_SetPixel+0x342>
    }else if(Paint.Scale == 7){
 80013f4:	4b22      	ldr	r3, [pc, #136]	; (8001480 <Paint_SetPixel+0x338>)
 80013f6:	8adb      	ldrh	r3, [r3, #22]
 80013f8:	2b07      	cmp	r3, #7
 80013fa:	d146      	bne.n	800148a <Paint_SetPixel+0x342>
		UDOUBLE Addr = X / 2  + Y * Paint.WidthByte;
 80013fc:	2426      	movs	r4, #38	; 0x26
 80013fe:	193b      	adds	r3, r7, r4
 8001400:	881b      	ldrh	r3, [r3, #0]
 8001402:	085b      	lsrs	r3, r3, #1
 8001404:	b29b      	uxth	r3, r3
 8001406:	0019      	movs	r1, r3
 8001408:	2324      	movs	r3, #36	; 0x24
 800140a:	18fb      	adds	r3, r7, r3
 800140c:	881b      	ldrh	r3, [r3, #0]
 800140e:	4a1c      	ldr	r2, [pc, #112]	; (8001480 <Paint_SetPixel+0x338>)
 8001410:	8a52      	ldrh	r2, [r2, #18]
 8001412:	4353      	muls	r3, r2
 8001414:	18cb      	adds	r3, r1, r3
 8001416:	623b      	str	r3, [r7, #32]
		UBYTE Rdata = Paint.Image[Addr];
 8001418:	4b19      	ldr	r3, [pc, #100]	; (8001480 <Paint_SetPixel+0x338>)
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	6a3b      	ldr	r3, [r7, #32]
 800141e:	18d2      	adds	r2, r2, r3
 8001420:	201f      	movs	r0, #31
 8001422:	183b      	adds	r3, r7, r0
 8001424:	7812      	ldrb	r2, [r2, #0]
 8001426:	701a      	strb	r2, [r3, #0]
		Rdata = Rdata & (~(0xF0 >> ((X % 2)*4)));//Clear first, then set value
 8001428:	0021      	movs	r1, r4
 800142a:	187b      	adds	r3, r7, r1
 800142c:	881b      	ldrh	r3, [r3, #0]
 800142e:	2201      	movs	r2, #1
 8001430:	4013      	ands	r3, r2
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	22f0      	movs	r2, #240	; 0xf0
 8001436:	411a      	asrs	r2, r3
 8001438:	0013      	movs	r3, r2
 800143a:	b25b      	sxtb	r3, r3
 800143c:	43db      	mvns	r3, r3
 800143e:	b25b      	sxtb	r3, r3
 8001440:	183a      	adds	r2, r7, r0
 8001442:	7812      	ldrb	r2, [r2, #0]
 8001444:	b252      	sxtb	r2, r2
 8001446:	4013      	ands	r3, r2
 8001448:	b25a      	sxtb	r2, r3
 800144a:	183b      	adds	r3, r7, r0
 800144c:	701a      	strb	r2, [r3, #0]
		Paint.Image[Addr] = Rdata | ((Color << 4) >> ((X % 2)*4));
 800144e:	1cbb      	adds	r3, r7, #2
 8001450:	881b      	ldrh	r3, [r3, #0]
 8001452:	011a      	lsls	r2, r3, #4
 8001454:	187b      	adds	r3, r7, r1
 8001456:	881b      	ldrh	r3, [r3, #0]
 8001458:	2101      	movs	r1, #1
 800145a:	400b      	ands	r3, r1
 800145c:	009b      	lsls	r3, r3, #2
 800145e:	411a      	asrs	r2, r3
 8001460:	0013      	movs	r3, r2
 8001462:	b25a      	sxtb	r2, r3
 8001464:	183b      	adds	r3, r7, r0
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	b25b      	sxtb	r3, r3
 800146a:	4313      	orrs	r3, r2
 800146c:	b259      	sxtb	r1, r3
 800146e:	4b04      	ldr	r3, [pc, #16]	; (8001480 <Paint_SetPixel+0x338>)
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	6a3b      	ldr	r3, [r7, #32]
 8001474:	18d3      	adds	r3, r2, r3
 8001476:	b2ca      	uxtb	r2, r1
 8001478:	701a      	strb	r2, [r3, #0]
 800147a:	e006      	b.n	800148a <Paint_SetPixel+0x342>
        return;
 800147c:	46c0      	nop			; (mov r8, r8)
 800147e:	e004      	b.n	800148a <Paint_SetPixel+0x342>
 8001480:	200027b0 	.word	0x200027b0
 8001484:	08002c58 	.word	0x08002c58
        return;
 8001488:	46c0      	nop			; (mov r8, r8)
		//printf("Add =  %d ,data = %d\r\n",Addr,Rdata);
		}
}
 800148a:	46bd      	mov	sp, r7
 800148c:	b00b      	add	sp, #44	; 0x2c
 800148e:	bd90      	pop	{r4, r7, pc}

08001490 <Paint_Clear>:
function: Clear the color of the picture
parameter:
    Color : Painted colors
******************************************************************************/
void Paint_Clear(UWORD Color)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b088      	sub	sp, #32
 8001494:	af00      	add	r7, sp, #0
 8001496:	0002      	movs	r2, r0
 8001498:	1dbb      	adds	r3, r7, #6
 800149a:	801a      	strh	r2, [r3, #0]
	if(Paint.Scale == 2) {
 800149c:	4b66      	ldr	r3, [pc, #408]	; (8001638 <Paint_Clear+0x1a8>)
 800149e:	8adb      	ldrh	r3, [r3, #22]
 80014a0:	2b02      	cmp	r3, #2
 80014a2:	d136      	bne.n	8001512 <Paint_Clear+0x82>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 80014a4:	231e      	movs	r3, #30
 80014a6:	18fb      	adds	r3, r7, r3
 80014a8:	2200      	movs	r2, #0
 80014aa:	801a      	strh	r2, [r3, #0]
 80014ac:	e029      	b.n	8001502 <Paint_Clear+0x72>
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 80014ae:	231c      	movs	r3, #28
 80014b0:	18fb      	adds	r3, r7, r3
 80014b2:	2200      	movs	r2, #0
 80014b4:	801a      	strh	r2, [r3, #0]
 80014b6:	e017      	b.n	80014e8 <Paint_Clear+0x58>
				UDOUBLE Addr = X + Y*Paint.WidthByte;
 80014b8:	201c      	movs	r0, #28
 80014ba:	183b      	adds	r3, r7, r0
 80014bc:	881a      	ldrh	r2, [r3, #0]
 80014be:	231e      	movs	r3, #30
 80014c0:	18fb      	adds	r3, r7, r3
 80014c2:	881b      	ldrh	r3, [r3, #0]
 80014c4:	495c      	ldr	r1, [pc, #368]	; (8001638 <Paint_Clear+0x1a8>)
 80014c6:	8a49      	ldrh	r1, [r1, #18]
 80014c8:	434b      	muls	r3, r1
 80014ca:	18d3      	adds	r3, r2, r3
 80014cc:	60bb      	str	r3, [r7, #8]
				Paint.Image[Addr] = Color;
 80014ce:	4b5a      	ldr	r3, [pc, #360]	; (8001638 <Paint_Clear+0x1a8>)
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	68bb      	ldr	r3, [r7, #8]
 80014d4:	18d3      	adds	r3, r2, r3
 80014d6:	1dba      	adds	r2, r7, #6
 80014d8:	8812      	ldrh	r2, [r2, #0]
 80014da:	b2d2      	uxtb	r2, r2
 80014dc:	701a      	strb	r2, [r3, #0]
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 80014de:	183b      	adds	r3, r7, r0
 80014e0:	881a      	ldrh	r2, [r3, #0]
 80014e2:	183b      	adds	r3, r7, r0
 80014e4:	3201      	adds	r2, #1
 80014e6:	801a      	strh	r2, [r3, #0]
 80014e8:	4b53      	ldr	r3, [pc, #332]	; (8001638 <Paint_Clear+0x1a8>)
 80014ea:	8a5b      	ldrh	r3, [r3, #18]
 80014ec:	221c      	movs	r2, #28
 80014ee:	18ba      	adds	r2, r7, r2
 80014f0:	8812      	ldrh	r2, [r2, #0]
 80014f2:	429a      	cmp	r2, r3
 80014f4:	d3e0      	bcc.n	80014b8 <Paint_Clear+0x28>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 80014f6:	211e      	movs	r1, #30
 80014f8:	187b      	adds	r3, r7, r1
 80014fa:	881a      	ldrh	r2, [r3, #0]
 80014fc:	187b      	adds	r3, r7, r1
 80014fe:	3201      	adds	r2, #1
 8001500:	801a      	strh	r2, [r3, #0]
 8001502:	4b4d      	ldr	r3, [pc, #308]	; (8001638 <Paint_Clear+0x1a8>)
 8001504:	8a9b      	ldrh	r3, [r3, #20]
 8001506:	221e      	movs	r2, #30
 8001508:	18ba      	adds	r2, r7, r2
 800150a:	8812      	ldrh	r2, [r2, #0]
 800150c:	429a      	cmp	r2, r3
 800150e:	d3ce      	bcc.n	80014ae <Paint_Clear+0x1e>
				UDOUBLE Addr = X + Y*Paint.WidthByte;
				Paint.Image[Addr] = (Color<<4)|Color;
			}
		}		
	}
}
 8001510:	e08e      	b.n	8001630 <Paint_Clear+0x1a0>
    }else if(Paint.Scale == 4) {
 8001512:	4b49      	ldr	r3, [pc, #292]	; (8001638 <Paint_Clear+0x1a8>)
 8001514:	8adb      	ldrh	r3, [r3, #22]
 8001516:	2b04      	cmp	r3, #4
 8001518:	d149      	bne.n	80015ae <Paint_Clear+0x11e>
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 800151a:	231a      	movs	r3, #26
 800151c:	18fb      	adds	r3, r7, r3
 800151e:	2200      	movs	r2, #0
 8001520:	801a      	strh	r2, [r3, #0]
 8001522:	e03c      	b.n	800159e <Paint_Clear+0x10e>
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {
 8001524:	2318      	movs	r3, #24
 8001526:	18fb      	adds	r3, r7, r3
 8001528:	2200      	movs	r2, #0
 800152a:	801a      	strh	r2, [r3, #0]
 800152c:	e02a      	b.n	8001584 <Paint_Clear+0xf4>
				UDOUBLE Addr = X + Y*Paint.WidthByte;
 800152e:	2018      	movs	r0, #24
 8001530:	183b      	adds	r3, r7, r0
 8001532:	881a      	ldrh	r2, [r3, #0]
 8001534:	231a      	movs	r3, #26
 8001536:	18fb      	adds	r3, r7, r3
 8001538:	881b      	ldrh	r3, [r3, #0]
 800153a:	493f      	ldr	r1, [pc, #252]	; (8001638 <Paint_Clear+0x1a8>)
 800153c:	8a49      	ldrh	r1, [r1, #18]
 800153e:	434b      	muls	r3, r1
 8001540:	18d3      	adds	r3, r2, r3
 8001542:	60fb      	str	r3, [r7, #12]
				Paint.Image[Addr] = (Color<<6)|(Color<<4)|(Color<<2)|Color;
 8001544:	1dbb      	adds	r3, r7, #6
 8001546:	881b      	ldrh	r3, [r3, #0]
 8001548:	019b      	lsls	r3, r3, #6
 800154a:	b25a      	sxtb	r2, r3
 800154c:	1dbb      	adds	r3, r7, #6
 800154e:	881b      	ldrh	r3, [r3, #0]
 8001550:	011b      	lsls	r3, r3, #4
 8001552:	b25b      	sxtb	r3, r3
 8001554:	4313      	orrs	r3, r2
 8001556:	b25a      	sxtb	r2, r3
 8001558:	1dbb      	adds	r3, r7, #6
 800155a:	881b      	ldrh	r3, [r3, #0]
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	b25b      	sxtb	r3, r3
 8001560:	4313      	orrs	r3, r2
 8001562:	b25a      	sxtb	r2, r3
 8001564:	1dbb      	adds	r3, r7, #6
 8001566:	881b      	ldrh	r3, [r3, #0]
 8001568:	b25b      	sxtb	r3, r3
 800156a:	4313      	orrs	r3, r2
 800156c:	b259      	sxtb	r1, r3
 800156e:	4b32      	ldr	r3, [pc, #200]	; (8001638 <Paint_Clear+0x1a8>)
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	18d3      	adds	r3, r2, r3
 8001576:	b2ca      	uxtb	r2, r1
 8001578:	701a      	strb	r2, [r3, #0]
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {
 800157a:	183b      	adds	r3, r7, r0
 800157c:	881a      	ldrh	r2, [r3, #0]
 800157e:	183b      	adds	r3, r7, r0
 8001580:	3201      	adds	r2, #1
 8001582:	801a      	strh	r2, [r3, #0]
 8001584:	4b2c      	ldr	r3, [pc, #176]	; (8001638 <Paint_Clear+0x1a8>)
 8001586:	8a5b      	ldrh	r3, [r3, #18]
 8001588:	2218      	movs	r2, #24
 800158a:	18ba      	adds	r2, r7, r2
 800158c:	8812      	ldrh	r2, [r2, #0]
 800158e:	429a      	cmp	r2, r3
 8001590:	d3cd      	bcc.n	800152e <Paint_Clear+0x9e>
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8001592:	211a      	movs	r1, #26
 8001594:	187b      	adds	r3, r7, r1
 8001596:	881a      	ldrh	r2, [r3, #0]
 8001598:	187b      	adds	r3, r7, r1
 800159a:	3201      	adds	r2, #1
 800159c:	801a      	strh	r2, [r3, #0]
 800159e:	4b26      	ldr	r3, [pc, #152]	; (8001638 <Paint_Clear+0x1a8>)
 80015a0:	8a9b      	ldrh	r3, [r3, #20]
 80015a2:	221a      	movs	r2, #26
 80015a4:	18ba      	adds	r2, r7, r2
 80015a6:	8812      	ldrh	r2, [r2, #0]
 80015a8:	429a      	cmp	r2, r3
 80015aa:	d3bb      	bcc.n	8001524 <Paint_Clear+0x94>
}
 80015ac:	e040      	b.n	8001630 <Paint_Clear+0x1a0>
	}else if(Paint.Scale == 7) {
 80015ae:	4b22      	ldr	r3, [pc, #136]	; (8001638 <Paint_Clear+0x1a8>)
 80015b0:	8adb      	ldrh	r3, [r3, #22]
 80015b2:	2b07      	cmp	r3, #7
 80015b4:	d13c      	bne.n	8001630 <Paint_Clear+0x1a0>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 80015b6:	2316      	movs	r3, #22
 80015b8:	18fb      	adds	r3, r7, r3
 80015ba:	2200      	movs	r2, #0
 80015bc:	801a      	strh	r2, [r3, #0]
 80015be:	e030      	b.n	8001622 <Paint_Clear+0x192>
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {
 80015c0:	2314      	movs	r3, #20
 80015c2:	18fb      	adds	r3, r7, r3
 80015c4:	2200      	movs	r2, #0
 80015c6:	801a      	strh	r2, [r3, #0]
 80015c8:	e01e      	b.n	8001608 <Paint_Clear+0x178>
				UDOUBLE Addr = X + Y*Paint.WidthByte;
 80015ca:	2014      	movs	r0, #20
 80015cc:	183b      	adds	r3, r7, r0
 80015ce:	881a      	ldrh	r2, [r3, #0]
 80015d0:	2316      	movs	r3, #22
 80015d2:	18fb      	adds	r3, r7, r3
 80015d4:	881b      	ldrh	r3, [r3, #0]
 80015d6:	4918      	ldr	r1, [pc, #96]	; (8001638 <Paint_Clear+0x1a8>)
 80015d8:	8a49      	ldrh	r1, [r1, #18]
 80015da:	434b      	muls	r3, r1
 80015dc:	18d3      	adds	r3, r2, r3
 80015de:	613b      	str	r3, [r7, #16]
				Paint.Image[Addr] = (Color<<4)|Color;
 80015e0:	1dbb      	adds	r3, r7, #6
 80015e2:	881b      	ldrh	r3, [r3, #0]
 80015e4:	011b      	lsls	r3, r3, #4
 80015e6:	b25a      	sxtb	r2, r3
 80015e8:	1dbb      	adds	r3, r7, #6
 80015ea:	881b      	ldrh	r3, [r3, #0]
 80015ec:	b25b      	sxtb	r3, r3
 80015ee:	4313      	orrs	r3, r2
 80015f0:	b259      	sxtb	r1, r3
 80015f2:	4b11      	ldr	r3, [pc, #68]	; (8001638 <Paint_Clear+0x1a8>)
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	18d3      	adds	r3, r2, r3
 80015fa:	b2ca      	uxtb	r2, r1
 80015fc:	701a      	strb	r2, [r3, #0]
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {
 80015fe:	183b      	adds	r3, r7, r0
 8001600:	881a      	ldrh	r2, [r3, #0]
 8001602:	183b      	adds	r3, r7, r0
 8001604:	3201      	adds	r2, #1
 8001606:	801a      	strh	r2, [r3, #0]
 8001608:	4b0b      	ldr	r3, [pc, #44]	; (8001638 <Paint_Clear+0x1a8>)
 800160a:	8a5b      	ldrh	r3, [r3, #18]
 800160c:	2214      	movs	r2, #20
 800160e:	18ba      	adds	r2, r7, r2
 8001610:	8812      	ldrh	r2, [r2, #0]
 8001612:	429a      	cmp	r2, r3
 8001614:	d3d9      	bcc.n	80015ca <Paint_Clear+0x13a>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8001616:	2116      	movs	r1, #22
 8001618:	187b      	adds	r3, r7, r1
 800161a:	881a      	ldrh	r2, [r3, #0]
 800161c:	187b      	adds	r3, r7, r1
 800161e:	3201      	adds	r2, #1
 8001620:	801a      	strh	r2, [r3, #0]
 8001622:	4b05      	ldr	r3, [pc, #20]	; (8001638 <Paint_Clear+0x1a8>)
 8001624:	8a9b      	ldrh	r3, [r3, #20]
 8001626:	2216      	movs	r2, #22
 8001628:	18ba      	adds	r2, r7, r2
 800162a:	8812      	ldrh	r2, [r2, #0]
 800162c:	429a      	cmp	r2, r3
 800162e:	d3c7      	bcc.n	80015c0 <Paint_Clear+0x130>
}
 8001630:	46c0      	nop			; (mov r8, r8)
 8001632:	46bd      	mov	sp, r7
 8001634:	b008      	add	sp, #32
 8001636:	bd80      	pop	{r7, pc}
 8001638:	200027b0 	.word	0x200027b0

0800163c <Paint_DrawChar>:
    Color_Foreground : Select the foreground color
    Color_Background : Select the background color
******************************************************************************/
void Paint_DrawChar(UWORD Xpoint, UWORD Ypoint, const char Acsii_Char,
                    sFONT* Font, UWORD Color_Foreground, UWORD Color_Background)
{
 800163c:	b5b0      	push	{r4, r5, r7, lr}
 800163e:	b088      	sub	sp, #32
 8001640:	af00      	add	r7, sp, #0
 8001642:	0004      	movs	r4, r0
 8001644:	0008      	movs	r0, r1
 8001646:	0011      	movs	r1, r2
 8001648:	607b      	str	r3, [r7, #4]
 800164a:	250e      	movs	r5, #14
 800164c:	197b      	adds	r3, r7, r5
 800164e:	1c22      	adds	r2, r4, #0
 8001650:	801a      	strh	r2, [r3, #0]
 8001652:	240c      	movs	r4, #12
 8001654:	193b      	adds	r3, r7, r4
 8001656:	1c02      	adds	r2, r0, #0
 8001658:	801a      	strh	r2, [r3, #0]
 800165a:	230b      	movs	r3, #11
 800165c:	18fb      	adds	r3, r7, r3
 800165e:	1c0a      	adds	r2, r1, #0
 8001660:	701a      	strb	r2, [r3, #0]
    UWORD Page, Column;

    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 8001662:	4b66      	ldr	r3, [pc, #408]	; (80017fc <Paint_DrawChar+0x1c0>)
 8001664:	889b      	ldrh	r3, [r3, #4]
 8001666:	197a      	adds	r2, r7, r5
 8001668:	8812      	ldrh	r2, [r2, #0]
 800166a:	429a      	cmp	r2, r3
 800166c:	d805      	bhi.n	800167a <Paint_DrawChar+0x3e>
 800166e:	4b63      	ldr	r3, [pc, #396]	; (80017fc <Paint_DrawChar+0x1c0>)
 8001670:	88db      	ldrh	r3, [r3, #6]
 8001672:	193a      	adds	r2, r7, r4
 8001674:	8812      	ldrh	r2, [r2, #0]
 8001676:	429a      	cmp	r2, r3
 8001678:	d904      	bls.n	8001684 <Paint_DrawChar+0x48>
        Debug("Paint_DrawChar Input exceeds the normal display range\r\n");
 800167a:	4b61      	ldr	r3, [pc, #388]	; (8001800 <Paint_DrawChar+0x1c4>)
 800167c:	0018      	movs	r0, r3
 800167e:	f000 fd69 	bl	8002154 <puts>
        return;
 8001682:	e0b7      	b.n	80017f4 <Paint_DrawChar+0x1b8>
    }

    uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height * (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
 8001684:	230b      	movs	r3, #11
 8001686:	18fb      	adds	r3, r7, r3
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	3b20      	subs	r3, #32
 800168c:	687a      	ldr	r2, [r7, #4]
 800168e:	88d2      	ldrh	r2, [r2, #6]
 8001690:	4353      	muls	r3, r2
 8001692:	687a      	ldr	r2, [r7, #4]
 8001694:	8892      	ldrh	r2, [r2, #4]
 8001696:	08d2      	lsrs	r2, r2, #3
 8001698:	b292      	uxth	r2, r2
 800169a:	0010      	movs	r0, r2
 800169c:	687a      	ldr	r2, [r7, #4]
 800169e:	8892      	ldrh	r2, [r2, #4]
 80016a0:	2107      	movs	r1, #7
 80016a2:	400a      	ands	r2, r1
 80016a4:	b292      	uxth	r2, r2
 80016a6:	1e51      	subs	r1, r2, #1
 80016a8:	418a      	sbcs	r2, r1
 80016aa:	b2d2      	uxtb	r2, r2
 80016ac:	1882      	adds	r2, r0, r2
 80016ae:	4353      	muls	r3, r2
 80016b0:	617b      	str	r3, [r7, #20]
    const unsigned char *ptr = &Font->table[Char_Offset];
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	18d3      	adds	r3, r2, r3
 80016ba:	61bb      	str	r3, [r7, #24]

    for (Page = 0; Page < Font->Height; Page ++ ) {
 80016bc:	231e      	movs	r3, #30
 80016be:	18fb      	adds	r3, r7, r3
 80016c0:	2200      	movs	r2, #0
 80016c2:	801a      	strh	r2, [r3, #0]
 80016c4:	e08e      	b.n	80017e4 <Paint_DrawChar+0x1a8>
        for (Column = 0; Column < Font->Width; Column ++ ) {
 80016c6:	231c      	movs	r3, #28
 80016c8:	18fb      	adds	r3, r7, r3
 80016ca:	2200      	movs	r2, #0
 80016cc:	801a      	strh	r2, [r3, #0]
 80016ce:	e071      	b.n	80017b4 <Paint_DrawChar+0x178>

            //To determine whether the font background color and screen background color is consistent
            if (FONT_BACKGROUND == Color_Background) { //this process is to speed up the scan
 80016d0:	2334      	movs	r3, #52	; 0x34
 80016d2:	18fb      	adds	r3, r7, r3
 80016d4:	881b      	ldrh	r3, [r3, #0]
 80016d6:	2bff      	cmp	r3, #255	; 0xff
 80016d8:	d122      	bne.n	8001720 <Paint_DrawChar+0xe4>
                if (*ptr & (0x80 >> (Column % 8)))
 80016da:	69bb      	ldr	r3, [r7, #24]
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	0019      	movs	r1, r3
 80016e0:	201c      	movs	r0, #28
 80016e2:	183b      	adds	r3, r7, r0
 80016e4:	881b      	ldrh	r3, [r3, #0]
 80016e6:	2207      	movs	r2, #7
 80016e8:	4013      	ands	r3, r2
 80016ea:	2280      	movs	r2, #128	; 0x80
 80016ec:	411a      	asrs	r2, r3
 80016ee:	0013      	movs	r3, r2
 80016f0:	400b      	ands	r3, r1
 80016f2:	d04e      	beq.n	8001792 <Paint_DrawChar+0x156>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 80016f4:	230e      	movs	r3, #14
 80016f6:	18fa      	adds	r2, r7, r3
 80016f8:	183b      	adds	r3, r7, r0
 80016fa:	8812      	ldrh	r2, [r2, #0]
 80016fc:	881b      	ldrh	r3, [r3, #0]
 80016fe:	18d3      	adds	r3, r2, r3
 8001700:	b298      	uxth	r0, r3
 8001702:	230c      	movs	r3, #12
 8001704:	18fa      	adds	r2, r7, r3
 8001706:	231e      	movs	r3, #30
 8001708:	18fb      	adds	r3, r7, r3
 800170a:	8812      	ldrh	r2, [r2, #0]
 800170c:	881b      	ldrh	r3, [r3, #0]
 800170e:	18d3      	adds	r3, r2, r3
 8001710:	b299      	uxth	r1, r3
 8001712:	2330      	movs	r3, #48	; 0x30
 8001714:	18fb      	adds	r3, r7, r3
 8001716:	881b      	ldrh	r3, [r3, #0]
 8001718:	001a      	movs	r2, r3
 800171a:	f7ff fd15 	bl	8001148 <Paint_SetPixel>
 800171e:	e038      	b.n	8001792 <Paint_DrawChar+0x156>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
            } else {
                if (*ptr & (0x80 >> (Column % 8))) {
 8001720:	69bb      	ldr	r3, [r7, #24]
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	0019      	movs	r1, r3
 8001726:	201c      	movs	r0, #28
 8001728:	183b      	adds	r3, r7, r0
 800172a:	881b      	ldrh	r3, [r3, #0]
 800172c:	2207      	movs	r2, #7
 800172e:	4013      	ands	r3, r2
 8001730:	2280      	movs	r2, #128	; 0x80
 8001732:	411a      	asrs	r2, r3
 8001734:	0013      	movs	r3, r2
 8001736:	400b      	ands	r3, r1
 8001738:	d015      	beq.n	8001766 <Paint_DrawChar+0x12a>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 800173a:	230e      	movs	r3, #14
 800173c:	18fa      	adds	r2, r7, r3
 800173e:	183b      	adds	r3, r7, r0
 8001740:	8812      	ldrh	r2, [r2, #0]
 8001742:	881b      	ldrh	r3, [r3, #0]
 8001744:	18d3      	adds	r3, r2, r3
 8001746:	b298      	uxth	r0, r3
 8001748:	230c      	movs	r3, #12
 800174a:	18fa      	adds	r2, r7, r3
 800174c:	231e      	movs	r3, #30
 800174e:	18fb      	adds	r3, r7, r3
 8001750:	8812      	ldrh	r2, [r2, #0]
 8001752:	881b      	ldrh	r3, [r3, #0]
 8001754:	18d3      	adds	r3, r2, r3
 8001756:	b299      	uxth	r1, r3
 8001758:	2330      	movs	r3, #48	; 0x30
 800175a:	18fb      	adds	r3, r7, r3
 800175c:	881b      	ldrh	r3, [r3, #0]
 800175e:	001a      	movs	r2, r3
 8001760:	f7ff fcf2 	bl	8001148 <Paint_SetPixel>
 8001764:	e015      	b.n	8001792 <Paint_DrawChar+0x156>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                } else {
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Background);
 8001766:	230e      	movs	r3, #14
 8001768:	18fa      	adds	r2, r7, r3
 800176a:	231c      	movs	r3, #28
 800176c:	18fb      	adds	r3, r7, r3
 800176e:	8812      	ldrh	r2, [r2, #0]
 8001770:	881b      	ldrh	r3, [r3, #0]
 8001772:	18d3      	adds	r3, r2, r3
 8001774:	b298      	uxth	r0, r3
 8001776:	230c      	movs	r3, #12
 8001778:	18fa      	adds	r2, r7, r3
 800177a:	231e      	movs	r3, #30
 800177c:	18fb      	adds	r3, r7, r3
 800177e:	8812      	ldrh	r2, [r2, #0]
 8001780:	881b      	ldrh	r3, [r3, #0]
 8001782:	18d3      	adds	r3, r2, r3
 8001784:	b299      	uxth	r1, r3
 8001786:	2334      	movs	r3, #52	; 0x34
 8001788:	18fb      	adds	r3, r7, r3
 800178a:	881b      	ldrh	r3, [r3, #0]
 800178c:	001a      	movs	r2, r3
 800178e:	f7ff fcdb 	bl	8001148 <Paint_SetPixel>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Background, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                }
            }
            //One pixel is 8 bits
            if (Column % 8 == 7)
 8001792:	231c      	movs	r3, #28
 8001794:	18fb      	adds	r3, r7, r3
 8001796:	881b      	ldrh	r3, [r3, #0]
 8001798:	2207      	movs	r2, #7
 800179a:	4013      	ands	r3, r2
 800179c:	b29b      	uxth	r3, r3
 800179e:	2b07      	cmp	r3, #7
 80017a0:	d102      	bne.n	80017a8 <Paint_DrawChar+0x16c>
                ptr++;
 80017a2:	69bb      	ldr	r3, [r7, #24]
 80017a4:	3301      	adds	r3, #1
 80017a6:	61bb      	str	r3, [r7, #24]
        for (Column = 0; Column < Font->Width; Column ++ ) {
 80017a8:	211c      	movs	r1, #28
 80017aa:	187b      	adds	r3, r7, r1
 80017ac:	881a      	ldrh	r2, [r3, #0]
 80017ae:	187b      	adds	r3, r7, r1
 80017b0:	3201      	adds	r2, #1
 80017b2:	801a      	strh	r2, [r3, #0]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	889b      	ldrh	r3, [r3, #4]
 80017b8:	221c      	movs	r2, #28
 80017ba:	18ba      	adds	r2, r7, r2
 80017bc:	8812      	ldrh	r2, [r2, #0]
 80017be:	429a      	cmp	r2, r3
 80017c0:	d200      	bcs.n	80017c4 <Paint_DrawChar+0x188>
 80017c2:	e785      	b.n	80016d0 <Paint_DrawChar+0x94>
        }// Write a line
        if (Font->Width % 8 != 0)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	889b      	ldrh	r3, [r3, #4]
 80017c8:	2207      	movs	r2, #7
 80017ca:	4013      	ands	r3, r2
 80017cc:	b29b      	uxth	r3, r3
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d002      	beq.n	80017d8 <Paint_DrawChar+0x19c>
            ptr++;
 80017d2:	69bb      	ldr	r3, [r7, #24]
 80017d4:	3301      	adds	r3, #1
 80017d6:	61bb      	str	r3, [r7, #24]
    for (Page = 0; Page < Font->Height; Page ++ ) {
 80017d8:	211e      	movs	r1, #30
 80017da:	187b      	adds	r3, r7, r1
 80017dc:	881a      	ldrh	r2, [r3, #0]
 80017de:	187b      	adds	r3, r7, r1
 80017e0:	3201      	adds	r2, #1
 80017e2:	801a      	strh	r2, [r3, #0]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	88db      	ldrh	r3, [r3, #6]
 80017e8:	221e      	movs	r2, #30
 80017ea:	18ba      	adds	r2, r7, r2
 80017ec:	8812      	ldrh	r2, [r2, #0]
 80017ee:	429a      	cmp	r2, r3
 80017f0:	d200      	bcs.n	80017f4 <Paint_DrawChar+0x1b8>
 80017f2:	e768      	b.n	80016c6 <Paint_DrawChar+0x8a>
    }// Write all
}
 80017f4:	46bd      	mov	sp, r7
 80017f6:	b008      	add	sp, #32
 80017f8:	bdb0      	pop	{r4, r5, r7, pc}
 80017fa:	46c0      	nop			; (mov r8, r8)
 80017fc:	200027b0 	.word	0x200027b0
 8001800:	08002dbc 	.word	0x08002dbc

08001804 <Paint_DrawString_EN>:
    Color_Foreground : Select the foreground color
    Color_Background : Select the background color
******************************************************************************/
void Paint_DrawString_EN(UWORD Xstart, UWORD Ystart, const char * pString,
                         sFONT* Font, UWORD Color_Foreground, UWORD Color_Background)
{
 8001804:	b5b0      	push	{r4, r5, r7, lr}
 8001806:	b088      	sub	sp, #32
 8001808:	af02      	add	r7, sp, #8
 800180a:	60ba      	str	r2, [r7, #8]
 800180c:	607b      	str	r3, [r7, #4]
 800180e:	240e      	movs	r4, #14
 8001810:	193b      	adds	r3, r7, r4
 8001812:	1c02      	adds	r2, r0, #0
 8001814:	801a      	strh	r2, [r3, #0]
 8001816:	200c      	movs	r0, #12
 8001818:	183b      	adds	r3, r7, r0
 800181a:	1c0a      	adds	r2, r1, #0
 800181c:	801a      	strh	r2, [r3, #0]
    UWORD Xpoint = Xstart;
 800181e:	2316      	movs	r3, #22
 8001820:	18fb      	adds	r3, r7, r3
 8001822:	0021      	movs	r1, r4
 8001824:	187a      	adds	r2, r7, r1
 8001826:	8812      	ldrh	r2, [r2, #0]
 8001828:	801a      	strh	r2, [r3, #0]
    UWORD Ypoint = Ystart;
 800182a:	2314      	movs	r3, #20
 800182c:	18fb      	adds	r3, r7, r3
 800182e:	183a      	adds	r2, r7, r0
 8001830:	8812      	ldrh	r2, [r2, #0]
 8001832:	801a      	strh	r2, [r3, #0]

    if (Xstart > Paint.Width || Ystart > Paint.Height) {
 8001834:	4b30      	ldr	r3, [pc, #192]	; (80018f8 <Paint_DrawString_EN+0xf4>)
 8001836:	889b      	ldrh	r3, [r3, #4]
 8001838:	187a      	adds	r2, r7, r1
 800183a:	8812      	ldrh	r2, [r2, #0]
 800183c:	429a      	cmp	r2, r3
 800183e:	d805      	bhi.n	800184c <Paint_DrawString_EN+0x48>
 8001840:	4b2d      	ldr	r3, [pc, #180]	; (80018f8 <Paint_DrawString_EN+0xf4>)
 8001842:	88db      	ldrh	r3, [r3, #6]
 8001844:	183a      	adds	r2, r7, r0
 8001846:	8812      	ldrh	r2, [r2, #0]
 8001848:	429a      	cmp	r2, r3
 800184a:	d94e      	bls.n	80018ea <Paint_DrawString_EN+0xe6>
        Debug("Paint_DrawString_EN Input exceeds the normal display range\r\n");
 800184c:	4b2b      	ldr	r3, [pc, #172]	; (80018fc <Paint_DrawString_EN+0xf8>)
 800184e:	0018      	movs	r0, r3
 8001850:	f000 fc80 	bl	8002154 <puts>
        return;
 8001854:	e04d      	b.n	80018f2 <Paint_DrawString_EN+0xee>
    }

    while (* pString != '\0') {
        //if X direction filled , reposition to(Xstart,Ypoint),Ypoint is Y direction plus the Height of the character
        if ((Xpoint + Font->Width ) > Paint.Width ) {
 8001856:	2116      	movs	r1, #22
 8001858:	187b      	adds	r3, r7, r1
 800185a:	881b      	ldrh	r3, [r3, #0]
 800185c:	687a      	ldr	r2, [r7, #4]
 800185e:	8892      	ldrh	r2, [r2, #4]
 8001860:	189b      	adds	r3, r3, r2
 8001862:	4a25      	ldr	r2, [pc, #148]	; (80018f8 <Paint_DrawString_EN+0xf4>)
 8001864:	8892      	ldrh	r2, [r2, #4]
 8001866:	4293      	cmp	r3, r2
 8001868:	dd0c      	ble.n	8001884 <Paint_DrawString_EN+0x80>
            Xpoint = Xstart;
 800186a:	187b      	adds	r3, r7, r1
 800186c:	220e      	movs	r2, #14
 800186e:	18ba      	adds	r2, r7, r2
 8001870:	8812      	ldrh	r2, [r2, #0]
 8001872:	801a      	strh	r2, [r3, #0]
            Ypoint += Font->Height;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	88d9      	ldrh	r1, [r3, #6]
 8001878:	2214      	movs	r2, #20
 800187a:	18bb      	adds	r3, r7, r2
 800187c:	18ba      	adds	r2, r7, r2
 800187e:	8812      	ldrh	r2, [r2, #0]
 8001880:	188a      	adds	r2, r1, r2
 8001882:	801a      	strh	r2, [r3, #0]
        }

        // If the Y direction is full, reposition to(Xstart, Ystart)
        if ((Ypoint  + Font->Height ) > Paint.Height ) {
 8001884:	2114      	movs	r1, #20
 8001886:	187b      	adds	r3, r7, r1
 8001888:	881b      	ldrh	r3, [r3, #0]
 800188a:	687a      	ldr	r2, [r7, #4]
 800188c:	88d2      	ldrh	r2, [r2, #6]
 800188e:	189b      	adds	r3, r3, r2
 8001890:	4a19      	ldr	r2, [pc, #100]	; (80018f8 <Paint_DrawString_EN+0xf4>)
 8001892:	88d2      	ldrh	r2, [r2, #6]
 8001894:	4293      	cmp	r3, r2
 8001896:	dd0a      	ble.n	80018ae <Paint_DrawString_EN+0xaa>
            Xpoint = Xstart;
 8001898:	2316      	movs	r3, #22
 800189a:	18fb      	adds	r3, r7, r3
 800189c:	220e      	movs	r2, #14
 800189e:	18ba      	adds	r2, r7, r2
 80018a0:	8812      	ldrh	r2, [r2, #0]
 80018a2:	801a      	strh	r2, [r3, #0]
            Ypoint = Ystart;
 80018a4:	187b      	adds	r3, r7, r1
 80018a6:	220c      	movs	r2, #12
 80018a8:	18ba      	adds	r2, r7, r2
 80018aa:	8812      	ldrh	r2, [r2, #0]
 80018ac:	801a      	strh	r2, [r3, #0]
        }
        Paint_DrawChar(Xpoint, Ypoint, * pString, Font, Color_Background, Color_Foreground);
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	781a      	ldrb	r2, [r3, #0]
 80018b2:	687c      	ldr	r4, [r7, #4]
 80018b4:	2314      	movs	r3, #20
 80018b6:	18fb      	adds	r3, r7, r3
 80018b8:	8819      	ldrh	r1, [r3, #0]
 80018ba:	2516      	movs	r5, #22
 80018bc:	197b      	adds	r3, r7, r5
 80018be:	8818      	ldrh	r0, [r3, #0]
 80018c0:	2328      	movs	r3, #40	; 0x28
 80018c2:	18fb      	adds	r3, r7, r3
 80018c4:	881b      	ldrh	r3, [r3, #0]
 80018c6:	9301      	str	r3, [sp, #4]
 80018c8:	232c      	movs	r3, #44	; 0x2c
 80018ca:	18fb      	adds	r3, r7, r3
 80018cc:	881b      	ldrh	r3, [r3, #0]
 80018ce:	9300      	str	r3, [sp, #0]
 80018d0:	0023      	movs	r3, r4
 80018d2:	f7ff feb3 	bl	800163c <Paint_DrawChar>

        //The next character of the address
        pString ++;
 80018d6:	68bb      	ldr	r3, [r7, #8]
 80018d8:	3301      	adds	r3, #1
 80018da:	60bb      	str	r3, [r7, #8]

        //The next word of the abscissa increases the font of the broadband
        Xpoint += Font->Width;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	8899      	ldrh	r1, [r3, #4]
 80018e0:	197b      	adds	r3, r7, r5
 80018e2:	197a      	adds	r2, r7, r5
 80018e4:	8812      	ldrh	r2, [r2, #0]
 80018e6:	188a      	adds	r2, r1, r2
 80018e8:	801a      	strh	r2, [r3, #0]
    while (* pString != '\0') {
 80018ea:	68bb      	ldr	r3, [r7, #8]
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d1b1      	bne.n	8001856 <Paint_DrawString_EN+0x52>
    }
}
 80018f2:	46bd      	mov	sp, r7
 80018f4:	b006      	add	sp, #24
 80018f6:	bdb0      	pop	{r4, r5, r7, pc}
 80018f8:	200027b0 	.word	0x200027b0
 80018fc:	08002dfc 	.word	0x08002dfc

08001900 <Paint_DrawBitMap>:
info:
    Use a computer to convert the image into a corresponding array,
    and then embed the array directly into Imagedata.cpp as a .c file.
******************************************************************************/
void Paint_DrawBitMap(const unsigned char* image_buffer)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
    UWORD x, y;
    UDOUBLE Addr = 0;
 8001908:	2300      	movs	r3, #0
 800190a:	60bb      	str	r3, [r7, #8]

    for (y = 0; y < Paint.HeightByte; y++) {
 800190c:	230c      	movs	r3, #12
 800190e:	18fb      	adds	r3, r7, r3
 8001910:	2200      	movs	r2, #0
 8001912:	801a      	strh	r2, [r3, #0]
 8001914:	e02a      	b.n	800196c <Paint_DrawBitMap+0x6c>
        for (x = 0; x < Paint.WidthByte; x++) {//8 pixel =  1 byte
 8001916:	230e      	movs	r3, #14
 8001918:	18fb      	adds	r3, r7, r3
 800191a:	2200      	movs	r2, #0
 800191c:	801a      	strh	r2, [r3, #0]
 800191e:	e018      	b.n	8001952 <Paint_DrawBitMap+0x52>
            Addr = x + y * Paint.WidthByte;
 8001920:	200e      	movs	r0, #14
 8001922:	183b      	adds	r3, r7, r0
 8001924:	881a      	ldrh	r2, [r3, #0]
 8001926:	230c      	movs	r3, #12
 8001928:	18fb      	adds	r3, r7, r3
 800192a:	881b      	ldrh	r3, [r3, #0]
 800192c:	4915      	ldr	r1, [pc, #84]	; (8001984 <Paint_DrawBitMap+0x84>)
 800192e:	8a49      	ldrh	r1, [r1, #18]
 8001930:	434b      	muls	r3, r1
 8001932:	18d3      	adds	r3, r2, r3
 8001934:	60bb      	str	r3, [r7, #8]
            Paint.Image[Addr] = (unsigned char)image_buffer[Addr];
 8001936:	687a      	ldr	r2, [r7, #4]
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	18d2      	adds	r2, r2, r3
 800193c:	4b11      	ldr	r3, [pc, #68]	; (8001984 <Paint_DrawBitMap+0x84>)
 800193e:	6819      	ldr	r1, [r3, #0]
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	18cb      	adds	r3, r1, r3
 8001944:	7812      	ldrb	r2, [r2, #0]
 8001946:	701a      	strb	r2, [r3, #0]
        for (x = 0; x < Paint.WidthByte; x++) {//8 pixel =  1 byte
 8001948:	183b      	adds	r3, r7, r0
 800194a:	881a      	ldrh	r2, [r3, #0]
 800194c:	183b      	adds	r3, r7, r0
 800194e:	3201      	adds	r2, #1
 8001950:	801a      	strh	r2, [r3, #0]
 8001952:	4b0c      	ldr	r3, [pc, #48]	; (8001984 <Paint_DrawBitMap+0x84>)
 8001954:	8a5b      	ldrh	r3, [r3, #18]
 8001956:	220e      	movs	r2, #14
 8001958:	18ba      	adds	r2, r7, r2
 800195a:	8812      	ldrh	r2, [r2, #0]
 800195c:	429a      	cmp	r2, r3
 800195e:	d3df      	bcc.n	8001920 <Paint_DrawBitMap+0x20>
    for (y = 0; y < Paint.HeightByte; y++) {
 8001960:	210c      	movs	r1, #12
 8001962:	187b      	adds	r3, r7, r1
 8001964:	881a      	ldrh	r2, [r3, #0]
 8001966:	187b      	adds	r3, r7, r1
 8001968:	3201      	adds	r2, #1
 800196a:	801a      	strh	r2, [r3, #0]
 800196c:	4b05      	ldr	r3, [pc, #20]	; (8001984 <Paint_DrawBitMap+0x84>)
 800196e:	8a9b      	ldrh	r3, [r3, #20]
 8001970:	220c      	movs	r2, #12
 8001972:	18ba      	adds	r2, r7, r2
 8001974:	8812      	ldrh	r2, [r2, #0]
 8001976:	429a      	cmp	r2, r3
 8001978:	d3cd      	bcc.n	8001916 <Paint_DrawBitMap+0x16>
        }
    }
}
 800197a:	46c0      	nop			; (mov r8, r8)
 800197c:	46c0      	nop			; (mov r8, r8)
 800197e:	46bd      	mov	sp, r7
 8001980:	b004      	add	sp, #16
 8001982:	bd80      	pop	{r7, pc}
 8001984:	200027b0 	.word	0x200027b0

08001988 <LL_GPIO_IsInputPinSet>:
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(GPIOx->IDR, PinMask) == (PinMask)) ? 1UL : 0UL);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	691b      	ldr	r3, [r3, #16]
 8001996:	683a      	ldr	r2, [r7, #0]
 8001998:	4013      	ands	r3, r2
 800199a:	683a      	ldr	r2, [r7, #0]
 800199c:	429a      	cmp	r2, r3
 800199e:	d101      	bne.n	80019a4 <LL_GPIO_IsInputPinSet+0x1c>
 80019a0:	2301      	movs	r3, #1
 80019a2:	e000      	b.n	80019a6 <LL_GPIO_IsInputPinSet+0x1e>
 80019a4:	2300      	movs	r3, #0
}
 80019a6:	0018      	movs	r0, r3
 80019a8:	46bd      	mov	sp, r7
 80019aa:	b002      	add	sp, #8
 80019ac:	bd80      	pop	{r7, pc}

080019ae <LL_GPIO_SetOutputPin>:
{
 80019ae:	b580      	push	{r7, lr}
 80019b0:	b082      	sub	sp, #8
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	6078      	str	r0, [r7, #4]
 80019b6:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	683a      	ldr	r2, [r7, #0]
 80019bc:	619a      	str	r2, [r3, #24]
}
 80019be:	46c0      	nop			; (mov r8, r8)
 80019c0:	46bd      	mov	sp, r7
 80019c2:	b002      	add	sp, #8
 80019c4:	bd80      	pop	{r7, pc}

080019c6 <LL_GPIO_ResetOutputPin>:
{
 80019c6:	b580      	push	{r7, lr}
 80019c8:	b082      	sub	sp, #8
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	6078      	str	r0, [r7, #4]
 80019ce:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	683a      	ldr	r2, [r7, #0]
 80019d4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80019d6:	46c0      	nop			; (mov r8, r8)
 80019d8:	46bd      	mov	sp, r7
 80019da:	b002      	add	sp, #8
 80019dc:	bd80      	pop	{r7, pc}
	...

080019e0 <EPD_1IN54B_Reset>:
/******************************************************************************
function :	Software reset
parameter:
******************************************************************************/
static void EPD_1IN54B_Reset(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
    DEV_Digital_Write(EPD_RST_PIN, 1);
 80019e4:	4b0d      	ldr	r3, [pc, #52]	; (8001a1c <EPD_1IN54B_Reset+0x3c>)
 80019e6:	2101      	movs	r1, #1
 80019e8:	0018      	movs	r0, r3
 80019ea:	f7ff ffe0 	bl	80019ae <LL_GPIO_SetOutputPin>
    DEV_Delay_ms(100);
 80019ee:	2064      	movs	r0, #100	; 0x64
 80019f0:	f7fe fc3e 	bl	8000270 <LL_mDelay>
    DEV_Digital_Write(EPD_RST_PIN, 0);
 80019f4:	4b09      	ldr	r3, [pc, #36]	; (8001a1c <EPD_1IN54B_Reset+0x3c>)
 80019f6:	2101      	movs	r1, #1
 80019f8:	0018      	movs	r0, r3
 80019fa:	f7ff ffe4 	bl	80019c6 <LL_GPIO_ResetOutputPin>
    DEV_Delay_ms(2);
 80019fe:	2002      	movs	r0, #2
 8001a00:	f7fe fc36 	bl	8000270 <LL_mDelay>
    DEV_Digital_Write(EPD_RST_PIN, 1);
 8001a04:	4b05      	ldr	r3, [pc, #20]	; (8001a1c <EPD_1IN54B_Reset+0x3c>)
 8001a06:	2101      	movs	r1, #1
 8001a08:	0018      	movs	r0, r3
 8001a0a:	f7ff ffd0 	bl	80019ae <LL_GPIO_SetOutputPin>
    DEV_Delay_ms(100);
 8001a0e:	2064      	movs	r0, #100	; 0x64
 8001a10:	f7fe fc2e 	bl	8000270 <LL_mDelay>
}
 8001a14:	46c0      	nop			; (mov r8, r8)
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	46c0      	nop			; (mov r8, r8)
 8001a1c:	50000800 	.word	0x50000800

08001a20 <EPD_1IN54B_SendCommand>:
function :	send command
parameter:
     Reg : Command register
******************************************************************************/
static void EPD_1IN54B_SendCommand(UBYTE Reg)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	0002      	movs	r2, r0
 8001a28:	1dfb      	adds	r3, r7, #7
 8001a2a:	701a      	strb	r2, [r3, #0]
    DEV_Digital_Write(EPD_DC_PIN, 0);
 8001a2c:	4b0c      	ldr	r3, [pc, #48]	; (8001a60 <EPD_1IN54B_SendCommand+0x40>)
 8001a2e:	2102      	movs	r1, #2
 8001a30:	0018      	movs	r0, r3
 8001a32:	f7ff ffc8 	bl	80019c6 <LL_GPIO_ResetOutputPin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 8001a36:	23a0      	movs	r3, #160	; 0xa0
 8001a38:	05db      	lsls	r3, r3, #23
 8001a3a:	2110      	movs	r1, #16
 8001a3c:	0018      	movs	r0, r3
 8001a3e:	f7ff ffc2 	bl	80019c6 <LL_GPIO_ResetOutputPin>
    DEV_SPI_WriteByte(Reg);
 8001a42:	1dfb      	adds	r3, r7, #7
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	0018      	movs	r0, r3
 8001a48:	f7ff fadb 	bl	8001002 <DEV_SPI_WriteByte>
    DEV_Digital_Write(EPD_CS_PIN, 1);
 8001a4c:	23a0      	movs	r3, #160	; 0xa0
 8001a4e:	05db      	lsls	r3, r3, #23
 8001a50:	2110      	movs	r1, #16
 8001a52:	0018      	movs	r0, r3
 8001a54:	f7ff ffab 	bl	80019ae <LL_GPIO_SetOutputPin>
}
 8001a58:	46c0      	nop			; (mov r8, r8)
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	b002      	add	sp, #8
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	50000800 	.word	0x50000800

08001a64 <EPD_1IN54B_SendData>:
function :	send data
parameter:
    Data : Write data
******************************************************************************/
static void EPD_1IN54B_SendData(UBYTE Data)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	0002      	movs	r2, r0
 8001a6c:	1dfb      	adds	r3, r7, #7
 8001a6e:	701a      	strb	r2, [r3, #0]
    DEV_Digital_Write(EPD_DC_PIN, 1);
 8001a70:	4b0c      	ldr	r3, [pc, #48]	; (8001aa4 <EPD_1IN54B_SendData+0x40>)
 8001a72:	2102      	movs	r1, #2
 8001a74:	0018      	movs	r0, r3
 8001a76:	f7ff ff9a 	bl	80019ae <LL_GPIO_SetOutputPin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 8001a7a:	23a0      	movs	r3, #160	; 0xa0
 8001a7c:	05db      	lsls	r3, r3, #23
 8001a7e:	2110      	movs	r1, #16
 8001a80:	0018      	movs	r0, r3
 8001a82:	f7ff ffa0 	bl	80019c6 <LL_GPIO_ResetOutputPin>
    DEV_SPI_WriteByte(Data);
 8001a86:	1dfb      	adds	r3, r7, #7
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	0018      	movs	r0, r3
 8001a8c:	f7ff fab9 	bl	8001002 <DEV_SPI_WriteByte>
    DEV_Digital_Write(EPD_CS_PIN, 1);
 8001a90:	23a0      	movs	r3, #160	; 0xa0
 8001a92:	05db      	lsls	r3, r3, #23
 8001a94:	2110      	movs	r1, #16
 8001a96:	0018      	movs	r0, r3
 8001a98:	f7ff ff89 	bl	80019ae <LL_GPIO_SetOutputPin>
}
 8001a9c:	46c0      	nop			; (mov r8, r8)
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	b002      	add	sp, #8
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	50000800 	.word	0x50000800

08001aa8 <EPD_1IN54B_ReadBusy>:
/******************************************************************************
function :	Wait until the busy_pin goes LOW
parameter:
******************************************************************************/
static void EPD_1IN54B_ReadBusy(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
    Debug("e-Paper busy\r\n");
 8001aac:	4b0b      	ldr	r3, [pc, #44]	; (8001adc <EPD_1IN54B_ReadBusy+0x34>)
 8001aae:	0018      	movs	r0, r3
 8001ab0:	f000 fb50 	bl	8002154 <puts>
    while(1) {
        if(DEV_Digital_Read(EPD_BUSY_PIN) == 1)
 8001ab4:	4b0a      	ldr	r3, [pc, #40]	; (8001ae0 <EPD_1IN54B_ReadBusy+0x38>)
 8001ab6:	2104      	movs	r1, #4
 8001ab8:	0018      	movs	r0, r3
 8001aba:	f7ff ff65 	bl	8001988 <LL_GPIO_IsInputPinSet>
 8001abe:	0003      	movs	r3, r0
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d000      	beq.n	8001ac6 <EPD_1IN54B_ReadBusy+0x1e>
 8001ac4:	e7f6      	b.n	8001ab4 <EPD_1IN54B_ReadBusy+0xc>
            break;
 8001ac6:	46c0      	nop			; (mov r8, r8)
    }
    DEV_Delay_ms(200);
 8001ac8:	20c8      	movs	r0, #200	; 0xc8
 8001aca:	f7fe fbd1 	bl	8000270 <LL_mDelay>
    Debug("e-Paper busy release\r\n");
 8001ace:	4b05      	ldr	r3, [pc, #20]	; (8001ae4 <EPD_1IN54B_ReadBusy+0x3c>)
 8001ad0:	0018      	movs	r0, r3
 8001ad2:	f000 fb3f 	bl	8002154 <puts>
}
 8001ad6:	46c0      	nop			; (mov r8, r8)
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	08002e88 	.word	0x08002e88
 8001ae0:	50000800 	.word	0x50000800
 8001ae4:	08002ea0 	.word	0x08002ea0

08001ae8 <EPD_1IN54B_SetLutBw>:
/******************************************************************************
function :	Set the look-up black and white tables
parameter:
******************************************************************************/
static void EPD_1IN54B_SetLutBw(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
    UWORD count;
    EPD_1IN54B_SendCommand(0x20);// g vcom
 8001aee:	2020      	movs	r0, #32
 8001af0:	f7ff ff96 	bl	8001a20 <EPD_1IN54B_SendCommand>
    for(count = 0; count < 15; count++) {
 8001af4:	1dbb      	adds	r3, r7, #6
 8001af6:	2200      	movs	r2, #0
 8001af8:	801a      	strh	r2, [r3, #0]
 8001afa:	e00b      	b.n	8001b14 <EPD_1IN54B_SetLutBw+0x2c>
        EPD_1IN54B_SendData(EPD_1IN54B_lut_vcom0[count]);
 8001afc:	1dbb      	adds	r3, r7, #6
 8001afe:	881b      	ldrh	r3, [r3, #0]
 8001b00:	4a37      	ldr	r2, [pc, #220]	; (8001be0 <EPD_1IN54B_SetLutBw+0xf8>)
 8001b02:	5cd3      	ldrb	r3, [r2, r3]
 8001b04:	0018      	movs	r0, r3
 8001b06:	f7ff ffad 	bl	8001a64 <EPD_1IN54B_SendData>
    for(count = 0; count < 15; count++) {
 8001b0a:	1dbb      	adds	r3, r7, #6
 8001b0c:	881a      	ldrh	r2, [r3, #0]
 8001b0e:	1dbb      	adds	r3, r7, #6
 8001b10:	3201      	adds	r2, #1
 8001b12:	801a      	strh	r2, [r3, #0]
 8001b14:	1dbb      	adds	r3, r7, #6
 8001b16:	881b      	ldrh	r3, [r3, #0]
 8001b18:	2b0e      	cmp	r3, #14
 8001b1a:	d9ef      	bls.n	8001afc <EPD_1IN54B_SetLutBw+0x14>
    }
    EPD_1IN54B_SendCommand(0x21);// g ww --
 8001b1c:	2021      	movs	r0, #33	; 0x21
 8001b1e:	f7ff ff7f 	bl	8001a20 <EPD_1IN54B_SendCommand>
    for(count = 0; count < 15; count++) {
 8001b22:	1dbb      	adds	r3, r7, #6
 8001b24:	2200      	movs	r2, #0
 8001b26:	801a      	strh	r2, [r3, #0]
 8001b28:	e00b      	b.n	8001b42 <EPD_1IN54B_SetLutBw+0x5a>
        EPD_1IN54B_SendData(EPD_1IN54B_lut_w[count]);
 8001b2a:	1dbb      	adds	r3, r7, #6
 8001b2c:	881b      	ldrh	r3, [r3, #0]
 8001b2e:	4a2d      	ldr	r2, [pc, #180]	; (8001be4 <EPD_1IN54B_SetLutBw+0xfc>)
 8001b30:	5cd3      	ldrb	r3, [r2, r3]
 8001b32:	0018      	movs	r0, r3
 8001b34:	f7ff ff96 	bl	8001a64 <EPD_1IN54B_SendData>
    for(count = 0; count < 15; count++) {
 8001b38:	1dbb      	adds	r3, r7, #6
 8001b3a:	881a      	ldrh	r2, [r3, #0]
 8001b3c:	1dbb      	adds	r3, r7, #6
 8001b3e:	3201      	adds	r2, #1
 8001b40:	801a      	strh	r2, [r3, #0]
 8001b42:	1dbb      	adds	r3, r7, #6
 8001b44:	881b      	ldrh	r3, [r3, #0]
 8001b46:	2b0e      	cmp	r3, #14
 8001b48:	d9ef      	bls.n	8001b2a <EPD_1IN54B_SetLutBw+0x42>
    }
    EPD_1IN54B_SendCommand(0x22);// g bw r
 8001b4a:	2022      	movs	r0, #34	; 0x22
 8001b4c:	f7ff ff68 	bl	8001a20 <EPD_1IN54B_SendCommand>
    for(count = 0; count < 15; count++) {
 8001b50:	1dbb      	adds	r3, r7, #6
 8001b52:	2200      	movs	r2, #0
 8001b54:	801a      	strh	r2, [r3, #0]
 8001b56:	e00b      	b.n	8001b70 <EPD_1IN54B_SetLutBw+0x88>
        EPD_1IN54B_SendData(EPD_1IN54B_lut_b[count]);
 8001b58:	1dbb      	adds	r3, r7, #6
 8001b5a:	881b      	ldrh	r3, [r3, #0]
 8001b5c:	4a22      	ldr	r2, [pc, #136]	; (8001be8 <EPD_1IN54B_SetLutBw+0x100>)
 8001b5e:	5cd3      	ldrb	r3, [r2, r3]
 8001b60:	0018      	movs	r0, r3
 8001b62:	f7ff ff7f 	bl	8001a64 <EPD_1IN54B_SendData>
    for(count = 0; count < 15; count++) {
 8001b66:	1dbb      	adds	r3, r7, #6
 8001b68:	881a      	ldrh	r2, [r3, #0]
 8001b6a:	1dbb      	adds	r3, r7, #6
 8001b6c:	3201      	adds	r2, #1
 8001b6e:	801a      	strh	r2, [r3, #0]
 8001b70:	1dbb      	adds	r3, r7, #6
 8001b72:	881b      	ldrh	r3, [r3, #0]
 8001b74:	2b0e      	cmp	r3, #14
 8001b76:	d9ef      	bls.n	8001b58 <EPD_1IN54B_SetLutBw+0x70>
    }
    EPD_1IN54B_SendCommand(0x23);// g wb w
 8001b78:	2023      	movs	r0, #35	; 0x23
 8001b7a:	f7ff ff51 	bl	8001a20 <EPD_1IN54B_SendCommand>
    for(count = 0; count < 15; count++) {
 8001b7e:	1dbb      	adds	r3, r7, #6
 8001b80:	2200      	movs	r2, #0
 8001b82:	801a      	strh	r2, [r3, #0]
 8001b84:	e00b      	b.n	8001b9e <EPD_1IN54B_SetLutBw+0xb6>
        EPD_1IN54B_SendData(EPD_1IN54B_lut_g1[count]);
 8001b86:	1dbb      	adds	r3, r7, #6
 8001b88:	881b      	ldrh	r3, [r3, #0]
 8001b8a:	4a18      	ldr	r2, [pc, #96]	; (8001bec <EPD_1IN54B_SetLutBw+0x104>)
 8001b8c:	5cd3      	ldrb	r3, [r2, r3]
 8001b8e:	0018      	movs	r0, r3
 8001b90:	f7ff ff68 	bl	8001a64 <EPD_1IN54B_SendData>
    for(count = 0; count < 15; count++) {
 8001b94:	1dbb      	adds	r3, r7, #6
 8001b96:	881a      	ldrh	r2, [r3, #0]
 8001b98:	1dbb      	adds	r3, r7, #6
 8001b9a:	3201      	adds	r2, #1
 8001b9c:	801a      	strh	r2, [r3, #0]
 8001b9e:	1dbb      	adds	r3, r7, #6
 8001ba0:	881b      	ldrh	r3, [r3, #0]
 8001ba2:	2b0e      	cmp	r3, #14
 8001ba4:	d9ef      	bls.n	8001b86 <EPD_1IN54B_SetLutBw+0x9e>
    }
    EPD_1IN54B_SendCommand(0x24);// g bb b
 8001ba6:	2024      	movs	r0, #36	; 0x24
 8001ba8:	f7ff ff3a 	bl	8001a20 <EPD_1IN54B_SendCommand>
    for(count = 0; count < 15; count++) {
 8001bac:	1dbb      	adds	r3, r7, #6
 8001bae:	2200      	movs	r2, #0
 8001bb0:	801a      	strh	r2, [r3, #0]
 8001bb2:	e00b      	b.n	8001bcc <EPD_1IN54B_SetLutBw+0xe4>
        EPD_1IN54B_SendData(EPD_1IN54B_lut_g2[count]);
 8001bb4:	1dbb      	adds	r3, r7, #6
 8001bb6:	881b      	ldrh	r3, [r3, #0]
 8001bb8:	4a0d      	ldr	r2, [pc, #52]	; (8001bf0 <EPD_1IN54B_SetLutBw+0x108>)
 8001bba:	5cd3      	ldrb	r3, [r2, r3]
 8001bbc:	0018      	movs	r0, r3
 8001bbe:	f7ff ff51 	bl	8001a64 <EPD_1IN54B_SendData>
    for(count = 0; count < 15; count++) {
 8001bc2:	1dbb      	adds	r3, r7, #6
 8001bc4:	881a      	ldrh	r2, [r3, #0]
 8001bc6:	1dbb      	adds	r3, r7, #6
 8001bc8:	3201      	adds	r2, #1
 8001bca:	801a      	strh	r2, [r3, #0]
 8001bcc:	1dbb      	adds	r3, r7, #6
 8001bce:	881b      	ldrh	r3, [r3, #0]
 8001bd0:	2b0e      	cmp	r3, #14
 8001bd2:	d9ef      	bls.n	8001bb4 <EPD_1IN54B_SetLutBw+0xcc>
    }
}
 8001bd4:	46c0      	nop			; (mov r8, r8)
 8001bd6:	46c0      	nop			; (mov r8, r8)
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	b002      	add	sp, #8
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	46c0      	nop			; (mov r8, r8)
 8001be0:	08004e28 	.word	0x08004e28
 8001be4:	08004e38 	.word	0x08004e38
 8001be8:	08004e48 	.word	0x08004e48
 8001bec:	08004e58 	.word	0x08004e58
 8001bf0:	08004e68 	.word	0x08004e68

08001bf4 <EPD_1IN54B_SetLutRed>:
/******************************************************************************
function :	Set the look-up red tables
parameter:
******************************************************************************/
static void EPD_1IN54B_SetLutRed(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
    UWORD count;
    EPD_1IN54B_SendCommand(0x25);
 8001bfa:	2025      	movs	r0, #37	; 0x25
 8001bfc:	f7ff ff10 	bl	8001a20 <EPD_1IN54B_SendCommand>
    for(count = 0; count < 15; count++) {
 8001c00:	1dbb      	adds	r3, r7, #6
 8001c02:	2200      	movs	r2, #0
 8001c04:	801a      	strh	r2, [r3, #0]
 8001c06:	e00b      	b.n	8001c20 <EPD_1IN54B_SetLutRed+0x2c>
        EPD_1IN54B_SendData(EPD_1IN54B_lut_vcom1[count]);
 8001c08:	1dbb      	adds	r3, r7, #6
 8001c0a:	881b      	ldrh	r3, [r3, #0]
 8001c0c:	4a20      	ldr	r2, [pc, #128]	; (8001c90 <EPD_1IN54B_SetLutRed+0x9c>)
 8001c0e:	5cd3      	ldrb	r3, [r2, r3]
 8001c10:	0018      	movs	r0, r3
 8001c12:	f7ff ff27 	bl	8001a64 <EPD_1IN54B_SendData>
    for(count = 0; count < 15; count++) {
 8001c16:	1dbb      	adds	r3, r7, #6
 8001c18:	881a      	ldrh	r2, [r3, #0]
 8001c1a:	1dbb      	adds	r3, r7, #6
 8001c1c:	3201      	adds	r2, #1
 8001c1e:	801a      	strh	r2, [r3, #0]
 8001c20:	1dbb      	adds	r3, r7, #6
 8001c22:	881b      	ldrh	r3, [r3, #0]
 8001c24:	2b0e      	cmp	r3, #14
 8001c26:	d9ef      	bls.n	8001c08 <EPD_1IN54B_SetLutRed+0x14>
    }
    EPD_1IN54B_SendCommand(0x26);
 8001c28:	2026      	movs	r0, #38	; 0x26
 8001c2a:	f7ff fef9 	bl	8001a20 <EPD_1IN54B_SendCommand>
    for(count = 0; count < 15; count++) {
 8001c2e:	1dbb      	adds	r3, r7, #6
 8001c30:	2200      	movs	r2, #0
 8001c32:	801a      	strh	r2, [r3, #0]
 8001c34:	e00b      	b.n	8001c4e <EPD_1IN54B_SetLutRed+0x5a>
        EPD_1IN54B_SendData(EPD_1IN54B_lut_red0[count]);
 8001c36:	1dbb      	adds	r3, r7, #6
 8001c38:	881b      	ldrh	r3, [r3, #0]
 8001c3a:	4a16      	ldr	r2, [pc, #88]	; (8001c94 <EPD_1IN54B_SetLutRed+0xa0>)
 8001c3c:	5cd3      	ldrb	r3, [r2, r3]
 8001c3e:	0018      	movs	r0, r3
 8001c40:	f7ff ff10 	bl	8001a64 <EPD_1IN54B_SendData>
    for(count = 0; count < 15; count++) {
 8001c44:	1dbb      	adds	r3, r7, #6
 8001c46:	881a      	ldrh	r2, [r3, #0]
 8001c48:	1dbb      	adds	r3, r7, #6
 8001c4a:	3201      	adds	r2, #1
 8001c4c:	801a      	strh	r2, [r3, #0]
 8001c4e:	1dbb      	adds	r3, r7, #6
 8001c50:	881b      	ldrh	r3, [r3, #0]
 8001c52:	2b0e      	cmp	r3, #14
 8001c54:	d9ef      	bls.n	8001c36 <EPD_1IN54B_SetLutRed+0x42>
    }
    EPD_1IN54B_SendCommand(0x27);
 8001c56:	2027      	movs	r0, #39	; 0x27
 8001c58:	f7ff fee2 	bl	8001a20 <EPD_1IN54B_SendCommand>
    for(count = 0; count < 15; count++) {
 8001c5c:	1dbb      	adds	r3, r7, #6
 8001c5e:	2200      	movs	r2, #0
 8001c60:	801a      	strh	r2, [r3, #0]
 8001c62:	e00b      	b.n	8001c7c <EPD_1IN54B_SetLutRed+0x88>
        EPD_1IN54B_SendData(EPD_1IN54B_lut_red1[count]);
 8001c64:	1dbb      	adds	r3, r7, #6
 8001c66:	881b      	ldrh	r3, [r3, #0]
 8001c68:	4a0b      	ldr	r2, [pc, #44]	; (8001c98 <EPD_1IN54B_SetLutRed+0xa4>)
 8001c6a:	5cd3      	ldrb	r3, [r2, r3]
 8001c6c:	0018      	movs	r0, r3
 8001c6e:	f7ff fef9 	bl	8001a64 <EPD_1IN54B_SendData>
    for(count = 0; count < 15; count++) {
 8001c72:	1dbb      	adds	r3, r7, #6
 8001c74:	881a      	ldrh	r2, [r3, #0]
 8001c76:	1dbb      	adds	r3, r7, #6
 8001c78:	3201      	adds	r2, #1
 8001c7a:	801a      	strh	r2, [r3, #0]
 8001c7c:	1dbb      	adds	r3, r7, #6
 8001c7e:	881b      	ldrh	r3, [r3, #0]
 8001c80:	2b0e      	cmp	r3, #14
 8001c82:	d9ef      	bls.n	8001c64 <EPD_1IN54B_SetLutRed+0x70>
    }
}
 8001c84:	46c0      	nop			; (mov r8, r8)
 8001c86:	46c0      	nop			; (mov r8, r8)
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	b002      	add	sp, #8
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	46c0      	nop			; (mov r8, r8)
 8001c90:	08004e78 	.word	0x08004e78
 8001c94:	08004e88 	.word	0x08004e88
 8001c98:	08004e98 	.word	0x08004e98

08001c9c <EPD_1IN54B_Init>:
/******************************************************************************
function :	Initialize the e-Paper register
parameter:
******************************************************************************/
void EPD_1IN54B_Init(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
    EPD_1IN54B_Reset();
 8001ca0:	f7ff fe9e 	bl	80019e0 <EPD_1IN54B_Reset>

    EPD_1IN54B_SendCommand(0x01);// POWER_SETTING
 8001ca4:	2001      	movs	r0, #1
 8001ca6:	f7ff febb 	bl	8001a20 <EPD_1IN54B_SendCommand>
    EPD_1IN54B_SendData(0x07);
 8001caa:	2007      	movs	r0, #7
 8001cac:	f7ff feda 	bl	8001a64 <EPD_1IN54B_SendData>
    EPD_1IN54B_SendData(0x00);
 8001cb0:	2000      	movs	r0, #0
 8001cb2:	f7ff fed7 	bl	8001a64 <EPD_1IN54B_SendData>
    EPD_1IN54B_SendData(0x08);
 8001cb6:	2008      	movs	r0, #8
 8001cb8:	f7ff fed4 	bl	8001a64 <EPD_1IN54B_SendData>
    EPD_1IN54B_SendData(0x00);
 8001cbc:	2000      	movs	r0, #0
 8001cbe:	f7ff fed1 	bl	8001a64 <EPD_1IN54B_SendData>
    EPD_1IN54B_SendCommand(0x06);// BOOSTER_SOFT_START
 8001cc2:	2006      	movs	r0, #6
 8001cc4:	f7ff feac 	bl	8001a20 <EPD_1IN54B_SendCommand>
    EPD_1IN54B_SendData(0x07);
 8001cc8:	2007      	movs	r0, #7
 8001cca:	f7ff fecb 	bl	8001a64 <EPD_1IN54B_SendData>
    EPD_1IN54B_SendData(0x07);
 8001cce:	2007      	movs	r0, #7
 8001cd0:	f7ff fec8 	bl	8001a64 <EPD_1IN54B_SendData>
    EPD_1IN54B_SendData(0x07);
 8001cd4:	2007      	movs	r0, #7
 8001cd6:	f7ff fec5 	bl	8001a64 <EPD_1IN54B_SendData>
    EPD_1IN54B_SendCommand(0x04);// POWER_ON
 8001cda:	2004      	movs	r0, #4
 8001cdc:	f7ff fea0 	bl	8001a20 <EPD_1IN54B_SendCommand>

    EPD_1IN54B_ReadBusy();
 8001ce0:	f7ff fee2 	bl	8001aa8 <EPD_1IN54B_ReadBusy>

    EPD_1IN54B_SendCommand(0X00);// PANEL_SETTING
 8001ce4:	2000      	movs	r0, #0
 8001ce6:	f7ff fe9b 	bl	8001a20 <EPD_1IN54B_SendCommand>
    EPD_1IN54B_SendData(0xcf);
 8001cea:	20cf      	movs	r0, #207	; 0xcf
 8001cec:	f7ff feba 	bl	8001a64 <EPD_1IN54B_SendData>
    EPD_1IN54B_SendCommand(0X50);// VCOM_AND_DATA_INTERVAL_SETTING
 8001cf0:	2050      	movs	r0, #80	; 0x50
 8001cf2:	f7ff fe95 	bl	8001a20 <EPD_1IN54B_SendCommand>
    EPD_1IN54B_SendData(0x37);// 0xF0
 8001cf6:	2037      	movs	r0, #55	; 0x37
 8001cf8:	f7ff feb4 	bl	8001a64 <EPD_1IN54B_SendData>
    EPD_1IN54B_SendCommand(0x30);// PLL_CONTROL
 8001cfc:	2030      	movs	r0, #48	; 0x30
 8001cfe:	f7ff fe8f 	bl	8001a20 <EPD_1IN54B_SendCommand>
    EPD_1IN54B_SendData(0x39);
 8001d02:	2039      	movs	r0, #57	; 0x39
 8001d04:	f7ff feae 	bl	8001a64 <EPD_1IN54B_SendData>
    EPD_1IN54B_SendCommand(0x61);// TCON_RESOLUTION set x and y
 8001d08:	2061      	movs	r0, #97	; 0x61
 8001d0a:	f7ff fe89 	bl	8001a20 <EPD_1IN54B_SendCommand>
    EPD_1IN54B_SendData(0xC8);// 200
 8001d0e:	20c8      	movs	r0, #200	; 0xc8
 8001d10:	f7ff fea8 	bl	8001a64 <EPD_1IN54B_SendData>
    EPD_1IN54B_SendData(0x00);// y High eight: 0
 8001d14:	2000      	movs	r0, #0
 8001d16:	f7ff fea5 	bl	8001a64 <EPD_1IN54B_SendData>
    EPD_1IN54B_SendData(0xC8);// y Low eight: 200
 8001d1a:	20c8      	movs	r0, #200	; 0xc8
 8001d1c:	f7ff fea2 	bl	8001a64 <EPD_1IN54B_SendData>
    EPD_1IN54B_SendCommand(0x82);// VCM_DC_SETTING_REGISTER
 8001d20:	2082      	movs	r0, #130	; 0x82
 8001d22:	f7ff fe7d 	bl	8001a20 <EPD_1IN54B_SendCommand>
    EPD_1IN54B_SendData(0x0E);
 8001d26:	200e      	movs	r0, #14
 8001d28:	f7ff fe9c 	bl	8001a64 <EPD_1IN54B_SendData>

    EPD_1IN54B_SetLutBw();
 8001d2c:	f7ff fedc 	bl	8001ae8 <EPD_1IN54B_SetLutBw>
    EPD_1IN54B_SetLutRed();
 8001d30:	f7ff ff60 	bl	8001bf4 <EPD_1IN54B_SetLutRed>
}
 8001d34:	46c0      	nop			; (mov r8, r8)
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}

08001d3a <EPD_1IN54B_Clear>:
/******************************************************************************
function :	Clear screen
parameter:
******************************************************************************/
void EPD_1IN54B_Clear(void)
{
 8001d3a:	b580      	push	{r7, lr}
 8001d3c:	b084      	sub	sp, #16
 8001d3e:	af00      	add	r7, sp, #0
    UWORD Width, Height;
    Width = (EPD_1IN54B_WIDTH % 8 == 0)? (EPD_1IN54B_WIDTH / 8 ): (EPD_1IN54B_WIDTH / 8 + 1);
 8001d40:	1dbb      	adds	r3, r7, #6
 8001d42:	2219      	movs	r2, #25
 8001d44:	801a      	strh	r2, [r3, #0]
    Height = EPD_1IN54B_HEIGHT;
 8001d46:	1d3b      	adds	r3, r7, #4
 8001d48:	22c8      	movs	r2, #200	; 0xc8
 8001d4a:	801a      	strh	r2, [r3, #0]

    //send black data
    EPD_1IN54B_SendCommand(0x10);// DATA_START_TRANSMISSION_1
 8001d4c:	2010      	movs	r0, #16
 8001d4e:	f7ff fe67 	bl	8001a20 <EPD_1IN54B_SendCommand>
    DEV_Delay_ms(2);
 8001d52:	2002      	movs	r0, #2
 8001d54:	f7fe fa8c 	bl	8000270 <LL_mDelay>
    for(UWORD i = 0; i < Height; i++) {
 8001d58:	230e      	movs	r3, #14
 8001d5a:	18fb      	adds	r3, r7, r3
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	801a      	strh	r2, [r3, #0]
 8001d60:	e01d      	b.n	8001d9e <EPD_1IN54B_Clear+0x64>
        for(UWORD i = 0; i < Width; i++) {
 8001d62:	230c      	movs	r3, #12
 8001d64:	18fb      	adds	r3, r7, r3
 8001d66:	2200      	movs	r2, #0
 8001d68:	801a      	strh	r2, [r3, #0]
 8001d6a:	e00b      	b.n	8001d84 <EPD_1IN54B_Clear+0x4a>
            EPD_1IN54B_SendData(0xFF);
 8001d6c:	20ff      	movs	r0, #255	; 0xff
 8001d6e:	f7ff fe79 	bl	8001a64 <EPD_1IN54B_SendData>
            EPD_1IN54B_SendData(0xFF);
 8001d72:	20ff      	movs	r0, #255	; 0xff
 8001d74:	f7ff fe76 	bl	8001a64 <EPD_1IN54B_SendData>
        for(UWORD i = 0; i < Width; i++) {
 8001d78:	210c      	movs	r1, #12
 8001d7a:	187b      	adds	r3, r7, r1
 8001d7c:	881a      	ldrh	r2, [r3, #0]
 8001d7e:	187b      	adds	r3, r7, r1
 8001d80:	3201      	adds	r2, #1
 8001d82:	801a      	strh	r2, [r3, #0]
 8001d84:	230c      	movs	r3, #12
 8001d86:	18fa      	adds	r2, r7, r3
 8001d88:	1dbb      	adds	r3, r7, #6
 8001d8a:	8812      	ldrh	r2, [r2, #0]
 8001d8c:	881b      	ldrh	r3, [r3, #0]
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	d3ec      	bcc.n	8001d6c <EPD_1IN54B_Clear+0x32>
    for(UWORD i = 0; i < Height; i++) {
 8001d92:	210e      	movs	r1, #14
 8001d94:	187b      	adds	r3, r7, r1
 8001d96:	881a      	ldrh	r2, [r3, #0]
 8001d98:	187b      	adds	r3, r7, r1
 8001d9a:	3201      	adds	r2, #1
 8001d9c:	801a      	strh	r2, [r3, #0]
 8001d9e:	230e      	movs	r3, #14
 8001da0:	18fa      	adds	r2, r7, r3
 8001da2:	1d3b      	adds	r3, r7, #4
 8001da4:	8812      	ldrh	r2, [r2, #0]
 8001da6:	881b      	ldrh	r3, [r3, #0]
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d3da      	bcc.n	8001d62 <EPD_1IN54B_Clear+0x28>
        }
    }
    DEV_Delay_ms(2);
 8001dac:	2002      	movs	r0, #2
 8001dae:	f7fe fa5f 	bl	8000270 <LL_mDelay>

    //send red data
    EPD_1IN54B_SendCommand(0x13);// DATA_START_TRANSMISSION_2
 8001db2:	2013      	movs	r0, #19
 8001db4:	f7ff fe34 	bl	8001a20 <EPD_1IN54B_SendCommand>
    DEV_Delay_ms(2);
 8001db8:	2002      	movs	r0, #2
 8001dba:	f7fe fa59 	bl	8000270 <LL_mDelay>
    for(UWORD i = 0; i < Height; i++) {
 8001dbe:	230a      	movs	r3, #10
 8001dc0:	18fb      	adds	r3, r7, r3
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	801a      	strh	r2, [r3, #0]
 8001dc6:	e01a      	b.n	8001dfe <EPD_1IN54B_Clear+0xc4>
        for(UWORD i = 0; i < Width; i++) {
 8001dc8:	2308      	movs	r3, #8
 8001dca:	18fb      	adds	r3, r7, r3
 8001dcc:	2200      	movs	r2, #0
 8001dce:	801a      	strh	r2, [r3, #0]
 8001dd0:	e008      	b.n	8001de4 <EPD_1IN54B_Clear+0xaa>
            EPD_1IN54B_SendData(0xFF);
 8001dd2:	20ff      	movs	r0, #255	; 0xff
 8001dd4:	f7ff fe46 	bl	8001a64 <EPD_1IN54B_SendData>
        for(UWORD i = 0; i < Width; i++) {
 8001dd8:	2108      	movs	r1, #8
 8001dda:	187b      	adds	r3, r7, r1
 8001ddc:	881a      	ldrh	r2, [r3, #0]
 8001dde:	187b      	adds	r3, r7, r1
 8001de0:	3201      	adds	r2, #1
 8001de2:	801a      	strh	r2, [r3, #0]
 8001de4:	2308      	movs	r3, #8
 8001de6:	18fa      	adds	r2, r7, r3
 8001de8:	1dbb      	adds	r3, r7, #6
 8001dea:	8812      	ldrh	r2, [r2, #0]
 8001dec:	881b      	ldrh	r3, [r3, #0]
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d3ef      	bcc.n	8001dd2 <EPD_1IN54B_Clear+0x98>
    for(UWORD i = 0; i < Height; i++) {
 8001df2:	210a      	movs	r1, #10
 8001df4:	187b      	adds	r3, r7, r1
 8001df6:	881a      	ldrh	r2, [r3, #0]
 8001df8:	187b      	adds	r3, r7, r1
 8001dfa:	3201      	adds	r2, #1
 8001dfc:	801a      	strh	r2, [r3, #0]
 8001dfe:	230a      	movs	r3, #10
 8001e00:	18fa      	adds	r2, r7, r3
 8001e02:	1d3b      	adds	r3, r7, #4
 8001e04:	8812      	ldrh	r2, [r2, #0]
 8001e06:	881b      	ldrh	r3, [r3, #0]
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d3dd      	bcc.n	8001dc8 <EPD_1IN54B_Clear+0x8e>
        }
    }
    DEV_Delay_ms(2);
 8001e0c:	2002      	movs	r0, #2
 8001e0e:	f7fe fa2f 	bl	8000270 <LL_mDelay>

    EPD_1IN54B_SendCommand(0x12);// DISPLAY_REFRESH
 8001e12:	2012      	movs	r0, #18
 8001e14:	f7ff fe04 	bl	8001a20 <EPD_1IN54B_SendCommand>
    EPD_1IN54B_ReadBusy();
 8001e18:	f7ff fe46 	bl	8001aa8 <EPD_1IN54B_ReadBusy>
}
 8001e1c:	46c0      	nop			; (mov r8, r8)
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	b004      	add	sp, #16
 8001e22:	bd80      	pop	{r7, pc}

08001e24 <EPD_1IN54B_Display>:
/******************************************************************************
function :	Sends the image buffer in RAM to e-Paper and displays
parameter:
******************************************************************************/
void EPD_1IN54B_Display(const UBYTE *blackimage, const UBYTE *redimage)
{
 8001e24:	b590      	push	{r4, r7, lr}
 8001e26:	b089      	sub	sp, #36	; 0x24
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	6039      	str	r1, [r7, #0]
    UBYTE Temp = 0x00;
 8001e2e:	231f      	movs	r3, #31
 8001e30:	18fb      	adds	r3, r7, r3
 8001e32:	2200      	movs	r2, #0
 8001e34:	701a      	strb	r2, [r3, #0]
    UWORD Width, Height;
    Width = (EPD_1IN54B_WIDTH % 8 == 0)? (EPD_1IN54B_WIDTH / 8 ): (EPD_1IN54B_WIDTH / 8 + 1);
 8001e36:	230a      	movs	r3, #10
 8001e38:	18fb      	adds	r3, r7, r3
 8001e3a:	2219      	movs	r2, #25
 8001e3c:	801a      	strh	r2, [r3, #0]
    Height = EPD_1IN54B_HEIGHT;
 8001e3e:	2308      	movs	r3, #8
 8001e40:	18fb      	adds	r3, r7, r3
 8001e42:	22c8      	movs	r2, #200	; 0xc8
 8001e44:	801a      	strh	r2, [r3, #0]

    EPD_1IN54B_SendCommand(0x10);// DATA_START_TRANSMISSION_1
 8001e46:	2010      	movs	r0, #16
 8001e48:	f7ff fdea 	bl	8001a20 <EPD_1IN54B_SendCommand>
    for (UWORD j = 0; j < Height; j++) {
 8001e4c:	231c      	movs	r3, #28
 8001e4e:	18fb      	adds	r3, r7, r3
 8001e50:	2200      	movs	r2, #0
 8001e52:	801a      	strh	r2, [r3, #0]
 8001e54:	e087      	b.n	8001f66 <EPD_1IN54B_Display+0x142>
        for (UWORD i = 0; i < Width; i++) {
 8001e56:	231a      	movs	r3, #26
 8001e58:	18fb      	adds	r3, r7, r3
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	801a      	strh	r2, [r3, #0]
 8001e5e:	e073      	b.n	8001f48 <EPD_1IN54B_Display+0x124>
            Temp = 0x00;
 8001e60:	231f      	movs	r3, #31
 8001e62:	18fb      	adds	r3, r7, r3
 8001e64:	2200      	movs	r2, #0
 8001e66:	701a      	strb	r2, [r3, #0]
            for (int bit = 0; bit < 4; bit++) {
 8001e68:	2300      	movs	r3, #0
 8001e6a:	617b      	str	r3, [r7, #20]
 8001e6c:	e026      	b.n	8001ebc <EPD_1IN54B_Display+0x98>
                if ((blackimage[i + j * Width] & (0x80 >> bit)) != 0) {
 8001e6e:	231a      	movs	r3, #26
 8001e70:	18fb      	adds	r3, r7, r3
 8001e72:	881a      	ldrh	r2, [r3, #0]
 8001e74:	231c      	movs	r3, #28
 8001e76:	18fb      	adds	r3, r7, r3
 8001e78:	881b      	ldrh	r3, [r3, #0]
 8001e7a:	210a      	movs	r1, #10
 8001e7c:	1879      	adds	r1, r7, r1
 8001e7e:	8809      	ldrh	r1, [r1, #0]
 8001e80:	434b      	muls	r3, r1
 8001e82:	18d3      	adds	r3, r2, r3
 8001e84:	001a      	movs	r2, r3
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	189b      	adds	r3, r3, r2
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	0019      	movs	r1, r3
 8001e8e:	2280      	movs	r2, #128	; 0x80
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	411a      	asrs	r2, r3
 8001e94:	0013      	movs	r3, r2
 8001e96:	400b      	ands	r3, r1
 8001e98:	d00d      	beq.n	8001eb6 <EPD_1IN54B_Display+0x92>
                    Temp |= 0xC0 >> (bit * 2);
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	005b      	lsls	r3, r3, #1
 8001e9e:	22c0      	movs	r2, #192	; 0xc0
 8001ea0:	411a      	asrs	r2, r3
 8001ea2:	0013      	movs	r3, r2
 8001ea4:	b25a      	sxtb	r2, r3
 8001ea6:	211f      	movs	r1, #31
 8001ea8:	187b      	adds	r3, r7, r1
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	b25b      	sxtb	r3, r3
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	b25a      	sxtb	r2, r3
 8001eb2:	187b      	adds	r3, r7, r1
 8001eb4:	701a      	strb	r2, [r3, #0]
            for (int bit = 0; bit < 4; bit++) {
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	3301      	adds	r3, #1
 8001eba:	617b      	str	r3, [r7, #20]
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	2b03      	cmp	r3, #3
 8001ec0:	ddd5      	ble.n	8001e6e <EPD_1IN54B_Display+0x4a>
                }
            }
            EPD_1IN54B_SendData(Temp);
 8001ec2:	241f      	movs	r4, #31
 8001ec4:	193b      	adds	r3, r7, r4
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	0018      	movs	r0, r3
 8001eca:	f7ff fdcb 	bl	8001a64 <EPD_1IN54B_SendData>
            Temp = 0x00;
 8001ece:	193b      	adds	r3, r7, r4
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	701a      	strb	r2, [r3, #0]
            for (int bit = 4; bit < 8; bit++) {
 8001ed4:	2304      	movs	r3, #4
 8001ed6:	613b      	str	r3, [r7, #16]
 8001ed8:	e027      	b.n	8001f2a <EPD_1IN54B_Display+0x106>
                if ((blackimage[i + j * Width] & (0x80 >> bit)) != 0) {
 8001eda:	231a      	movs	r3, #26
 8001edc:	18fb      	adds	r3, r7, r3
 8001ede:	881a      	ldrh	r2, [r3, #0]
 8001ee0:	231c      	movs	r3, #28
 8001ee2:	18fb      	adds	r3, r7, r3
 8001ee4:	881b      	ldrh	r3, [r3, #0]
 8001ee6:	210a      	movs	r1, #10
 8001ee8:	1879      	adds	r1, r7, r1
 8001eea:	8809      	ldrh	r1, [r1, #0]
 8001eec:	434b      	muls	r3, r1
 8001eee:	18d3      	adds	r3, r2, r3
 8001ef0:	001a      	movs	r2, r3
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	189b      	adds	r3, r3, r2
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	0019      	movs	r1, r3
 8001efa:	2280      	movs	r2, #128	; 0x80
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	411a      	asrs	r2, r3
 8001f00:	0013      	movs	r3, r2
 8001f02:	400b      	ands	r3, r1
 8001f04:	d00e      	beq.n	8001f24 <EPD_1IN54B_Display+0x100>
                    Temp |= 0xC0 >> ((bit - 4) * 2);
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	3b04      	subs	r3, #4
 8001f0a:	005b      	lsls	r3, r3, #1
 8001f0c:	22c0      	movs	r2, #192	; 0xc0
 8001f0e:	411a      	asrs	r2, r3
 8001f10:	0013      	movs	r3, r2
 8001f12:	b25a      	sxtb	r2, r3
 8001f14:	211f      	movs	r1, #31
 8001f16:	187b      	adds	r3, r7, r1
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	b25b      	sxtb	r3, r3
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	b25a      	sxtb	r2, r3
 8001f20:	187b      	adds	r3, r7, r1
 8001f22:	701a      	strb	r2, [r3, #0]
            for (int bit = 4; bit < 8; bit++) {
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	3301      	adds	r3, #1
 8001f28:	613b      	str	r3, [r7, #16]
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	2b07      	cmp	r3, #7
 8001f2e:	ddd4      	ble.n	8001eda <EPD_1IN54B_Display+0xb6>
                }
            }
            EPD_1IN54B_SendData(Temp);
 8001f30:	231f      	movs	r3, #31
 8001f32:	18fb      	adds	r3, r7, r3
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	0018      	movs	r0, r3
 8001f38:	f7ff fd94 	bl	8001a64 <EPD_1IN54B_SendData>
        for (UWORD i = 0; i < Width; i++) {
 8001f3c:	211a      	movs	r1, #26
 8001f3e:	187b      	adds	r3, r7, r1
 8001f40:	881a      	ldrh	r2, [r3, #0]
 8001f42:	187b      	adds	r3, r7, r1
 8001f44:	3201      	adds	r2, #1
 8001f46:	801a      	strh	r2, [r3, #0]
 8001f48:	231a      	movs	r3, #26
 8001f4a:	18fa      	adds	r2, r7, r3
 8001f4c:	230a      	movs	r3, #10
 8001f4e:	18fb      	adds	r3, r7, r3
 8001f50:	8812      	ldrh	r2, [r2, #0]
 8001f52:	881b      	ldrh	r3, [r3, #0]
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d200      	bcs.n	8001f5a <EPD_1IN54B_Display+0x136>
 8001f58:	e782      	b.n	8001e60 <EPD_1IN54B_Display+0x3c>
    for (UWORD j = 0; j < Height; j++) {
 8001f5a:	211c      	movs	r1, #28
 8001f5c:	187b      	adds	r3, r7, r1
 8001f5e:	881a      	ldrh	r2, [r3, #0]
 8001f60:	187b      	adds	r3, r7, r1
 8001f62:	3201      	adds	r2, #1
 8001f64:	801a      	strh	r2, [r3, #0]
 8001f66:	231c      	movs	r3, #28
 8001f68:	18fa      	adds	r2, r7, r3
 8001f6a:	2308      	movs	r3, #8
 8001f6c:	18fb      	adds	r3, r7, r3
 8001f6e:	8812      	ldrh	r2, [r2, #0]
 8001f70:	881b      	ldrh	r3, [r3, #0]
 8001f72:	429a      	cmp	r2, r3
 8001f74:	d200      	bcs.n	8001f78 <EPD_1IN54B_Display+0x154>
 8001f76:	e76e      	b.n	8001e56 <EPD_1IN54B_Display+0x32>
        }
    }
    DEV_Delay_ms(2);
 8001f78:	2002      	movs	r0, #2
 8001f7a:	f7fe f979 	bl	8000270 <LL_mDelay>

    EPD_1IN54B_SendCommand(0x13);// DATA_START_TRANSMISSION_2
 8001f7e:	2013      	movs	r0, #19
 8001f80:	f7ff fd4e 	bl	8001a20 <EPD_1IN54B_SendCommand>
    for (UWORD j = 0; j < Height; j++) {
 8001f84:	230e      	movs	r3, #14
 8001f86:	18fb      	adds	r3, r7, r3
 8001f88:	2200      	movs	r2, #0
 8001f8a:	801a      	strh	r2, [r3, #0]
 8001f8c:	e029      	b.n	8001fe2 <EPD_1IN54B_Display+0x1be>
        for (UWORD i = 0; i < Width; i++) {
 8001f8e:	230c      	movs	r3, #12
 8001f90:	18fb      	adds	r3, r7, r3
 8001f92:	2200      	movs	r2, #0
 8001f94:	801a      	strh	r2, [r3, #0]
 8001f96:	e016      	b.n	8001fc6 <EPD_1IN54B_Display+0x1a2>
            EPD_1IN54B_SendData(redimage[i + j * Width]);
 8001f98:	240c      	movs	r4, #12
 8001f9a:	193b      	adds	r3, r7, r4
 8001f9c:	881a      	ldrh	r2, [r3, #0]
 8001f9e:	230e      	movs	r3, #14
 8001fa0:	18fb      	adds	r3, r7, r3
 8001fa2:	881b      	ldrh	r3, [r3, #0]
 8001fa4:	210a      	movs	r1, #10
 8001fa6:	1879      	adds	r1, r7, r1
 8001fa8:	8809      	ldrh	r1, [r1, #0]
 8001faa:	434b      	muls	r3, r1
 8001fac:	18d3      	adds	r3, r2, r3
 8001fae:	001a      	movs	r2, r3
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	189b      	adds	r3, r3, r2
 8001fb4:	781b      	ldrb	r3, [r3, #0]
 8001fb6:	0018      	movs	r0, r3
 8001fb8:	f7ff fd54 	bl	8001a64 <EPD_1IN54B_SendData>
        for (UWORD i = 0; i < Width; i++) {
 8001fbc:	193b      	adds	r3, r7, r4
 8001fbe:	881a      	ldrh	r2, [r3, #0]
 8001fc0:	193b      	adds	r3, r7, r4
 8001fc2:	3201      	adds	r2, #1
 8001fc4:	801a      	strh	r2, [r3, #0]
 8001fc6:	230c      	movs	r3, #12
 8001fc8:	18fa      	adds	r2, r7, r3
 8001fca:	230a      	movs	r3, #10
 8001fcc:	18fb      	adds	r3, r7, r3
 8001fce:	8812      	ldrh	r2, [r2, #0]
 8001fd0:	881b      	ldrh	r3, [r3, #0]
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d3e0      	bcc.n	8001f98 <EPD_1IN54B_Display+0x174>
    for (UWORD j = 0; j < Height; j++) {
 8001fd6:	210e      	movs	r1, #14
 8001fd8:	187b      	adds	r3, r7, r1
 8001fda:	881a      	ldrh	r2, [r3, #0]
 8001fdc:	187b      	adds	r3, r7, r1
 8001fde:	3201      	adds	r2, #1
 8001fe0:	801a      	strh	r2, [r3, #0]
 8001fe2:	230e      	movs	r3, #14
 8001fe4:	18fa      	adds	r2, r7, r3
 8001fe6:	2308      	movs	r3, #8
 8001fe8:	18fb      	adds	r3, r7, r3
 8001fea:	8812      	ldrh	r2, [r2, #0]
 8001fec:	881b      	ldrh	r3, [r3, #0]
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d3cd      	bcc.n	8001f8e <EPD_1IN54B_Display+0x16a>
        }
    }
    DEV_Delay_ms(2);
 8001ff2:	2002      	movs	r0, #2
 8001ff4:	f7fe f93c 	bl	8000270 <LL_mDelay>

    //Display refresh
    EPD_1IN54B_SendCommand(0x12);// DISPLAY_REFRESH
 8001ff8:	2012      	movs	r0, #18
 8001ffa:	f7ff fd11 	bl	8001a20 <EPD_1IN54B_SendCommand>
    EPD_1IN54B_ReadBusy();
 8001ffe:	f7ff fd53 	bl	8001aa8 <EPD_1IN54B_ReadBusy>
}
 8002002:	46c0      	nop			; (mov r8, r8)
 8002004:	46bd      	mov	sp, r7
 8002006:	b009      	add	sp, #36	; 0x24
 8002008:	bd90      	pop	{r4, r7, pc}
	...

0800200c <__errno>:
 800200c:	4b01      	ldr	r3, [pc, #4]	; (8002014 <__errno+0x8>)
 800200e:	6818      	ldr	r0, [r3, #0]
 8002010:	4770      	bx	lr
 8002012:	46c0      	nop			; (mov r8, r8)
 8002014:	20000010 	.word	0x20000010

08002018 <__libc_init_array>:
 8002018:	b570      	push	{r4, r5, r6, lr}
 800201a:	2600      	movs	r6, #0
 800201c:	4d0c      	ldr	r5, [pc, #48]	; (8002050 <__libc_init_array+0x38>)
 800201e:	4c0d      	ldr	r4, [pc, #52]	; (8002054 <__libc_init_array+0x3c>)
 8002020:	1b64      	subs	r4, r4, r5
 8002022:	10a4      	asrs	r4, r4, #2
 8002024:	42a6      	cmp	r6, r4
 8002026:	d109      	bne.n	800203c <__libc_init_array+0x24>
 8002028:	2600      	movs	r6, #0
 800202a:	f000 fd6b 	bl	8002b04 <_init>
 800202e:	4d0a      	ldr	r5, [pc, #40]	; (8002058 <__libc_init_array+0x40>)
 8002030:	4c0a      	ldr	r4, [pc, #40]	; (800205c <__libc_init_array+0x44>)
 8002032:	1b64      	subs	r4, r4, r5
 8002034:	10a4      	asrs	r4, r4, #2
 8002036:	42a6      	cmp	r6, r4
 8002038:	d105      	bne.n	8002046 <__libc_init_array+0x2e>
 800203a:	bd70      	pop	{r4, r5, r6, pc}
 800203c:	00b3      	lsls	r3, r6, #2
 800203e:	58eb      	ldr	r3, [r5, r3]
 8002040:	4798      	blx	r3
 8002042:	3601      	adds	r6, #1
 8002044:	e7ee      	b.n	8002024 <__libc_init_array+0xc>
 8002046:	00b3      	lsls	r3, r6, #2
 8002048:	58eb      	ldr	r3, [r5, r3]
 800204a:	4798      	blx	r3
 800204c:	3601      	adds	r6, #1
 800204e:	e7f2      	b.n	8002036 <__libc_init_array+0x1e>
 8002050:	08004f0c 	.word	0x08004f0c
 8002054:	08004f0c 	.word	0x08004f0c
 8002058:	08004f0c 	.word	0x08004f0c
 800205c:	08004f10 	.word	0x08004f10

08002060 <memset>:
 8002060:	0003      	movs	r3, r0
 8002062:	1882      	adds	r2, r0, r2
 8002064:	4293      	cmp	r3, r2
 8002066:	d100      	bne.n	800206a <memset+0xa>
 8002068:	4770      	bx	lr
 800206a:	7019      	strb	r1, [r3, #0]
 800206c:	3301      	adds	r3, #1
 800206e:	e7f9      	b.n	8002064 <memset+0x4>

08002070 <_puts_r>:
 8002070:	b570      	push	{r4, r5, r6, lr}
 8002072:	0005      	movs	r5, r0
 8002074:	000e      	movs	r6, r1
 8002076:	2800      	cmp	r0, #0
 8002078:	d004      	beq.n	8002084 <_puts_r+0x14>
 800207a:	6983      	ldr	r3, [r0, #24]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d101      	bne.n	8002084 <_puts_r+0x14>
 8002080:	f000 fa6e 	bl	8002560 <__sinit>
 8002084:	69ab      	ldr	r3, [r5, #24]
 8002086:	68ac      	ldr	r4, [r5, #8]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d102      	bne.n	8002092 <_puts_r+0x22>
 800208c:	0028      	movs	r0, r5
 800208e:	f000 fa67 	bl	8002560 <__sinit>
 8002092:	4b2d      	ldr	r3, [pc, #180]	; (8002148 <_puts_r+0xd8>)
 8002094:	429c      	cmp	r4, r3
 8002096:	d122      	bne.n	80020de <_puts_r+0x6e>
 8002098:	686c      	ldr	r4, [r5, #4]
 800209a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800209c:	07db      	lsls	r3, r3, #31
 800209e:	d405      	bmi.n	80020ac <_puts_r+0x3c>
 80020a0:	89a3      	ldrh	r3, [r4, #12]
 80020a2:	059b      	lsls	r3, r3, #22
 80020a4:	d402      	bmi.n	80020ac <_puts_r+0x3c>
 80020a6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80020a8:	f000 fafb 	bl	80026a2 <__retarget_lock_acquire_recursive>
 80020ac:	89a3      	ldrh	r3, [r4, #12]
 80020ae:	071b      	lsls	r3, r3, #28
 80020b0:	d502      	bpl.n	80020b8 <_puts_r+0x48>
 80020b2:	6923      	ldr	r3, [r4, #16]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d129      	bne.n	800210c <_puts_r+0x9c>
 80020b8:	0021      	movs	r1, r4
 80020ba:	0028      	movs	r0, r5
 80020bc:	f000 f8aa 	bl	8002214 <__swsetup_r>
 80020c0:	2800      	cmp	r0, #0
 80020c2:	d023      	beq.n	800210c <_puts_r+0x9c>
 80020c4:	2501      	movs	r5, #1
 80020c6:	426d      	negs	r5, r5
 80020c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80020ca:	07db      	lsls	r3, r3, #31
 80020cc:	d405      	bmi.n	80020da <_puts_r+0x6a>
 80020ce:	89a3      	ldrh	r3, [r4, #12]
 80020d0:	059b      	lsls	r3, r3, #22
 80020d2:	d402      	bmi.n	80020da <_puts_r+0x6a>
 80020d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80020d6:	f000 fae5 	bl	80026a4 <__retarget_lock_release_recursive>
 80020da:	0028      	movs	r0, r5
 80020dc:	bd70      	pop	{r4, r5, r6, pc}
 80020de:	4b1b      	ldr	r3, [pc, #108]	; (800214c <_puts_r+0xdc>)
 80020e0:	429c      	cmp	r4, r3
 80020e2:	d101      	bne.n	80020e8 <_puts_r+0x78>
 80020e4:	68ac      	ldr	r4, [r5, #8]
 80020e6:	e7d8      	b.n	800209a <_puts_r+0x2a>
 80020e8:	4b19      	ldr	r3, [pc, #100]	; (8002150 <_puts_r+0xe0>)
 80020ea:	429c      	cmp	r4, r3
 80020ec:	d1d5      	bne.n	800209a <_puts_r+0x2a>
 80020ee:	68ec      	ldr	r4, [r5, #12]
 80020f0:	e7d3      	b.n	800209a <_puts_r+0x2a>
 80020f2:	3601      	adds	r6, #1
 80020f4:	60a3      	str	r3, [r4, #8]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	da04      	bge.n	8002104 <_puts_r+0x94>
 80020fa:	69a2      	ldr	r2, [r4, #24]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	dc16      	bgt.n	800212e <_puts_r+0xbe>
 8002100:	290a      	cmp	r1, #10
 8002102:	d014      	beq.n	800212e <_puts_r+0xbe>
 8002104:	6823      	ldr	r3, [r4, #0]
 8002106:	1c5a      	adds	r2, r3, #1
 8002108:	6022      	str	r2, [r4, #0]
 800210a:	7019      	strb	r1, [r3, #0]
 800210c:	68a3      	ldr	r3, [r4, #8]
 800210e:	7831      	ldrb	r1, [r6, #0]
 8002110:	3b01      	subs	r3, #1
 8002112:	2900      	cmp	r1, #0
 8002114:	d1ed      	bne.n	80020f2 <_puts_r+0x82>
 8002116:	60a3      	str	r3, [r4, #8]
 8002118:	2b00      	cmp	r3, #0
 800211a:	da0f      	bge.n	800213c <_puts_r+0xcc>
 800211c:	0028      	movs	r0, r5
 800211e:	0022      	movs	r2, r4
 8002120:	310a      	adds	r1, #10
 8002122:	f000 f821 	bl	8002168 <__swbuf_r>
 8002126:	250a      	movs	r5, #10
 8002128:	1c43      	adds	r3, r0, #1
 800212a:	d1cd      	bne.n	80020c8 <_puts_r+0x58>
 800212c:	e7ca      	b.n	80020c4 <_puts_r+0x54>
 800212e:	0022      	movs	r2, r4
 8002130:	0028      	movs	r0, r5
 8002132:	f000 f819 	bl	8002168 <__swbuf_r>
 8002136:	1c43      	adds	r3, r0, #1
 8002138:	d1e8      	bne.n	800210c <_puts_r+0x9c>
 800213a:	e7c3      	b.n	80020c4 <_puts_r+0x54>
 800213c:	250a      	movs	r5, #10
 800213e:	6823      	ldr	r3, [r4, #0]
 8002140:	1c5a      	adds	r2, r3, #1
 8002142:	6022      	str	r2, [r4, #0]
 8002144:	701d      	strb	r5, [r3, #0]
 8002146:	e7bf      	b.n	80020c8 <_puts_r+0x58>
 8002148:	08004ecc 	.word	0x08004ecc
 800214c:	08004eec 	.word	0x08004eec
 8002150:	08004eac 	.word	0x08004eac

08002154 <puts>:
 8002154:	b510      	push	{r4, lr}
 8002156:	4b03      	ldr	r3, [pc, #12]	; (8002164 <puts+0x10>)
 8002158:	0001      	movs	r1, r0
 800215a:	6818      	ldr	r0, [r3, #0]
 800215c:	f7ff ff88 	bl	8002070 <_puts_r>
 8002160:	bd10      	pop	{r4, pc}
 8002162:	46c0      	nop			; (mov r8, r8)
 8002164:	20000010 	.word	0x20000010

08002168 <__swbuf_r>:
 8002168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800216a:	0005      	movs	r5, r0
 800216c:	000e      	movs	r6, r1
 800216e:	0014      	movs	r4, r2
 8002170:	2800      	cmp	r0, #0
 8002172:	d004      	beq.n	800217e <__swbuf_r+0x16>
 8002174:	6983      	ldr	r3, [r0, #24]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d101      	bne.n	800217e <__swbuf_r+0x16>
 800217a:	f000 f9f1 	bl	8002560 <__sinit>
 800217e:	4b22      	ldr	r3, [pc, #136]	; (8002208 <__swbuf_r+0xa0>)
 8002180:	429c      	cmp	r4, r3
 8002182:	d12e      	bne.n	80021e2 <__swbuf_r+0x7a>
 8002184:	686c      	ldr	r4, [r5, #4]
 8002186:	69a3      	ldr	r3, [r4, #24]
 8002188:	60a3      	str	r3, [r4, #8]
 800218a:	89a3      	ldrh	r3, [r4, #12]
 800218c:	071b      	lsls	r3, r3, #28
 800218e:	d532      	bpl.n	80021f6 <__swbuf_r+0x8e>
 8002190:	6923      	ldr	r3, [r4, #16]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d02f      	beq.n	80021f6 <__swbuf_r+0x8e>
 8002196:	6823      	ldr	r3, [r4, #0]
 8002198:	6922      	ldr	r2, [r4, #16]
 800219a:	b2f7      	uxtb	r7, r6
 800219c:	1a98      	subs	r0, r3, r2
 800219e:	6963      	ldr	r3, [r4, #20]
 80021a0:	b2f6      	uxtb	r6, r6
 80021a2:	4283      	cmp	r3, r0
 80021a4:	dc05      	bgt.n	80021b2 <__swbuf_r+0x4a>
 80021a6:	0021      	movs	r1, r4
 80021a8:	0028      	movs	r0, r5
 80021aa:	f000 f937 	bl	800241c <_fflush_r>
 80021ae:	2800      	cmp	r0, #0
 80021b0:	d127      	bne.n	8002202 <__swbuf_r+0x9a>
 80021b2:	68a3      	ldr	r3, [r4, #8]
 80021b4:	3001      	adds	r0, #1
 80021b6:	3b01      	subs	r3, #1
 80021b8:	60a3      	str	r3, [r4, #8]
 80021ba:	6823      	ldr	r3, [r4, #0]
 80021bc:	1c5a      	adds	r2, r3, #1
 80021be:	6022      	str	r2, [r4, #0]
 80021c0:	701f      	strb	r7, [r3, #0]
 80021c2:	6963      	ldr	r3, [r4, #20]
 80021c4:	4283      	cmp	r3, r0
 80021c6:	d004      	beq.n	80021d2 <__swbuf_r+0x6a>
 80021c8:	89a3      	ldrh	r3, [r4, #12]
 80021ca:	07db      	lsls	r3, r3, #31
 80021cc:	d507      	bpl.n	80021de <__swbuf_r+0x76>
 80021ce:	2e0a      	cmp	r6, #10
 80021d0:	d105      	bne.n	80021de <__swbuf_r+0x76>
 80021d2:	0021      	movs	r1, r4
 80021d4:	0028      	movs	r0, r5
 80021d6:	f000 f921 	bl	800241c <_fflush_r>
 80021da:	2800      	cmp	r0, #0
 80021dc:	d111      	bne.n	8002202 <__swbuf_r+0x9a>
 80021de:	0030      	movs	r0, r6
 80021e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80021e2:	4b0a      	ldr	r3, [pc, #40]	; (800220c <__swbuf_r+0xa4>)
 80021e4:	429c      	cmp	r4, r3
 80021e6:	d101      	bne.n	80021ec <__swbuf_r+0x84>
 80021e8:	68ac      	ldr	r4, [r5, #8]
 80021ea:	e7cc      	b.n	8002186 <__swbuf_r+0x1e>
 80021ec:	4b08      	ldr	r3, [pc, #32]	; (8002210 <__swbuf_r+0xa8>)
 80021ee:	429c      	cmp	r4, r3
 80021f0:	d1c9      	bne.n	8002186 <__swbuf_r+0x1e>
 80021f2:	68ec      	ldr	r4, [r5, #12]
 80021f4:	e7c7      	b.n	8002186 <__swbuf_r+0x1e>
 80021f6:	0021      	movs	r1, r4
 80021f8:	0028      	movs	r0, r5
 80021fa:	f000 f80b 	bl	8002214 <__swsetup_r>
 80021fe:	2800      	cmp	r0, #0
 8002200:	d0c9      	beq.n	8002196 <__swbuf_r+0x2e>
 8002202:	2601      	movs	r6, #1
 8002204:	4276      	negs	r6, r6
 8002206:	e7ea      	b.n	80021de <__swbuf_r+0x76>
 8002208:	08004ecc 	.word	0x08004ecc
 800220c:	08004eec 	.word	0x08004eec
 8002210:	08004eac 	.word	0x08004eac

08002214 <__swsetup_r>:
 8002214:	4b37      	ldr	r3, [pc, #220]	; (80022f4 <__swsetup_r+0xe0>)
 8002216:	b570      	push	{r4, r5, r6, lr}
 8002218:	681d      	ldr	r5, [r3, #0]
 800221a:	0006      	movs	r6, r0
 800221c:	000c      	movs	r4, r1
 800221e:	2d00      	cmp	r5, #0
 8002220:	d005      	beq.n	800222e <__swsetup_r+0x1a>
 8002222:	69ab      	ldr	r3, [r5, #24]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d102      	bne.n	800222e <__swsetup_r+0x1a>
 8002228:	0028      	movs	r0, r5
 800222a:	f000 f999 	bl	8002560 <__sinit>
 800222e:	4b32      	ldr	r3, [pc, #200]	; (80022f8 <__swsetup_r+0xe4>)
 8002230:	429c      	cmp	r4, r3
 8002232:	d10f      	bne.n	8002254 <__swsetup_r+0x40>
 8002234:	686c      	ldr	r4, [r5, #4]
 8002236:	230c      	movs	r3, #12
 8002238:	5ee2      	ldrsh	r2, [r4, r3]
 800223a:	b293      	uxth	r3, r2
 800223c:	0711      	lsls	r1, r2, #28
 800223e:	d42d      	bmi.n	800229c <__swsetup_r+0x88>
 8002240:	06d9      	lsls	r1, r3, #27
 8002242:	d411      	bmi.n	8002268 <__swsetup_r+0x54>
 8002244:	2309      	movs	r3, #9
 8002246:	2001      	movs	r0, #1
 8002248:	6033      	str	r3, [r6, #0]
 800224a:	3337      	adds	r3, #55	; 0x37
 800224c:	4313      	orrs	r3, r2
 800224e:	81a3      	strh	r3, [r4, #12]
 8002250:	4240      	negs	r0, r0
 8002252:	bd70      	pop	{r4, r5, r6, pc}
 8002254:	4b29      	ldr	r3, [pc, #164]	; (80022fc <__swsetup_r+0xe8>)
 8002256:	429c      	cmp	r4, r3
 8002258:	d101      	bne.n	800225e <__swsetup_r+0x4a>
 800225a:	68ac      	ldr	r4, [r5, #8]
 800225c:	e7eb      	b.n	8002236 <__swsetup_r+0x22>
 800225e:	4b28      	ldr	r3, [pc, #160]	; (8002300 <__swsetup_r+0xec>)
 8002260:	429c      	cmp	r4, r3
 8002262:	d1e8      	bne.n	8002236 <__swsetup_r+0x22>
 8002264:	68ec      	ldr	r4, [r5, #12]
 8002266:	e7e6      	b.n	8002236 <__swsetup_r+0x22>
 8002268:	075b      	lsls	r3, r3, #29
 800226a:	d513      	bpl.n	8002294 <__swsetup_r+0x80>
 800226c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800226e:	2900      	cmp	r1, #0
 8002270:	d008      	beq.n	8002284 <__swsetup_r+0x70>
 8002272:	0023      	movs	r3, r4
 8002274:	3344      	adds	r3, #68	; 0x44
 8002276:	4299      	cmp	r1, r3
 8002278:	d002      	beq.n	8002280 <__swsetup_r+0x6c>
 800227a:	0030      	movs	r0, r6
 800227c:	f000 fa80 	bl	8002780 <_free_r>
 8002280:	2300      	movs	r3, #0
 8002282:	6363      	str	r3, [r4, #52]	; 0x34
 8002284:	2224      	movs	r2, #36	; 0x24
 8002286:	89a3      	ldrh	r3, [r4, #12]
 8002288:	4393      	bics	r3, r2
 800228a:	81a3      	strh	r3, [r4, #12]
 800228c:	2300      	movs	r3, #0
 800228e:	6063      	str	r3, [r4, #4]
 8002290:	6923      	ldr	r3, [r4, #16]
 8002292:	6023      	str	r3, [r4, #0]
 8002294:	2308      	movs	r3, #8
 8002296:	89a2      	ldrh	r2, [r4, #12]
 8002298:	4313      	orrs	r3, r2
 800229a:	81a3      	strh	r3, [r4, #12]
 800229c:	6923      	ldr	r3, [r4, #16]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d10b      	bne.n	80022ba <__swsetup_r+0xa6>
 80022a2:	21a0      	movs	r1, #160	; 0xa0
 80022a4:	2280      	movs	r2, #128	; 0x80
 80022a6:	89a3      	ldrh	r3, [r4, #12]
 80022a8:	0089      	lsls	r1, r1, #2
 80022aa:	0092      	lsls	r2, r2, #2
 80022ac:	400b      	ands	r3, r1
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d003      	beq.n	80022ba <__swsetup_r+0xa6>
 80022b2:	0021      	movs	r1, r4
 80022b4:	0030      	movs	r0, r6
 80022b6:	f000 fa1f 	bl	80026f8 <__smakebuf_r>
 80022ba:	220c      	movs	r2, #12
 80022bc:	5ea3      	ldrsh	r3, [r4, r2]
 80022be:	2001      	movs	r0, #1
 80022c0:	001a      	movs	r2, r3
 80022c2:	b299      	uxth	r1, r3
 80022c4:	4002      	ands	r2, r0
 80022c6:	4203      	tst	r3, r0
 80022c8:	d00f      	beq.n	80022ea <__swsetup_r+0xd6>
 80022ca:	2200      	movs	r2, #0
 80022cc:	60a2      	str	r2, [r4, #8]
 80022ce:	6962      	ldr	r2, [r4, #20]
 80022d0:	4252      	negs	r2, r2
 80022d2:	61a2      	str	r2, [r4, #24]
 80022d4:	2000      	movs	r0, #0
 80022d6:	6922      	ldr	r2, [r4, #16]
 80022d8:	4282      	cmp	r2, r0
 80022da:	d1ba      	bne.n	8002252 <__swsetup_r+0x3e>
 80022dc:	060a      	lsls	r2, r1, #24
 80022de:	d5b8      	bpl.n	8002252 <__swsetup_r+0x3e>
 80022e0:	2240      	movs	r2, #64	; 0x40
 80022e2:	4313      	orrs	r3, r2
 80022e4:	81a3      	strh	r3, [r4, #12]
 80022e6:	3801      	subs	r0, #1
 80022e8:	e7b3      	b.n	8002252 <__swsetup_r+0x3e>
 80022ea:	0788      	lsls	r0, r1, #30
 80022ec:	d400      	bmi.n	80022f0 <__swsetup_r+0xdc>
 80022ee:	6962      	ldr	r2, [r4, #20]
 80022f0:	60a2      	str	r2, [r4, #8]
 80022f2:	e7ef      	b.n	80022d4 <__swsetup_r+0xc0>
 80022f4:	20000010 	.word	0x20000010
 80022f8:	08004ecc 	.word	0x08004ecc
 80022fc:	08004eec 	.word	0x08004eec
 8002300:	08004eac 	.word	0x08004eac

08002304 <__sflush_r>:
 8002304:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002306:	898b      	ldrh	r3, [r1, #12]
 8002308:	0005      	movs	r5, r0
 800230a:	000c      	movs	r4, r1
 800230c:	071a      	lsls	r2, r3, #28
 800230e:	d45f      	bmi.n	80023d0 <__sflush_r+0xcc>
 8002310:	684a      	ldr	r2, [r1, #4]
 8002312:	2a00      	cmp	r2, #0
 8002314:	dc04      	bgt.n	8002320 <__sflush_r+0x1c>
 8002316:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8002318:	2a00      	cmp	r2, #0
 800231a:	dc01      	bgt.n	8002320 <__sflush_r+0x1c>
 800231c:	2000      	movs	r0, #0
 800231e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002320:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8002322:	2f00      	cmp	r7, #0
 8002324:	d0fa      	beq.n	800231c <__sflush_r+0x18>
 8002326:	2200      	movs	r2, #0
 8002328:	2180      	movs	r1, #128	; 0x80
 800232a:	682e      	ldr	r6, [r5, #0]
 800232c:	602a      	str	r2, [r5, #0]
 800232e:	001a      	movs	r2, r3
 8002330:	0149      	lsls	r1, r1, #5
 8002332:	400a      	ands	r2, r1
 8002334:	420b      	tst	r3, r1
 8002336:	d034      	beq.n	80023a2 <__sflush_r+0x9e>
 8002338:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800233a:	89a3      	ldrh	r3, [r4, #12]
 800233c:	075b      	lsls	r3, r3, #29
 800233e:	d506      	bpl.n	800234e <__sflush_r+0x4a>
 8002340:	6863      	ldr	r3, [r4, #4]
 8002342:	1ac0      	subs	r0, r0, r3
 8002344:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002346:	2b00      	cmp	r3, #0
 8002348:	d001      	beq.n	800234e <__sflush_r+0x4a>
 800234a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800234c:	1ac0      	subs	r0, r0, r3
 800234e:	0002      	movs	r2, r0
 8002350:	6a21      	ldr	r1, [r4, #32]
 8002352:	2300      	movs	r3, #0
 8002354:	0028      	movs	r0, r5
 8002356:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8002358:	47b8      	blx	r7
 800235a:	89a1      	ldrh	r1, [r4, #12]
 800235c:	1c43      	adds	r3, r0, #1
 800235e:	d106      	bne.n	800236e <__sflush_r+0x6a>
 8002360:	682b      	ldr	r3, [r5, #0]
 8002362:	2b1d      	cmp	r3, #29
 8002364:	d831      	bhi.n	80023ca <__sflush_r+0xc6>
 8002366:	4a2c      	ldr	r2, [pc, #176]	; (8002418 <__sflush_r+0x114>)
 8002368:	40da      	lsrs	r2, r3
 800236a:	07d3      	lsls	r3, r2, #31
 800236c:	d52d      	bpl.n	80023ca <__sflush_r+0xc6>
 800236e:	2300      	movs	r3, #0
 8002370:	6063      	str	r3, [r4, #4]
 8002372:	6923      	ldr	r3, [r4, #16]
 8002374:	6023      	str	r3, [r4, #0]
 8002376:	04cb      	lsls	r3, r1, #19
 8002378:	d505      	bpl.n	8002386 <__sflush_r+0x82>
 800237a:	1c43      	adds	r3, r0, #1
 800237c:	d102      	bne.n	8002384 <__sflush_r+0x80>
 800237e:	682b      	ldr	r3, [r5, #0]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d100      	bne.n	8002386 <__sflush_r+0x82>
 8002384:	6560      	str	r0, [r4, #84]	; 0x54
 8002386:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002388:	602e      	str	r6, [r5, #0]
 800238a:	2900      	cmp	r1, #0
 800238c:	d0c6      	beq.n	800231c <__sflush_r+0x18>
 800238e:	0023      	movs	r3, r4
 8002390:	3344      	adds	r3, #68	; 0x44
 8002392:	4299      	cmp	r1, r3
 8002394:	d002      	beq.n	800239c <__sflush_r+0x98>
 8002396:	0028      	movs	r0, r5
 8002398:	f000 f9f2 	bl	8002780 <_free_r>
 800239c:	2000      	movs	r0, #0
 800239e:	6360      	str	r0, [r4, #52]	; 0x34
 80023a0:	e7bd      	b.n	800231e <__sflush_r+0x1a>
 80023a2:	2301      	movs	r3, #1
 80023a4:	0028      	movs	r0, r5
 80023a6:	6a21      	ldr	r1, [r4, #32]
 80023a8:	47b8      	blx	r7
 80023aa:	1c43      	adds	r3, r0, #1
 80023ac:	d1c5      	bne.n	800233a <__sflush_r+0x36>
 80023ae:	682b      	ldr	r3, [r5, #0]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d0c2      	beq.n	800233a <__sflush_r+0x36>
 80023b4:	2b1d      	cmp	r3, #29
 80023b6:	d001      	beq.n	80023bc <__sflush_r+0xb8>
 80023b8:	2b16      	cmp	r3, #22
 80023ba:	d101      	bne.n	80023c0 <__sflush_r+0xbc>
 80023bc:	602e      	str	r6, [r5, #0]
 80023be:	e7ad      	b.n	800231c <__sflush_r+0x18>
 80023c0:	2340      	movs	r3, #64	; 0x40
 80023c2:	89a2      	ldrh	r2, [r4, #12]
 80023c4:	4313      	orrs	r3, r2
 80023c6:	81a3      	strh	r3, [r4, #12]
 80023c8:	e7a9      	b.n	800231e <__sflush_r+0x1a>
 80023ca:	2340      	movs	r3, #64	; 0x40
 80023cc:	430b      	orrs	r3, r1
 80023ce:	e7fa      	b.n	80023c6 <__sflush_r+0xc2>
 80023d0:	690f      	ldr	r7, [r1, #16]
 80023d2:	2f00      	cmp	r7, #0
 80023d4:	d0a2      	beq.n	800231c <__sflush_r+0x18>
 80023d6:	680a      	ldr	r2, [r1, #0]
 80023d8:	600f      	str	r7, [r1, #0]
 80023da:	1bd2      	subs	r2, r2, r7
 80023dc:	9201      	str	r2, [sp, #4]
 80023de:	2200      	movs	r2, #0
 80023e0:	079b      	lsls	r3, r3, #30
 80023e2:	d100      	bne.n	80023e6 <__sflush_r+0xe2>
 80023e4:	694a      	ldr	r2, [r1, #20]
 80023e6:	60a2      	str	r2, [r4, #8]
 80023e8:	9b01      	ldr	r3, [sp, #4]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	dc00      	bgt.n	80023f0 <__sflush_r+0xec>
 80023ee:	e795      	b.n	800231c <__sflush_r+0x18>
 80023f0:	003a      	movs	r2, r7
 80023f2:	0028      	movs	r0, r5
 80023f4:	9b01      	ldr	r3, [sp, #4]
 80023f6:	6a21      	ldr	r1, [r4, #32]
 80023f8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80023fa:	47b0      	blx	r6
 80023fc:	2800      	cmp	r0, #0
 80023fe:	dc06      	bgt.n	800240e <__sflush_r+0x10a>
 8002400:	2340      	movs	r3, #64	; 0x40
 8002402:	2001      	movs	r0, #1
 8002404:	89a2      	ldrh	r2, [r4, #12]
 8002406:	4240      	negs	r0, r0
 8002408:	4313      	orrs	r3, r2
 800240a:	81a3      	strh	r3, [r4, #12]
 800240c:	e787      	b.n	800231e <__sflush_r+0x1a>
 800240e:	9b01      	ldr	r3, [sp, #4]
 8002410:	183f      	adds	r7, r7, r0
 8002412:	1a1b      	subs	r3, r3, r0
 8002414:	9301      	str	r3, [sp, #4]
 8002416:	e7e7      	b.n	80023e8 <__sflush_r+0xe4>
 8002418:	20400001 	.word	0x20400001

0800241c <_fflush_r>:
 800241c:	690b      	ldr	r3, [r1, #16]
 800241e:	b570      	push	{r4, r5, r6, lr}
 8002420:	0005      	movs	r5, r0
 8002422:	000c      	movs	r4, r1
 8002424:	2b00      	cmp	r3, #0
 8002426:	d102      	bne.n	800242e <_fflush_r+0x12>
 8002428:	2500      	movs	r5, #0
 800242a:	0028      	movs	r0, r5
 800242c:	bd70      	pop	{r4, r5, r6, pc}
 800242e:	2800      	cmp	r0, #0
 8002430:	d004      	beq.n	800243c <_fflush_r+0x20>
 8002432:	6983      	ldr	r3, [r0, #24]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d101      	bne.n	800243c <_fflush_r+0x20>
 8002438:	f000 f892 	bl	8002560 <__sinit>
 800243c:	4b14      	ldr	r3, [pc, #80]	; (8002490 <_fflush_r+0x74>)
 800243e:	429c      	cmp	r4, r3
 8002440:	d11b      	bne.n	800247a <_fflush_r+0x5e>
 8002442:	686c      	ldr	r4, [r5, #4]
 8002444:	220c      	movs	r2, #12
 8002446:	5ea3      	ldrsh	r3, [r4, r2]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d0ed      	beq.n	8002428 <_fflush_r+0xc>
 800244c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800244e:	07d2      	lsls	r2, r2, #31
 8002450:	d404      	bmi.n	800245c <_fflush_r+0x40>
 8002452:	059b      	lsls	r3, r3, #22
 8002454:	d402      	bmi.n	800245c <_fflush_r+0x40>
 8002456:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002458:	f000 f923 	bl	80026a2 <__retarget_lock_acquire_recursive>
 800245c:	0028      	movs	r0, r5
 800245e:	0021      	movs	r1, r4
 8002460:	f7ff ff50 	bl	8002304 <__sflush_r>
 8002464:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002466:	0005      	movs	r5, r0
 8002468:	07db      	lsls	r3, r3, #31
 800246a:	d4de      	bmi.n	800242a <_fflush_r+0xe>
 800246c:	89a3      	ldrh	r3, [r4, #12]
 800246e:	059b      	lsls	r3, r3, #22
 8002470:	d4db      	bmi.n	800242a <_fflush_r+0xe>
 8002472:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002474:	f000 f916 	bl	80026a4 <__retarget_lock_release_recursive>
 8002478:	e7d7      	b.n	800242a <_fflush_r+0xe>
 800247a:	4b06      	ldr	r3, [pc, #24]	; (8002494 <_fflush_r+0x78>)
 800247c:	429c      	cmp	r4, r3
 800247e:	d101      	bne.n	8002484 <_fflush_r+0x68>
 8002480:	68ac      	ldr	r4, [r5, #8]
 8002482:	e7df      	b.n	8002444 <_fflush_r+0x28>
 8002484:	4b04      	ldr	r3, [pc, #16]	; (8002498 <_fflush_r+0x7c>)
 8002486:	429c      	cmp	r4, r3
 8002488:	d1dc      	bne.n	8002444 <_fflush_r+0x28>
 800248a:	68ec      	ldr	r4, [r5, #12]
 800248c:	e7da      	b.n	8002444 <_fflush_r+0x28>
 800248e:	46c0      	nop			; (mov r8, r8)
 8002490:	08004ecc 	.word	0x08004ecc
 8002494:	08004eec 	.word	0x08004eec
 8002498:	08004eac 	.word	0x08004eac

0800249c <std>:
 800249c:	2300      	movs	r3, #0
 800249e:	b510      	push	{r4, lr}
 80024a0:	0004      	movs	r4, r0
 80024a2:	6003      	str	r3, [r0, #0]
 80024a4:	6043      	str	r3, [r0, #4]
 80024a6:	6083      	str	r3, [r0, #8]
 80024a8:	8181      	strh	r1, [r0, #12]
 80024aa:	6643      	str	r3, [r0, #100]	; 0x64
 80024ac:	0019      	movs	r1, r3
 80024ae:	81c2      	strh	r2, [r0, #14]
 80024b0:	6103      	str	r3, [r0, #16]
 80024b2:	6143      	str	r3, [r0, #20]
 80024b4:	6183      	str	r3, [r0, #24]
 80024b6:	2208      	movs	r2, #8
 80024b8:	305c      	adds	r0, #92	; 0x5c
 80024ba:	f7ff fdd1 	bl	8002060 <memset>
 80024be:	4b05      	ldr	r3, [pc, #20]	; (80024d4 <std+0x38>)
 80024c0:	6224      	str	r4, [r4, #32]
 80024c2:	6263      	str	r3, [r4, #36]	; 0x24
 80024c4:	4b04      	ldr	r3, [pc, #16]	; (80024d8 <std+0x3c>)
 80024c6:	62a3      	str	r3, [r4, #40]	; 0x28
 80024c8:	4b04      	ldr	r3, [pc, #16]	; (80024dc <std+0x40>)
 80024ca:	62e3      	str	r3, [r4, #44]	; 0x2c
 80024cc:	4b04      	ldr	r3, [pc, #16]	; (80024e0 <std+0x44>)
 80024ce:	6323      	str	r3, [r4, #48]	; 0x30
 80024d0:	bd10      	pop	{r4, pc}
 80024d2:	46c0      	nop			; (mov r8, r8)
 80024d4:	08002969 	.word	0x08002969
 80024d8:	08002991 	.word	0x08002991
 80024dc:	080029c9 	.word	0x080029c9
 80024e0:	080029f5 	.word	0x080029f5

080024e4 <_cleanup_r>:
 80024e4:	b510      	push	{r4, lr}
 80024e6:	4902      	ldr	r1, [pc, #8]	; (80024f0 <_cleanup_r+0xc>)
 80024e8:	f000 f8ba 	bl	8002660 <_fwalk_reent>
 80024ec:	bd10      	pop	{r4, pc}
 80024ee:	46c0      	nop			; (mov r8, r8)
 80024f0:	0800241d 	.word	0x0800241d

080024f4 <__sfmoreglue>:
 80024f4:	b570      	push	{r4, r5, r6, lr}
 80024f6:	2568      	movs	r5, #104	; 0x68
 80024f8:	1e4a      	subs	r2, r1, #1
 80024fa:	4355      	muls	r5, r2
 80024fc:	000e      	movs	r6, r1
 80024fe:	0029      	movs	r1, r5
 8002500:	3174      	adds	r1, #116	; 0x74
 8002502:	f000 f9a9 	bl	8002858 <_malloc_r>
 8002506:	1e04      	subs	r4, r0, #0
 8002508:	d008      	beq.n	800251c <__sfmoreglue+0x28>
 800250a:	2100      	movs	r1, #0
 800250c:	002a      	movs	r2, r5
 800250e:	6001      	str	r1, [r0, #0]
 8002510:	6046      	str	r6, [r0, #4]
 8002512:	300c      	adds	r0, #12
 8002514:	60a0      	str	r0, [r4, #8]
 8002516:	3268      	adds	r2, #104	; 0x68
 8002518:	f7ff fda2 	bl	8002060 <memset>
 800251c:	0020      	movs	r0, r4
 800251e:	bd70      	pop	{r4, r5, r6, pc}

08002520 <__sfp_lock_acquire>:
 8002520:	b510      	push	{r4, lr}
 8002522:	4802      	ldr	r0, [pc, #8]	; (800252c <__sfp_lock_acquire+0xc>)
 8002524:	f000 f8bd 	bl	80026a2 <__retarget_lock_acquire_recursive>
 8002528:	bd10      	pop	{r4, pc}
 800252a:	46c0      	nop			; (mov r8, r8)
 800252c:	200027c9 	.word	0x200027c9

08002530 <__sfp_lock_release>:
 8002530:	b510      	push	{r4, lr}
 8002532:	4802      	ldr	r0, [pc, #8]	; (800253c <__sfp_lock_release+0xc>)
 8002534:	f000 f8b6 	bl	80026a4 <__retarget_lock_release_recursive>
 8002538:	bd10      	pop	{r4, pc}
 800253a:	46c0      	nop			; (mov r8, r8)
 800253c:	200027c9 	.word	0x200027c9

08002540 <__sinit_lock_acquire>:
 8002540:	b510      	push	{r4, lr}
 8002542:	4802      	ldr	r0, [pc, #8]	; (800254c <__sinit_lock_acquire+0xc>)
 8002544:	f000 f8ad 	bl	80026a2 <__retarget_lock_acquire_recursive>
 8002548:	bd10      	pop	{r4, pc}
 800254a:	46c0      	nop			; (mov r8, r8)
 800254c:	200027ca 	.word	0x200027ca

08002550 <__sinit_lock_release>:
 8002550:	b510      	push	{r4, lr}
 8002552:	4802      	ldr	r0, [pc, #8]	; (800255c <__sinit_lock_release+0xc>)
 8002554:	f000 f8a6 	bl	80026a4 <__retarget_lock_release_recursive>
 8002558:	bd10      	pop	{r4, pc}
 800255a:	46c0      	nop			; (mov r8, r8)
 800255c:	200027ca 	.word	0x200027ca

08002560 <__sinit>:
 8002560:	b513      	push	{r0, r1, r4, lr}
 8002562:	0004      	movs	r4, r0
 8002564:	f7ff ffec 	bl	8002540 <__sinit_lock_acquire>
 8002568:	69a3      	ldr	r3, [r4, #24]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d002      	beq.n	8002574 <__sinit+0x14>
 800256e:	f7ff ffef 	bl	8002550 <__sinit_lock_release>
 8002572:	bd13      	pop	{r0, r1, r4, pc}
 8002574:	64a3      	str	r3, [r4, #72]	; 0x48
 8002576:	64e3      	str	r3, [r4, #76]	; 0x4c
 8002578:	6523      	str	r3, [r4, #80]	; 0x50
 800257a:	4b13      	ldr	r3, [pc, #76]	; (80025c8 <__sinit+0x68>)
 800257c:	4a13      	ldr	r2, [pc, #76]	; (80025cc <__sinit+0x6c>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	62a2      	str	r2, [r4, #40]	; 0x28
 8002582:	9301      	str	r3, [sp, #4]
 8002584:	42a3      	cmp	r3, r4
 8002586:	d101      	bne.n	800258c <__sinit+0x2c>
 8002588:	2301      	movs	r3, #1
 800258a:	61a3      	str	r3, [r4, #24]
 800258c:	0020      	movs	r0, r4
 800258e:	f000 f81f 	bl	80025d0 <__sfp>
 8002592:	6060      	str	r0, [r4, #4]
 8002594:	0020      	movs	r0, r4
 8002596:	f000 f81b 	bl	80025d0 <__sfp>
 800259a:	60a0      	str	r0, [r4, #8]
 800259c:	0020      	movs	r0, r4
 800259e:	f000 f817 	bl	80025d0 <__sfp>
 80025a2:	2200      	movs	r2, #0
 80025a4:	2104      	movs	r1, #4
 80025a6:	60e0      	str	r0, [r4, #12]
 80025a8:	6860      	ldr	r0, [r4, #4]
 80025aa:	f7ff ff77 	bl	800249c <std>
 80025ae:	2201      	movs	r2, #1
 80025b0:	2109      	movs	r1, #9
 80025b2:	68a0      	ldr	r0, [r4, #8]
 80025b4:	f7ff ff72 	bl	800249c <std>
 80025b8:	2202      	movs	r2, #2
 80025ba:	2112      	movs	r1, #18
 80025bc:	68e0      	ldr	r0, [r4, #12]
 80025be:	f7ff ff6d 	bl	800249c <std>
 80025c2:	2301      	movs	r3, #1
 80025c4:	61a3      	str	r3, [r4, #24]
 80025c6:	e7d2      	b.n	800256e <__sinit+0xe>
 80025c8:	08004ea8 	.word	0x08004ea8
 80025cc:	080024e5 	.word	0x080024e5

080025d0 <__sfp>:
 80025d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025d2:	0007      	movs	r7, r0
 80025d4:	f7ff ffa4 	bl	8002520 <__sfp_lock_acquire>
 80025d8:	4b1f      	ldr	r3, [pc, #124]	; (8002658 <__sfp+0x88>)
 80025da:	681e      	ldr	r6, [r3, #0]
 80025dc:	69b3      	ldr	r3, [r6, #24]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d102      	bne.n	80025e8 <__sfp+0x18>
 80025e2:	0030      	movs	r0, r6
 80025e4:	f7ff ffbc 	bl	8002560 <__sinit>
 80025e8:	3648      	adds	r6, #72	; 0x48
 80025ea:	68b4      	ldr	r4, [r6, #8]
 80025ec:	6873      	ldr	r3, [r6, #4]
 80025ee:	3b01      	subs	r3, #1
 80025f0:	d504      	bpl.n	80025fc <__sfp+0x2c>
 80025f2:	6833      	ldr	r3, [r6, #0]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d022      	beq.n	800263e <__sfp+0x6e>
 80025f8:	6836      	ldr	r6, [r6, #0]
 80025fa:	e7f6      	b.n	80025ea <__sfp+0x1a>
 80025fc:	220c      	movs	r2, #12
 80025fe:	5ea5      	ldrsh	r5, [r4, r2]
 8002600:	2d00      	cmp	r5, #0
 8002602:	d11a      	bne.n	800263a <__sfp+0x6a>
 8002604:	0020      	movs	r0, r4
 8002606:	4b15      	ldr	r3, [pc, #84]	; (800265c <__sfp+0x8c>)
 8002608:	3058      	adds	r0, #88	; 0x58
 800260a:	60e3      	str	r3, [r4, #12]
 800260c:	6665      	str	r5, [r4, #100]	; 0x64
 800260e:	f000 f847 	bl	80026a0 <__retarget_lock_init_recursive>
 8002612:	f7ff ff8d 	bl	8002530 <__sfp_lock_release>
 8002616:	0020      	movs	r0, r4
 8002618:	2208      	movs	r2, #8
 800261a:	0029      	movs	r1, r5
 800261c:	6025      	str	r5, [r4, #0]
 800261e:	60a5      	str	r5, [r4, #8]
 8002620:	6065      	str	r5, [r4, #4]
 8002622:	6125      	str	r5, [r4, #16]
 8002624:	6165      	str	r5, [r4, #20]
 8002626:	61a5      	str	r5, [r4, #24]
 8002628:	305c      	adds	r0, #92	; 0x5c
 800262a:	f7ff fd19 	bl	8002060 <memset>
 800262e:	6365      	str	r5, [r4, #52]	; 0x34
 8002630:	63a5      	str	r5, [r4, #56]	; 0x38
 8002632:	64a5      	str	r5, [r4, #72]	; 0x48
 8002634:	64e5      	str	r5, [r4, #76]	; 0x4c
 8002636:	0020      	movs	r0, r4
 8002638:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800263a:	3468      	adds	r4, #104	; 0x68
 800263c:	e7d7      	b.n	80025ee <__sfp+0x1e>
 800263e:	2104      	movs	r1, #4
 8002640:	0038      	movs	r0, r7
 8002642:	f7ff ff57 	bl	80024f4 <__sfmoreglue>
 8002646:	1e04      	subs	r4, r0, #0
 8002648:	6030      	str	r0, [r6, #0]
 800264a:	d1d5      	bne.n	80025f8 <__sfp+0x28>
 800264c:	f7ff ff70 	bl	8002530 <__sfp_lock_release>
 8002650:	230c      	movs	r3, #12
 8002652:	603b      	str	r3, [r7, #0]
 8002654:	e7ef      	b.n	8002636 <__sfp+0x66>
 8002656:	46c0      	nop			; (mov r8, r8)
 8002658:	08004ea8 	.word	0x08004ea8
 800265c:	ffff0001 	.word	0xffff0001

08002660 <_fwalk_reent>:
 8002660:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002662:	0004      	movs	r4, r0
 8002664:	0006      	movs	r6, r0
 8002666:	2700      	movs	r7, #0
 8002668:	9101      	str	r1, [sp, #4]
 800266a:	3448      	adds	r4, #72	; 0x48
 800266c:	6863      	ldr	r3, [r4, #4]
 800266e:	68a5      	ldr	r5, [r4, #8]
 8002670:	9300      	str	r3, [sp, #0]
 8002672:	9b00      	ldr	r3, [sp, #0]
 8002674:	3b01      	subs	r3, #1
 8002676:	9300      	str	r3, [sp, #0]
 8002678:	d504      	bpl.n	8002684 <_fwalk_reent+0x24>
 800267a:	6824      	ldr	r4, [r4, #0]
 800267c:	2c00      	cmp	r4, #0
 800267e:	d1f5      	bne.n	800266c <_fwalk_reent+0xc>
 8002680:	0038      	movs	r0, r7
 8002682:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002684:	89ab      	ldrh	r3, [r5, #12]
 8002686:	2b01      	cmp	r3, #1
 8002688:	d908      	bls.n	800269c <_fwalk_reent+0x3c>
 800268a:	220e      	movs	r2, #14
 800268c:	5eab      	ldrsh	r3, [r5, r2]
 800268e:	3301      	adds	r3, #1
 8002690:	d004      	beq.n	800269c <_fwalk_reent+0x3c>
 8002692:	0029      	movs	r1, r5
 8002694:	0030      	movs	r0, r6
 8002696:	9b01      	ldr	r3, [sp, #4]
 8002698:	4798      	blx	r3
 800269a:	4307      	orrs	r7, r0
 800269c:	3568      	adds	r5, #104	; 0x68
 800269e:	e7e8      	b.n	8002672 <_fwalk_reent+0x12>

080026a0 <__retarget_lock_init_recursive>:
 80026a0:	4770      	bx	lr

080026a2 <__retarget_lock_acquire_recursive>:
 80026a2:	4770      	bx	lr

080026a4 <__retarget_lock_release_recursive>:
 80026a4:	4770      	bx	lr
	...

080026a8 <__swhatbuf_r>:
 80026a8:	b570      	push	{r4, r5, r6, lr}
 80026aa:	000e      	movs	r6, r1
 80026ac:	001d      	movs	r5, r3
 80026ae:	230e      	movs	r3, #14
 80026b0:	5ec9      	ldrsh	r1, [r1, r3]
 80026b2:	0014      	movs	r4, r2
 80026b4:	b096      	sub	sp, #88	; 0x58
 80026b6:	2900      	cmp	r1, #0
 80026b8:	da08      	bge.n	80026cc <__swhatbuf_r+0x24>
 80026ba:	220c      	movs	r2, #12
 80026bc:	5eb3      	ldrsh	r3, [r6, r2]
 80026be:	2200      	movs	r2, #0
 80026c0:	602a      	str	r2, [r5, #0]
 80026c2:	061b      	lsls	r3, r3, #24
 80026c4:	d411      	bmi.n	80026ea <__swhatbuf_r+0x42>
 80026c6:	2380      	movs	r3, #128	; 0x80
 80026c8:	00db      	lsls	r3, r3, #3
 80026ca:	e00f      	b.n	80026ec <__swhatbuf_r+0x44>
 80026cc:	466a      	mov	r2, sp
 80026ce:	f000 f9bd 	bl	8002a4c <_fstat_r>
 80026d2:	2800      	cmp	r0, #0
 80026d4:	dbf1      	blt.n	80026ba <__swhatbuf_r+0x12>
 80026d6:	23f0      	movs	r3, #240	; 0xf0
 80026d8:	9901      	ldr	r1, [sp, #4]
 80026da:	021b      	lsls	r3, r3, #8
 80026dc:	4019      	ands	r1, r3
 80026de:	4b05      	ldr	r3, [pc, #20]	; (80026f4 <__swhatbuf_r+0x4c>)
 80026e0:	18c9      	adds	r1, r1, r3
 80026e2:	424b      	negs	r3, r1
 80026e4:	4159      	adcs	r1, r3
 80026e6:	6029      	str	r1, [r5, #0]
 80026e8:	e7ed      	b.n	80026c6 <__swhatbuf_r+0x1e>
 80026ea:	2340      	movs	r3, #64	; 0x40
 80026ec:	2000      	movs	r0, #0
 80026ee:	6023      	str	r3, [r4, #0]
 80026f0:	b016      	add	sp, #88	; 0x58
 80026f2:	bd70      	pop	{r4, r5, r6, pc}
 80026f4:	ffffe000 	.word	0xffffe000

080026f8 <__smakebuf_r>:
 80026f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80026fa:	2602      	movs	r6, #2
 80026fc:	898b      	ldrh	r3, [r1, #12]
 80026fe:	0005      	movs	r5, r0
 8002700:	000c      	movs	r4, r1
 8002702:	4233      	tst	r3, r6
 8002704:	d006      	beq.n	8002714 <__smakebuf_r+0x1c>
 8002706:	0023      	movs	r3, r4
 8002708:	3347      	adds	r3, #71	; 0x47
 800270a:	6023      	str	r3, [r4, #0]
 800270c:	6123      	str	r3, [r4, #16]
 800270e:	2301      	movs	r3, #1
 8002710:	6163      	str	r3, [r4, #20]
 8002712:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8002714:	466a      	mov	r2, sp
 8002716:	ab01      	add	r3, sp, #4
 8002718:	f7ff ffc6 	bl	80026a8 <__swhatbuf_r>
 800271c:	9900      	ldr	r1, [sp, #0]
 800271e:	0007      	movs	r7, r0
 8002720:	0028      	movs	r0, r5
 8002722:	f000 f899 	bl	8002858 <_malloc_r>
 8002726:	2800      	cmp	r0, #0
 8002728:	d108      	bne.n	800273c <__smakebuf_r+0x44>
 800272a:	220c      	movs	r2, #12
 800272c:	5ea3      	ldrsh	r3, [r4, r2]
 800272e:	059a      	lsls	r2, r3, #22
 8002730:	d4ef      	bmi.n	8002712 <__smakebuf_r+0x1a>
 8002732:	2203      	movs	r2, #3
 8002734:	4393      	bics	r3, r2
 8002736:	431e      	orrs	r6, r3
 8002738:	81a6      	strh	r6, [r4, #12]
 800273a:	e7e4      	b.n	8002706 <__smakebuf_r+0xe>
 800273c:	4b0f      	ldr	r3, [pc, #60]	; (800277c <__smakebuf_r+0x84>)
 800273e:	62ab      	str	r3, [r5, #40]	; 0x28
 8002740:	2380      	movs	r3, #128	; 0x80
 8002742:	89a2      	ldrh	r2, [r4, #12]
 8002744:	6020      	str	r0, [r4, #0]
 8002746:	4313      	orrs	r3, r2
 8002748:	81a3      	strh	r3, [r4, #12]
 800274a:	9b00      	ldr	r3, [sp, #0]
 800274c:	6120      	str	r0, [r4, #16]
 800274e:	6163      	str	r3, [r4, #20]
 8002750:	9b01      	ldr	r3, [sp, #4]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d00d      	beq.n	8002772 <__smakebuf_r+0x7a>
 8002756:	0028      	movs	r0, r5
 8002758:	230e      	movs	r3, #14
 800275a:	5ee1      	ldrsh	r1, [r4, r3]
 800275c:	f000 f988 	bl	8002a70 <_isatty_r>
 8002760:	2800      	cmp	r0, #0
 8002762:	d006      	beq.n	8002772 <__smakebuf_r+0x7a>
 8002764:	2203      	movs	r2, #3
 8002766:	89a3      	ldrh	r3, [r4, #12]
 8002768:	4393      	bics	r3, r2
 800276a:	001a      	movs	r2, r3
 800276c:	2301      	movs	r3, #1
 800276e:	4313      	orrs	r3, r2
 8002770:	81a3      	strh	r3, [r4, #12]
 8002772:	89a0      	ldrh	r0, [r4, #12]
 8002774:	4307      	orrs	r7, r0
 8002776:	81a7      	strh	r7, [r4, #12]
 8002778:	e7cb      	b.n	8002712 <__smakebuf_r+0x1a>
 800277a:	46c0      	nop			; (mov r8, r8)
 800277c:	080024e5 	.word	0x080024e5

08002780 <_free_r>:
 8002780:	b570      	push	{r4, r5, r6, lr}
 8002782:	0005      	movs	r5, r0
 8002784:	2900      	cmp	r1, #0
 8002786:	d010      	beq.n	80027aa <_free_r+0x2a>
 8002788:	1f0c      	subs	r4, r1, #4
 800278a:	6823      	ldr	r3, [r4, #0]
 800278c:	2b00      	cmp	r3, #0
 800278e:	da00      	bge.n	8002792 <_free_r+0x12>
 8002790:	18e4      	adds	r4, r4, r3
 8002792:	0028      	movs	r0, r5
 8002794:	f000 f992 	bl	8002abc <__malloc_lock>
 8002798:	4a1d      	ldr	r2, [pc, #116]	; (8002810 <_free_r+0x90>)
 800279a:	6813      	ldr	r3, [r2, #0]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d105      	bne.n	80027ac <_free_r+0x2c>
 80027a0:	6063      	str	r3, [r4, #4]
 80027a2:	6014      	str	r4, [r2, #0]
 80027a4:	0028      	movs	r0, r5
 80027a6:	f000 f991 	bl	8002acc <__malloc_unlock>
 80027aa:	bd70      	pop	{r4, r5, r6, pc}
 80027ac:	42a3      	cmp	r3, r4
 80027ae:	d908      	bls.n	80027c2 <_free_r+0x42>
 80027b0:	6821      	ldr	r1, [r4, #0]
 80027b2:	1860      	adds	r0, r4, r1
 80027b4:	4283      	cmp	r3, r0
 80027b6:	d1f3      	bne.n	80027a0 <_free_r+0x20>
 80027b8:	6818      	ldr	r0, [r3, #0]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	1841      	adds	r1, r0, r1
 80027be:	6021      	str	r1, [r4, #0]
 80027c0:	e7ee      	b.n	80027a0 <_free_r+0x20>
 80027c2:	001a      	movs	r2, r3
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d001      	beq.n	80027ce <_free_r+0x4e>
 80027ca:	42a3      	cmp	r3, r4
 80027cc:	d9f9      	bls.n	80027c2 <_free_r+0x42>
 80027ce:	6811      	ldr	r1, [r2, #0]
 80027d0:	1850      	adds	r0, r2, r1
 80027d2:	42a0      	cmp	r0, r4
 80027d4:	d10b      	bne.n	80027ee <_free_r+0x6e>
 80027d6:	6820      	ldr	r0, [r4, #0]
 80027d8:	1809      	adds	r1, r1, r0
 80027da:	1850      	adds	r0, r2, r1
 80027dc:	6011      	str	r1, [r2, #0]
 80027de:	4283      	cmp	r3, r0
 80027e0:	d1e0      	bne.n	80027a4 <_free_r+0x24>
 80027e2:	6818      	ldr	r0, [r3, #0]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	1841      	adds	r1, r0, r1
 80027e8:	6011      	str	r1, [r2, #0]
 80027ea:	6053      	str	r3, [r2, #4]
 80027ec:	e7da      	b.n	80027a4 <_free_r+0x24>
 80027ee:	42a0      	cmp	r0, r4
 80027f0:	d902      	bls.n	80027f8 <_free_r+0x78>
 80027f2:	230c      	movs	r3, #12
 80027f4:	602b      	str	r3, [r5, #0]
 80027f6:	e7d5      	b.n	80027a4 <_free_r+0x24>
 80027f8:	6821      	ldr	r1, [r4, #0]
 80027fa:	1860      	adds	r0, r4, r1
 80027fc:	4283      	cmp	r3, r0
 80027fe:	d103      	bne.n	8002808 <_free_r+0x88>
 8002800:	6818      	ldr	r0, [r3, #0]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	1841      	adds	r1, r0, r1
 8002806:	6021      	str	r1, [r4, #0]
 8002808:	6063      	str	r3, [r4, #4]
 800280a:	6054      	str	r4, [r2, #4]
 800280c:	e7ca      	b.n	80027a4 <_free_r+0x24>
 800280e:	46c0      	nop			; (mov r8, r8)
 8002810:	200027cc 	.word	0x200027cc

08002814 <sbrk_aligned>:
 8002814:	b570      	push	{r4, r5, r6, lr}
 8002816:	4e0f      	ldr	r6, [pc, #60]	; (8002854 <sbrk_aligned+0x40>)
 8002818:	000d      	movs	r5, r1
 800281a:	6831      	ldr	r1, [r6, #0]
 800281c:	0004      	movs	r4, r0
 800281e:	2900      	cmp	r1, #0
 8002820:	d102      	bne.n	8002828 <sbrk_aligned+0x14>
 8002822:	f000 f88f 	bl	8002944 <_sbrk_r>
 8002826:	6030      	str	r0, [r6, #0]
 8002828:	0029      	movs	r1, r5
 800282a:	0020      	movs	r0, r4
 800282c:	f000 f88a 	bl	8002944 <_sbrk_r>
 8002830:	1c43      	adds	r3, r0, #1
 8002832:	d00a      	beq.n	800284a <sbrk_aligned+0x36>
 8002834:	2303      	movs	r3, #3
 8002836:	1cc5      	adds	r5, r0, #3
 8002838:	439d      	bics	r5, r3
 800283a:	42a8      	cmp	r0, r5
 800283c:	d007      	beq.n	800284e <sbrk_aligned+0x3a>
 800283e:	1a29      	subs	r1, r5, r0
 8002840:	0020      	movs	r0, r4
 8002842:	f000 f87f 	bl	8002944 <_sbrk_r>
 8002846:	1c43      	adds	r3, r0, #1
 8002848:	d101      	bne.n	800284e <sbrk_aligned+0x3a>
 800284a:	2501      	movs	r5, #1
 800284c:	426d      	negs	r5, r5
 800284e:	0028      	movs	r0, r5
 8002850:	bd70      	pop	{r4, r5, r6, pc}
 8002852:	46c0      	nop			; (mov r8, r8)
 8002854:	200027d0 	.word	0x200027d0

08002858 <_malloc_r>:
 8002858:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800285a:	2203      	movs	r2, #3
 800285c:	1ccb      	adds	r3, r1, #3
 800285e:	4393      	bics	r3, r2
 8002860:	3308      	adds	r3, #8
 8002862:	0006      	movs	r6, r0
 8002864:	001f      	movs	r7, r3
 8002866:	2b0c      	cmp	r3, #12
 8002868:	d232      	bcs.n	80028d0 <_malloc_r+0x78>
 800286a:	270c      	movs	r7, #12
 800286c:	42b9      	cmp	r1, r7
 800286e:	d831      	bhi.n	80028d4 <_malloc_r+0x7c>
 8002870:	0030      	movs	r0, r6
 8002872:	f000 f923 	bl	8002abc <__malloc_lock>
 8002876:	4d32      	ldr	r5, [pc, #200]	; (8002940 <_malloc_r+0xe8>)
 8002878:	682b      	ldr	r3, [r5, #0]
 800287a:	001c      	movs	r4, r3
 800287c:	2c00      	cmp	r4, #0
 800287e:	d12e      	bne.n	80028de <_malloc_r+0x86>
 8002880:	0039      	movs	r1, r7
 8002882:	0030      	movs	r0, r6
 8002884:	f7ff ffc6 	bl	8002814 <sbrk_aligned>
 8002888:	0004      	movs	r4, r0
 800288a:	1c43      	adds	r3, r0, #1
 800288c:	d11e      	bne.n	80028cc <_malloc_r+0x74>
 800288e:	682c      	ldr	r4, [r5, #0]
 8002890:	0025      	movs	r5, r4
 8002892:	2d00      	cmp	r5, #0
 8002894:	d14a      	bne.n	800292c <_malloc_r+0xd4>
 8002896:	6823      	ldr	r3, [r4, #0]
 8002898:	0029      	movs	r1, r5
 800289a:	18e3      	adds	r3, r4, r3
 800289c:	0030      	movs	r0, r6
 800289e:	9301      	str	r3, [sp, #4]
 80028a0:	f000 f850 	bl	8002944 <_sbrk_r>
 80028a4:	9b01      	ldr	r3, [sp, #4]
 80028a6:	4283      	cmp	r3, r0
 80028a8:	d143      	bne.n	8002932 <_malloc_r+0xda>
 80028aa:	6823      	ldr	r3, [r4, #0]
 80028ac:	3703      	adds	r7, #3
 80028ae:	1aff      	subs	r7, r7, r3
 80028b0:	2303      	movs	r3, #3
 80028b2:	439f      	bics	r7, r3
 80028b4:	3708      	adds	r7, #8
 80028b6:	2f0c      	cmp	r7, #12
 80028b8:	d200      	bcs.n	80028bc <_malloc_r+0x64>
 80028ba:	270c      	movs	r7, #12
 80028bc:	0039      	movs	r1, r7
 80028be:	0030      	movs	r0, r6
 80028c0:	f7ff ffa8 	bl	8002814 <sbrk_aligned>
 80028c4:	1c43      	adds	r3, r0, #1
 80028c6:	d034      	beq.n	8002932 <_malloc_r+0xda>
 80028c8:	6823      	ldr	r3, [r4, #0]
 80028ca:	19df      	adds	r7, r3, r7
 80028cc:	6027      	str	r7, [r4, #0]
 80028ce:	e013      	b.n	80028f8 <_malloc_r+0xa0>
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	dacb      	bge.n	800286c <_malloc_r+0x14>
 80028d4:	230c      	movs	r3, #12
 80028d6:	2500      	movs	r5, #0
 80028d8:	6033      	str	r3, [r6, #0]
 80028da:	0028      	movs	r0, r5
 80028dc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80028de:	6822      	ldr	r2, [r4, #0]
 80028e0:	1bd1      	subs	r1, r2, r7
 80028e2:	d420      	bmi.n	8002926 <_malloc_r+0xce>
 80028e4:	290b      	cmp	r1, #11
 80028e6:	d917      	bls.n	8002918 <_malloc_r+0xc0>
 80028e8:	19e2      	adds	r2, r4, r7
 80028ea:	6027      	str	r7, [r4, #0]
 80028ec:	42a3      	cmp	r3, r4
 80028ee:	d111      	bne.n	8002914 <_malloc_r+0xbc>
 80028f0:	602a      	str	r2, [r5, #0]
 80028f2:	6863      	ldr	r3, [r4, #4]
 80028f4:	6011      	str	r1, [r2, #0]
 80028f6:	6053      	str	r3, [r2, #4]
 80028f8:	0030      	movs	r0, r6
 80028fa:	0025      	movs	r5, r4
 80028fc:	f000 f8e6 	bl	8002acc <__malloc_unlock>
 8002900:	2207      	movs	r2, #7
 8002902:	350b      	adds	r5, #11
 8002904:	1d23      	adds	r3, r4, #4
 8002906:	4395      	bics	r5, r2
 8002908:	1aea      	subs	r2, r5, r3
 800290a:	429d      	cmp	r5, r3
 800290c:	d0e5      	beq.n	80028da <_malloc_r+0x82>
 800290e:	1b5b      	subs	r3, r3, r5
 8002910:	50a3      	str	r3, [r4, r2]
 8002912:	e7e2      	b.n	80028da <_malloc_r+0x82>
 8002914:	605a      	str	r2, [r3, #4]
 8002916:	e7ec      	b.n	80028f2 <_malloc_r+0x9a>
 8002918:	6862      	ldr	r2, [r4, #4]
 800291a:	42a3      	cmp	r3, r4
 800291c:	d101      	bne.n	8002922 <_malloc_r+0xca>
 800291e:	602a      	str	r2, [r5, #0]
 8002920:	e7ea      	b.n	80028f8 <_malloc_r+0xa0>
 8002922:	605a      	str	r2, [r3, #4]
 8002924:	e7e8      	b.n	80028f8 <_malloc_r+0xa0>
 8002926:	0023      	movs	r3, r4
 8002928:	6864      	ldr	r4, [r4, #4]
 800292a:	e7a7      	b.n	800287c <_malloc_r+0x24>
 800292c:	002c      	movs	r4, r5
 800292e:	686d      	ldr	r5, [r5, #4]
 8002930:	e7af      	b.n	8002892 <_malloc_r+0x3a>
 8002932:	230c      	movs	r3, #12
 8002934:	0030      	movs	r0, r6
 8002936:	6033      	str	r3, [r6, #0]
 8002938:	f000 f8c8 	bl	8002acc <__malloc_unlock>
 800293c:	e7cd      	b.n	80028da <_malloc_r+0x82>
 800293e:	46c0      	nop			; (mov r8, r8)
 8002940:	200027cc 	.word	0x200027cc

08002944 <_sbrk_r>:
 8002944:	2300      	movs	r3, #0
 8002946:	b570      	push	{r4, r5, r6, lr}
 8002948:	4d06      	ldr	r5, [pc, #24]	; (8002964 <_sbrk_r+0x20>)
 800294a:	0004      	movs	r4, r0
 800294c:	0008      	movs	r0, r1
 800294e:	602b      	str	r3, [r5, #0]
 8002950:	f7fe fada 	bl	8000f08 <_sbrk>
 8002954:	1c43      	adds	r3, r0, #1
 8002956:	d103      	bne.n	8002960 <_sbrk_r+0x1c>
 8002958:	682b      	ldr	r3, [r5, #0]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d000      	beq.n	8002960 <_sbrk_r+0x1c>
 800295e:	6023      	str	r3, [r4, #0]
 8002960:	bd70      	pop	{r4, r5, r6, pc}
 8002962:	46c0      	nop			; (mov r8, r8)
 8002964:	200027d4 	.word	0x200027d4

08002968 <__sread>:
 8002968:	b570      	push	{r4, r5, r6, lr}
 800296a:	000c      	movs	r4, r1
 800296c:	250e      	movs	r5, #14
 800296e:	5f49      	ldrsh	r1, [r1, r5]
 8002970:	f000 f8b4 	bl	8002adc <_read_r>
 8002974:	2800      	cmp	r0, #0
 8002976:	db03      	blt.n	8002980 <__sread+0x18>
 8002978:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800297a:	181b      	adds	r3, r3, r0
 800297c:	6563      	str	r3, [r4, #84]	; 0x54
 800297e:	bd70      	pop	{r4, r5, r6, pc}
 8002980:	89a3      	ldrh	r3, [r4, #12]
 8002982:	4a02      	ldr	r2, [pc, #8]	; (800298c <__sread+0x24>)
 8002984:	4013      	ands	r3, r2
 8002986:	81a3      	strh	r3, [r4, #12]
 8002988:	e7f9      	b.n	800297e <__sread+0x16>
 800298a:	46c0      	nop			; (mov r8, r8)
 800298c:	ffffefff 	.word	0xffffefff

08002990 <__swrite>:
 8002990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002992:	001f      	movs	r7, r3
 8002994:	898b      	ldrh	r3, [r1, #12]
 8002996:	0005      	movs	r5, r0
 8002998:	000c      	movs	r4, r1
 800299a:	0016      	movs	r6, r2
 800299c:	05db      	lsls	r3, r3, #23
 800299e:	d505      	bpl.n	80029ac <__swrite+0x1c>
 80029a0:	230e      	movs	r3, #14
 80029a2:	5ec9      	ldrsh	r1, [r1, r3]
 80029a4:	2200      	movs	r2, #0
 80029a6:	2302      	movs	r3, #2
 80029a8:	f000 f874 	bl	8002a94 <_lseek_r>
 80029ac:	89a3      	ldrh	r3, [r4, #12]
 80029ae:	4a05      	ldr	r2, [pc, #20]	; (80029c4 <__swrite+0x34>)
 80029b0:	0028      	movs	r0, r5
 80029b2:	4013      	ands	r3, r2
 80029b4:	81a3      	strh	r3, [r4, #12]
 80029b6:	0032      	movs	r2, r6
 80029b8:	230e      	movs	r3, #14
 80029ba:	5ee1      	ldrsh	r1, [r4, r3]
 80029bc:	003b      	movs	r3, r7
 80029be:	f000 f81f 	bl	8002a00 <_write_r>
 80029c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80029c4:	ffffefff 	.word	0xffffefff

080029c8 <__sseek>:
 80029c8:	b570      	push	{r4, r5, r6, lr}
 80029ca:	000c      	movs	r4, r1
 80029cc:	250e      	movs	r5, #14
 80029ce:	5f49      	ldrsh	r1, [r1, r5]
 80029d0:	f000 f860 	bl	8002a94 <_lseek_r>
 80029d4:	89a3      	ldrh	r3, [r4, #12]
 80029d6:	1c42      	adds	r2, r0, #1
 80029d8:	d103      	bne.n	80029e2 <__sseek+0x1a>
 80029da:	4a05      	ldr	r2, [pc, #20]	; (80029f0 <__sseek+0x28>)
 80029dc:	4013      	ands	r3, r2
 80029de:	81a3      	strh	r3, [r4, #12]
 80029e0:	bd70      	pop	{r4, r5, r6, pc}
 80029e2:	2280      	movs	r2, #128	; 0x80
 80029e4:	0152      	lsls	r2, r2, #5
 80029e6:	4313      	orrs	r3, r2
 80029e8:	81a3      	strh	r3, [r4, #12]
 80029ea:	6560      	str	r0, [r4, #84]	; 0x54
 80029ec:	e7f8      	b.n	80029e0 <__sseek+0x18>
 80029ee:	46c0      	nop			; (mov r8, r8)
 80029f0:	ffffefff 	.word	0xffffefff

080029f4 <__sclose>:
 80029f4:	b510      	push	{r4, lr}
 80029f6:	230e      	movs	r3, #14
 80029f8:	5ec9      	ldrsh	r1, [r1, r3]
 80029fa:	f000 f815 	bl	8002a28 <_close_r>
 80029fe:	bd10      	pop	{r4, pc}

08002a00 <_write_r>:
 8002a00:	b570      	push	{r4, r5, r6, lr}
 8002a02:	0004      	movs	r4, r0
 8002a04:	0008      	movs	r0, r1
 8002a06:	0011      	movs	r1, r2
 8002a08:	001a      	movs	r2, r3
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	4d05      	ldr	r5, [pc, #20]	; (8002a24 <_write_r+0x24>)
 8002a0e:	602b      	str	r3, [r5, #0]
 8002a10:	f7fe fa32 	bl	8000e78 <_write>
 8002a14:	1c43      	adds	r3, r0, #1
 8002a16:	d103      	bne.n	8002a20 <_write_r+0x20>
 8002a18:	682b      	ldr	r3, [r5, #0]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d000      	beq.n	8002a20 <_write_r+0x20>
 8002a1e:	6023      	str	r3, [r4, #0]
 8002a20:	bd70      	pop	{r4, r5, r6, pc}
 8002a22:	46c0      	nop			; (mov r8, r8)
 8002a24:	200027d4 	.word	0x200027d4

08002a28 <_close_r>:
 8002a28:	2300      	movs	r3, #0
 8002a2a:	b570      	push	{r4, r5, r6, lr}
 8002a2c:	4d06      	ldr	r5, [pc, #24]	; (8002a48 <_close_r+0x20>)
 8002a2e:	0004      	movs	r4, r0
 8002a30:	0008      	movs	r0, r1
 8002a32:	602b      	str	r3, [r5, #0]
 8002a34:	f7fe fa3c 	bl	8000eb0 <_close>
 8002a38:	1c43      	adds	r3, r0, #1
 8002a3a:	d103      	bne.n	8002a44 <_close_r+0x1c>
 8002a3c:	682b      	ldr	r3, [r5, #0]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d000      	beq.n	8002a44 <_close_r+0x1c>
 8002a42:	6023      	str	r3, [r4, #0]
 8002a44:	bd70      	pop	{r4, r5, r6, pc}
 8002a46:	46c0      	nop			; (mov r8, r8)
 8002a48:	200027d4 	.word	0x200027d4

08002a4c <_fstat_r>:
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	b570      	push	{r4, r5, r6, lr}
 8002a50:	4d06      	ldr	r5, [pc, #24]	; (8002a6c <_fstat_r+0x20>)
 8002a52:	0004      	movs	r4, r0
 8002a54:	0008      	movs	r0, r1
 8002a56:	0011      	movs	r1, r2
 8002a58:	602b      	str	r3, [r5, #0]
 8002a5a:	f7fe fa33 	bl	8000ec4 <_fstat>
 8002a5e:	1c43      	adds	r3, r0, #1
 8002a60:	d103      	bne.n	8002a6a <_fstat_r+0x1e>
 8002a62:	682b      	ldr	r3, [r5, #0]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d000      	beq.n	8002a6a <_fstat_r+0x1e>
 8002a68:	6023      	str	r3, [r4, #0]
 8002a6a:	bd70      	pop	{r4, r5, r6, pc}
 8002a6c:	200027d4 	.word	0x200027d4

08002a70 <_isatty_r>:
 8002a70:	2300      	movs	r3, #0
 8002a72:	b570      	push	{r4, r5, r6, lr}
 8002a74:	4d06      	ldr	r5, [pc, #24]	; (8002a90 <_isatty_r+0x20>)
 8002a76:	0004      	movs	r4, r0
 8002a78:	0008      	movs	r0, r1
 8002a7a:	602b      	str	r3, [r5, #0]
 8002a7c:	f7fe fa30 	bl	8000ee0 <_isatty>
 8002a80:	1c43      	adds	r3, r0, #1
 8002a82:	d103      	bne.n	8002a8c <_isatty_r+0x1c>
 8002a84:	682b      	ldr	r3, [r5, #0]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d000      	beq.n	8002a8c <_isatty_r+0x1c>
 8002a8a:	6023      	str	r3, [r4, #0]
 8002a8c:	bd70      	pop	{r4, r5, r6, pc}
 8002a8e:	46c0      	nop			; (mov r8, r8)
 8002a90:	200027d4 	.word	0x200027d4

08002a94 <_lseek_r>:
 8002a94:	b570      	push	{r4, r5, r6, lr}
 8002a96:	0004      	movs	r4, r0
 8002a98:	0008      	movs	r0, r1
 8002a9a:	0011      	movs	r1, r2
 8002a9c:	001a      	movs	r2, r3
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	4d05      	ldr	r5, [pc, #20]	; (8002ab8 <_lseek_r+0x24>)
 8002aa2:	602b      	str	r3, [r5, #0]
 8002aa4:	f7fe fa25 	bl	8000ef2 <_lseek>
 8002aa8:	1c43      	adds	r3, r0, #1
 8002aaa:	d103      	bne.n	8002ab4 <_lseek_r+0x20>
 8002aac:	682b      	ldr	r3, [r5, #0]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d000      	beq.n	8002ab4 <_lseek_r+0x20>
 8002ab2:	6023      	str	r3, [r4, #0]
 8002ab4:	bd70      	pop	{r4, r5, r6, pc}
 8002ab6:	46c0      	nop			; (mov r8, r8)
 8002ab8:	200027d4 	.word	0x200027d4

08002abc <__malloc_lock>:
 8002abc:	b510      	push	{r4, lr}
 8002abe:	4802      	ldr	r0, [pc, #8]	; (8002ac8 <__malloc_lock+0xc>)
 8002ac0:	f7ff fdef 	bl	80026a2 <__retarget_lock_acquire_recursive>
 8002ac4:	bd10      	pop	{r4, pc}
 8002ac6:	46c0      	nop			; (mov r8, r8)
 8002ac8:	200027c8 	.word	0x200027c8

08002acc <__malloc_unlock>:
 8002acc:	b510      	push	{r4, lr}
 8002ace:	4802      	ldr	r0, [pc, #8]	; (8002ad8 <__malloc_unlock+0xc>)
 8002ad0:	f7ff fde8 	bl	80026a4 <__retarget_lock_release_recursive>
 8002ad4:	bd10      	pop	{r4, pc}
 8002ad6:	46c0      	nop			; (mov r8, r8)
 8002ad8:	200027c8 	.word	0x200027c8

08002adc <_read_r>:
 8002adc:	b570      	push	{r4, r5, r6, lr}
 8002ade:	0004      	movs	r4, r0
 8002ae0:	0008      	movs	r0, r1
 8002ae2:	0011      	movs	r1, r2
 8002ae4:	001a      	movs	r2, r3
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	4d05      	ldr	r5, [pc, #20]	; (8002b00 <_read_r+0x24>)
 8002aea:	602b      	str	r3, [r5, #0]
 8002aec:	f7fe f9a7 	bl	8000e3e <_read>
 8002af0:	1c43      	adds	r3, r0, #1
 8002af2:	d103      	bne.n	8002afc <_read_r+0x20>
 8002af4:	682b      	ldr	r3, [r5, #0]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d000      	beq.n	8002afc <_read_r+0x20>
 8002afa:	6023      	str	r3, [r4, #0]
 8002afc:	bd70      	pop	{r4, r5, r6, pc}
 8002afe:	46c0      	nop			; (mov r8, r8)
 8002b00:	200027d4 	.word	0x200027d4

08002b04 <_init>:
 8002b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b06:	46c0      	nop			; (mov r8, r8)
 8002b08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b0a:	bc08      	pop	{r3}
 8002b0c:	469e      	mov	lr, r3
 8002b0e:	4770      	bx	lr

08002b10 <_fini>:
 8002b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b12:	46c0      	nop			; (mov r8, r8)
 8002b14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b16:	bc08      	pop	{r3}
 8002b18:	469e      	mov	lr, r3
 8002b1a:	4770      	bx	lr
